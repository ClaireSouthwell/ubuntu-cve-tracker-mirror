#!/usr/bin/python
import os, apt_pkg, sys


#check = sys.argv[1]

apt_pkg.InitSystem();

def load():
  saw = dict()
  source_map = dict()
  lists = '/var/lib/apt/lists'
  for f in os.listdir(lists):
    if not f.endswith('_source_Sources') and not '-commercial_main_binary-' in f:
        continue
    parts = f.split('_')
    parts.pop() # _Sources
    parts.pop() # _source
    section = parts.pop() # _main
    release_real = parts.pop() # _dapper
    saw.setdefault(release_real,True)
    tmp = release_real.split('-')
    release = tmp[0]
    if len(tmp) > 1:
    	pocket = tmp[1]

    parser = apt_pkg.ParseTagFile(open('%s/%s'%(lists,f)))
    while parser.Step():
        pkg = parser.Section['Package']
        source_map.setdefault(release,dict()).setdefault(pkg, {'section': 'unset', 'version': '0', 'pocket': 'unset' })
        source_map[release][pkg]['section'] = section
       	source_map[release][pkg]['pocket'] = pocket
        if apt_pkg.VersionCompare(parser.Section['Version'],source_map[release][pkg]['version']) == 1:
            source_map[release][pkg]['version'] = parser.Section['Version']
#        if pkg == check:
#            print '%s: (%s %s) %s' % (pkg, release, section, parser.Section['Version'])

  # Validate all the sources are available
  errors = False
  missing = ""
  for rel in ['dapper','edgy','feisty','gutsy']: #,'hardy']:
    for pocket in ['','-updates','-security']:
        if not saw.has_key(rel+pocket):
            missing += " deb-src http://archive.ubuntu.com/ubuntu %s%s main restricted universe multiverse\n" % (rel,pocket)
            errors = True
    for pocket in ['-commercial']:
        if not rel in ('gutsy','hardy') and not saw.has_key(rel+pocket):
            missing += " deb http://archive.canonical.com/ubuntu %s%s main\n" % (rel,pocket)
            errors = True
  if errors:
    print >>sys.stderr, "Missing /etc/apt/sources.list lines:"
    print >>sys.stderr, missing
    sys.exit(1)
            
  return source_map
