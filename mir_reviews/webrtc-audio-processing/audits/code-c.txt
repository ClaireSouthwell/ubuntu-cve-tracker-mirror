Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./src/common_audio/signal_processing_library/main/interface/signal_processing_library.h:158:#define WEBRTC_SPL_VNEW(t, n)           (t *) malloc (sizeof (t) * (n))
./src/common_audio/signal_processing_library/main/interface/signal_processing_library.h:170:   memcpy(v1, v2, (length) * sizeof(char))
./src/common_audio/signal_processing_library/main/interface/signal_processing_library.h:172:   memcpy(v1, v2, (length) * sizeof(WebRtc_Word16))
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:41:    memcpy(tmpmem + 8, state->S_48_32, 8 * sizeof(WebRtc_Word32));
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:42:    memcpy(state->S_48_32, tmpmem + 488, 8 * sizeof(WebRtc_Word32));
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:79:    memcpy(tmpmem + 8, state->S_32_24, 8 * sizeof(WebRtc_Word32));
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:80:    memcpy(state->S_32_24, tmpmem + 328, 8 * sizeof(WebRtc_Word32));
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:123:    memcpy(tmpmem + 8, state->S_24_16, 8 * sizeof(WebRtc_Word32));
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:124:    memcpy(state->S_24_16, tmpmem + 248, 8 * sizeof(WebRtc_Word32));
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:162:    memcpy(tmpmem + 256, state->S_16_12, 8 * sizeof(WebRtc_Word32));
./src/common_audio/signal_processing_library/main/source/resample_48khz.c:163:    memcpy(state->S_16_12, tmpmem + 416, 8 * sizeof(WebRtc_Word32));
./src/common_audio/vad/main/source/webrtc_vad.c:39:    memcpy(version, my_version, sizeof(my_version));
./src/common_audio/vad/main/source/webrtc_vad.c:79:    vad_ptr = (VadInstT *)malloc(sizeof(VadInstT));
./src/modules/audio_processing/agc/digital_agc.c:334:        memcpy(out, in_near, 10 * L * sizeof(WebRtc_Word16));
./src/modules/audio_processing/agc/digital_agc.c:340:            memcpy(out_H, in_near_H, 10 * L * sizeof(WebRtc_Word16));
./src/modules/audio_processing/agc/analog_agc.c:302:            memcpy(tmp_speech, &in_mic[i * 16], 16 * sizeof(short));
./src/modules/audio_processing/agc/analog_agc.c:1325:        memcpy(out, in_near, samples * sizeof(WebRtc_Word16));
./src/modules/audio_processing/agc/analog_agc.c:1331:            memcpy(out_H, in_near_H, samples * sizeof(WebRtc_Word16));
./src/modules/audio_processing/agc/analog_agc.c:1365:            memcpy(stt->env[0], stt->env[1], 10 * sizeof(WebRtc_Word32));
./src/modules/audio_processing/agc/analog_agc.c:1366:            memcpy(stt->Rxx16w32_array[0], stt->Rxx16w32_array[1], 5 * sizeof(WebRtc_Word32));
./src/modules/audio_processing/agc/analog_agc.c:1484:    stt = (Agc_t *)malloc(sizeof(Agc_t));
./src/modules/audio_processing/echo_control_mobile_impl.cc:210:  memcpy(external_echo_path_, echo_path, size_bytes);
./src/modules/audio_processing/utility/delay_estimator.c:171:  memcpy(&(self->far_history[self->far_history_pos * self->spectrum_size]),
./src/modules/audio_processing/utility/delay_estimator.c:249:  self = malloc(sizeof(DelayEstimator_t));
./src/modules/audio_processing/utility/delay_estimator.c:267:  self->mean_far_spectrum = malloc(spectrum_size * sizeof(int32_t));
./src/modules/audio_processing/utility/delay_estimator.c:273:  self->mean_near_spectrum = malloc(spectrum_size * sizeof(int32_t));
./src/modules/audio_processing/utility/delay_estimator.c:279:  self->mean_bit_counts = malloc(history_size * sizeof(int32_t));
./src/modules/audio_processing/utility/delay_estimator.c:285:  self->bit_counts = malloc(history_size * sizeof(int32_t));
./src/modules/audio_processing/utility/delay_estimator.c:291:  self->far_spectrum_32 = malloc(spectrum_size * sizeof(int32_t));
./src/modules/audio_processing/utility/delay_estimator.c:297:  self->near_spectrum_32 = malloc(spectrum_size * sizeof(int32_t));
./src/modules/audio_processing/utility/delay_estimator.c:304:  self->binary_far_history = malloc(history_size * sizeof(uint32_t));
./src/modules/audio_processing/utility/delay_estimator.c:311:    self->far_history = malloc(spectrum_size * history_size * sizeof(uint16_t));
./src/modules/audio_processing/utility/delay_estimator.c:317:    self->far_q_domains = malloc(history_size * sizeof(int));
./src/modules/audio_processing/utility/delay_estimator.c:324:  self->delay_histogram = malloc(history_size * sizeof(int));
./src/modules/audio_processing/utility/ring_buffer.c:38:    buf = malloc(sizeof(buf_t));
./src/modules/audio_processing/utility/ring_buffer.c:44:    buf->data = malloc(size*sizeof(bufdata_t));
./src/modules/audio_processing/utility/ring_buffer.c:97:            memcpy(data, buf->data + buf->readPos,
./src/modules/audio_processing/utility/ring_buffer.c:103:            memcpy(data, buf->data + buf->readPos,
./src/modules/audio_processing/utility/ring_buffer.c:114:        memcpy(data + size - n, buf->data + buf->readPos,
./src/modules/audio_processing/utility/ring_buffer.c:137:            memcpy(buf->data + buf->writePos, data,
./src/modules/audio_processing/utility/ring_buffer.c:143:            memcpy(buf->data + buf->writePos, data,
./src/modules/audio_processing/utility/ring_buffer.c:154:        memcpy(buf->data + buf->writePos, data + size - n,
./src/modules/audio_processing/utility/delay_estimator_float.c:50:  memcpy(&(self->far_history[self->far_history_pos * spectrum_size]),
./src/modules/audio_processing/utility/delay_estimator_float.c:90:  self = malloc(sizeof(DelayEstimatorFloat_t));
./src/modules/audio_processing/utility/delay_estimator_float.c:112:    self->far_history = malloc(spectrum_size * history_size * sizeof(float));
./src/modules/audio_processing/utility/delay_estimator_float.c:120:  self->far_spectrum_u16 = malloc(spectrum_size * sizeof(uint16_t));
./src/modules/audio_processing/utility/delay_estimator_float.c:126:  self->near_spectrum_u16 = malloc(spectrum_size * sizeof(uint16_t));
./src/modules/audio_processing/ns/noise_suppression_x.c:36:  *nsxInst = (NsxHandle*)malloc(sizeof(NsxInst_t));
./src/modules/audio_processing/ns/noise_suppression.c:36:  *NS_inst = (NsHandle*) malloc(sizeof(NSinst_t));
./src/modules/audio_processing/ns/ns_core.c:783:  memcpy(inst->dataBuf, inst->dataBuf + inst->blockLen10ms,
./src/modules/audio_processing/ns/ns_core.c:785:  memcpy(inst->dataBuf + inst->anaLen - inst->blockLen10ms, fin,
./src/modules/audio_processing/ns/ns_core.c:794:    memcpy(inst->dataBufHB, inst->dataBufHB + inst->blockLen10ms,
./src/modules/audio_processing/ns/ns_core.c:796:    memcpy(inst->dataBufHB + inst->anaLen - inst->blockLen10ms, fin,
./src/modules/audio_processing/ns/ns_core.c:823:      memcpy(inst->syntBuf, inst->syntBuf + inst->blockLen,
./src/modules/audio_processing/ns/ns_core.c:1217:    memcpy(inst->syntBuf, inst->syntBuf + inst->blockLen,
./src/modules/audio_processing/ns/ns_core.c:1234:    memcpy(inst->outBuf, inst->outBuf + inst->blockLen10ms,
./src/modules/audio_processing/audio_buffer.cc:228:      memcpy(frame->_payloadData,
./src/modules/audio_processing/audio_buffer.cc:283:    memcpy(low_pass_reference_channels_[i].data,
./src/modules/audio_processing/audio_processing_impl.cc:582:  memcpy(&version[position], my_version, length);
./src/modules/audio_processing/audio_processing_impl.cc:589:    strcpy(component_version, "\n");
./src/modules/audio_processing/audio_processing_impl.cc:608:    memcpy(&version[position], component_version, length);
./src/modules/audio_processing/aec/resampler.c:43:    resampler_t *obj = malloc(sizeof(resampler_t));
./src/modules/audio_processing/aec/resampler.c:91:    memcpy(&obj->buffer[FRAME_LEN + kResamplingDelay],
./src/modules/audio_processing/aec/echo_cancellation.c:110:    aecpc = malloc(sizeof(aecpc_t));
./src/modules/audio_processing/aec/echo_cancellation.c:428:            memcpy(out, nearend, sizeof(short) * nrOfSamples);
./src/modules/audio_processing/aec/echo_cancellation.c:506:                memcpy(&(aecpc->farendOld[i][0]), farend, FRAME_LEN * sizeof(short));
./src/modules/audio_processing/aec/echo_cancellation.c:510:                memcpy(farend, &(aecpc->farendOld[i][0]), FRAME_LEN * sizeof(short));
./src/modules/audio_processing/aec/aec_core.c:143:    aec_t *aec = malloc(sizeof(aec_t));
./src/modules/audio_processing/aec/aec_core.c:616:    memcpy(fft, aec->xBuf, sizeof(float) * PART_LEN2);
./src/modules/audio_processing/aec/aec_core.c:617:    memcpy(aec->dBuf + PART_LEN, d, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:620:        memcpy(aec->dBufH + PART_LEN, dH, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:637:    memcpy(fft, aec->dBuf, sizeof(float) * PART_LEN2);
./src/modules/audio_processing/aec/aec_core.c:716:    memcpy(aec->xfBuf[0] + aec->xfBufBlockPos * PART_LEN1, xf[0],
./src/modules/audio_processing/aec/aec_core.c:718:    memcpy(aec->xfBuf[1] + aec->xfBufBlockPos * PART_LEN1, xf[1],
./src/modules/audio_processing/aec/aec_core.c:745:    memcpy(aec->eBuf + PART_LEN, e, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:747:    memcpy(fft + PART_LEN, e, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:870:    memcpy(aec->xfwBuf, xfw, sizeof(xfw));
./src/modules/audio_processing/aec/aec_core.c:873:    memcpy(xfw, aec->xfwBuf + aec->delayIdx * PART_LEN1, sizeof(xfw));
./src/modules/audio_processing/aec/aec_core.c:946:        memcpy(efw, dfw, sizeof(efw));
./src/modules/audio_processing/aec/aec_core.c:991:            memcpy(hNl, cohde, sizeof(hNl));
./src/modules/audio_processing/aec/aec_core.c:1007:            memcpy(hNl, cohde, sizeof(hNl));
./src/modules/audio_processing/aec/aec_core.c:1019:            memcpy(hNlPref, &hNl[minPrefBand], sizeof(float) * prefBandSize);
./src/modules/audio_processing/aec/aec_core.c:1121:    memcpy(aec->xBuf, aec->xBuf + PART_LEN, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:1122:    memcpy(aec->dBuf, aec->dBuf + PART_LEN, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:1123:    memcpy(aec->eBuf, aec->eBuf + PART_LEN, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:1127:        memcpy(aec->dBufH, aec->dBufH + PART_LEN, sizeof(float) * PART_LEN);
./src/modules/audio_processing/aec/aec_core.c:1240:        memcpy(aec->farBuf + aec->farBufWritePos, farend + writePos,
./src/modules/audio_processing/aec/aec_core.c:1247:    memcpy(aec->farBuf + aec->farBufWritePos, farend + writePos,
./src/modules/audio_processing/aec/aec_core.c:1273:        memcpy(farend + readPos, aec->farBuf + aec->farBufReadPos,
./src/modules/audio_processing/aec/aec_core.c:1279:    memcpy(farend + readPos, aec->farBuf + aec->farBufReadPos,
./src/modules/audio_processing/aecm/aecm_core.c:121:    AecmCore_t *aecm = malloc(sizeof(AecmCore_t));
./src/modules/audio_processing/aecm/aecm_core.c:186:    memcpy(aecm->channelStored, echo_path, sizeof(WebRtc_Word16) * PART_LEN1);
./src/modules/audio_processing/aecm/aecm_core.c:188:    memcpy(aecm->channelAdapt16, echo_path, sizeof(WebRtc_Word16) * PART_LEN1);
./src/modules/audio_processing/aecm/aecm_core.c:1191:    memcpy(aecm->xBuf + PART_LEN, farend, sizeof(WebRtc_Word16) * PART_LEN);
./src/modules/audio_processing/aecm/aecm_core.c:1192:    memcpy(aecm->dBufNoisy + PART_LEN, nearendNoisy, sizeof(WebRtc_Word16) * PART_LEN);
./src/modules/audio_processing/aecm/aecm_core.c:1195:        memcpy(aecm->dBufClean + PART_LEN, nearendClean, sizeof(WebRtc_Word16) * PART_LEN);
./src/modules/audio_processing/aecm/aecm_core.c:1692:        memcpy(aecm->farBuf + aecm->farBufWritePos, farend + writePos,
./src/modules/audio_processing/aecm/aecm_core.c:1699:    memcpy(aecm->farBuf + aecm->farBufWritePos, farend + writePos,
./src/modules/audio_processing/aecm/aecm_core.c:1731:        memcpy(farend + readPos, aecm->farBuf + aecm->farBufReadPos,
./src/modules/audio_processing/aecm/aecm_core.c:1737:    memcpy(farend + readPos, aecm->farBuf + aecm->farBufReadPos,
./src/modules/audio_processing/aecm/aecm_core.c:1855:    memcpy(aecm->xBuf, aecm->xBuf + PART_LEN, sizeof(WebRtc_Word16) * PART_LEN);
./src/modules/audio_processing/aecm/aecm_core.c:1856:    memcpy(aecm->dBufNoisy, aecm->dBufNoisy + PART_LEN, sizeof(WebRtc_Word16) * PART_LEN);
./src/modules/audio_processing/aecm/aecm_core.c:1859:        memcpy(aecm->dBufClean, aecm->dBufClean + PART_LEN, sizeof(WebRtc_Word16) * PART_LEN);
./src/modules/audio_processing/aecm/aecm_core.c:1892:    memcpy(aecm->channelStored, aecm->channelAdapt16, sizeof(WebRtc_Word16) * PART_LEN1);
./src/modules/audio_processing/aecm/aecm_core.c:1915:    memcpy(aecm->channelAdapt16, aecm->channelStored,
./src/modules/audio_processing/aecm/echo_control_mobile.c:97:    aecm = malloc(sizeof(aecmob_t));
./src/modules/audio_processing/aecm/echo_control_mobile.c:342:            memcpy(out, nearendNoisy, sizeof(short) * nrOfSamples);
./src/modules/audio_processing/aecm/echo_control_mobile.c:345:            memcpy(out, nearendClean, sizeof(short) * nrOfSamples);
./src/modules/audio_processing/aecm/echo_control_mobile.c:434:                memcpy(&(aecm->farendOld[i][0]), farend, FRAME_LEN * sizeof(short));
./src/modules/audio_processing/aecm/echo_control_mobile.c:438:                memcpy(farend, &(aecm->farendOld[i][0]), FRAME_LEN * sizeof(short));
./src/modules/audio_processing/aecm/echo_control_mobile.c:688:    memcpy(echo_path_ptr, aecm->aecmCore->channelStored, size_bytes);
./src/modules/interface/module_common_types.h:182:                memcpy(fragmentationOffset, header.fragmentationOffset,
./src/modules/interface/module_common_types.h:187:                memcpy(fragmentationLength, header.fragmentationLength,
./src/modules/interface/module_common_types.h:192:                memcpy(fragmentationTimeDiff, header.fragmentationTimeDiff,
./src/modules/interface/module_common_types.h:197:                memcpy(fragmentationPlType, header.fragmentationPlType,
./src/modules/interface/module_common_types.h:215:                memcpy(fragmentationOffset,oldOffsets, sizeof(WebRtc_UWord32) * oldVectorSize);
./src/modules/interface/module_common_types.h:224:                memcpy(fragmentationLength, oldLengths,
./src/modules/interface/module_common_types.h:234:                memcpy(fragmentationTimeDiff, oldTimeDiffs,
./src/modules/interface/module_common_types.h:244:                memcpy(fragmentationPlType, oldTimePlTypes,
./src/modules/interface/module_common_types.h:313:            memcpy(payloadData, data.payloadData, data.payloadSize);
./src/modules/interface/module_common_types.h:348:            memcpy(payloadData, data.payloadData, data.payloadSize);
./src/modules/interface/module_common_types.h:359:            memcpy(payloadData, oldPayload, sizeof(WebRtc_UWord8) * payloadSize);
./src/modules/interface/module_common_types.h:559:            memcpy(newBufferBuffer, _buffer, _bufferSize);
./src/modules/interface/module_common_types.h:630:     memcpy(_buffer, sourceBuffer, length);
./src/modules/interface/module_common_types.h:806:        memcpy(_payloadData, payloadData, sizeof(WebRtc_Word16) *
./src/modules/interface/module_common_types.h:849:    memcpy(_payloadData, rhs._payloadData,
./src/modules/interface/module_common_types.h:961:        memcpy(_payloadData, rhs._payloadData,
./src/modules/audio_processing/echo_control_mobile_impl.cc:208:    external_echo_path_ = new unsigned char[size_bytes];
./src/modules/audio_processing/audio_buffer.cc:82:    channels_ = new AudioChannel[max_num_channels_];
./src/modules/audio_processing/audio_buffer.cc:83:    mixed_low_pass_channels_ = new AudioChannel[max_num_channels_];
./src/modules/audio_processing/audio_buffer.cc:85:  low_pass_reference_channels_ = new AudioChannel[max_num_channels_];
./src/modules/audio_processing/audio_buffer.cc:88:    split_channels_ = new SplitAudioChannel[max_num_channels_];
./src/modules/audio_processing/audio_processing_impl.cc:45:  AudioProcessingImpl* apm = new AudioProcessingImpl(id);
./src/modules/audio_processing/audio_processing_impl.cc:83:  echo_cancellation_ = new EchoCancellationImpl(this);
./src/modules/audio_processing/audio_processing_impl.cc:86:  echo_control_mobile_ = new EchoControlMobileImpl(this);
./src/modules/audio_processing/audio_processing_impl.cc:89:  gain_control_ = new GainControlImpl(this);
./src/modules/audio_processing/audio_processing_impl.cc:92:  high_pass_filter_ = new HighPassFilterImpl(this);
./src/modules/audio_processing/audio_processing_impl.cc:95:  level_estimator_ = new LevelEstimatorImpl(this);
./src/modules/audio_processing/audio_processing_impl.cc:98:  noise_suppression_ = new NoiseSuppressionImpl(this);
./src/modules/audio_processing/audio_processing_impl.cc:101:  voice_detection_ = new VoiceDetectionImpl(this);
./src/modules/audio_processing/audio_processing_impl.cc:162:  render_audio_ = new AudioBuffer(num_reverse_channels_,
./src/modules/audio_processing/audio_processing_impl.cc:164:  capture_audio_ = new AudioBuffer(num_input_channels_,
./src/modules/interface/module_common_types.h:158:                    fragmentationOffset = new WebRtc_UWord32[header.fragmentationVectorSize];
./src/modules/interface/module_common_types.h:162:                    fragmentationLength = new WebRtc_UWord32[header.fragmentationVectorSize];
./src/modules/interface/module_common_types.h:166:                    fragmentationTimeDiff = new WebRtc_UWord16[header.fragmentationVectorSize];
./src/modules/interface/module_common_types.h:170:                    fragmentationPlType = new WebRtc_UWord8[header.fragmentationVectorSize];
./src/modules/interface/module_common_types.h:211:                fragmentationOffset = new WebRtc_UWord32[size];
./src/modules/interface/module_common_types.h:221:                fragmentationLength = new WebRtc_UWord32[size];
./src/modules/interface/module_common_types.h:231:                fragmentationTimeDiff = new WebRtc_UWord16[size];
./src/modules/interface/module_common_types.h:241:                fragmentationPlType = new WebRtc_UWord8[size];
./src/modules/interface/module_common_types.h:312:            payloadData = new WebRtc_UWord8[data.payloadSize];
./src/modules/interface/module_common_types.h:347:            payloadData = new WebRtc_UWord8[data.payloadSize];
./src/modules/interface/module_common_types.h:358:            payloadData = new WebRtc_UWord8[size];
./src/modules/interface/module_common_types.h:555:        WebRtc_UWord8* newBufferBuffer = new WebRtc_UWord8[minimumSize];

== files() ==
./src/modules/audio_processing/agc/analog_agc.c:1493:    stt->fpt = fopen("./agc_test_log.txt", "wt");
./src/modules/audio_processing/agc/analog_agc.c:1494:    stt->agcLog = fopen("./agc_debug_log.txt", "wt");
./src/modules/audio_processing/agc/analog_agc.c:1495:    stt->digitalAgc.logFile = fopen("./agc_log.txt", "wt");
./src/modules/audio_processing/ns/nsx_core.c:634:  inst->infile = fopen("indebug.pcm", "wb");
./src/modules/audio_processing/ns/nsx_core.c:635:  inst->outfile = fopen("outdebug.pcm", "wb");
./src/modules/audio_processing/ns/nsx_core.c:636:  inst->file1 = fopen("file1.pcm", "wb");
./src/modules/audio_processing/ns/nsx_core.c:637:  inst->file2 = fopen("file2.pcm", "wb");
./src/modules/audio_processing/ns/nsx_core.c:638:  inst->file3 = fopen("file3.pcm", "wb");
./src/modules/audio_processing/ns/nsx_core.c:639:  inst->file4 = fopen("file4.pcm", "wb");
./src/modules/audio_processing/ns/nsx_core.c:640:  inst->file5 = fopen("file5.pcm", "wb");
./src/modules/audio_processing/aec/echo_cancellation.c:138:    aecpc->aec->farFile = fopen("aecFar.pcm","wb");
./src/modules/audio_processing/aec/echo_cancellation.c:139:    aecpc->aec->nearFile = fopen("aecNear.pcm","wb");
./src/modules/audio_processing/aec/echo_cancellation.c:140:    aecpc->aec->outFile = fopen("aecOut.pcm","wb");
./src/modules/audio_processing/aec/echo_cancellation.c:141:    aecpc->aec->outLpFile = fopen("aecOutLp.pcm","wb");
./src/modules/audio_processing/aec/echo_cancellation.c:143:    aecpc->bufFile = fopen("aecBuf.dat", "wb");
./src/modules/audio_processing/aec/echo_cancellation.c:144:    aecpc->skewFile = fopen("aecSkew.dat", "wb");
./src/modules/audio_processing/aec/echo_cancellation.c:145:    aecpc->delayFile = fopen("aecDelay.dat", "wb");
./src/modules/audio_processing/aec/echo_cancellation.c:146:    aecpc->preCompFile = fopen("preComp.pcm", "wb");
./src/modules/audio_processing/aec/echo_cancellation.c:147:    aecpc->postCompFile = fopen("postComp.pcm", "wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:122:    aecm->aecmCore->farFile = fopen("aecFar.pcm","wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:123:    aecm->aecmCore->nearFile = fopen("aecNear.pcm","wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:124:    aecm->aecmCore->outFile = fopen("aecOut.pcm","wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:125:    //aecm->aecmCore->outLpFile = fopen("aecOutLp.pcm","wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:127:    aecm->bufFile = fopen("aecBuf.dat", "wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:128:    aecm->delayFile = fopen("aecDelay.dat", "wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:129:    aecm->preCompFile = fopen("preComp.pcm", "wb");
./src/modules/audio_processing/aecm/echo_control_mobile.c:130:    aecm->postCompFile = fopen("postComp.pcm", "wb");

== logging() ==
./src/common_audio/signal_processing_library/main/source/dot_product_with_scale.c:26:#pragma message("NOTE: _ARM_OPT_ optimizations are used")
./src/common_audio/signal_processing_library/main/source/cross_correlation.c:34:#pragma message("NOTE: _XSCALE_OPT_ optimizations are used (overrides _ARM_OPT_ and requires /QRxscale compiler flag)")
./src/common_audio/signal_processing_library/main/source/cross_correlation.c:164:#pragma message("NOTE: default implementation is used")
./src/common_audio/signal_processing_library/main/source/cross_correlation.c:175:#pragma message("NOTE: _ARM_OPT_ optimizations are used")
./src/common_audio/signal_processing_library/main/source/auto_correlation.c:35:#pragma message("NOTE: _ARM_OPT_ optimizations are used")
./src/common_audio/signal_processing_library/main/source/min_max_operations.c:120:#pragma message(">> WebRtcSpl_MaxValueW16 is excluded from this build")
./src/common_audio/signal_processing_library/main/source/min_max_operations.c:160:#pragma message(">> WebRtcSpl_MaxValueW32 is excluded from this build")
./src/common_audio/signal_processing_library/main/source/min_max_operations.c:222:#pragma message(">> WebRtcSpl_MinIndexW16 is excluded from this build")
./src/common_audio/signal_processing_library/main/source/min_max_operations.c:264:#pragma message(">> WebRtcSpl_MinIndexW32 is excluded from this build")
./src/modules/audio_processing/gain_control_impl.cc:386:  // The AGC has no get_error() function.
./src/modules/audio_processing/voice_detection_impl.cc:198:  // The VAD has no get_error() function.
./src/modules/audio_processing/noise_suppression_impl.cc:174:  // The NS has no get_error() function.

== environment() ==

== privileged() ==

== networking() ==
./src/modules/audio_processing/ns/nsx_core.c:1819:  fwrite(spframe, sizeof(short), inst->blockLen10ms, inst->infile);
./src/modules/audio_processing/ns/nsx_core.c:2296:  fwrite(outframe, sizeof(short), inst->blockLen10ms, inst->outfile);
./src/modules/audio_processing/aec/echo_cancellation.c:316:        fwrite(farend, 2, nrOfSamples, aecpc->preCompFile);
./src/modules/audio_processing/aec/echo_cancellation.c:317:        fwrite(newFarend, 2, newNrOfSamples, aecpc->postCompFile);
./src/modules/audio_processing/aec/echo_cancellation.c:417:            fwrite(&aecpc->skew, sizeof(aecpc->skew), 1, aecpc->skewFile);
./src/modules/audio_processing/aec/echo_cancellation.c:528:    fwrite(&msInAECBuf, 2, 1, aecpc->bufFile);
./src/modules/audio_processing/aec/echo_cancellation.c:529:    fwrite(&(aecpc->knownDelay), sizeof(aecpc->knownDelay), 1, aecpc->delayFile);
./src/modules/audio_processing/aec/aec_core.c:597:    fwrite(farend, sizeof(short), PART_LEN, aec->farFile);
./src/modules/audio_processing/aec/aec_core.c:598:    fwrite(nearend, sizeof(short), PART_LEN, aec->nearFile);
./src/modules/audio_processing/aec/aec_core.c:786:    fwrite(eInt16, sizeof(short), PART_LEN, aec->outLpFile);
./src/modules/audio_processing/aec/aec_core.c:787:    fwrite(output, sizeof(short), PART_LEN, aec->outFile);
./src/modules/audio_processing/aecm/echo_control_mobile.c:519:    fwrite(&msInAECBuf, 2, 1, aecm->bufFile);
./src/modules/audio_processing/aecm/echo_control_mobile.c:520:    fwrite(&(aecm->knownDelay), sizeof(aecm->knownDelay), 1, aecm->delayFile);

== http:// ==
./src/typedefs.h:55://   http://msdn.microsoft.com/en-us/library/b0084kay.aspx
./src/typedefs.h:56://   http://www.agner.org/optimize/calling_conventions.pdf
./src/modules/audio_processing/utility/fft4g.c:2: * http://www.kurims.kyoto-u.ac.jp/~ooura/fft.html
./src/modules/audio_processing/ns/nsx_core.c:2333:    // error: "|0.5 * (1 + tanh(2x-1)) - x| from x=0 to 0.880615234375" -> http://www.wolframalpha.com/input/?i=|0.5+*+(1+%2B+tanh(2x-1))+-+x|+from+x%3D0+to+0.880615234375
./src/modules/audio_processing/ns/nsx_core.c:2334:    // and:  "|0.5 * (1 + tanh(2x-1)) - 0.880615234375| from x=0.880615234375 to 1" -> http://www.wolframalpha.com/input/?i=+|0.5+*+(1+%2B+tanh(2x-1))+-+0.880615234375|+from+x%3D0.880615234375+to+1
./src/modules/audio_processing/aec/aec_rdft.c:2: * http://www.kurims.kyoto-u.ac.jp/~ooura/fft.html

== encryption ==

== sql() ==

== tmp() ==
./src/modules/audio_processing/aec/aec_core.c:1177:        //tmp = 1 - lambda[i];

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./src/typedefs.h:17:// TODO(andrew): Look at removing these.
./src/typedefs.h:23:// TODO(andrew): Clean these up. We can probably remove everything in this
./src/typedefs.h:58:// TODO(andrew): replace WEBRTC_LITTLE_ENDIAN with WEBRTC_ARCH_LITTLE_ENDIAN?
./src/typedefs.h:70:// TODO(andrew): We'd prefer to control platform defines here, but this is
./src/typedefs.h:74:// TODO(andrew): Chromium uses the following two defines. Should we switch?
./src/modules/audio_processing/agc/digital_agc.c:330:    // TODO(andrew): again, we don't need input and output pointers...
./src/modules/audio_processing/agc/analog_agc.c:1316:    //TODO: PUT IN RANGE CHECKING FOR INPUT LEVELS
./src/modules/audio_processing/agc/analog_agc.c:1320:    // TODO(andrew): clearly we don't need input and output pointers...
./src/modules/audio_processing/agc/analog_agc.c:1572:    // TODO(bjornv): Investigate if we really need to scale up a small range now when we have
./src/modules/audio_processing/echo_control_mobile_impl.cc:101:        return GetHandleError(my_handle);  // TODO(ajm): warning possible?
./src/modules/audio_processing/echo_control_mobile_impl.cc:128:    // TODO(ajm): improve how this works, possibly inside AECM.
./src/modules/audio_processing/echo_control_mobile_impl.cc:147:        return GetHandleError(my_handle);  // TODO(ajm): warning possible?
./src/modules/audio_processing/utility/delay_estimator_float.c:207:  // TODO(bjornv): I've taken the size of FFT into account, since there is a
./src/modules/audio_processing/ns/nsx_core.c:458:    // TODO(bjornv): Replace with WebRtcSpl_SatW32ToW16(...) when available.
./src/modules/audio_processing/audio_buffer.cc:65:// TODO(andrew): check range of input parameters?
./src/modules/audio_processing/audio_buffer.cc:193:// TODO(andrew): Do deinterleaving and mixing in one step?
./src/modules/audio_processing/audio_buffer.cc:250:// TODO(andrew): would be good to support the no-mix case with pointer
./src/modules/audio_processing/audio_buffer.cc:252:// TODO(andrew): handle mixing to multiple channels?
./src/modules/audio_processing/gain_control_impl.cc:203:// TODO(ajm): ensure this is called under kAdaptiveAnalog.
./src/modules/audio_processing/gain_control_impl.cc:222:  // TODO(ajm): enable this assertion?
./src/modules/audio_processing/gain_control_impl.cc:369:  // TODO(ajm): Flip the sign here (since AGC expects a positive value) if we
./src/modules/audio_processing/audio_buffer.h:62:  // TODO(andrew): use vectors here.
./src/modules/audio_processing/audio_buffer.h:65:  // TODO(andrew): improve this, we don't need the full 32 kHz space here.
./src/modules/audio_processing/voice_detection_impl.cc:75:  // TODO(ajm): concatenate data in frame buffer here.
./src/modules/audio_processing/voice_detection_impl.cc:110:  // TODO(ajm): enable this assertion?
./src/modules/audio_processing/voice_detection_impl.cc:131:  assert(size == 10); // TODO(ajm): remove when supported.
./src/modules/audio_processing/voice_detection_impl.cc:155:  // TODO(ajm): intialize frame buffer here.
./src/modules/audio_processing/interface/audio_processing.h:168:  // TODO(ajm): add const to input; requires an implementation fix.
./src/modules/audio_processing/interface/audio_processing.h:322:  // TODO(ajm): discuss the metrics update period.
./src/modules/audio_processing/interface/audio_processing.h:451:  // TODO(ajm): use a negative value here instead, if/when VoE will similarly
./src/modules/audio_processing/audio_processing_impl.cc:297:  // TODO(ajm): experiment with mixing and AEC placement.
./src/modules/audio_processing/audio_processing_impl.cc:427:  // TODO(ajm): turn the splitting filter into a component?
./src/modules/audio_processing/audio_processing_impl.cc:439:  // TODO(ajm): warnings possible from components?
./src/modules/audio_processing/audio_processing_impl.cc:461:  return err;  // TODO(ajm): this is for returning warnings; necessary?
./src/modules/audio_processing/audio_processing_impl.cc:470:  // TODO(ajm): the max is rather arbitrarily chosen; investigate.
./src/modules/audio_processing/audio_processing_impl.cc:635:  // TODO(ajm): Use little-endian "on the wire". For the moment, we can be
./src/modules/audio_processing/level_estimator_impl.cc:21:// TODO(ajm): implement the underlying level estimator component.
./src/modules/audio_processing/echo_cancellation_impl.cc:95:        return GetHandleError(my_handle);  // TODO(ajm): warning possible?
./src/modules/audio_processing/echo_cancellation_impl.cc:141:        // TODO(ajm): Figure out how to return warnings properly.
./src/modules/audio_processing/echo_cancellation_impl.cc:238:// TODO(ajm): we currently just use the metrics from the first AEC. Think more
./src/modules/audio_processing/echo_cancellation_impl.cc:297:// TODO(bjornv): How should we handle the multi-channel case?
./src/modules/audio_processing/aec/aec_rdft.h:15:// TODO(andrew): move to a common file.
./src/modules/audio_processing/aec/echo_cancellation.c:301:    // TODO: Is this really a good idea?
./src/modules/audio_processing/aec/aec_core.c:253:// TODO(andrew): consider for a low-complexity mode.
./src/modules/audio_processing/aec/aec_core.c:434:    // TODO: Investigate need for these initializations. Deleting them doesn't
./src/modules/audio_processing/aec/aec_core.c:833:    // TODO: Spread by computing one partition per block?
./src/modules/audio_processing/aec/aec_core.c:915:        // TODO: investigate further why this is so sensitive.
./src/modules/audio_processing/aec/aec_core.c:1018:            // TODO: Using quicksort now, but a selection algorithm may be preferred.
./src/modules/audio_processing/aec/aec_core.c:1183:    // TODO: don't compute noise and "tmp" twice. Use the previous results.
./src/modules/audio_processing/aec/aec_core.c:1191:        // TODO: we shouldn't need num. We know how many elements we're summing.
./src/modules/audio_processing/aec/aec_core.c:1200:        // TODO: we shouldn't need num. We know how many elements we're summing.
./src/modules/audio_processing/aec/aec_core.c:1209:        // TODO: we should probably have a new random vector here.
./src/modules/audio_processing/aecm/aecm_core.c:321:// TODO(bjornv): This function is currently not used. Add support for these
./src/modules/audio_processing/aecm/aecm_core.c:1144:    // TODO (kma): define fft with complex16_t.
./src/modules/audio_processing/aecm/aecm_core.c:1419:        // TODO(bjornv): Investigate if the scaling of hnl[i] below can cause
./src/modules/audio_processing/aecm/echo_control_mobile.c:254:    // TODO: Is this really a good idea?
./src/modules/interface/module.h:46:  // TODO(perkj): Make this pure virtual when Chromium have implemented  
./src/modules/interface/module.h:57:  // TODO(perkj): Make this pure virtual when Chromium have implemented  

== unsafe input mechanisms ==

