#!/bin/bash
# Copyright (C) 2018 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

# Generate and push to the influxdb the latest CVE triage data

set -e

nslookup influxdb.security.kpi.internal 1>/dev/null 2>&1 || (echo "Unable to resolve host influxdb.security.kpi.internal - you must be connected to the Canonical VPN to use this script." && exit 1)

# poll influxdb to find last day with data - use the readonly user and password
LASTDAY=$(curl -s -G "http://influxdb.security.kpi.internal:8086/query?db=security&u=securityro&p=ainoNgoh2hohseevoo0zeic3iedew9Oo" --data-urlencode "q=SELECT \"cves\" FROM \"historic_cve_triage\" GROUP BY * ORDER BY DESC LIMIT 1" | grep -o "[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}")

LASTDAY_SECS=$(date +%s -d "$LASTDAY")
TODAY_SECS=$(date +%s)
DIFF_SECS=$((TODAY_SECS - LASTDAY_SECS))
DAYS=$((DIFF_SECS / 84600))

echo "Generating and pushing data from last $DAYS days..."

echo "Pulling latest changes to UCT from upstream..."
git pull --rebase 1>/dev/null 2>&1

PASSWORD=$1
while [ -z "$PASSWORD" ]; do
  echo -n "Enter password for user 'security' influxdb: "
  read -r -s PASSWORD
  # newline after password
  echo ""
done

while [[ $DAYS -gt 0 ]]; do
  QUERYDATE=$(date --date="today -$DAYS day" +%Y-%m-%d)
  DAYS_1=$((DAYS - 1))
  NEXTDAY=$(date --date="today -$DAYS_1 day" +%Y-%m-%d)
  TZ=UTC
  DATA=$(git log --since "$QUERYDATE" --until "$NEXTDAY" -p | awk -v timestamp="$(date +%s -d $QUERYDATE)" 'BEGIN { cve = ignored = 0 }
/^+Candidate:/ { cve++ }
/^+Patches_linux/ { packages["linux"]++ }
/^+Patches_/ { name=substr($1, 10, length($1)-10) ;
    if (name !~ /linux/) { packages[name]++ } }
/^+CVE/ { ignored++ }
END { print "historic_cve_triage cves=" cve ",ignored=" ignored ",packages=" length(packages) " " timestamp ; } ')
  echo "Pushing data \"$DATA\" for $QUERYDATE..."
  RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -i -XPOST "http://influxdb.security.kpi.internal:8086/write?db=security&u=security&p=$PASSWORD;precision=s" --data-binary "$DATA")
  if [ "$RESPONSE" != 204 ]; then
    echo "Failed to push data: $RESPONSE"
    exit 1
  fi
  DAYS=$DAYS_1
done

