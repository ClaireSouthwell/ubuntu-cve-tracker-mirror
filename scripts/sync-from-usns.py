#!/usr/bin/python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Author: Marc Deslauriers <marc.deslauriers@canonical.com>
# Copyright (C) 2005-2013 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Fetch the USN database and pass it as the first argument
#  wget http://people.canonical.com/~ubuntu-security/usn/database.pickle
#  ./scripts/sync-from-usns.py database.pickle
#
import cPickle, sys, os, os.path, cve_lib, optparse, usn_lib
import textwrap, re

from source_map import version_compare

parser = optparse.OptionParser()
parser.add_option("--usn", help="Limit report/update to a single USN", metavar="USN", default=None)
parser.add_option("-u", "--update", help="Update CVEs with released package versions", action='store_true')
parser.add_option("-v", "--verbose", help="Report logic while processing USNs", action='store_true')
parser.add_option("-d", "--debug", help="Report additional debugging while processing USNs", action='store_true')
parser.add_option("-r", "--retired", help="Process retired CVEs in addition to active ones", action='store_true')
(opt, args) = parser.parse_args()

cves = dict()

config = cve_lib.read_config()

dbfile = None
if len(args) < 1:
    dbfile = config['usn_db_copy']
else:
    dbfile = args[0]

if opt.debug:
    print >>sys.stderr, "Loading %s ..." % (dbfile)
reverted = usn_lib.get_reverted()
db = usn_lib.load_database(dbfile)
usnlist = [opt.usn]
if not opt.usn:
    usnlist = db

def extract_cve_descriptions(usn, usnnum):
    descriptions = dict()
    cves = set()
    for cve in usn.get('cves',[]):
        if cve.startswith('CVE-'):
            cves.add(cve)
    if len(cves) == 0:
        return descriptions

    try:
        # FIXME: the usn_lib should be doing the utf-8'ing, but
        # we can't do that until Python 3.
        # "pickle.open(..., encoding='utf-8')"
        # http://docs.python.org/py3k/library/pickle.html
        description = usn['description'].decode("utf-8").strip()
    except:
        print >>sys.stderr, "[%s]" % (usn['description'])
        raise
    chunks = [x.replace('\n',' ').replace('   ',' ').replace('  ',' ').strip() for x in description.split('\n\n')]

    # Drop un-parened USN qualifiers
    affected = re.compile(' (Only )?Ubuntu [^ ]+( LTS)?(, (and )?Ubuntu [^ ]+( LTS)?)? (was|were) (not )?affected\.')

    if len(chunks) == 1:
        # This description applies to all the CVEs
        for cve in cves:
            descriptions[cve] = textwrap.fill(description, 75)
    else:
        # Extract trailing (CVE-YYYY-NNNN...)
        for chunk in chunks:
            chunk = affected.sub('', chunk)
            if ' (CVE' not in chunk:
                if opt.verbose:
                    print >>sys.stderr, "USN %s: CVE not mentioned in chunk: '%s' (ignored)" % (usnnum, chunk)
                continue
            parts = chunk.split(' (CVE-')
            cvelist = 'CVE-%s' % parts.pop()
            # Keep only the non-parathesis part
            chunk = parts[0]
            # Fixup ")." into ")"
            if cvelist.endswith(').'):
                cvelist = cvelist[:-2]+')'
            # Validate closing paren
            if not cvelist.endswith(")"):
                raise ValueError, "USN %s: CVE list does not end with ')': '%s'" % (usnnum, cvelist)
            cvelist = cvelist[:-1]
            cvelist = cvelist.split(", ")
            for cve in cvelist:
                descriptions[cve] = textwrap.fill(chunk, 75)

    return descriptions

ubuntu_descriptions = dict()
for usn in usnlist:
    if opt.debug:
        print >>sys.stderr, 'Checking %s' % (usn)
    if not db[usn].has_key('cves'):
        continue

    # Should we update Ubuntu-Description? (only post USN 800 let's say)
    # Ignored non "-1" USNs for sanity...
    usn_parts = [int(x) for x in usn.split('-')]
    if usn_parts[0] > 800 and usn_parts[1] == 1:
        update_descriptions = False
        for rel in db[usn]['releases']:
            # FIXME: known stable kernel release list should be specified somewhere
            # else.
            if len(set(db[usn]['releases'][rel].get('sources', [])).intersection(set(['linux', 'linux-ec2', 'linux-fsl-imx51', 'linux-source-2.6.15', 'linux-mvl-dove', 'linux-ti-omap4', 'linux-armadaxp'])))>0:
                update_descriptions = True
                if opt.debug:
                    print >>sys.stderr, 'Extracting Ubuntu-Description from %s' % (usn)
                break
        if update_descriptions:
            ubuntu_descriptions = extract_cve_descriptions(db[usn], usn)

    for cve in db[usn]['cves']:
        if opt.debug:
            print >>sys.stderr, 'Want %s' % (cve)
        if not cve.startswith('CVE-'):
            if opt.debug:
                print >>sys.stderr, "Skipping (does not start with 'CVE-')"
            continue
        # Skip checking CVEs that were reverted for a given USN
        if reverted.has_key(usn) and cve in reverted[usn]:
            if opt.debug:
                print >>sys.stderr, "Skipping (was reverted)"
            continue
        filename = '%s/%s' % (cve_lib.active_dir, cve)
        if os.path.exists('%s/%s' % (cve_lib.retired_dir, cve)):
            if opt.retired:
                # include retired CVEs (may create false warnings)
                filename = '%s/%s' % (cve_lib.retired_dir, cve)
            else:
                # Skip retired CVEs
                if opt.debug:
                    print >>sys.stderr, "Skipping (already retired)"
                continue
        if os.path.exists(filename):
            if opt.verbose:
                print 'USN %s refers to %s' % (usn,cve)
            try:
                data = cve_lib.load_cve(filename)
            except ValueError, e:
                print >>sys.stderr, e
                continue
            cves.setdefault(cve,data)

            # update Ubuntu-Description
            if ubuntu_descriptions.has_key(cve):
                desc = ubuntu_descriptions[cve]
                if data.get('Ubuntu-Description',None) != '\n' + desc:
                    print >>sys.stderr, "USN %s has updated Ubuntu-Description for %s:\n %s" % (usn, cve, "\n ".join(desc.strip().splitlines()))
                    if opt.debug:
                        print >>sys.stderr, "[%s]\n[%s]" % (data.get('Ubuntu-Description',''), '\n' + desc)
                    if opt.update:
                        cve_lib.update_multiline_field(filename, 'Ubuntu-Description', desc)

            # update References
            if data.has_key('References'):
                usn_ref = "http://www.ubuntu.com/usn/usn-" + usn
                found = False
                if usn_ref in data['References']:
                    found = True
                if not found:
                    print >>sys.stderr, "%s references %s" % (usn_ref, cve)
                    if opt.update:
                        cve_lib.add_reference(filename, usn_ref)

            # Record what the PublicDate field was when we published, in case
            # NVD moves it around.
            if not data.has_key('PublicDateAtUSN'):
                if data['PublicDate'].strip() == "":
                    print >>sys.stderr, "Yikes, empty PublicDate for %s" % (cve)
                    sys.exit(1)
                if opt.update:
                    cve_lib.prepend_field(filename, 'PublicDateAtUSN', data['PublicDate'])

            for rel in db[usn]['releases']:
                if not db[usn]['releases'][rel].has_key('sources'):
                    if opt.debug:
                        print "  strange: %s listed, but without any changed sources -- skipping release" % (rel)
                    continue
                for src in db[usn]['releases'][rel]['sources']:
                    if not cves[cve]['pkgs'].has_key(src) or not cves[cve]['pkgs'][src].has_key(rel):
                        # HACK: ignore abandoned linux topic branches
                        if src in ['linux-ti-omap','linux-qcm-msm']:
                            continue
                        # HACK: ignore firefox-* packages since we track
                        # xulrunner. These existed only from hardy-karmic.
                        if src in ['firefox-3.0', 'firefox-3.1', 'firefox-3.5']:
                            continue
                        # skip eol releases
                        if rel in cve_lib.eol_releases:
                            continue
                        print >>sys.stderr, "USN-%s touches %s in %s with %s (but is not listed in %s)" % (usn, src, rel, cve, filename)
                        continue
                    state, notes = cves[cve]['pkgs'][src][rel]

                    # A CVE is tied to a USN, which means sometimes the CVE
                    # doesn't affect all releases of package, so skip
                    # not-affected without comment
                    if state == 'not-affected':
                        if opt.verbose:
                            print "  %s/%s marked 'not-affected' -- ignoring" % (src,rel)
                        continue

                    #if state == 'pending' and notes == db[usn]['releases'][rel]['sources'][src]['version']:
                    #    # Found aligned pending/released pair
                    #    pass

                    if state not in ['needed','deferred','pending','released','active','needs-triage']:
                        print >>sys.stderr, "USN-%s fixed %s in %s %s/%s (but is marked %s)!?" % (usn, cve, src, db[usn]['releases'][rel]['sources'][src]['version'], rel, state)
                        continue

                    if state != 'released':
                        # CVE db is the "master" for when a CVE was fixed,
                        # so only fill in the version from the USN if the
                        # fixed version is not already known to the CVE db.
                        detail = ""
                        version = notes
                        usn_ver = db[usn]['releases'][rel]['sources'][src]['version']
                        if version == "":
                            version = usn_ver
                        elif version != usn_ver:
                            detail = "(USN:%s)" % (usn_ver)
                        print >>sys.stderr, "USN-%s fixed %s in %s %s%s/%s (was %s)" % (usn, cve, src, version, detail, rel, state)
                        if version_compare(version, usn_ver) > 0:
                            print >>sys.stderr, "ERROR: Version in CVE is higher than USN version! Skipping"
                            continue
                        if opt.update:
                            cve_lib.update_state(filename,src,rel,'released',version)
                    elif opt.debug:
                        print "  %s/%s marked 'released' -- ignoring" % (src,rel)
        else:
            print >>sys.stderr, "USN-%s fixed %s but it is neither active nor retired" % (usn, cve)
