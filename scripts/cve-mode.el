;;; cve-mode.el --- major mode for editing CVE files         -*- lexical-binding: t; -*-

;; Copyright (c) 2018 Alex Murray

;; Author: Alex Murray <alex.murray@canonical.com>
;; Maintainer: Alex Murray <alex.murray@canonical.com>
;; URL: https://launchpad.net/ubuntu-cve-tracker
;; Version: 0.1
;; Package-Requires: ((emacs "24.4"))

;; This file is not part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;;; Setup

;; (require 'cve-mode)

;;; Code:

(defvar cve-mode-keywords '("Candidate" "PublicDate" "PublicDateAtUSN" "CRD" "References" "Description" "Ubuntu-Description" "Notes" "Bugs" "Priority" "Discovered-by" "Assigned-to"))

(defvar cve-mode-releases '("devel" "upstream" "product" "warty" "hoary" "breezy" "dapper" "edgy" "feisty" "gutsy" "hardy" "intrepid" "jaunty" "karmic" "lucid" "maverick" "natty" "oneiric" "precise" "precise/esm" "quantal" "raring" "saucy" "trusty" "utopic" "vivid" "vivid/stable-phone-overlay" "vivid/ubuntu-core" "wily" "xenial" "yakkety" "zesty" "artful" "bionic"))

(defvar cve-mode-statuses '("needs-triage" "needed" "deferred" "pending" "released" "ignored" "not-affected" "DNE"))

(defvar cve-mode-priorities '("negligible" "low" "medium" "high" "critical"))

(defvar cve-mode-tags '("apparmor" "fortify-source" "hardlink-restriction" "heap-protector" "not-ue" "pie" "stack-protector" "symlink-restriction" "universe-binary"))

(defvar cve-mode-cve-id-regexp "\\(CVE-[[:digit:]]\\{4\\}-[[:digit:]]\\{4,\\}\\)")

(defvar cve-mode-date-regexp "\\([[:digit:]]\\{4\\}-[[:digit:]]\\{2\\}-[[:digit:]]\\{2\\}\\)")

(defvar cve-mode-package-name-regexp "[a-z0-9][a-z0-9+.-]+")

(defvar cve-mode-patches-regexp (concat "\\(Patches_"  cve-mode-package-name-regexp "\\)"))

(defvar cve-mode-releases-regexp (concat "\\(" (regexp-opt cve-mode-releases) "_" cve-mode-package-name-regexp "\\)"))

(defvar cve-mode-font-lock-defaults
  `(((,cve-mode-releases-regexp 1 font-lock-keyword-face t)
     (,cve-mode-patches-regexp 1 font-lock-keyword-face t)
     (,(regexp-opt cve-mode-keywords 'words) . font-lock-keyword-face)
     (,(regexp-opt cve-mode-releases 'words) . font-lock-keyword-face)
     (,(regexp-opt cve-mode-statuses 'words) . font-lock-type-face)
     (,(regexp-opt cve-mode-priorities 'words) . font-lock-type-face)
     (,(regexp-opt cve-mode-tags 'words) . font-lock-type-face)
     (":" . 'font-lock-builtin-face)
     (">" . 'font-lock-builtin-face)
     ;; CVE Ids
     (,cve-mode-cve-id-regexp 1 font-lock-variable-name-face t)
     (,cve-mode-date-regexp 1 font-lock-variable-name-face t))))

(defvar cve-mode-syntax-table
  (let ((table (make-syntax-table)))
    ;; add / and _ as symbol characters
    (modify-syntax-entry ?/ "/" table)
    (modify-syntax-entry ?_ "/" table)
    ;; # is comment start
    (modify-syntax-entry ?# "<" table)
    ;; newline finishes comment line
    (modify-syntax-entry ?\n ">" table)
    table))

(defun cve-mode-completion-at-point ()
  "`completion-at-point' function for cve-mode."
  (let ((bounds (bounds-of-thing-at-point 'symbol)))
    (list (car bounds) ; start
          (cdr bounds) ; end
          (append cve-mode-keywords cve-mode-releases cve-mode-statuses cve-mode-priorities cve-mode-tags)
          :company-docsig #'identity)))

(define-derived-mode cve-mode text-mode "CVE"
  "cve-mode is a major mode for editing CVE files."
  :syntax-table cve-mode-syntax-table
  (setq font-lock-defaults cve-mode-font-lock-defaults)
  (add-to-list 'completion-at-point-functions #'cve-mode-completion-at-point)
  (setq comment-start "#")
  (setq comment-end "")
  ;; linkify URLs
  (goto-address-mode 1))

;;;###autoload
(add-to-list 'auto-mode-alist '("CVE-[[:digit:]]\\{4\\}-[[:digit:]]\\{4,\\}\\'" . cve-mode))
(add-to-list 'auto-mode-alist '("00boilerplate.*\\'" . cve-mode))

(provide 'cve-mode)
;;; cve-mode.el ends here
