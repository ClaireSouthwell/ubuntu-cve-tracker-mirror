#!/usr/bin/env python
import cve_lib

config = cve_lib.read_config()

features = dict()
releases = cve_lib.releases

UNIMPLEMENTED = 0
AVAILABLE = 1
DEFAULT = 2

#features[name]['short']
#features[name]['desc']
#features[name]['matrix']['dapper']['status'] = 'policy'
#features[name]['matrix']['dapper']['state'] = AVAILABLE

feature_list = [
	{ 'name':'ports', 'short':'No Open Ports',
          'desc':
'''Default installations of Ubuntu must have no listening network services after initial install. Exceptions to this rule include network infrastructure services such as the DHCP client and mDNS (Avahi/ZeroConf, see ZeroConfPolicySpec  for implementation details and justification). When installing Ubuntu Server, the administrator can, of course, select specific services to install beyond the defaults (e.g. Apache).''' },
	{ 'name':'hashing', 'short':'Password hashing',
	  'desc':
'''The system password used for logging into Ubuntu is stored in /etc/shadow.  Very old style password hashes were 3DES and visible in /etc/passwd.  Modern Linux has long since moved to /etc/shadow, and for some time now has used salted MD5 hashes for password verification (crypt id 1).  Since MD5 is considered "broken", Ubuntu 8.10 and later moved to using salted SHA512 password hashes (crypt id 6), which are several orders of magnitude more difficult to brute-force or generate rainbow tables for.  See the [[Manpage:crypt|crypt]] manpage for additional details.''' },
	{ 'name':'mac', 'short':'Mandatory Access Control (MAC)',
	  'section':1, 'desc':'''Mandatory Access Controls are handled via the kernel LSM hooks.''' },
	{ 'name':'apparmor', 'short':'AppArmor',
	  'desc':
'''[[https://help.ubuntu.com/community/AppArmor|AppArmor]] is a path-based MAC.  Example profiles are found in the apparmor-profiles package from universe, and by-default shipped [[SecurityTeam/KnowledgeBase/AppArmorProfiles|enforcing profiles]] are being built up:

<<Include(SecurityTeam/KnowledgeBase/AppArmorProfiles, , from="=== Supported profiles in main ===", to="===")>>''' },
	{ 'name':'selinux', 'short':'SELinux',
	  'desc':
'''[[SELinux]] is an inode-based MAC.  Targeted policies are available for Ubuntu in universe.  Installing the "selinux" package will make the boot-time adjustments that are needed.''' },
	{ 'name':'smack', 'short':'SMACK',
	  'desc':
'''SMACK is an inode-based MAC.''' },
	{ 'name':'fscaps', 'short':'Filesystem Capabilities',
	  'desc':
'''The need for setuid applications can be reduced via the application of [[http://www.olafdietsche.de/linux/capability/|filesystem capabilities]] using the xattrs available to most modern filesystems.  This reduces the possible misuse of vulnerable setuid applications.  The kernel provides the support, and the user-space tools are in main ("libcap2-bin").''' },
	{ 'name':'firewall', 'short':'Configurable Firewall',
	  'desc':
'''[[UbuntuFirewall|ufw]] is a frontend for iptables, and is installed by default in Ubuntu (users must explicitly enable it). Particularly well-suited for host-based firewalls, ufw provides a framework for managing a netfilter firewall, as well as a command-line interface for manipulating the firewall. ufw aims to provide an easy to use interface for people unfamiliar with firewall concepts, while at the same time simplifies complicated iptables commands to help an administrator who knows what he or she is doing. ufw is an upstream for other distributions and graphical frontends.''' },
	{ 'name':'encryption', 'short':'Filesystem encryption',
          'section':1,
          'desc':'' },
	{ 'name':'encrypted-lvm', 'short':'Encrypted LVM',
	  'desc':
'''Users of the alternate installer can choose to install Ubuntu onto an encrypted LVM, which allows all partitions in the logical volume, including swap, to be encrypted.''' },
	{ 'name':'ecryptfs', 'short':'eCryptfs',
	  'desc':
'''Encrypted Private Directories were implemented in Ubuntu 8.10 as a secure location for users to store sensitive information. The server and alternate installers had the option to setup an encrypted private directory for the first user. As of Ubuntu 9.04, support for encrypted home was added, allowing users to encrypt all files in their home directory.  Encrypted Home is supported in the Alternate Installer, and available in the Desktop Installer via the preseed option `user-setup/encrypt-home=true`.  Also, the Ubuntu 9.04 kernel carries a patchset for eCryptfs to support encrypted filenames.
''' },
	{ 'name':'stack-protector', 'short':'Stack Protector',
	  'section':1, 'desc':
'''Many compile-time features are available through the default [[CompilerFlags|compiler flags]] and kernel in Ubuntu.''' },
	{ 'name':'stack-protector', 'short':'Stack Protector',
	  'desc':
'''gcc's -fstack-protector provides a randomized stack canary that protects against stack overflows, and reduces the chances of arbitrary code execution via controlling return address destinations.  Enabled at compile-time.  (A small number of applications do not play well with it, and have it disabled.)  The routines used for stack checking are actually part of glibc, but gcc is patched to enable linking against those routines by default.''' },
	{ 'name':'heap-protector', 'short':'Heap Protector',
	  'desc':
'''The [[http://www.cs.ucsb.edu/~wkr/projects/heap_protection/|heap protector]] provides double-free/overflow protections to the glibc heap memory manager (first introduced in glibc 2.3.4).  This stops the ability to perform arbitrary code execution via heap memory overflows that try to impact the malloc linked lists.''' },
	{ 'name':'pointer-obfuscation', 'short':'Pointer Obfuscation',
	  'desc':
'''Some [[http://udrepper.livejournal.com/13393.html|pointers stored in glibc are obfuscated]] via PTR_MANGLE/PTR_UNMANGLE macros internally in glibc, preventing libc function pointers from being overwritten during runtime.
''' },
	{ 'name':'aslr', 'short':'Address Space Layout Randomisation (ASLR)',
	  'section':1, 'desc':
'''ASLR is implemented by the kernel and the ELF loader by randomising the location of memory allocations (stack, heap, shared libraries, etc).  This makes memory addresses harder to predict when an attacker is attempting a memory-corruption exploit.  ASLR is controlled system-wide by the value of {{{/proc/sys/kernel/randomize_va_space}}}.  Prior to Ubuntu 8.10, this defaulted to "1" (on).  In later releases that included brk ASLR, it defaults to "2" (on, with brk ASLR).''' },
	{ 'name':'stack-aslr', 'short':'Stack ASLR',
	  'desc':
'''Each execution of a program results in a different stack memory space layout.  This makes it harder to locate in memory where to attack or deliver an executable attack payload.  This was available in the mainline kernel since 2.6.15 (Ubuntu 6.06).''' },
	{ 'name':'mmap-aslr', 'short':'Libs/mmap ASLR',
	  'desc':
'''Each execution of a program results in a different mmap memory space layout (which causes the dynamically loaded libraries to get loaded into different locations each time).  This makes it harder to locate in memory where to jump to for "return to libc" to similar attacks.  This was available in the mainline kernel since 2.6.15 (Ubuntu 6.06).''' },
	{ 'name':'exec-aslr', 'short':'Exec ASLR',
	  'desc':
'''Each execution of a program that has been built with "-fPIE -pie" will get loaded into a different memory location.  This makes it harder to locate in memory where to attack or jump to when performing memory-corruption-based attacks.  This was available in the mainline kernel since 2.6.25 (and was backported to Ubuntu 8.04 LTS).''' },
	{ 'name':'brk-aslr', 'short':'brk ASLR',
	  'desc':
'''Similar to exec ASLR, brk ASLR adjusts the memory locations relative between the exec memory area and the brk memory area (for small mallocs).  The randomization of brk offset from exec memory was added in 2.6.26 (Ubuntu 8.10), though some of the effects of brk ASLR can be seen for PIE programs in Ubuntu 8.04 LTS since exec was ASLR, and brk is allocated immediately after the exec region (so it was technically randomized, but not randomized with respect to the text region until 8.10).''' },
	{ 'name':'vdso-aslr', 'short':'VDSO ASLR',
	  'desc':
'''Each execution of a program results in a random vdso location.  While this has existed in the mainline kernel since 2.6.18 (x86, PPC) and 2.6.22 (x86_64), it hadn't been enabled in Ubuntu 6.10 due to COMPAT_VDSO being enabled, which was removed in Ubuntu 8.04 LTS.  This protects against jump-into-syscall attacks.  Only x86 (maybe ppc?) is supported by glibc 2.6.  glibc 2.7 (Ubuntu 8.04 LTS) supports x86_64 ASLR vdso.  People needing ancient pre-libc6 static high vdso mappings can use "vdso=2" on the kernel boot command line to gain COMPAT_VDSO again.

 * http://lwn.net/Articles/184734/
 * http://manugarg.googlepages.com/systemcallinlinux2_6.html
''' },
	{ 'name':'pie', 'short':'Built as PIE',
	  'desc':
'''All programs built as Position Independent Executables (PIE) with "-fPIE -pie" can take advantage of the exec ASLR.  This protects against "return-to-text" and generally frustrates memory corruption attacks.  This requires centralized changes to the compiler options when building the entire archive.  PIE has a large (5-10%) performance penalty on architectures with small numbers of general registers (e.g. x86), so it should only be used for a [[SecurityTeam/KnowledgeBase/BuiltPIE|select number of security-critical packages]] (some upstreams natively support building with PIE, other require the use of "hardening-wrapper" to force on the correct compiler and linker flags).  PIE on x86_64 does not have the same penalties, and will eventually be made the default, but more testing is required.

<<Include(SecurityTeam/KnowledgeBase/BuiltPIE, , from="=== Supported Position Independent Executables in main ===", to="===")>>''' },
	{ 'name':'fortify-source', 'short':'Built with Fortify Source',
	  'desc':
'''Programs built with "-D_FORTIFY_SOURCE=2" (and -O2 or higher), enable several compile-time and run-time protections in glibc:
 * expand unbounded calls to "sprintf", "strcpy" into their "n" length-limited cousins when the size of a destination buffer is known (protects against memory overflows).
 * stop format string "%n" attacks when the format string is in a writable memory segment.
 * require checking various important function return codes and arguments (e.g. system, write, open).
 * require explicit file mask when creating new files.
''' },
	{ 'name':'relro', 'short':'Built with RELRO',
	  'desc':
'''Hardens ELF programs against loader memory area overwrites by having the loader mark any areas of the relocation table as read-only for any symbols resolved at load-time ("read-only relocations").  This reduces the area of possible GOT-overwrite-style memory corruption attacks.''' },
	{ 'name':'bindnow', 'short':'Built with BIND_NOW',
	  'desc':
'''Marks ELF programs to resolve all dynamic symbols at start-up (instead of on-demand, also known as "immediate binding") so that the GOT can be made entirely read-only (when combined with RELRO above).''' },
	{ 'name':'nx', 'short':'Non-Executable Memory',
	  'desc':
'''Most modern CPUs protect against executing non-executable memory regions (heap, stack, etc).  This is known either as Non-eXecute (NX) or eXecute-Disable (XD), and some BIOS manufacturers needlessly disable it by default, so check your [[Security/CPUFeatures|BIOS Settings]].  This protection reduces the areas an attacker can use to perform arbitrary code execution.  It requires that the kernel use "PAE" addressing (which also allows addressing of physical addresses above 3GB).  The 64bit and 32bit {{{-server}}} and {{{-generic-pae}}} kernels are compiled with PAE addressing.   Starting in Ubuntu 9.10, this protection is partially emulated for processors lacking NX when running on a 32bit kernel (built with or without PAE).  After booting, you can see what NX protection is in effect:
 * Hardware-based (via PAE mode): {{{
[    0.000000] NX (Execute Disable) protection: active}}}
 * Partial Emulation (via segment limits): {{{
[    0.000000] Using x86 segment limits to approximate NX protection}}}
If neither are seen, you do not have any NX protections enabled.  Check your BIOS settings and CPU capabilities.  If "nx" shows up in each of the "flags" lines in {{{/proc/cpuinfo}}}, it is enabled/supported by your hardware (and a PAE kernel is needed to actually use it).  For testing, see the [[http://bazaar.launchpad.net/~ubuntu-bugcontrol/qa-regression-testing/master/files/head%3A/scripts/kernel-security/nx/|nx regression test]].

||||||||||                                   \'\'\'Ubuntu 9.04 and earlier\'\'\'                                                                            ||
||||<rowspan=2>                                                      ||||                CPU supports NX                   || CPU lacks NX            ||
||                                                                         BIOS enables NX      ||     BIOS disables NX    ||                         ||
||<rowspan=2> i386 || {{{-386}}}, {{{-generic}}} kernel (non-PAE)    ||<#dd0000> nx unsupported ||<#dd0000> nx unsupported ||<#dd0000> nx unsupported ||
||                    {{{-server}}} kernel (PAE)                     ||<#00dd00> real nx        ||<#dd0000> nx unsupported ||<#dd0000> nx unsupported ||
|| amd64           || any kernel (PAE)                               ||<#00dd00> real nx        ||<#dd0000> nx unsupported ||<#dd0000> nx unsupported ||

||||||||||                                   \'\'\'Ubuntu 9.10 and later\'\'\'                                                                              ||
||||<rowspan=2>                                                      ||||                CPU supports NX                   || CPU lacks NX            ||
||                                                                         BIOS enables NX      ||     BIOS disables NX    ||                         ||
||<rowspan=2> i386 || {{{-386}}}, {{{-generic}}} kernel (non-PAE)    ||<#dddd00> nx-emulation   ||<#dddd00> nx-emulation   ||<#dddd00> nx-emulation   ||
||                    {{{-server}}}, {{{-generic-pae}}} kernel (PAE) ||<#00dd00> real nx        ||<#dddd00> nx-emulation   ||<#dddd00> nx-emulation   ||
|| amd64           || any kernel (PAE)                               ||<#00dd00> real nx        ||<#dd0000> nx unsupported ||<#dd0000> nx unsupported ||
''' },
	{ 'name':'proc-maps', 'short':'/proc/$pid/maps protection',
	  'desc':
'''With ASLR, a process's memory space layout suddenly becomes valuable to attackers.  The "maps" file is [[http://lkml.org/lkml/2007/3/10/250|made read-only]] except to the process itself or the owner of the process.  Went into mainline kernel with sysctl toggle in 2.6.22.  The toggle was made non-optional in 2.6.27, forcing the privacy to be enabled regardless of sysctl settings (this is a good thing).
''' },
	{ 'name':'null-mmap', 'short':'0-address protection',
	  'desc':
'''Since the kernel and userspace share virtual memory addresses, the "NULL" memory space needs to be protected so that userspace mmap'd memory cannot start at address 0, stopping "NULL dereference" kernel attacks.  This is possible with 2.6.22 kernels, and was implemented with the "mmap_min_addr" sysctl setting.  Since Ubuntu 9.04, the mmap_min_addr setting is built into the kernel.  (64k for x86, 32k for ARM.)''' },
	{ 'name':'dev-mem', 'short':'/dev/mem protection',
	  'desc':
'''Some applications (Xorg) need direct access to the physical memory from user-space.  The special file `/dev/mem` exists to provide this access.  In the past, it was possible to view and change kernel memory from this file if an attacker had root access.  The [[http://lwn.net/Articles/267427/|CONFIG_STRICT_DEVMEM kernel option]] was introduced to block non-device memory access (originally named CONFIG_NONPROMISC_DEVMEM).''' },
	{ 'name':'dev-kmem', 'short':'/dev/kmem disabled',
	  'desc':
'''There is no modern user of `/dev/kmem` any more beyond attackers using it to load kernel rootkits.  [[http://lkml.org/lkml/2008/2/10/328|CONFIG_DEVKMEM]] is set to "n".  While the `/dev/kmem` device node still exists in Ubuntu 8.04 LTS through Ubuntu 9.04, it is not actually attached to anything in the kernel.''' },
	{ 'name':'block-modules', 'short':'Block module loading',
	  'desc':
'''In Ubuntu 8.04 LTS and earlier, it was possible to [[http://www.debian.org/doc/manuals/securing-debian-howto/ch10.en.html#s-proactive|remove CAP_SYS_MODULES from the system-wide capability bounding set]], which would stop any new kernel modules from being loaded.  This was another layer of protection to stop kernel rootkits from being installed.  The 2.6.25 Linux kernel (Ubuntu 8.10) changed how bounding sets worked, and this functionality disappeared.  Starting with Ubuntu 9.10, it is now [[http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=3d43321b7015387cfebbe26436d0e9d299162ea1|possible to block module loading]] again by setting "1" in {{{/proc/sys/kernel/modules_disabled}}}.''' },
	{ 'name':'seccomp', 'short':'PR_SET_SECCOMP',
	  'desc':
'''Setting [[http://lwn.net/Articles/332974/|SECCOMP]] for a process is meant to confine it to a small subsystem of system calls, used for specialized processing-only programs.''' },
	{ 'name':'syn-cookies', 'short':'SYN cookies',
	  'desc':
'''When a system is overwhelmed by new network connections, SYN cookie use is activated, which helps mitigate a SYN-flood attack.''' },
	{ 'name':'rodata', 'short':'CONFIG_DEBUG_RODATA',
	  'desc':
'''This kernel setting makes sure that certain kernel data sections are not marked to allow modification.  This helps protect against some classes of kernel rootkits.''' },
	{ 'name':'kernel-stack-protector', 'short':'CONFIG_CC_STACKPROTECTOR',
	  'desc':
'''Similar to the stack protector used for ELF programs in userspace, the kernel can protect its internal stacks as well.''' },
	{ 'name':'symlink', 'short':'Symlink restrictions',
	  'desc':
'''A long-standing class of security issues is the symlink-based [[http://en.wikipedia.org/wiki/Time-of-check-to-time-of-use|ToCToU]] race, most commonly seen in world-writable directories like `/tmp/`. The common method of exploitation of [[http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=tmp+symlink|this flaw]] is crossing privilege boundaries when following a given symlink (i.e. a `root` user follows a symlink belonging to another user).

In Ubuntu 10.10 and later, symlinks in world-writable sticky directories (e.g. `/tmp`) cannot be followed if the follower and directory owner do not match the symlink owner. The behavior is controllable through the `/proc/sys/kernel/yama/protected_sticky_symlinks` sysctl.
''' },
	{ 'name':'hardlink', 'short':'Hardlink restrictions',
	  'desc':
'''Hardlinks can be abused in a [[http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=hardlink|similar fashion]] to symlinks above, but they are not limited to world-writable directories. If `/etc/` and `/home/` are on the same partition, a regular user can create a hardlink to `/etc/shadow` in their home directory. While it retains the original owner and permissions, it is possible for privileged programs that are otherwise symlink-safe to mistakenly access the file through its hardlink. Additionally, a very minor untraceable quota-bypassing local denial of service is possible by an attacker exhausting disk space by filling a world-writable directory with hardlinks.

In Ubuntu 10.10 and later, hardlinks cannot be created to files that the user would be unable to read and write originally, or are otherwise sensitive. The behavior is controllable through the `/proc/sys/kernel/yama/protected_nonaccess_hardlinks` sysctl.
''' },
	{ 'name':'ptrace', 'short':'PTRACE scope',
	  'desc':
'''A troubling weakness of the Linux process
interfaces is that a single user is able to examine the memory and
running state of any of their processes. For example, if one application
was compromised, it would be possible for an attacker to
attach to other running processes (e.g. SSH sessions, GPG agent,
etc) to extract additional credentials and continue to immediately expand the scope
of their attack without resorting to user-assisted phishing or trojans.

In Ubuntu 10.10 and later, users cannot PTRACE processes that are not a descendant of the debugger. The behavior is controllable through the `/proc/sys/kernel/yama/ptrace_scope` sysctl.

In the case of automatic crash handlers, a crashing process can specficially allow an existing crash handler process to attach on a process-by-process basis using `prctl(PR_SET_PTRACER, debugger_pid, 0, 0, 0)`.
''' },
#	{ 'name':'', 'short':'',
#	  'desc':
#''' ''' },
]

for details in feature_list:
    features.setdefault(details['name'], dict())
    for item in ['short', 'desc']:
        features[details['name']].setdefault(item, details[item])
    features[details['name']].setdefault('matrix', dict())
    for rel in releases:
        features[details['name']]['matrix'].setdefault(rel, dict())
        features[details['name']]['matrix'][rel].setdefault('status', '--')
        features[details['name']]['matrix'][rel].setdefault('state',
                                                            UNIMPLEMENTED)

def add_status(name, release, status, state):
    overwrite = False
    for rel in releases:
        if rel == release:
            overwrite = True
        if overwrite:
            features[name]['matrix'][rel]['status'] = status
            features[name]['matrix'][rel]['state'] = state

add_status('ports', 'dapper', 'policy', DEFAULT)

add_status('hashing', 'dapper', 'md5', DEFAULT)
add_status('hashing', 'intrepid', 'sha512', DEFAULT)

add_status('apparmor', 'gutsy', '2.1', AVAILABLE)
add_status('apparmor', 'hardy', '2.1', DEFAULT)
add_status('apparmor', 'intrepid', '2.3', DEFAULT)
add_status('apparmor', 'karmic', '2.3.1', DEFAULT)
add_status('apparmor', 'lucid', '2.5', DEFAULT)
add_status('apparmor', 'maverick', '2.5.1', DEFAULT)

add_status('selinux', 'hardy', 'universe', AVAILABLE)

add_status('smack', 'intrepid', 'kernel', AVAILABLE)

add_status('fscaps', 'intrepid', 'kernel', AVAILABLE)

add_status('firewall', 'dapper', 'iptables', DEFAULT)
add_status('firewall', 'hardy', 'ufw', DEFAULT)

add_status('encrypted-lvm', 'dapper', 'alt installer', AVAILABLE)

add_status('ecryptfs', 'intrepid', '~/Private', AVAILABLE)
add_status('ecryptfs', 'jaunty', '~/Private or ~, filenames', AVAILABLE)

add_status('stack-protector', 'edgy', 'gcc patch', DEFAULT)

add_status('heap-protector', 'dapper', 'glibc', DEFAULT)

add_status('pointer-obfuscation', 'hardy', 'glibc', DEFAULT)

add_status('stack-aslr', 'dapper', 'kernel', DEFAULT)

add_status('mmap-aslr', 'dapper', 'kernel (i386 only)', DEFAULT)
add_status('mmap-aslr', 'hardy', 'kernel', DEFAULT)

add_status('exec-aslr', 'hardy', 'kernel (-mm patch)', DEFAULT)
add_status('exec-aslr', 'intrepid', 'kernel', DEFAULT)

add_status('brk-aslr', 'hardy', 'kernel (exec ASLR)', AVAILABLE)
add_status('brk-aslr', 'intrepid', 'kernel', DEFAULT)

add_status('vdso-aslr', 'hardy', 'kernel', DEFAULT)

add_status('pie', 'intrepid', 'package list', DEFAULT)

add_status('fortify-source', 'intrepid', 'gcc patch', DEFAULT)

add_status('relro', 'intrepid', 'gcc patch', DEFAULT)

add_status('bindnow', 'karmic', 'package list', DEFAULT)

add_status('nx', 'dapper', 'PAE only', DEFAULT)
add_status('nx', 'karmic', 'PAE, ia32 partial-NX-emulation', DEFAULT)

add_status('proc-maps', 'hardy', 'kernel & sysctl', DEFAULT)
add_status('proc-maps', 'intrepid', 'kernel', DEFAULT)

add_status('null-mmap', 'hardy', 'kernel & sysctl', DEFAULT)
add_status('null-mmap', 'jaunty', 'kernel', DEFAULT)

add_status('dev-mem', 'dapper', 'kernel', DEFAULT)
add_status('dev-mem', 'edgy', '--', UNIMPLEMENTED)
add_status('dev-mem', 'hardy', 'kernel (-mm patch)', DEFAULT)
add_status('dev-mem', 'intrepid', 'kernel', DEFAULT)

add_status('dev-kmem', 'hardy', 'kernel (-mm patch)', DEFAULT)
add_status('dev-kmem', 'intrepid', 'kernel', DEFAULT)

add_status('block-modules', 'warty', 'drop CAP_SYS_MODULES', AVAILABLE)
add_status('block-modules', 'intrepid', '--', UNIMPLEMENTED)
add_status('block-modules', 'karmic', 'sysctl', AVAILABLE)

add_status('seccomp', 'hardy', 'kernel', AVAILABLE)

add_status('syn-cookies', 'warty', 'kernel', AVAILABLE)
add_status('syn-cookies', 'jaunty', 'kernel & sysctl', DEFAULT)

add_status('rodata', 'hardy', 'kernel', DEFAULT)

add_status('kernel-stack-protector', 'jaunty', 'kernel', DEFAULT)

add_status('symlink', 'maverick', 'kernel', DEFAULT)

add_status('hardlink', 'maverick', 'kernel', DEFAULT)

add_status('ptrace', 'maverick', 'kernel', DEFAULT)

