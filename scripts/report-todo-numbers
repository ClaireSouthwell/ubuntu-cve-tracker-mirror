#!/usr/bin/python
#
# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2009 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Reports a terse numeric of CVEs that need attention for supported packages.
import sys, subprocess, optparse
import cve_lib

priorities = ['critical','high','medium','low']

parser = optparse.OptionParser()
parser.add_option("--prose", help="Report in prose instead of just numbers.", action='store_true')
parser.add_option("--prose-date", dest="prose_date", help="Date to use in prose text", metavar="YYYY-MM-DD")
parser.add_option("-E", "--skip-embargoed", help="Do not add embargoed CVEs to the numbers.", action="store_true")
(opt, args) = parser.parse_args()

item=dict()
p=subprocess.Popen(['./scripts/ubuntu-table','-s']+args,stdout=subprocess.PIPE)
table = p.communicate()[0]
if p.returncode != 0:
    raise ValueError, "ubuntu-table returned non-zero: %d" % (p.returncode)

if opt.prose and opt.prose_date:
    print "As of %s:" % opt.prose_date

for category in ['supported','partner','universe']:
    item[category] = dict()

    output = []
    pkgs = set()
    for prio in priorities:
        item[category][prio] = []

        for line in table.splitlines():
            line = line.strip()
            # Filter based on support type
            if opt.skip_embargoed and 'EMBARGOED' in line:
                continue
            if 'SUPPORTED' in line:
                if category != 'supported':
                    continue
            elif 'PARTNER' in line:
                if category != 'partner':
                    continue
            elif category != 'universe':
                continue

            # Do not count linux topic branches
            pkg = line.split(' ')[1].split(':')[0]
            if pkg in cve_lib.kernel_topic_branches:
                continue

            pkgs.add(pkg)

            # Filter based on priority
            if not line.endswith(' %s' % (prio)):
                continue

            item[category][prio].append(line)

        count = len(item[category][prio])
        if not opt.prose and count:
            output.append('%d %s' % (count, prio))

    if not opt.prose:
        if len(pkgs):
            plural='s'
            if len(pkgs)==1:
                plural=''
            print ' * CVEs pending: %s, in %d %s package%s' % \
                (", ".join(output), len(pkgs), category, plural)
        else:
            print ' * CVEs pending: none in %s packages!' % (category)
    else:
        if category == 'supported':
            print " * For all the supported packages in Ubuntu, there",
        elif category == 'partner':
            print " * For all partner packages in Ubuntu, there",
        elif category == 'universe':
            print " * For all community-supported packages in Ubuntu, there",
        plural='are'
        for prio in priorities:
            if len(item[category][prio])>0:
                if len(item[category][prio])==1:
                    plural='is'
                break
        print plural,
        if len(pkgs) == 0:
            print "no issues open!"
        else:
            cats = []
            for prio in priorities:
                count=len(item[category][prio])
                if count==0:
                    continue
                plural='s'
                if count==1:
                    plural=''
                cats.append('%d %s-priority issue%s' % (count, prio, plural))

            count = len(cats)
            if count > 1:
                cats[count-1] = "and %s" % (cats[count-1])
            if count == 2:
                print " ".join(cats),
            else:
                print ", ".join(cats),

            plural='s'
            if len(pkgs)==1:
                plural=''
            print "that need to be fixed in %d package%s." % (len(pkgs), plural)
        #print ""
