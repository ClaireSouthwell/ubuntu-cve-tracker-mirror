#!/usr/bin/python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2008 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Fetch the USN database and pass it as the first argument
#  wget http://people.canonical.com/~ubuntu-security/usn/database.pickle
#  ./scripts/sync-from-usns.py database.pickle
#
import cPickle, sys, os, os.path, cve_lib, optparse, usn_lib

parser = optparse.OptionParser()
parser.add_option("-u", "--update", help="Update CVEs with released package versions", action='store_true')
parser.add_option("-v", "--verbose", help="Report logic while processing USNs", action='store_true')
parser.add_option("-d", "--debug", help="Report additional debugging while processing USNs", action='store_true')
parser.add_option("-r", "--retired", help="Process retired CVEs in addition to active ones", action='store_true')
(opt, args) = parser.parse_args()

cves = dict()

config = cve_lib.read_config()

dbfile = None
if len(args) < 1:
    dbfile = config['usn_db_copy']
else:
    dbfile = args[0]

reverted = usn_lib.get_reverted()
db = usn_lib.load_database(dbfile)

for usn in db:
    if not db[usn].has_key('cves'):
        continue
    for cve in db[usn]['cves']:
        if not cve.startswith('CVE-'):
            continue
        # Skip checking CVEs that were reverted for a given USN
        if reverted.has_key(usn) and cve in reverted[usn]:
            continue
        filename = 'active/%s' % (cve)
        if os.path.exists('retired/%s' % (cve)):
            if opt.retired:
                # include retired CVEs (may create false warnings)
                filename = 'retired/%s' % (cve)
            else:
                # Skip retired CVEs
                continue
        if os.path.exists(filename):
            if opt.verbose:
                print 'USN %s refers to active CVE %s' % (usn,cve)
            try:
                data = cve_lib.load_cve(filename)
            except ValueError, e:
                print >>sys.stderr, e
                continue
            cves.setdefault(cve,data)

            # update References
            if data.has_key('References'):
                usn_ref = "http://www.ubuntu.com/usn/usn-" + usn
                found = False
                if usn_ref in data['References']:
                    found = True 
                if not found:
                    print >>sys.stderr, "%s references %s" % (usn_ref, cve)
                    if opt.update:
                        cve_lib.add_reference(filename, usn_ref)

            # Record what the PublicDate field was when we published, in case
            # NVD moves it around.
            if not data.has_key('PublicDateAtUSN'):
                if data['PublicDate'].strip() == "":
                    print >>sys.stderr, "Yikes, empty PublicDate for %s" % (cve)
                    sys.exit(1)
                cve_lib.prepend_field(filename, 'PublicDateAtUSN', data['PublicDate'])

            for rel in db[usn]['releases']:
                if not db[usn]['releases'][rel].has_key('sources'):
                    if opt.debug:
                        print "  strange: %s listed, but without any changed sources -- skipping release" % (rel)
                    continue
                for src in db[usn]['releases'][rel]['sources']:
                    if not cves[cve]['pkgs'].has_key(src) or not cves[cve]['pkgs'][src].has_key(rel):
                        # HACK: ignore linux topic branches
                        if src in ['linux-fsl-imx51','linux-mvl-dove','linux-ec2']:
                            continue
                        # HACK: ignore firefox-* packages since we track
                        # xulrunner. These existed only from hardy-karmic.
                        if src in ['firefox-3.0', 'firefox-3.1', 'firefox-3.5']:
                            continue
                        print >>sys.stderr, "USN-%s touches %s in %s with %s (but is not listed in %s)" % (usn, src, rel, cve, filename)
                        continue
                    state, notes = cves[cve]['pkgs'][src][rel]

                    # A CVE is tied to a USN, which means sometimes the CVE
                    # doesn't affect all releases of package, so skip
                    # not-affected without comment
                    if state == 'not-affected':
                        if opt.verbose:
                            print "  %s/%s marked 'not-affected' -- ignoring" % (src,rel)
                        continue

                    #if state == 'pending' and notes == db[usn]['releases'][rel]['sources'][src]['version']:
                    #    # Found aligned pending/released pair
                    #    pass

                    if state not in ['needed','deferred','pending','released','active','needs-triage']:
                        print >>sys.stderr, "USN-%s fixed %s in %s %s/%s (but is marked %s)!?" % (usn, cve, src, db[usn]['releases'][rel]['sources'][src]['version'], rel, state)
                        continue

                    if state != 'released':
                        print >>sys.stderr, "USN-%s fixed %s in %s %s/%s (was %s)" % (usn, cve, src, db[usn]['releases'][rel]['sources'][src]['version'], rel, state)
                        if opt.update:
                            cve_lib.update_state(filename,src,rel,'released',db[usn]['releases'][rel]['sources'][src]['version'])
                    elif opt.debug:
                        print "  %s/%s marked 'released' -- ignoring" % (src,rel)
        else:
            print >>sys.stderr, "USN-%s fixed %s but it is neither active nor retired" % (usn, cve)
