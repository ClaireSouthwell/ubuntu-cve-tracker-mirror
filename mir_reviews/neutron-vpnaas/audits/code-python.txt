Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==
./tools/install_venv_common.py:64:        proc = subprocess.Popen(cmd, cwd=self.root, stdout=stdout)
./rally-jobs/plugins/vpn_utils.py:655:            os.system("sudo ssh-keygen -f /root/.ssh/known_hosts -R"
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:63:    obj = utils.subprocess_popen(cmd, shell=False,
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:135:    # netns exec(/proc/[pid]/ns/net) which is since Linux 3.0,
./doc/source/conf.py:173:html_last_updated_fmt = subprocess.Popen(git_cmd,

== memory_management() ==
(unsupported type 'python')

== files() ==
./tools/check_i18n.py:48:        with open(filename) as f:
./rally-jobs/plugins/vpn_utils.py:211:    with open(local_key_file, 'w') as f:
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_ipsec.py:1239:    # open() is used elsewhere, so we need to inject a mocked open into the
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:63:    obj = utils.subprocess_popen(cmd, shell=False,
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:427:            with open(self.pid_file, 'r') as f:
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:429:                with open('/proc/%s/cmdline' % pid) as cmd_line_file:

== logging() ==
./rally-jobs/plugins/vpn_utils.py:42:    LOG.debug('EXECUTE COMMAND <%s> OVER SSH', cmd)
./rally-jobs/plugins/vpn_utils.py:63:    LOG.debug("CONNECTED TO HOST <%s>", host["ip"])
./rally-jobs/plugins/vpn_utils.py:82:    LOG.debug("CREATING NEW TENANT %s", tenant_name)
./rally-jobs/plugins/vpn_utils.py:110:        LOG.debug("ADDING NEW NETWORK %s", network_name)
./rally-jobs/plugins/vpn_utils.py:125:        LOG.debug("ADDING SUBNET %s", subnet_name)
./rally-jobs/plugins/vpn_utils.py:147:        LOG.debug("ADDING ROUTER %s", router_name)
./rally-jobs/plugins/vpn_utils.py:150:        LOG.debug("[%s]: ADDING ROUTER INTERFACE")
./rally-jobs/plugins/vpn_utils.py:198:    LOG.debug("CREATING A KEYPAIR %s", keypair_name)
./rally-jobs/plugins/vpn_utils.py:234:    LOG.debug("WRITING PRIVATE KEY TO COMPUTE NODE")
./rally-jobs/plugins/vpn_utils.py:259:    LOG.debug("CONNECTED TO HOST <%s>", host["ip"])
./rally-jobs/plugins/vpn_utils.py:279:    LOG.debug("ADDING NEW SECURITY GROUP %s", sec_group_name)
./rally-jobs/plugins/vpn_utils.py:291:    LOG.debug("BOOTING NEW INSTANCE: %s", server_name)
./rally-jobs/plugins/vpn_utils.py:292:    LOG.debug("%s", kwargs["image"])
./rally-jobs/plugins/vpn_utils.py:308:    LOG.debug('WAITING FOR SERVER TO GO ACTIVE')
./rally-jobs/plugins/vpn_utils.py:315:    LOG.debug("SERVER STATUS: %s", server.status)
./rally-jobs/plugins/vpn_utils.py:347:            LOG.debug("CREATING NEW FLOATING IP")
./rally-jobs/plugins/vpn_utils.py:349:        LOG.debug("ASSOCIATING FLOATING IP %s", floating_ip.ip)
./rally-jobs/plugins/vpn_utils.py:362:    LOG.debug("GET NAMESPACES")
./rally-jobs/plugins/vpn_utils.py:365:    LOG.debug("NAMESPACES %s", namespaces)
./rally-jobs/plugins/vpn_utils.py:402:        LOG.debug("PING RESULT %s", ping_result)
./rally-jobs/plugins/vpn_utils.py:420:    LOG.debug("PING %s FROM THE NAMESPACE %s", router_gw_ip, namespace)
./rally-jobs/plugins/vpn_utils.py:437:    LOG.debug("GET THE INTERFACES BY USING 'ip a' FROM THE NAMESPACE %s",
./rally-jobs/plugins/vpn_utils.py:441:    LOG.debug("INTERFACES %s", interfaces)
./rally-jobs/plugins/vpn_utils.py:457:    LOG.debug("START THE TCPDUMP USING 'tcpdump -i %s FROM THE NAMESPACE"
./rally-jobs/plugins/vpn_utils.py:462:    LOG.debug("TCPDUMP %s", tcpdump)
./rally-jobs/plugins/vpn_utils.py:482:    LOG.debug("SSH INTO SERVER %s AND PING THE PEER SERVER %s FROM THE"
./rally-jobs/plugins/vpn_utils.py:503:    LOG.debug("SSH INTO LOCAL SERVER %s AND PING THE PEER SERVER %s",
./rally-jobs/plugins/vpn_utils.py:524:        LOG.debug("DELETING NOVA INSTANCE: %s", server.id)
./rally-jobs/plugins/vpn_utils.py:528:        LOG.debug("WAITING FOR INSTANCE TO GET DELETED")
./rally-jobs/plugins/vpn_utils.py:534:                LOG.debug("DELETING SEC_GROUP: %s", sec_group_id)
./rally-jobs/plugins/vpn_utils.py:557:        LOG.debug("DELETING KEY_PAIR %s", key_pair.name)
./rally-jobs/plugins/vpn_utils.py:572:    LOG.debug("DELETING RALLY ROUTER INTERFACES & GATEWAYS")
./rally-jobs/plugins/vpn_utils.py:583:    LOG.debug("DELETING RALLY ROUTERS")
./rally-jobs/plugins/vpn_utils.py:587:    LOG.debug("DELETING RALLY NETWORKS")
./rally-jobs/plugins/vpn_utils.py:607:    LOG.debug('DELETE TENANTS')
./rally-jobs/plugins/vpn_utils.py:623:    LOG.debug("DELETING RALLY KEY FILES FROM LOCAL MACHINE")
./rally-jobs/plugins/vpn_utils.py:629:        LOG.debug("DELETING RALLY KEY FILES FROM COMPUTE HOSTS")
./rally-jobs/plugins/vpn_utils.py:647:        LOG.debug("DELETES HOSTS FROM THE KNOWNHOSTS FILE")
./rally-jobs/plugins/vpn_base.py:39:            LOG.debug('SETUP RESOURCES')
./rally-jobs/plugins/vpn_base.py:164:        LOG.debug("VERIFY ROUTE EXISTS BETWEEN THE ROUTER GATEWAYS")
./rally-jobs/plugins/vpn_base.py:177:        LOG.debug('CREATING IKE_POLICY')
./rally-jobs/plugins/vpn_base.py:201:        LOG.debug('CREATING IPSEC_POLICY')
./rally-jobs/plugins/vpn_base.py:229:        LOG.debug('CREATING VPN_SERVICE')
./rally-jobs/plugins/vpn_base.py:257:        LOG.debug('CREATING IPSEC_SITE_CONNECTION')
./rally-jobs/plugins/vpn_base.py:322:        LOG.debug('WAIT_FOR_%s_STATUS_CHANGE ', resource[resource_tag]['id'])
./rally-jobs/plugins/vpn_base.py:361:        LOG.debug("VPN SERVICE STATUS %s", vpn_service['vpnservice']['status'])
./rally-jobs/plugins/vpn_base.py:362:        LOG.debug("IPSEC_SITE_CONNECTION STATUS %s",
./rally-jobs/plugins/vpn_base.py:371:        LOG.debug("ASSERTING ACTIVE STATUSES FOR VPN-SERVICES AND "
./rally-jobs/plugins/vpn_base.py:439:        LOG.debug("VERIFY THE VPN CONNECTIVITY")
./rally-jobs/plugins/vpn_base.py:453:        LOG.debug('UPDATE ROUTER')
./rally-jobs/plugins/vpn_base.py:462:            LOG.debug("DELETING IPSEC_SITE_CONNECTION %s",
./rally-jobs/plugins/vpn_base.py:472:            LOG.debug("DELETING VPN_SERVICE %s",
./rally-jobs/plugins/vpn_base.py:481:        LOG.debug("DELETING IPSEC POLICY")
./rally-jobs/plugins/vpn_base.py:490:        LOG.debug('DELETING IKE POLICY')
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_cisco_ipsec.py:159:    def test_create_verification_with_error(self):
./neutron_vpnaas/tests/unit/db/vpn/test_vpn_validator.py:157:                raise socket.gaierror()
./neutron_vpnaas/services/vpn/vpn_service.py:55:                LOG.debug('Loaded VPNaaS device driver: %s', device_driver)
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:61:    LOG.debug("Running command: %s", cmd)
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:76:    LOG.debug(msg)
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:91:        LOG.error(_LE('Incorrect value in %(config)s: %(exc)s'),
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:95:        LOG.error(_LE('Incorrect configuration file: %(config)s'),
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:104:        LOG.error(_LE('Command %(command)s is not executable: '
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:111:        LOG.error(_LE('Unauthorized command: %(cmd)s (no filter matched)'),
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:121:        LOG.error(_LE('No command provided, exiting'))
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:125:        LOG.error(_LE('No mount path provided, exiting'))
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:141:        LOG.error(_LE('Cannot run without netns, exiting'))
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:147:            LOG.debug('%s is not directory', new_path)
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:156:                LOG.error(_LE('Failed to bind-mount '
./neutron_vpnaas/services/vpn/service_drivers/cisco_validator.py:124:        LOG.debug("IPSec connection validated for Cisco CSR")
./neutron_vpnaas/services/vpn/service_drivers/cisco_ipsec.py:107:        LOG.debug('Notify agent at %(topic)s.%(host)s the message '
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:82:        LOG.error(msg)
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:159:    LOG.debug("Reserved new CSR ID %(csr_id)d for %(policy)s "
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:187:        LOG.debug("Mappings for IPSec connection %(conn)s - "
./neutron_vpnaas/services/vpn/service_drivers/__init__.py:99:            LOG.debug('Notify agent at %(topic)s.%(host)s the message '
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:439:                        LOG.error(_LE('Process %(pid)s exists with command '
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:455:            LOG.debug('Removing %(pidfile)s and %(ctlfile)s',
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:466:            LOG.error(_LE('Unable to remove pluto control '
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:89:            LOG.debug('RESPONSE: %s', response.json())
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:96:                LOG.debug("Error response content %s", content)
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:102:            LOG.debug("%(method)s: Request for %(resource)s payload: "
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:109:            LOG.debug("%(method)s Took %(time).2f seconds to process",
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:129:            LOG.error(_LE("%(method)s: Unexpected error for CSR (%(host)s): "
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:135:            LOG.debug("%(method)s: Completed [%(status)s]",
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:150:        LOG.debug("%(auth)s with CSR %(host)s",
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:157:            LOG.debug("Successfully authenticated with CSR %s", self.host)
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:159:        LOG.error(_LE("Failed authentication with CSR %(host)s [%(status)s]"),
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:194:        LOG.error(_LE("%(method)s: Request timeout for CSR(%(host)s)"),
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:122:        LOG.debug("Device driver initialized for %s", node_topic)
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:126:        LOG.debug("Handling VPN service update notification '%s'",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:148:                LOG.debug("Update: Existing connection %s changed", conn_id)
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:155:                    LOG.debug("Update: Connection %s no longer admin down",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:161:                    LOG.debug("Update: Connection %s forced to admin down",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:169:                LOG.debug("Update: Created new connection %s in admin down "
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:174:                LOG.debug("Update: Created new connection %s", conn_id)
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:185:            LOG.debug("Update: Existing VPN service %s detected",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:189:            LOG.debug("Update: New VPN service %s detected", vpn_service_id)
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:200:        LOG.debug("Update: Completed update processing")
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:212:        LOG.debug("Sync updating for %d VPN services", len(services_data))
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:230:        LOG.debug("Mark: %(service)d VPN services and %(conn)d IPSec "
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:252:        LOG.debug("Sweep: Removed %(service)d dirty VPN service%(splural)s "
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:267:        LOG.debug("Report: Collecting status for IPSec connections on VPN "
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:273:                LOG.debug("Connection %s forced down", connection.conn_id)
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:277:                LOG.debug("Connection %(conn)s reported %(status)s",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:282:                LOG.debug("Report: Adding info for IPSec connection %s",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:302:            LOG.debug("Report: Adding info for VPN service %s",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:324:        LOG.debug("Report: Starting status report processing")
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:326:            LOG.debug("Report: Collecting status for VPN service %s",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:334:        LOG.debug("Report: Completed status report processing")
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:413:            LOG.debug("CSR Reports %(tunnel)s status '%(status)s'",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:615:            LOG.debug("%(resource)s %(which)s is configured",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:618:        LOG.error(_LE("Unable to create %(resource)s %(which)s: "
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:641:            LOG.debug("%(resource)s configuration %(which)s was removed",
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:653:            LOG.debug("Performing rollback action %(action)s for "
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:679:        LOG.debug('Creating IPSec connection %s', conn_id)
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:724:        LOG.debug('Deleting IPSec connection %s', conn_id)
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:738:            LOG.error(_LE("Unable to change %(tunnel)s admin state to "
./neutron_vpnaas/services/vpn/device_drivers/vyatta_ipsec.py:79:                LOG.error(_LE('Invalid or incomplete VPN service data: '
./neutron_vpnaas/services/vpn/device_drivers/vyatta_ipsec.py:243:        LOG.debug('STAT: %s', pprint.pformat(stat))
./neutron_vpnaas/services/vpn/device_drivers/vyatta_ipsec.py:269:        LOG.debug('VPN device driver periodic task: grab_vpn_status.')

== environment() ==
./doc/source/conf.py:56:if os.getenv('HUDSON_PUBLISH_DOCS'):

== privileged() ==
./rally-jobs/plugins/vpn_utils.py:212:        os.chmod(local_key_file, stat.S_IREAD | stat.S_IWRITE)

== networking() ==
./tools/subunit-trace.py:67:            self._output.write(text)
./tools/subunit-trace.py:71:                self._output.write('\n')
./tools/subunit-trace.py:80:                self._output.write('%s: %s%s [start]\n' %
./tools/subunit-trace.py:149:            stream.write("\n%s\n%s\n" % (title, ('~' * len(title))))
./tools/subunit-trace.py:153:                stream.write("    %s\n" % line)
./tools/subunit-trace.py:177:        stream.write('{%s} %s [%s] ... FAILED\n' % (
./tools/subunit-trace.py:183:            stream.write('{%s} %s [%s] ... ok\n' % (
./tools/subunit-trace.py:187:            stream.write('{%s} %s ... SKIPPED: %s\n' % (
./tools/subunit-trace.py:190:            stream.write('{%s} %s [%s] ... %s\n' % (
./tools/subunit-trace.py:206:    stream.write("\n==============================\n")
./tools/subunit-trace.py:207:    stream.write("Failed %s tests - output below:" % len(FAILS))
./tools/subunit-trace.py:208:    stream.write("\n==============================\n")
./tools/subunit-trace.py:210:        stream.write("\n%s\n" % f['id'])
./tools/subunit-trace.py:211:        stream.write("%s\n" % ('-' * len(f['id'])))
./tools/subunit-trace.py:213:    stream.write('\n')
./tools/subunit-trace.py:242:    stream.write("\n======\nTotals\n======\n")
./tools/subunit-trace.py:243:    stream.write("Run: %s in %s sec.\n" % (count_tests('status', '.*'),
./tools/subunit-trace.py:245:    stream.write(" - Passed: %s\n" % count_tests('status', 'success'))
./tools/subunit-trace.py:246:    stream.write(" - Skipped: %s\n" % count_tests('status', 'skip'))
./tools/subunit-trace.py:247:    stream.write(" - Failed: %s\n" % count_tests('status', 'fail'))
./tools/subunit-trace.py:251:        stream.write("\n==============\nWorker Balance\n==============\n")
./tools/subunit-trace.py:255:                stream.write(
./tools/subunit-trace.py:260:                stream.write(" - Worker %s (%s tests) => %ss\n" %
./rally-jobs/plugins/vpn_utils.py:49:        client.connect(host["ip"], username=host["username"], pkey=k)
./rally-jobs/plugins/vpn_utils.py:66:        return stdout.read().splitlines()
./rally-jobs/plugins/vpn_utils.py:213:        f.write(keypair.private_key)
./rally-jobs/plugins/vpn_utils.py:244:        transport.connect(
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:79:    sys.stdout.write(msg)
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:88:        rawconfig.read(rootwrap_config)
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:614:    def disconnect(self):
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:630:        self.disconnect()
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:113:    def copy_and_overwrite(self, from_path, to_path):
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:138:        self.copy_and_overwrite(cfg.CONF.strongswan.default_config_area,
./neutron_vpnaas/services/vpn/device_drivers/fedora_strongswan_ipsec.py:78:        self.copy_and_overwrite(cfg.CONF.strongswan.default_config_area,
./neutron_vpnaas/services/vpn/device_drivers/fedora_strongswan_ipsec.py:90:            self.copy_and_overwrite(
./neutron_vpnaas/db/migration/alembic_migrations/env.py:70:    connection = engine.connect()
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:93:    engine = op.get_bind()
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:114:    session = sa.orm.Session(bind=op.get_bind())
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/333dfd6afaa2_populate_vpn_service_table_fields.py:63:    session = sa.orm.Session(bind=engine.connect())
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/333dfd6afaa2_populate_vpn_service_table_fields.py:84:    for_engine = op.get_bind()

== http:// ==
./tools/check_i18n.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./tools/subunit-trace.py:11:#     http://www.apache.org/licenses/LICENSE-2.0
./tools/install_venv.py:13:#         http://www.apache.org/licenses/LICENSE-2.0
./tools/install_venv_common.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./rally-jobs/plugins/vpn_utils.py:7:#      http://www.apache.org/licenses/LICENSE-2.0
./rally-jobs/plugins/test_vpn_tenant_scenario.py:7:#      http://www.apache.org/licenses/LICENSE-2.0
./rally-jobs/plugins/test_vpn_connectivity.py:7:#      http://www.apache.org/licenses/LICENSE-2.0
./rally-jobs/plugins/vpn_base.py:7:#      http://www.apache.org/licenses/LICENSE-2.0
./rally-jobs/plugins/test_vpn_status.py:7:#      http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/test_vpn_service.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/common/test_netns_wrapper.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/service_drivers/test_vyatta_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/service_drivers/test_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/service_drivers/test_cisco_ipsec.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/test_vyatta_vpn_service.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/test_plugin.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_vyatta_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_cisco_csr_rest_client.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_cisco_ipsec.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/db/vpn/test_vpn_db.py:9:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/db/vpn/test_vpn_validator.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/extensions/test_vpnaas.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/extensions/test_vpn_endpoint_groups.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/unit/__init__.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/api/test_vpnaas.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/api/clients.py:9:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/api/base.py:9:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/functional/openswan/test_openswan_driver.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/functional/openswan/__init__.py:5:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/functional/strongswan/test_netns_wrapper.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/functional/strongswan/__init__.py:5:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/functional/strongswan/test_strongswan_driver.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/functional/common/test_scenario.py:5:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/functional/common/test_migrations_sync.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/tests/base.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/vyatta_agent.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/vpn_service.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/common/constants.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:138:    # http://man7.org/linux/man-pages/man7/namespaces.7.html
./neutron_vpnaas/services/vpn/common/topics.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/cisco_validator.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/cisco_ipsec.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/vyatta_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/__init__.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/ipsec_validator.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/service_drivers/base_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/vyatta_vpn_service.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/plugin.py:9:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/vyatta_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/__init__.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/libreswan_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/device_drivers/fedora_strongswan_ipsec.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/services/vpn/agent.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/cmd/eventlet/vyatta_agent.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/cmd/eventlet/__init__.py:5:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/cmd/eventlet/agent.py:5:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/models/head.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/vpn/vpn_validator.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/vpn/vpn_db.py:9:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/vpn/vpn_models.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/env.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/__init__.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/kilo_release.py:5:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/3ea02b2a773e_add_index_tenant_id.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/start_neutron_vpnaas.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/expand/28ee739a7e4b_multiple_local_subnets.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/expand/41b509d10b5e_vpnaas_endpoint_groups.py:8:#         http://www.apache.org/licenses/LICENSE-2.0#
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/56893333aa52_fix_identifier_map_fk.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/2c82e782d734_drop_tenant_id_in_cisco_csr_identifier_.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/333dfd6afaa2_populate_vpn_service_table_fields.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/expand/24f28869838b_add_fields_to_vpn_service_table.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/expand/30018084ed99_initial.py:5:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/extensions/vpnaas.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/extensions/vpn_endpoint_groups.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/_i18n.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/__init__.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/opts.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./neutron_vpnaas/version.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./setup.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./setup.py:21:# solution from: http://bugs.python.org/issue15881#msg170215
./releasenotes/source/conf.py:6:#    http://www.apache.org/licenses/LICENSE-2.0
./doc/source/conf.py:8:#    http://www.apache.org/licenses/LICENSE-2.0

== encryption ==
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_cisco_csr_rest_client.py:30:BASE_URL = 'https://%s:55443/api/v1/'
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_cisco_csr_rest_client.py:31:LOCAL_URL = 'https://localhost:55443/api/v1/'
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_cisco_csr_rest_client.py:234:        interface_re = re.compile('https://localhost:55443/.*/interfaces/'
./neutron_vpnaas/tests/functional/common/test_scenario.py:249:        # https://bugs.launchpad.net/neutron/+bug/1482622
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:30:URL_BASE = 'https://%(host)s/api/v1/%(resource)s'
./neutron_vpnaas/services/vpn/device_drivers/cisco_csr_rest_client.py:178:            url = ('https://%(host)s/api/v1/%(resource)s' %
./neutron_vpnaas/extensions/vpnaas.py:445:        return "https://wiki.openstack.org/Neutron/VPNaaS"

== sql() ==
./neutron_vpnaas/tests/functional/openswan/test_openswan_driver.py:40:            linux_utils.execute(cmd, run_as_root=True)
./neutron_vpnaas/tests/functional/strongswan/test_netns_wrapper.py:43:        output = client_ns.netns.execute(cmd)
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:57:def execute(cmd):
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:129:    # after bind-mount, so we can't use utils.execute(conf.cmd,
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:150:            return_code = execute(['mount', '--bind', new_path, path])
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:159:    return execute(conf.cmd)
./neutron_vpnaas/services/vpn/service_drivers/cisco_ipsec.py:58:        query = context.session.query(vpn_models.VPNService)
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:73:    rows = session.query(table_field).order_by(table_field)
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:107:    qry = session.query(vpn_models.IPsecSiteConnection.id)
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:130:        return session.query(policy_field).filter_by(
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:185:        entry = session.query(IdentifierMap).filter_by(
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:236:        sess_qry = context.session.query(IdentifierMap)
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:392:    def _execute(self, cmd, check_exit_code=True, extra_ok_codes=None):
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:395:        return ip_wrapper.netns.execute(cmd, check_exit_code=check_exit_code,
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:471:        return self._execute([self.binary,
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:518:        routes = self._execute(['ip', 'route', 'get', ip_addr])
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:577:        self._execute(cmd)
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:585:            self._execute([self.binary,
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:595:        self._execute([self.binary,
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:606:            self._execute([self.binary,
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:620:            self._execute([self.binary,
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:631:        self._execute([self.binary,
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:98:    def _execute(self, cmd, check_exit_code=True, extra_ok_codes=None):
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:105:        return ip_wrapper.netns.execute(
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:142:        return self._execute([self.binary, 'status'],
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:157:        self._execute([self.binary, 'reload'])
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:167:        self._execute([self.binary, 'start'])
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:170:            self._execute([self.binary, 'up', ipsec_site_conn['id']])
./neutron_vpnaas/services/vpn/device_drivers/strongswan_ipsec.py:173:        self._execute([self.binary, 'stop'])
./neutron_vpnaas/services/vpn/device_drivers/libreswan_ipsec.py:50:        self._execute(['chown', '--from=%s' % os.getuid(), 'root:root',
./neutron_vpnaas/services/vpn/device_drivers/libreswan_ipsec.py:54:        self._execute([self.binary, '_stackmanager', 'start'])
./neutron_vpnaas/services/vpn/device_drivers/libreswan_ipsec.py:59:            self._execute([self.binary, 'checknss', self.etc_dir])
./neutron_vpnaas/services/vpn/device_drivers/libreswan_ipsec.py:61:            self._execute([self.binary, 'initnss', self.etc_dir])
./neutron_vpnaas/db/vpn/vpn_validator.py:100:        return context.session.query(models_v2.Subnet).filter(
./neutron_vpnaas/db/vpn/vpn_db.py:338:            if context.session.query(vpn_models.IPsecSiteConnection).filter_by(
./neutron_vpnaas/db/vpn/vpn_db.py:355:            if context.session.query(vpn_models.IPsecSiteConnection).filter_by(
./neutron_vpnaas/db/vpn/vpn_db.py:420:            if context.session.query(vpn_models.IPsecSiteConnection).filter_by(
./neutron_vpnaas/db/vpn/vpn_db.py:437:            if context.session.query(vpn_models.IPsecSiteConnection).filter_by(
./neutron_vpnaas/db/vpn/vpn_db.py:506:            if context.session.query(vpn_models.IPsecSiteConnection).filter_by(
./neutron_vpnaas/db/vpn/vpn_db.py:542:            vpnservices = context.session.query(
./neutron_vpnaas/db/vpn/vpn_db.py:551:            query = context.session.query(vpn_models.VPNEndpointGroup)
./neutron_vpnaas/db/vpn/vpn_db.py:623:        query = context.session.query(vpn_models.IPsecSiteConnection)
./neutron_vpnaas/db/vpn/vpn_db.py:647:        query = context.session.query(vpn_models.VPNService)
./neutron_vpnaas/db/vpn/vpn_db.py:658:        query = context.session.query(models_v2.Subnet.id,
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:107:        op.execute(stmt)
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:115:    vpn_services = session.query(vpnservices).filter(
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:137:    ipsec_conns = session.query(ipsec_site_conns).all()
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:139:        peer_cidrs = session.query(ipsecpeercidrs.c.cidr).filter(
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:167:    op.execute(sa_expr.table('ipsecpeercidrs').delete())
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:172:    op.execute(stmt)
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/56893333aa52_fix_identifier_map_fk.py:46:    op.execute(identifier_map.update(values={
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/333dfd6afaa2_populate_vpn_service_table_fields.py:64:    services = session.query(VPNService).all()
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/333dfd6afaa2_populate_vpn_service_table_fields.py:66:        addresses = session.query(IPAllocation.c.ip_address).filter(
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/333dfd6afaa2_populate_vpn_service_table_fields.py:77:            op.execute(VPNService.update().where(
./neutron_vpnaas/tests/unit/db/vpn/test_vpn_validator.py:25:from sqlalchemy.orm import query
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:19:import sqlalchemy as sa
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:20:from sqlalchemy.orm import exc as sql_exc
./neutron_vpnaas/db/vpn/vpn_db.py:31:import sqlalchemy as sa
./neutron_vpnaas/db/vpn/vpn_db.py:32:from sqlalchemy.orm import exc
./neutron_vpnaas/db/vpn/vpn_models.py:21:import sqlalchemy as sa
./neutron_vpnaas/db/vpn/vpn_models.py:22:from sqlalchemy import orm
./neutron_vpnaas/db/migration/alembic_migrations/env.py:18:from oslo_db.sqlalchemy import session
./neutron_vpnaas/db/migration/alembic_migrations/env.py:19:import sqlalchemy as sa
./neutron_vpnaas/db/migration/alembic_migrations/env.py:20:from sqlalchemy import event
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:26:import sqlalchemy as sa
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/contract/2cb4ee992b41_multiple_local_subnets.py:27:from sqlalchemy.sql import expression as sa_expr
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/expand/28ee739a7e4b_multiple_local_subnets.py:25:import sqlalchemy as sa
./neutron_vpnaas/db/migration/alembic_migrations/versions/mitaka/expand/41b509d10b5e_vpnaas_endpoint_groups.py:28:import sqlalchemy as sa
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/56893333aa52_fix_identifier_map_fk.py:24:import sqlalchemy as sa
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/56893333aa52_fix_identifier_map_fk.py:25:from sqlalchemy.sql import column
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/56893333aa52_fix_identifier_map_fk.py:26:from sqlalchemy.sql import expression as expr
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/56893333aa52_fix_identifier_map_fk.py:27:from sqlalchemy.sql import func
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/56893333aa52_fix_identifier_map_fk.py:28:from sqlalchemy.sql import table
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/contract/333dfd6afaa2_populate_vpn_service_table_fields.py:32:import sqlalchemy as sa
./neutron_vpnaas/db/migration/alembic_migrations/versions/liberty/expand/24f28869838b_add_fields_to_vpn_service_table.py:25:import sqlalchemy as sa

== tmp() ==
./rally-jobs/plugins/vpn_base.py:52:            self.local_key_files = ['/tmp/' + x for x in self.remote_key_files]
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_ipsec.py:894:        self.conf.set_override('state_path', '/tmp')
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_ipsec.py:985:        self.conf.set_override('state_path', '/tmp')
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_ipsec.py:1045:        self.conf.set_override('state_path', '/tmp')
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_ipsec.py:1393:        self.conf.set_override('state_path', '/tmp')
./neutron_vpnaas/tests/functional/strongswan/test_strongswan_driver.py:98:        self.conf.set_override('state_path', '/tmp')

== priv_cmds (sudo, gksu, pkexec) ==
./rally-jobs/plugins/vpn_utils.py:363:    cmd = "sudo ip netns"
./rally-jobs/plugins/vpn_utils.py:422:    cmd = "sudo ip netns exec {} ping -w {} -c {} {}".format(
./rally-jobs/plugins/vpn_utils.py:439:    cmd = "sudo ip netns exec {} ip a".format(namespace)
./rally-jobs/plugins/vpn_utils.py:459:    cmd = ("sudo ip netns exec {} timeout 15 tcpdump -n -i {}"
./rally-jobs/plugins/vpn_utils.py:486:    cmd = ("sudo ip netns exec {} ssh -v -o StrictHostKeyChecking=no -o"
./rally-jobs/plugins/vpn_utils.py:631:            cmd = "sudo rm -f {}".format(key)
./rally-jobs/plugins/vpn_utils.py:650:            cmd = ("sudo ssh-keygen -f /root/.ssh/known_hosts -R"
./rally-jobs/plugins/vpn_utils.py:655:            os.system("sudo ssh-keygen -f /root/.ssh/known_hosts -R"
./neutron_vpnaas/services/vpn/common/netns_wrapper.py:128:    # Both sudoers and rootwrap.conf will not exist in the directory /etc

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./tools/subunit-trace.py:159:    # TODO(sdague): ask lifeless why on this?
./neutron_vpnaas/tests/unit/services/vpn/service_drivers/test_cisco_ipsec.py:61:        # TODO(armax): remove this if branch as soon as the ServiceTypeManager
./neutron_vpnaas/tests/unit/services/vpn/device_drivers/test_cisco_ipsec.py:1552:    # TODO(pcm) FUTURE - UTs for update action, when supported.
./neutron_vpnaas/tests/unit/db/vpn/test_vpn_db.py:480:        # TODO(armax): this is far from being a unit test case, as it tests
./neutron_vpnaas/tests/unit/db/vpn/test_vpn_db.py:1645:# TODO(pcm): Put helpers in another module for sharing
./neutron_vpnaas/tests/api/test_vpnaas.py:100:        # TODO(jroovers) This is a temporary workaround to get the tenant_id
./neutron_vpnaas/tests/api/test_vpnaas.py:196:        # TODO(raies): implement logic to update  vpnservice
./neutron_vpnaas/services/vpn/vpn_service.py:35:        # TODO(pc_m): Replace l3_agent argument with config, once none of the
./neutron_vpnaas/services/vpn/service_drivers/cisco_validator.py:85:        # TODO(pcm) Should we check peer_address too?
./neutron_vpnaas/services/vpn/service_drivers/cisco_csr_db.py:154:    TODO(pcm) FUTURE: Once device driver adds support for IKE/IPSec policy
./neutron_vpnaas/services/vpn/service_drivers/base_ipsec.py:161:        # TODO(pcm): Add validator to check that connection's peer address has
./neutron_vpnaas/services/vpn/plugin.py:51:    #TODO(nati) handle ikepolicy and ipsecpolicy update usecase
./neutron_vpnaas/services/vpn/plugin.py:68:        #TODO(nati) get vpnservice when we support service type framework
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:592:        #TODO(nati) fix this when openswan is fixed
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:680:        # TODO(pc_m) Replace vpn_service with config arg, once all driver
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:714:        # TODO(pcm): Use router object method to tell if DVR, when available
./neutron_vpnaas/services/vpn/device_drivers/ipsec.py:733:        # TODO(pcm): Use router object method to tell if DVR, when available
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:104:        # TODO(pc_m): Once all driver implementations no longer need
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:376:        # TODO(pcm) FUTURE - handle sharing of policies
./neutron_vpnaas/services/vpn/device_drivers/cisco_ipsec.py:705:            # TODO(pcm): FUTURE - Do DPD for v1 and handle if >1 connection
./neutron_vpnaas/extensions/vpnaas.py:179:#TODO(nati) add kilobytes when we support it

== unsafe input mechanisms ==
(unsupported type 'python')

