#!/usr/bin/env python
# Copyright (C) 2007,2008 Canonical, Ltd.
# Author: Kees Cook <kees@ubuntu.com>
# License: GPLv3
# Checks the URLs from a given USN publication.
import sys, os, os.path, tempfile, subprocess
import optparse
import cve_lib
# Since urllib2 doesn't support HEAD yet, we'll use curl

config = cve_lib.read_config()

parser = optparse.OptionParser()
parser.add_option("-s", "--show", help="Show URLs that are [missing] (default), [found], [both], or [quiet]", action="store", choices=['missing','found','both','quiet'], default='missing')
parser.add_option("-q", "--quiet", help="Do not report URLs", action="store_const", const='quiet', dest='show')
parser.add_option("-v", "--verbose", help="Report ignored packages", action="store_true")
parser.add_option("-u", "--listurl", help="List URLs to check", action="store_true")
parser.add_option("--db", help="Aim at an alternate USN database", metavar="DATABASE", default=config['usn_db_copy'])
(opt, args) = parser.parse_args()

usn = args[0]
sp = subprocess.Popen([os.path.join(config['usn_tool'],'usn.py'),'--db',opt.db,'--show-urls',usn], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = sp.communicate(None)

pub = []
for url in out.splitlines():
	if url in pub:
		if opt.verbose:
			print >>sys.stderr, "Skipping duplicate URL: %s" % (url)
	else:
		pub.append(url)
count = len(pub)

if not count:
	print >> sys.stderr, "No URLs found to check!"
	print >> sys.stderr, err
	sys.exit(1)

found = 0
missing = False
for url in pub:
	if opt.listurl:
		print url
		continue
	sp = subprocess.Popen(['curl','-SI',url], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out = sp.communicate(input)[0]
	# Curl doesn't set exit code on HEAD 404
	reply = out.splitlines()[0]
	if not 'HTTP/1.1 200 OK' in reply:
		missing = True
		if opt.show == 'missing' or opt.show == 'both':
			print '%s %s' % (url,' '.join(reply.split(' ')[1:]))
	else:
		if opt.show == 'found' or opt.show == 'both':
			print '%s %s' % (url,' '.join(reply.split(' ')[1:]))
		found += 1

if opt.listurl:
	sys.exit(0)

total = len(pub)
print '%.0f%% found (%d/%d)' % (100 * found / total, found, total)

sys.exit(missing)
