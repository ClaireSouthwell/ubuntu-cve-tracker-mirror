#!/usr/bin/env python
# Copyright 2011, Canonical, Ltd.
# Author: Jamie Strandboge <jamie@canonical.com>
# License: GPLv3
#
# Report items for the security team to sponsor. Used for reporting based on
# https://wiki.ubuntu.com/SecurityTeam/SponsorsQueue
#
# $ report-bugs-for-eol

import cve_lib
import optparse
import re
import subprocess
import sys

parser = optparse.OptionParser()
parser.add_option("--debug", help="Verbose processing output", action='store_true')
parser.add_option("--team", help="Find bugs for team", metavar="TEAM", action='store', default='ubuntu-security')

(opt, args) = parser.parse_args()

def debug(s):
    '''Print debug message'''
    if opt.debug:
        print >>sys.stderr, "DEBUG: %s" % (s)

def print_bugs(bugs, status=None, tags=[]):
    '''Output a collection of bugs'''
    keys = bugs.keys()
    keys.sort()
    is_eol_out = []
    is_eol_skipped = []
    for id in keys:
        task = bugs[id]
        tstatus = task.status
        bugid = task.bug.id
        if status:
           if tstatus != status:
               debug("Skipping LP: #%d (%s != %s)" % (bugid, tstatus, status))
               continue

        bug_target_name = task.bug_target_name
        if not ' (' in bug_target_name:
            print >>sys.stderr, "Skipping target name=%s (LP: #%d)" % (bug_target_name, bugid)
            continue

        pkg, target = bug_target_name.split(' (',1)
        target = target.split(')')[0]
        if ' ' in target:
            target, targeted_to = target.split(' ',1)

        if target and target.lower() != 'ubuntu':
            debug('skipping target "%s" (%s) (LP: #%d)' % (target, pkg, bugid))
            continue

        if tstatus in ['Fix Released', 'Invalid', "Won't Fix"]:
            debug('skipping (pkg:%s status:%s LP: #%d)' % (pkg, tstatus, bugid))
            continue

        if not re.match(r'^[a-z0-9][a-z0-9+\.\-]+$', pkg):
            print >>sys.stderr, "Bad package name '%s' (LP: #%d)" % (pkg, bugid)
            continue

        release = "ubuntu"
        if ':' in id:
            release = id.split(':')[1]
        print "https://launchpad.net/bugs/%d %d %s %s %s" % (bugid, bugid, pkg, release, tstatus)

        if tstatus == 'Fix Committed' or pkg.startswith('linux'):
            is_eol_skipped.append("%s:%s:%s" % (bugid, pkg, release))
        else:
            is_eol_out.append("%s:%s:%s" % (bugid, pkg, release))

    return (is_eol_out, is_eol_skipped)

#
# Connect to Launchpad
#
try:
    import lpl_common
except:
    print >>sys.stderr, "lpl_common.py seems to be missing.  Please create a symlink from $UQT/common/lpl_common.py to $UCT/scripts/"
    sys.exit(1)

# Load configuration
cve_lib.read_config()

# API interface
print >>sys.stderr, "Connecting to LP ...",
lp = lpl_common.connect()

# Get authenticated URL fetcher
opener = lpl_common.opener_with_cookie(cve_lib.config["plb_authentication"])
if not opener:
    raise ValueError, "Could not open cookies"

ubuntu = lp.distributions['ubuntu']
debug("Distribution: %s" % ubuntu)
team = lp.people[opt.team]
debug("Team: %s" % team)
print >>sys.stderr, "done"

print >>sys.stderr, "Loading bugs for eol releases (%s)..." % ", ".join(cve_lib.eol_releases),
bugs = {}
# get bugs for a specific series, then for 'Ubuntu' if we haven't already added
# the bug
for rel in cve_lib.eol_releases:
    series = ubuntu.getSeries(name_or_version=rel)
    if series.active: # skip current releases
        continue
    obj = series

    task_collection = obj.searchTasks(bug_subscriber=team, omit_targeted=False)

    for task in task_collection:
        bugid = task.bug.id
        if rel != 'ubuntu' or not bugs.has_key(bugid):
            bugs["%d:%s" % (bugid, rel)] = task
print >>sys.stderr, "done"

(out, skipped) = print_bugs(bugs)
print '''
You can retire these automatically with:
$UQT/responses/security/is-eol %s

The following were skipped:
%s
''' % (" ".join(out), " ".join(skipped))

sys.exit(0)

