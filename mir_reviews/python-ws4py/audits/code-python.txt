Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
(unsupported type 'python')

== files() ==

== logging() ==
./test/test_frame.py:102:    def test_passing_unencoded_string_raises_type_error(self):
./test/autobahn_test_servers.py:102:        def on_message(self, message):
./test/autobahn_test_servers.py:103:            self.write_message(message)
./test/test_messaging.py:12:    def test_bytearray_text_message(self):
./test/test_messaging.py:38:    def test_bytes_text_message(self):
./test/test_messaging.py:64:    def test_unicode_text_message(self):
./test/test_messaging.py:98:    def test_close_control_message(self):
./test/test_messaging.py:107:    def test_ping_control_message(self):
./test/test_messaging.py:114:    def test_pong_control_message(self):
./test/test_stream.py:15:    def test_empty_close_message(self):
./test/test_stream.py:128:    def test_too_large_close_message(self):
./test/test_stream.py:142:    def test_invalid_sized_close_message(self):
./test/test_stream.py:332:    def test_helper_with_unicode_text_message(self):
./test/test_stream.py:334:        m = s.text_message(u'hello there!')
./test/test_stream.py:345:    def test_helper_with_bytes_text_message(self):
./test/test_stream.py:347:        m = s.text_message('hello there!')
./test/test_stream.py:358:    def test_helper_with_binary_message(self):
./test/test_stream.py:361:        m = s.binary_message(msg)
./test/test_stream.py:371:    def test_helper_ping_message(self):
./test/test_stream.py:377:    def test_helper_masked_ping_message(self):
./test/test_stream.py:383:    def test_helper_pong_message(self):
./test/test_stream.py:389:    def test_helper_masked_pong_message(self):
./ws4py/streaming.py:106:    def text_message(self, text):
./ws4py/streaming.py:115:    def binary_message(self, bytes):
./ws4py/streaming.py:125:    def has_message(self):
./ws4py/websocket.py:220:    def received_message(self, message):
./ws4py/websocket.py:296:            logger.debug("WebSocket is already terminated")
./ws4py/websocket.py:360:            logger.debug("Closing message received (%d) '%s'" % (s.closing.code, s.closing.reason))
./ws4py/websocket.py:370:                logger.debug("Error message received (%d) '%s'" % (error.code, error.reason))
./ws4py/websocket.py:377:            self.received_message(s.message)
./ws4py/websocket.py:433:    def received_message(self, message):
./ws4py/client/tornadoclient.py:23:                def received_message(self, m):
./ws4py/client/tornadoclient.py:143:        def received_message(self, m):
./ws4py/client/geventclient.py:61:    def received_message(self, message):
./ws4py/client/threadedclient.py:24:               def received_message(self, m):
./ws4py/client/threadedclient.py:87:        def received_message(self, m):
./ws4py/manager.py:30:        def received_message(self, msg):
./ws4py/async_websocket.py:121:    def received_message(self, message):
./example/echo_gevent_server.py:20:    def received_message(self, m):
./example/echo_cherrypy_server.py:13:    def received_message(self, m):
./example/echo_client.py:19:    def received_message(self, m):
./example/droid_sensor.py:94:        def received_message(self, m):
./example/mocking_data_source.py:46:    def received_message(self, m):
./example/droid_sensor_cherrypy_server.py:9:    def received_message(self, m):

== environment() ==
./ws4py/server/wsgirefserver.py:47:    def setup_environ(self):
./ws4py/server/wsgirefserver.py:53:        SimpleHandler.setup_environ(self)
./ws4py/server/wsgirefserver.py:92:            self.rfile, self.wfile, self.get_stderr(), self.get_environ()

== privileged() ==

== networking() ==
./ws4py/client/__init__.py:85:            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM, 0)
./ws4py/client/__init__.py:91:                                                                            socket.AF_UNSPEC,
./ws4py/client/__init__.py:92:                                                                            socket.SOCK_STREAM,
./ws4py/client/__init__.py:95:                family = socket.AF_INET
./ws4py/client/__init__.py:97:                    family = socket.AF_INET6
./ws4py/client/__init__.py:99:                socktype = socket.SOCK_STREAM
./ws4py/client/__init__.py:107:            if hasattr(socket, 'AF_INET6') and family == socket.AF_INET6 and \
./example/echo_chaussette_server.py:35:                         address_family=socket.AF_UNIX,
./test/test_manager.py:12:    def test_add_and_remove_websocket(self, MockSelectPoller):
./test/test_manager.py:38:    def test_cannot_remove_unregistered_websocket(self, MockSelectPoller):
./test/test_websocket.py:105:    def test_no_bytes_were_read(self):
./test/autobahn_test_servers.py:106:    app.listen(port, address=host)
./ws4py/websocket.py:176:            self._write(self.stream.close(code=code, reason=reason).single(mask=self.stream.always_mask))
./ws4py/websocket.py:232:    def _write(self, b):
./ws4py/websocket.py:261:            self._write(m)
./ws4py/websocket.py:265:            self._write(data)
./ws4py/websocket.py:271:                self._write(message_sender(bytes).fragment(first=first, mask=self.stream.always_mask))
./ws4py/websocket.py:275:            self._write(message_sender(bytes).fragment(last=True, mask=self.stream.always_mask))
./ws4py/websocket.py:386:                self._write(s.pong(ping.data))
./ws4py/client/tornadoclient.py:30:            ws.connect()
./ws4py/client/tornadoclient.py:38:            self.sock = ssl.wrap_socket(self.sock, **self.ssl_options)
./ws4py/client/tornadoclient.py:44:    def connect(self):
./ws4py/client/tornadoclient.py:49:        self.io.connect((self.host, int(self.port)), self.__send_handshake)
./ws4py/client/tornadoclient.py:51:    def _write(self, b):
./ws4py/client/tornadoclient.py:62:        self.io.write(b)
./ws4py/client/tornadoclient.py:70:        self.io.write(escape.utf8(self.handshake_request),
./ws4py/client/tornadoclient.py:153:    ws.connect()
./ws4py/client/geventclient.py:21:          ws.connect()
./ws4py/client/__init__.py:67:           >>> ws.connect()
./ws4py/client/__init__.py:85:            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM, 0)
./ws4py/client/__init__.py:104:            sock = socket.socket(family, socktype, proto)
./ws4py/client/__init__.py:198:            self._write(self.stream.close(code=code, reason=reason).single(mask=True))
./ws4py/client/__init__.py:200:    def connect(self):
./ws4py/client/__init__.py:207:            self.sock = ssl.wrap_socket(self.sock, **self.ssl_options)
./ws4py/client/__init__.py:209:        self.sock.connect(self.bind_addr)
./ws4py/client/__init__.py:211:        self._write(self.handshake_request)
./ws4py/client/threadedclient.py:29:               ws.connect()
./ws4py/client/threadedclient.py:36:        self._th = threading.Thread(target=self.run, name='WebSocketClient')
./ws4py/client/threadedclient.py:95:        ws.connect()
./ws4py/server/wsgiutils.py:79:    def make_websocket(self, sock, protocols, extensions, environ):
./ws4py/server/wsgiutils.py:157:        self.make_websocket(environ['ws4py.socket'],
./ws4py/server/cherrypyserver.py:334:        @cherrypy.tools.websocket(on=False)
./ws4py/server/tulipserver.py:63:                self.writer.write(CRLF.join(response))
./ws4py/server/tulipserver.py:173:        self.writer.write(CRLF.join(response))
./ws4py/server/tulipserver.py:174:        yield from self.handle_websocket()
./ws4py/server/tulipserver.py:177:    def handle_websocket(self):
./ws4py/manager.py:36:    client.connect()
./ws4py/async_websocket.py:89:    def _write(self, data):
./ws4py/async_websocket.py:95:            self.proto.writer.write(data)
./ws4py/async_websocket.py:112:                data = yield from reader.read(self.reading_buffer_size)
./example/echo_client.py:28:        ws.connect()
./example/droid_sensor.py:54:        self.client.connect()
./example/echo_gevent_client.py:9:    ws.connect()
./test/test_cherrypy.py:8:import cherrypy
./test/test_cherrypy.py:9:from ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool
./test/autobahn_test_servers.py:8:    import cherrypy
./test/autobahn_test_servers.py:10:    from ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool
./test/autobahn_test_servers.py:115:    from twisted.internet import reactor
./test/autobahn_test_servers.py:116:    from autobahn.twisted.websocket import WebSocketServerProtocol, \
./ws4py/server/cherrypyserver.py:39:    import cherrypy
./ws4py/server/cherrypyserver.py:40:    from ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool
./ws4py/server/cherrypyserver.py:69:import cherrypy
./ws4py/server/cherrypyserver.py:70:from cherrypy import Tool
./ws4py/server/cherrypyserver.py:71:from cherrypy.process import plugins
./ws4py/server/cherrypyserver.py:72:from cherrypy.wsgiserver import HTTPConnection, HTTPRequest
./ws4py/server/wsgirefserver.py:14:    from wsgiref.simple_server import make_server
./ws4py/server/wsgirefserver.py:16:    from ws4py.server.wsgirefserver import WSGIServer, WebSocketWSGIRequestHandler
./ws4py/server/wsgirefserver.py:17:    from ws4py.server.wsgiutils import WebSocketWSGIApplication
./ws4py/server/wsgirefserver.py:30:from wsgiref.handlers import SimpleHandler
./ws4py/server/wsgirefserver.py:31:from wsgiref.simple_server import WSGIRequestHandler, WSGIServer as _WSGIServer
./ws4py/server/wsgirefserver.py:32:from wsgiref import util
./ws4py/server/wsgirefserver.py:38:from ws4py.server.wsgiutils import WebSocketWSGIApplication
./ws4py/server/wsgirefserver.py:137:    from wsgiref.simple_server import make_server
./ws4py/server/geventserver.py:12:    from ws4py.server.wsgiutils import WebSocketWSGIApplication
./ws4py/server/geventserver.py:22:from gevent.pywsgi import WSGIHandler, WSGIServer as _WSGIServer
./ws4py/server/geventserver.py:26:from ws4py.server.wsgiutils import WebSocketWSGIApplication
./example/echo_gevent_server.py:9:import gevent.pywsgi
./example/echo_cherrypy_server.py:6:import cherrypy
./example/echo_cherrypy_server.py:8:from ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool
./example/droid_sensor_cherrypy_server.py:3:import cherrypy
./example/droid_sensor_cherrypy_server.py:5:from ws4py.server.cherrypyserver import WebSocketPlugin, WebSocketTool

== http:// ==
./ws4py/utf8validator.py:16:##       http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
./ws4py/utf8validator.py:22:##      http://www.apache.org/licenses/LICENSE-2.0
./ws4py/utf8validator.py:38:    Bjoern Hoehrmann (http://bjoern.hoehrmann.de/utf-8/decoder/dfa/).
./ws4py/websocket.py:172:        .. seealso:: Defined Status Codes http://tools.ietf.org/html/rfc6455#section-7.4.1
./ws4py/websocket.py:184:        .. seealso:: Defined Status Codes http://tools.ietf.org/html/rfc6455#section-7.4.1
./ws4py/framing.py:36:        .. seealso:: Data Framing http://tools.ietf.org/html/rfc6455#section-5.2
./example/droid_sensor.py:8: 1. Install SL4A http://code.google.com/p/android-scripting/
./example/droid_sensor.py:17:       http://code.google.com/p/android-scripting/wiki/RemoteControl
./example/droid_sensor.py:26:    http://localhost:9000/
./example/droid_sensor.py:98:    aps = AirPongSensor(host='http://192.168.0.10:9000/ws')
./example/droid_sensor_cherrypy_server.py:22:      <script type='application/javascript' src='http://code.jquery.com/jquery-1.9.1.min.js'></script>
./example/droid_sensor_cherrypy_server.py:23:      <script type="application/javascript" src="http://calebevans.me/projects/jcanvas/resources/jcanvas/jcanvas.min.js"> </script>
./example/droid_sensor_cherrypy_server.py:52:      <script type='application/javascript' src='http://code.jquery.com/jquery-1.9.1.min.js'></script>

== encryption ==
./setup.py:36:      url = "https://github.com/Lawouach/WebSocket-for-Python",
./setup.py:37:      download_url = "https://pypi.python.org/pypi/ws4py",
./ws4py/client/__init__.py:122:    # Adpated from: https://github.com/liris/websocket-client/blob/master/websocket.py#L105
./ws4py/client/__init__.py:143:        # See: https://github.com/Lawouach/WebSocket-for-Python/issues/59
./ws4py/server/cherrypyserver.py:338:          <script type='application/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js'> </script>
./example/echo_gevent_server.py:83:        <script type='application/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js'></script>
./example/echo_cherrypy_server.py:29:      <script type='application/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js'></script>

== sql() ==

== tmp() ==
./ws4py/client/__init__.py:56:           >>> ws = WebSocketBaseClient('ws+unix:///tmp/my.sock')
./ws4py/client/__init__.py:65:           >>> ws = WebSocketBaseClient('ws+unix:///tmp/my.sock')

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./test/test_cherrypy.py:91:        # TODO: Implement a fake poller so that works...
./ws4py/framing.py:25:           >>> test_mask = 'XXXXXX' # perhaps from os.urandom(4)

== unsafe input mechanisms ==
(unsupported type 'python')

