#!/usr/bin/python
# Copyright 2007 Canonical, Ltd.  Kees Cook <kees@ubuntu.com>
# License: GPL
#
# Fetch the USN database and pass it as the first argument
#  wget http://people.ubuntu.com/~ubuntu-security/usn/database.pickle
#  ./scripts/sync-from-usns.py database.pickle
#
import cPickle, sys, os, os.path, cve_lib, optparse

parser = optparse.OptionParser()
parser.add_option("-u", "--update", dest="update", help="Update CVEs with released package versions", action='store_true')
(opt, args) = parser.parse_args()

def load_database(filename):
    filename = os.path.expanduser(filename)
    if not os.path.isfile(filename):
        return {}
    file = open(filename)
    database = cPickle.load(file)
    file.close()
    return database

cves = dict()

db = load_database(sys.argv[1])

reverted = dict()
if os.path.exists('reverted-CVEs.txt'):
    for line in file('reverted-CVEs.txt').readlines():
        elements = line.rstrip().split(' ')
        usn = elements.pop(0)
        reverted.setdefault(usn,set())
        for cve in elements:
            reverted[usn].add(cve)
        
for usn in db:
    if not db[usn].has_key('cves'):
        continue
    for cve in db[usn]['cves']:
        if not cve.startswith('CVE-'):
            continue
        # Skip checking CVEs that were reverted for a given USN
        if reverted.has_key(usn) and cve in reverted[usn]:
            continue
        filename = 'active/%s' % (cve)
        if os.path.exists(filename):
            if not cves.has_key(cve):
                ret, data = cve_lib.load_cve(filename)
                if ret != cve_lib.EXIT_OKAY:
                    print >>sys.stderr, "Could not load %s" % (filename)
                    continue
                cves.setdefault(cve,data)

            for rel in db[usn]['releases']:
                if not db[usn]['releases'][rel].has_key('sources'):
                    #print >>sys.stderr, "Broken USN: %s (no sources for %s?!)" % (usn, rel)
                    continue
                for src in db[usn]['releases'][rel]['sources']:
                    if not cves[cve]['pkgs'].has_key(src) or not cves[cve]['pkgs'][src].has_key(rel):
                        print >>sys.stderr, "USN-%s touches %s in %s with %s (but is not listed in %s)" % (usn, src, rel, cve, filename)
                        continue
                    state, notes = cves[cve]['pkgs'][src][rel]
                    if state == 'pending' and notes == db[usn]['releases'][rel]['sources'][src]['version']:
                        # Found aligned pending/released pair
                        pass

                    if state not in ['needed','deferred','pending','released']:
                        print >>sys.stderr, "USN-%s fixed %s in %s %s/%s (but is marked %s)!?" % (usn, cve, src, db[usn]['releases'][rel]['sources'][src]['version'], rel, state)
                        continue

                    if state != 'released':
                        print >>sys.stderr, "USN-%s fixed %s in %s %s/%s (was %s)" % (usn, cve, src, db[usn]['releases'][rel]['sources'][src]['version'], rel, state)
                        if opt.update:
                            cve_lib.update_state(filename,src,rel,'released',db[usn]['releases'][rel]['sources'][src]['version'])
