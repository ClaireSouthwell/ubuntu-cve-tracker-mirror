#!/usr/bin/env python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2008 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# ./scripts/report-lifetime.py hardy
# ./scripts/report-lifetime.py hardy | cut -d" " -f2 | sort | uniq -c | sort -n | awk '{print $2 " " $1}' | sort -n > age.data

import os
import re
import sys
import optparse, datetime
import cve_lib, usn_lib

import source_map
source_map = source_map.load()
releases = cve_lib.releases

parser = optparse.OptionParser()
parser.add_option("-S", "--skip-devel", help="Show only those CVEs *not* in the current devel release", action="store_true")
parser.add_option("-D", "--only-devel", help="Show only those CVEs in the current devel release", action="store_true")
parser.add_option("--db", help="Specify the USN database to load", metavar="FILENAME", default="database.pickle")
parser.add_option("-m", "--only-supported", help="Show only those CVEs that are supported", action="store_true")
parser.add_option("-t", "--totals", help="Display totals", action="store_true")
parser.add_option("-L", "--linux", help="Perform 'linux' package name replacements", action="store_true")
parser.add_option("-p", "--packages", help="Report only on the given packages", action="append", type="string")
parser.add_option("-X", "--exclude", help="Ignore specified packages", action="append", type="string")
parser.add_option("-d", "--debug", help="Report debug information while loading", action="store_true")
(opt, args) = parser.parse_args()

db = usn_lib.load_database(opt.db)

releases = cve_lib.releases
for eol in cve_lib.eol_releases:
    if eol in releases:
        releases.remove(eol)
if opt.skip_devel:
    releases.remove(cve_lib.devel_release)

if opt.only_devel:
    releases = [cve_lib.devel_release]

info = dict()

release = sys.argv[1]
if release not in releases:
    raise ValueError, "'%s' must be one of '%s'" % ("', '".join(releases))

def cve_age(open_date, close_stamp):
    if open_date == 'unknown' or len(open_date)==0:
        return "unknown"
    open_obj = datetime.datetime.strptime(open_date,"%Y-%m-%d").date()
    close_obj = datetime.date.fromtimestamp(int(close_stamp))
    delta = close_obj - open_obj
    return delta.days

fixed = []
for usn in sorted(db.keys()):
    if not db[usn].has_key('cves'):
        continue
    for cve in db[usn]['cves']:
        if not cve.startswith('CVE-'):
            continue

        if db[usn]['releases'].has_key(release):
            # Load CVE if it isn't already cached
            if not info.has_key(cve):
                info.setdefault(cve, cve_lib.load_cve(cve_lib.find_cve(cve)))

            fixed.append([cve, cve_age(info[cve]['PublicDate'], db[usn]['timestamp'])])

for i in range(0, len(fixed)):
    print fixed[i][0], fixed[i][1]
