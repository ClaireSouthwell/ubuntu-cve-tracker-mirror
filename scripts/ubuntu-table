#!/usr/bin/env python
import os, re, sys
import optparse

import source_map
source_map = source_map.load()

releases = ['dapper', 'edgy', 'feisty', 'gutsy']

parser = optparse.OptionParser()
parser.add_option("-s", "--supported", help="Mark those CVEs that have packages officially supported by Canonical", action="store_true")
parser.add_option("-t", "--untriaged", help="Show only those CVEs do not have a Priority set", action="store_true")
parser.add_option("-S", "--skip-devel", help="Show only those CVEs not in the current devel release", action="store_true")
#parser.add_option("-q", "--quiet", help="Do not report URLs", action="store_const", const='quiet', dest='show')
#parser.add_option("-v", "--verbose", help="Report ignored packages", action="store_true")
#parser.add_option("-u", "--listurl", help="List URLs to check", action="store_true")
#parser.add_option("-l", "--listpath", help="List local paths", action="store_true")
(opt, args) = parser.parse_args()

if not opt.skip_devel:
    releases += ['devel']

cves = [elem for elem in os.listdir('./active') if re.match('^CVE-\d+-\d+$',elem)]

uems = []
if os.path.islink('./embargoed'):
    uems = [elem for elem in os.listdir('./embargoed') if re.match('^[\w-]*$',elem)]
    cves = cves + uems

table = dict()
priority = dict()
for cve in cves:
    table.setdefault(cve, dict())
    priority.setdefault(cve, 'untriaged')
    cvedir = "./active"
    if cve in uems:
        cvedir = "./embargoed"
    text = file(os.path.join(cvedir, cve)).read()
    for status in re.finditer('^Priority:[ \t]*([^ \n]+)', text, re.MULTILINE):
        priority[cve] = status.group(1)
    for status in re.finditer('^([^\n_]+)_([^:]+):[ \t]*([^ \n]*)', text, re.MULTILINE):
        rel = status.group(1)
        pkg = status.group(2)
        state = status.group(3)
        #print '> %s %s %s' % (rel, pkg, state)
        table[cve].setdefault(pkg,dict())
        table[cve][pkg].setdefault(rel,"needs-triage")
        if state != '':
            table[cve][pkg][rel] = state

prefix = '%-35s'
format = '%14s'
print prefix % ' ',
for rel in releases:
    print format % rel,
print

for cve in sorted(cves):
    if not table.has_key(cve):
        print >>sys.stderr, 'triage: %s' % (cve)
        continue
    if opt.untriaged and priority[cve] in ('unimportant','low','medium','high','critical'):
        continue
    cve_needed = False
    for pkg, state in table[cve].iteritems():
        needed = False
        released = False
        supported = False
        commercial = False
        action_needed = False
        mark = dict()
        for rel in releases:
            release = rel
            if release == 'devel':
                release = 'hardy'

            mark.setdefault(rel,"")

            if not table[cve][pkg].has_key(rel):
                table[cve][pkg].setdefault(rel,'-unlisted-')

            if not table[cve][pkg][rel] in ('N/A', 'DNE', 'ignored', 'not-affected', '-unlisted-', 'needs-triage', 'needed', 'deferred', 'pending', 'released'):
                print >>sys.stderr, '%s %s %s: bad state "%s"' % (cve, pkg, rel, table[cve][pkg][rel])
                continue
    
            if table[cve][pkg][rel] in ('released'):
                released = True

            if table[cve][pkg][rel] in ('needed','deferred','pending','needs-triage'):
                needed = True
                action_needed = True
                if source_map[release].has_key(pkg) and (source_map[release][pkg]['section'] == 'main' or source_map[release][pkg]['section'] == 'restricted'):
                    supported = True
                    if opt.supported:
                        mark[rel] = "*"
            if source_map[release].has_key(pkg) and source_map[release][pkg]['pocket'] == 'commercial':
                #print >>sys.stderr, "%s (%s) is commercial" % (pkg,release)
                commercial = True

        if action_needed:
            print prefix % ('%s %s:' % (cve,pkg)), 
            for rel in releases:
                print format % ('%s%s' % (table[cve][pkg][rel],mark[rel])),
            if needed and released:
                print '[out of sync]',
            if opt.supported:
                if commercial:
                    print 'COMMERCIAL',
                elif supported:
                    print 'SUPPORTED',
            if cve in uems:
                print 'EMBARGOED',
            # Priority needs to remain the last item in the list for other
            # scripts that parse ubuntu-table output.
            print priority[cve],
            print
            cve_needed = True

    if not cve_needed and not opt.skip_devel and not cve in uems:
        print >>sys.stderr, 'retire: %s' % (cve)
