#!/usr/bin/env python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2008 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import os, re, sys
import optparse
import cve_lib
from urllib import quote
from cgi import escape

import source_map
source_map = source_map.load()
releases = cve_lib.releases

def htmlTableHeader():
    header = '<tr><th>CVE</th><th>Package</th>'
    for rel in releases:
        name = rel
        header += "<th>%s</th>" % (name.capitalize())
    header += '<th>Links</th><th>Notes</th></tr>'
    return header

parser = optparse.OptionParser()
parser.add_option("-H", "--html", help="Output html", action="store_true")
parser.add_option("-s", "--supported", help="Mark those CVEs that have packages officially supported by Canonical", action="store_true")
parser.add_option("-t", "--untriaged", help="Show only those CVEs do not have a Priority set", action="store_true")
parser.add_option("-S", "--skip-devel", help="Show only those CVEs *not* in the current devel release", action="store_true")
parser.add_option("-D", "--only-devel", help="Show only those CVEs in the current devel release", action="store_true")
parser.add_option("-N", "--no-retired", help="Don't report retireable CVEs", action="store_true")
parser.add_option("-p", "--packages", help="Report only on the given packages (comma separated)", action="append", type="string")
parser.add_option("-L", "--linux", help="Perform 'linux' package name replacements", action="store_true")
(opt, args) = parser.parse_args()

# retirement processes cannot be done safely when limiting by package
if opt.packages:
    opt.no_retired = True

if opt.skip_devel:
    releases.remove(cve_lib.devel_release)

if opt.only_devel:
    releases = [cve_lib.devel_release]

for eol in cve_lib.eol_releases:
    if eol in releases:
        releases.remove(eol)

(cves, uems) = cve_lib.get_cve_list()
(table, priority, cves) = cve_lib.load_all(cves, uems, opt)

if opt.html:
    print "<table>"
    print htmlTableHeader()
else:
    prefix = '%-35s'
    format = '%14s'
    print prefix % ' ',
    for rel in releases:
        print format % rel,
    print

for cve in sorted(cves):
    if not table.has_key(cve):
        print >>sys.stderr, 'triage: %s' % (cve)
        continue
    if opt.untriaged and priority[cve] in ['negligible','low','medium','high','critical']:
        continue
    cve_needed = False
    for pkg in sorted(table[cve].keys()):
        needed = False
        released = False
        supported = False
        partner = False
        action_needed = False
        mark = dict()
        for rel in releases:
            release = rel

            mark.setdefault(rel,"")

            # Find any unlisted items and decide if they are DNE or needs-triage
            if not table[cve][pkg].has_key(rel):
                table[cve][pkg].setdefault(rel,'needs-triage')
                if not source_map[release].has_key(pkg):
                    table[cve][pkg][rel] = 'DNE'

            if not table[cve][pkg][rel] in ['N/A', 'DNE', 'active', 'ignored', 'not-affected', 'needs-triage', 'needed', 'deferred', 'pending', 'released']:
                print >>sys.stderr, '%s %s %s: bad state "%s"' % (cve, pkg, rel, table[cve][pkg][rel])
                continue

            if table[cve][pkg][rel] in ['released']:
                released = True

            if table[cve][pkg][rel] in ['needed','deferred','pending','needs-triage','active']:
                needed = True
                action_needed = True
                if cve_lib.is_supported(source_map, pkg, releases):
                    supported = True
                    if opt.supported:
                        mark[rel] = "*"
            if cve_lib.is_partner(source_map, pkg, releases):
                partner = True

        if action_needed:
            if opt.html:
                show_priority = priority[cve]['default']
                if priority[cve].has_key(pkg):
                    show_priority = priority[cve][pkg]
                print '<tr class="%s">' % (quote(show_priority)),
                print '<td class="cve"><a href="%s/%s.html">%s</a></td>' % (quote(cve.split('-')[1]), quote(cve), escape(cve)),

                # this rigamorole is to add 'pkgpending' to the source package
                # column *only* if all releases are 'pending' (so we can still
                # see the vulnerability priority)
                numpending = 0
                for rel in releases:
                    if table[cve][pkg][rel] == "pending":
                        numpending += 1

                pkgclass = 'pkg'
                if numpending == len(releases):
                    pkgclass += 'pending'

                print '<td class="%s"><a href="https://launchpad.net/ubuntu/+source/%s">%s</a></td>' % (pkgclass, quote(pkg), escape(pkg)),

                for rel in releases:
                    pkg_status = table[cve][pkg][rel]
                    if table[cve][pkg][rel] == 'active':
                        pkg_status = 'needed'
                    print '<td class="%s">%s%s</td>' % (quote(pkg_status),escape(pkg_status),escape(mark[rel])),
                print '<td style="font-size: small;"><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=%s">Mitre</a> <a href="https://launchpad.net/bugs/cve/%s">LP</a> <a href="http://security-tracker.debian.net/tracker/%s">Debian</a></td>' % (quote(cve), quote(cve), quote(cve)),
                print '<td>',
                if opt.supported:
                    if partner:
                        print '<p>PARTNER</p>',
                    elif supported:
                        print '<p>SUPPORTED</p>',
                if cve in uems:
                    print '<p>EMBARGOED</p>',
                print '</td>',
                print '</tr>'
            else:
                print prefix % ('%s %s:' % (cve,pkg)), 
                for rel in releases:
                    pkg_status = table[cve][pkg][rel]
                    if table[cve][pkg][rel] == 'active':
                        pkg_status = 'needed'
                    print format % ('%s%s' % (pkg_status,mark[rel])),
                if needed and released:
                    print '[out of sync]',
                if opt.supported:
                    if partner:
                        print 'PARTNER',
                    elif supported:
                        print 'SUPPORTED',
                if cve in uems:
                    print 'EMBARGOED',
                # Priority needs to remain the last item in the list for other
                # scripts that parse ubuntu-table output.
                if priority[cve].has_key(pkg):
                    print priority[cve][pkg],
                else:
                    print priority[cve]['default'],
                print
            cve_needed = True

    if not opt.no_retired and not cve_needed and not opt.skip_devel and not cve in uems:
        print >>sys.stderr, 'retire: %s' % (cve)

if opt.html:
    print "</table>"
