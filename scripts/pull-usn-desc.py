#!/usr/bin/env python
# Dumps the Ubuntu-Descriptions in a form suitable for a USN announcement
# Copyright (C) 2008-2011 Canonical, Ltd.
# Author: Kees Cook <kees@ubuntu.com>
# License: GPLv3
import sys, os, optparse
import textwrap
import cve_lib

basedir = os.path.join(os.path.dirname(sys.argv[0]), '..')

opter = optparse.OptionParser()
opter.add_option("--prioritize", help="Display 'critical' and 'high' first", action='store_true')
opter.add_option("--cve", metavar="CVE-YYYY-NNNN", help="Request a given CVE's description or template", action='append', default=[])
(opt, args) = opter.parse_args()

cves = dict()
descriptions = dict()
found = []

empty = set()
for cve in opt.cve + args:
    if cve.endswith(','):
        cve = cve[:-1]
    filename = os.path.join(basedir, cve_lib.active_dir, cve)
    if os.path.exists(filename):
        cves[cve] = cve_lib.load_cve(filename)
        chunks = cves[cve]

        desc = chunks['Ubuntu-Description'].strip()
        if len(desc) == 0:
            disc = ''
            if chunks.has_key('Discovered-by'):
                disc = chunks['Discovered-by'].strip()
            desc = 'XXX-FIXME-XXX [' + chunks['Description'].strip() + ']'
            if len(disc):
                desc = '%s:%s' % (disc,desc)
        desc = desc.replace('\n',' ').replace('   ',' ').replace('  ',' ')
        if len(desc) == 0:
            desc = "XXX-FIXME-%s-HAS-EMPTY-DESCRIPTION-XXX" % (cve)
    else:
        desc = "XXX-FIXME-%s-NOT-KNOWN-TO-TRACKER-XXX" % (cve)

    descriptions[cve] = desc
    found.append(cve)

def _cve_sort(a, b):
    if opt.prioritize:
        a_priority = cves.get(a, {'Priority':'unknown'})['Priority']
        b_priority = cves.get(b, {'Priority':'unknown'})['Priority']
        if a_priority == 'critical':
            return -1
        if b_priority == 'critical':
            return 1
        if a_priority == 'high':
            return -1
        if b_priority == 'high':
            return 1
    return cmp(a, b)


reported = set()
for cve in sorted(found, cmp=_cve_sort):
    if cve in reported:
        continue

    # Merge identical descriptions
    identical = []
    desc = descriptions[cve]
    for seen in sorted(descriptions):
        if descriptions[seen] == desc:
            identical.append(seen)
            reported.add(seen)

    if len(identical) != len(found):
        desc += " (%s)" % (", ".join(identical))

    desc = desc.encode("utf-8")
    print
    print textwrap.fill(desc,75)
