#!/usr/bin/env python
# Copyright 2007-2008, Canonical, Ltd.
# Author: Kees Cook <kees@ubuntu.com>
# License: GPLv3
#
# Extract list of changes file links from a given LP name, pkg, version
import sys, time, os.path
import urllib2, cookielib
import libxml2
import optparse
from launchpadbugs import http_connection

#cookiejar = cookielib.MozillaCookieJar()
#cookiejar.load(os.path.expanduser('~/.lpcookie.txt'))
#cookie_processor = urllib2.HTTPCookieProcessor(cookiejar=cookiejar)
cookie_processor = http_connection.LPCookieProcessor()
cookie_file = os.path.expanduser('~/.cookies')
try:
    cookie_file = os.readlink(cookie_file)
except:
    pass
cookie_processor.load_file(cookie_file)
opener = urllib2.build_opener(cookie_processor)

# slience parse warnings (from launchpad-python-bugs)
def noerr(ctx, str):
    pass
libxml2.registerErrorHandler(noerr, None)

def xmlurl(url):
    # Get the HTML
    try:
        doc = opener.open(url).read()
    except:
        print >>sys.stderr, "Failed: %s" % (url)
        raise

    # Parse into XML tree
    return libxml2.htmlParseDoc(doc,None)


parser = optparse.OptionParser()
parser.add_option("--dsc", help="Fetch source .dsc file too", action='store_true')
(opt, args) = parser.parse_args()

try:
    group = args.pop(0)
    src = args.pop(0)
except:
    print "Usage: %s LP_GROUP SRCPKG VERSION..." % (sys.argv[0])
    sys.exit(1)


base_url = 'https://edge.launchpad.net'
ppa_url = '%s/~%s/+archive' % (base_url, group)
ppa_xml = xmlurl(ppa_url)
try:
    packages_list = ppa_xml.xpathEval("//table[@id='packages_list']")[0]
except:
    print >>sys.stderr, "Failed:\n" + ppa_xml.content
    raise

for ver in args:
    src_changes = packages_list.xpathEval('//a[contains(@href,"/%s_%s_source.changes")]' % (src, ver))[0].prop('href')
    print src_changes

    for build_a in packages_list.xpathEval('//tr[contains(@id,"pub")]/td/pre[@id="%s_%s"]/../ul/li/a[contains(@href,"/+archive/+build/")]' % (src, ver)):
        build_url = build_a.prop('href')
        if build_url.startswith('/'):
            build_url = base_url + build_url
        build_xml = xmlurl(build_url)

        changes_url = build_xml.xpathEval('//a[contains(@href,"/%s_%s_")]' % (src, ver))[0].prop('href')
        print changes_url

    if opt.dsc:
        dsc_url = packages_list.xpathEval('//a[contains(@href,"/%s_%s.dsc")]' % (src, ver))[0].prop('href')
        print dsc_url
