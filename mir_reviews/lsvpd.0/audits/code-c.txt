Running: /home/sarnold/bin/audit-code.sh -c C .
Scanning '.'
== subprocess_spawned() ==

== memory_management() ==
./src/internal/sys_interface/rtascollector.cpp:237:			memcpy(buf, current->buf, current->size);
./src/internal/sys_interface/fswalk.cpp:233:            strcpy(file_path, path);
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:835:       if (-1 != sprintf(name, "/tmp/node-%d-%d-%d",
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:852:            if (-1 != sprintf(name, "/tmp/node-%d-%d-%d",
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:1155:			memcpy(vendor, &buffer[8], &buffer[j] - &buffer[8]);
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:1165:			memcpy(model, &buffer[16], &buffer[j] - &buffer[16]);
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:1166:			memcpy(firmware, &buffer[32], 4);
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:1419:		strcpy(ac, "Z0");
./src/internal/sys_interface/devicetreecollector.cpp:343:		memcpy(*fruName, ptr, dlen);
./src/internal/sys_interface/devicetreecollector.cpp:452:			memcpy( val, buf, length );
./src/internal/sys_interface/devicetreecollector.cpp:1212:			memcpy( val, data, recordSize );
./src/output/lsvpd.cpp:544:			vpd = new VpdRetriever( env, db );
./src/output/lsvpd.cpp:556:			vpd = new VpdRetriever( );
./src/output/lsvio.cpp:353:			vpd = new VpdRetriever( env, db );
./src/output/lsvio.cpp:371:			vpd = new VpdRetriever( );
./src/output/lsmcode.cpp:447:			vpd = new VpdRetriever( env, db );
./src/output/lsmcode.cpp:465:			vpd = new VpdRetriever( );
./src/output/lscfg.cpp:586:		tmp = new model_conv;
./src/output/lscfg.cpp:866:			vpd = new VpdRetriever( env, db );
./src/output/lscfg.cpp:878:			vpd = new VpdRetriever( );
./src/internal/updater.cpp:210:			char * buffer = new char[ st.st_size + 1 ];
./src/internal/updater.cpp:400:	db = new VpdDbEnv( env, file, false );
./src/internal/sys_interface/gatherer.cpp:77:		DeviceTreeCollector * devTree = new DeviceTreeCollector( );
./src/internal/sys_interface/gatherer.cpp:90:		ProcCollector * proc = new ProcCollector( );
./src/internal/sys_interface/gatherer.cpp:151:		Component* root = new Component( );
./src/internal/sys_interface/gatherer.cpp:153:		System* ret = new System( );
./src/internal/sys_interface/gatherer.cpp:386:		Component* root = new Component( );
./src/internal/sys_interface/gatherer.cpp:387:		System* ret = new System( );
./src/internal/sys_interface/sysfstreecollector.cpp:82:			mPciTable = new DeviceLookup( id );
./src/internal/sys_interface/sysfstreecollector.cpp:96:			mUsbTable = new DeviceLookup( id );
./src/internal/sys_interface/sysfstreecollector.cpp:508:		fillMe = new Component();
./src/internal/sys_interface/rtascollector.cpp:147:		list = new rtas_buf_element;
./src/internal/sys_interface/rtascollector.cpp:174:				current->next = new rtas_buf_element;
./src/internal/sys_interface/rtascollector.cpp:198:				list = new rtas_buf_element;
./src/internal/sys_interface/rtascollector.cpp:230:		*data = new char[ size ];
./src/internal/sys_interface/icollector.cpp:81:			strBuf = new char [ info.st_size + 1 ];
./src/internal/sys_interface/icollector.cpp:122:		buf = *data = new char [ info.st_size ];
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:424:	        char * ret = new char[ len*2+1 ];
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:441:        char * ret = new char[ (sizeof(char) * str_t.length() * 2) + 1 ];
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:1067:			tmp = new scsi_template;
./src/internal/sys_interface/devicetreecollector.cpp:107:			Source *src = new Source("ibm,fw-adapter-name", "",
./src/internal/sys_interface/devicetreecollector.cpp:173:			Component* c = new Component( );
./src/internal/sys_interface/devicetreecollector.cpp:341:		*fruName = new char [ dlen + 1 ];
./src/internal/sys_interface/devicetreecollector.cpp:779:		Component* c = new Component( );
./src/internal/sys_interface/devicetreecollector.cpp:815:		Component *c = new Component();
./src/internal/sys_interface/devicetreecollector.cpp:977:					tmp = new Component();
./src/internal/device.cpp:77:					SubDevice* s = new SubDevice( pciID );
./src/internal/manufacturer.cpp:75:				Device* d = new Device( pciID );
./src/internal/devicelookup.cpp:68:				Manufacturer* m = new Manufacturer( pciID );

== files() ==
./src/output/lsvpd.cpp:490:			gzFile gzf = gzopen( path.c_str( ), "rb" );
./src/output/lsvpd.cpp:499:			int fd = open( path.c_str( ), O_CREAT | O_WRONLY,
./src/output/lsvio.cpp:307:			gzFile gzf = gzopen( path.c_str( ), "rb" );
./src/output/lsvio.cpp:316:			int fd = open( path.c_str( ), O_CREAT | O_WRONLY,
./src/output/lsmcode.cpp:401:			gzFile gzf = gzopen( path.c_str( ), "rb" );
./src/output/lsmcode.cpp:410:			int fd = open( path.c_str( ), O_CREAT | O_WRONLY,
./src/output/lscfg.cpp:813:			gzFile gzf = gzopen( path.c_str( ), "rb" );
./src/output/lscfg.cpp:822:			int fd = open( path.c_str( ), O_CREAT | O_WRONLY,
./src/internal/updater.cpp:220:			fd = open( os.str( ).c_str( ), O_RDONLY );
./src/internal/updater.cpp:237:			gzf = gzopen( os.str( ).c_str( ), "wb9" );
./src/internal/sys_interface/sysfstreecollector.cpp:79:		id.open( DeviceLookup::getPciIds( ).c_str( ), ios::in );
./src/internal/sys_interface/sysfstreecollector.cpp:93:		id.open( DeviceLookup::getUsbIds( ).c_str( ), ios::in );
./src/internal/sys_interface/sysfstreecollector.cpp:945:		fi = fopen(buf , "r");
./src/internal/sys_interface/sysfstreecollector.cpp:1141:				fd = open( fin.c_str( ), O_RDONLY | O_NONBLOCK );
./src/internal/sys_interface/sysfstreecollector.cpp:1163:		in.open( os.str( ).c_str( ) );
./src/internal/sys_interface/sysfstreecollector.cpp:1198:		int fd = open( os.str( ).c_str( ), O_RDONLY | O_NONBLOCK );
./src/internal/sys_interface/sysfstreecollector.cpp:1328:		fd = open( os.str( ).c_str( ), O_RDONLY );
./src/internal/sys_interface/rtascollector.cpp:42:		if ((fd = open(PROC_FILE_RTAS_CALL, O_RDONLY, 0)) < 0)
./src/internal/sys_interface/fswalk.cpp:86:		fi = fopen(file, "r");
./src/internal/sys_interface/icollector.cpp:76:		attrIn.open( fullPath.c_str( ) );
./src/internal/sys_interface/icollector.cpp:118:		fd = open(path.c_str(), O_RDONLY);
./src/internal/sys_interface/proccollector.cpp:82:			in.open( os.str( ).c_str( ) );
./src/internal/sys_interface/proccollector.cpp:191:		in.open( "/proc/cpuinfo" );
./src/internal/sys_interface/proccollector.cpp:217:		in.open( "/proc/sys/kernel/hostname" );
./src/internal/sys_interface/proccollector.cpp:230:		in.open( "/proc/sys/kernel/ostype" );
./src/internal/sys_interface/proccollector.cpp:239:		in.open( "/proc/sys/kernel/osrelease" );
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:845:	int device_open(int major, int minor, int mode)
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:860:		                device_fd = open(name, 0);
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:1502:			device_fd = device_open(fillMe->devMajor,
./src/internal/sys_interface/platformcollector.cpp:39:		if (!ifs.is_open()) {

== logging() ==
./src/common/lsvpd_error_handler.cpp:73:				perror("mknod: ");
./src/common/lsvpd_error_handler.cpp:77:				return string(strerror(errCode));
./src/output/lsvpd.cpp:526:					gzerror( gzf, &err ) << endl;
./src/output/lsvio.cpp:343:					gzerror( gzf, &err ) << endl;
./src/output/lsmcode.cpp:437:					gzerror( gzf, &err ) << endl;
./src/output/lscfg.cpp:849:					gzerror( gzf, &err ) << endl;
./src/internal/updater.cpp:257:					gzerror( gzf, &in ) << "'" << endl;
./src/internal/sys_interface/rtascollector.cpp:66:	static string librtas_error(int error)
./src/internal/sys_interface/rtascollector.cpp:213:				librtas_error(rc);
./src/internal/sys_interface/fswalk.cpp:47:inline static string _errmsg(string line, string file, string str)
./src/internal/sys_interface/fswalk.cpp:52:#define errmsg(str) _errmsg(TOSTRING(__LINE__), __FILE__, str)
./src/internal/sys_interface/fswalk.cpp:222:			l.log( errmsg(msg), LOG_ERR );
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:77:inline static string _errmsg(string line, string file, string str)
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:84:#define errmsg(str) _errmsg(TOSTRING(__LINE__), __FILE__, str)

== environment() ==

== privileged() ==
./src/common/lsvpd_error_handler.cpp:57:				return string("Error: Unable to mknod() the specified file.  Possibly a permissions issue.");
./src/internal/sys_interface/sysfstreecollector.cpp:1207:		if( ioctl( fd, HDIO_GET_IDENTITY, &id ) != 0 )
./src/internal/sys_interface/sysfstreecollector.cpp:1491:			if( ioctl( fd, SIOCETHTOOL, &ifr ) == -1 )
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:844:	// Open a temp file through which we can ioctl() to device for reading
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:858:					ret = mknod(name, 0760 | mode, makedev(major, minor));
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:1139:		res = ioctl(device_fd, SG_GET_SCSI_ID, &sg_dat);

== networking() ==
./src/output/lsvpd.cpp:406:	case PF_POWERKVM_PSERIES_GUEST:
./src/output/lsvpd.cpp:407:	case PF_ERROR:
./src/output/lsvio.cpp:221:	case PF_POWERKVM_PSERIES_GUEST:
./src/output/lsvio.cpp:222:	case PF_POWERKVM_HOST:
./src/output/lsvio.cpp:223:	case PF_ERROR:
./src/output/lsmcode.cpp:314:	case PF_POWERKVM_PSERIES_GUEST:
./src/output/lsmcode.cpp:315:	case PF_ERROR:
./src/output/lscfg.cpp:741:	case PF_POWERKVM_PSERIES_GUEST:
./src/output/lscfg.cpp:742:	case PF_ERROR:
./src/internal/updater.cpp:90:	case PF_POWERKVM_PSERIES_GUEST:
./src/internal/updater.cpp:91:	case PF_ERROR:
./src/internal/sys_interface/sysfstreecollector.cpp:1469:		fd = socket( AF_INET, SOCK_DGRAM, 0 );
./src/internal/sys_interface/platformcollector.cpp:16:	platform PlatformCollector::platform_type = PF_NULL;
./src/internal/sys_interface/platformcollector.cpp:64:			platform_type = PF_POWERKVM_HOST;
./src/internal/sys_interface/platformcollector.cpp:66:			platform_type = PF_POWERKVM_PSERIES_GUEST;
./src/internal/sys_interface/platformcollector.cpp:68:			platform_type = PF_POWERVM_LPAR;
./src/internal/sys_interface/platformcollector.cpp:70:			platform_type = PF_ERROR;
./src/internal/sys_interface/platformcollector.cpp:77:		case PF_POWERKVM_HOST:
./src/internal/sys_interface/platformcollector.cpp:79:		case PF_POWERVM_LPAR:
./src/internal/sys_interface/platformcollector.cpp:81:		case PF_POWERKVM_PSERIES_GUEST:
./src/internal/sys_interface/platformcollector.cpp:83:		case PF_ERROR:
./src/output/lsvpd.cpp:512:			while( ( in = gzread( gzf, buffer, 4096 ) ) > 0 )
./src/output/lsvpd.cpp:515:				while( ( out = write( fd, buffer + tot, in - tot ) ) > 0 &&
./src/output/lsvio.cpp:329:			while( ( in = gzread( gzf, buffer, 4096 ) ) > 0 )
./src/output/lsvio.cpp:332:				while( ( out = write( fd, buffer + tot, in - tot ) ) > 0 &&
./src/output/lsmcode.cpp:423:			while( ( in = gzread( gzf, buffer, 4096 ) ) > 0 )
./src/output/lsmcode.cpp:426:				while( ( out = write( fd, buffer + tot, in - tot ) ) > 0 &&
./src/output/lscfg.cpp:835:			while( ( in = gzread( gzf, buffer, 4096 ) ) > 0 )
./src/output/lscfg.cpp:838:				while( ( out = write( fd, buffer + tot, in - tot ) ) > 0 &&
./src/internal/updater.cpp:230:			while( ( in = read( fd, buffer + tot, st.st_size - tot ) ) > 0 &&
./src/internal/updater.cpp:248:			while( ( in = gzwrite( gzf, buffer + tot, st.st_size - tot ) ) > 0
./src/internal/sys_interface/sysfstreecollector.cpp:1334:		if( pread( fd, &data, 1, 8 ) < 1 )
./src/internal/sys_interface/sysfstreecollector.cpp:1469:		fd = socket( AF_INET, SOCK_DGRAM, 0 );
./src/internal/sys_interface/icollector.cpp:90:			attrIn.read( strBuf, info.st_size );
./src/internal/sys_interface/icollector.cpp:128:			rc = read(fd, buf + size, info.st_size - size);

== http:// ==
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:898:         * 	http://www.t10.org/ftp/t10/drafts/spc3/spc3r21b.pdf

== encryption ==

== sql() ==

== tmp() ==
./src/internal/sys_interface/fswalk.cpp:43:#define TMP_FILE "/tmp/dir_list.tmp"
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:835:       if (-1 != sprintf(name, "/tmp/node-%d-%d-%d",
./src/internal/sys_interface/sysfs_SCSI_Fill.cpp:852:            if (-1 != sprintf(name, "/tmp/node-%d-%d-%d",

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./src/internal/sys_interface/sysfstreecollector.cpp:162:	 * @arg bus: The devices bus, as seen at /sys/bus/XXX
./src/internal/sys_interface/sysfstreecollector.cpp:471:		 * not maintain the links from /sys/pci/XXX/devices/XXX into the
./src/internal/sys_interface/sysfstreecollector.cpp:472:		 * corresponding /sys/class/XXX/XXX directory so we cannot use the
./src/internal/sys_interface/sysfstreecollector.cpp:640:				 * FIXME: This is a problem, this case will never be true, should
./src/internal/sys_interface/sysfstreecollector.cpp:773:	 * TODO: Use regex for scalability
./src/internal/sys_interface/icollector.cpp:306:			/* XXX: Un-recognized key */
./src/internal/sys_interface/devicetreecollector.cpp:736:	 * TODO: Need to move Bus parsing for devices to before this step,

== unsafe input mechanisms ==

