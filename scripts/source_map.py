#!/usr/bin/python
import os, apt_pkg, sys


#check = sys.argv[1]

apt_pkg.InitSystem();

def load():
  saw = dict()
  source_map = dict()
  lists = '/var/lib/apt/lists'
  for f in os.listdir(lists):
    if not f.endswith('_source_Sources'):
        continue
    parts = f.split('_')
    parts.pop() # _Sources
    parts.pop() # _source
    section = parts.pop() # _main
    release_real = parts.pop() # _dapper
    saw.setdefault(release_real,True)
    release = release_real.split('-')[0] # (merge pockets)

    parser = apt_pkg.ParseTagFile(open('%s/%s'%(lists,f)))
    while parser.Step():
        pkg = parser.Section['Package']
        source_map.setdefault(release,dict()).setdefault(pkg, {'section': 'unset', 'version': '0' })
        source_map[release][pkg]['section'] = section
        if apt_pkg.VersionCompare(parser.Section['Version'],source_map[release][pkg]['version']) == 1:
            source_map[release][pkg]['version'] = parser.Section['Version']
#        if pkg == check:
#            print '%s: (%s %s) %s' % (pkg, release, section, parser.Section['Version'])

  # Validate all the sources are available
  for rel in ('dapper','edgy','feisty','gutsy'):
    for pocket in ('','-updates','-security'):
        if not saw.has_key(rel+pocket):
            print >>sys.stderr, "Missing deb-src lines for '%s'" % (rel+pocket)
            sys.exit(1)
            
  return source_map


#for r in ('dapper','edgy','feisty','gutsy'):
#    if source_map[r].has_key(check):
#        print 'in %s: %s %s' % (r, source_map[r][check]['section'], source_map[r][check]['version'])
#    else:
#        print 'NOT in %s' % (r)
