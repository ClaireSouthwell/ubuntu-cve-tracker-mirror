Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./src/nss/x509vfy.c:373:        memcpy(p, "           E=", 13);
./src/nss/x509vfy.c:637:        memcpy(p, name, nameLen);
./src/nss/x509vfy.c:669:                memcpy(p, value, valueLen);
./src/nss/x509vfy.c:691:                memcpy(p, value, valueLen);
./src/nss/ciphers.c:125:        memcpy(ctx->iv, xmlSecBufferGetData(in), ivLen);
./src/nss/ciphers.c:576:    memcpy(ctx->key, xmlSecBufferGetData(buffer), ctx->keySize);
./src/nss/app.c:162:        memcpy(contents->data,  data, dataSize);
./src/templates.c:1775:    sprintf(buf, "%u", bitsLen);
./src/kw_aes_des.c:105:    memcpy(out, in, inSize);
./src/kw_aes_des.c:106:    memcpy(out + inSize, sha1, XMLSEC_KW_DES3_BLOCK_LENGTH);
./src/kw_aes_des.c:135:    memcpy(out, iv, XMLSEC_KW_DES3_IV_LENGTH);
./src/kw_aes_des.c:371:        memcpy(out + XMLSEC_KW_AES_MAGIC_BLOCK_SIZE, in, inSize);
./src/kw_aes_des.c:375:    memcpy(out, xmlSecKWAesMagicBlock, XMLSEC_KW_AES_MAGIC_BLOCK_SIZE);
./src/kw_aes_des.c:394:                memcpy(block, out, 8);
./src/kw_aes_des.c:395:                memcpy(block + 8, p, 8);
./src/kw_aes_des.c:407:                memcpy(out, block, 8);
./src/kw_aes_des.c:408:                memcpy(p, block + 8, 8);
./src/kw_aes_des.c:436:        memcpy(out, in, inSize);
./src/kw_aes_des.c:456:                memcpy(block, out, 8);
./src/kw_aes_des.c:457:                memcpy(block + 8, p, 8);
./src/kw_aes_des.c:469:                memcpy(out, block, 8);
./src/kw_aes_des.c:470:                memcpy(p, block + 8, 8);
./src/c14n.c:379:            memcpy(data, xmlSecBufferGetData(&(transform->outBuf)), outSize);
./src/mscrypto/x509vfy.c:1175:        memcpy(p, "           E=", 13);
./src/mscrypto/certkeys.c:1214:    memcpy(&(pubKey->pubexp), xmlSecBnGetData(&exponent), xmlSecBnGetSize(&exponent));
./src/mscrypto/certkeys.c:1218:    memcpy(modulusBlob, xmlSecBnGetData(&modulus), xmlSecBnGetSize(&modulus));
./src/mscrypto/certkeys.c:1997:    memcpy(buf, xmlSecBnGetData(&p), xmlSecBnGetSize(&p));
./src/mscrypto/certkeys.c:2010:    memcpy(buf, xmlSecBnGetData(&q), xmlSecBnGetSize(&q));
./src/mscrypto/certkeys.c:2030:    memcpy(buf, xmlSecBnGetData(&g), xmlSecBnGetSize(&g));
./src/mscrypto/certkeys.c:2049:    memcpy(buf, xmlSecBnGetData(&y), xmlSecBnGetSize(&y));
./src/mscrypto/kw_des.c:626:        memcpy(out, in, inSize);
./src/mscrypto/kw_des.c:710:        memcpy(out, in, inSize);
./src/mscrypto/ciphers.c:216:    memcpy(outBuf, inBuf, inSize);
./src/mscrypto/ciphers.c:357:    memcpy(outBuf, inBuf, inSize);
./src/mscrypto/kw_aes.c:455:        memcpy(out, in, inSize);
./src/mscrypto/kw_aes.c:511:        memcpy(out, in, inSize);
./src/mscrypto/crypto.c:40:    strcpy(dest, src);
./src/gnutls/asymkeys.c:217:    memcpy(&(params[0]), p, sizeof(*p));
./src/gnutls/asymkeys.c:218:    memcpy(&(params[1]), q, sizeof(*q));
./src/gnutls/asymkeys.c:219:    memcpy(&(params[2]), g, sizeof(*g));
./src/gnutls/asymkeys.c:220:    memcpy(&(params[3]), y, sizeof(*y));
./src/gnutls/asymkeys.c:407:    memcpy(&(params[0]), m, sizeof(*m));
./src/gnutls/asymkeys.c:408:    memcpy(&(params[1]), e, sizeof(*e));
./src/xpath.c:619:    sprintf((char*)tmp, xpathPattern, (char*)data->expr);
./src/buffer.c:204:        memcpy(buf->data, data, size);
./src/buffer.c:360:        memcpy(buf->data + buf->size, data, size);
./src/buffer.c:397:        memcpy(buf->data, data, size);
./src/transforms.c:918:        sprintf((char*)buf, tmpl, xptr + 1);
./src/transforms.c:2362:        memcpy(data, xmlSecBufferGetData(&(transform->outBuf)), outSize);
./src/openssl/ciphers.c:114:        memcpy(ctx->iv, xmlSecBufferGetData(in), ivLen);
./src/openssl/ciphers.c:210:            memcpy(outBuf, ctx->cipherCtx.final, blockLen);
./src/openssl/ciphers.c:241:            memcpy(ctx->cipherCtx.final, &outBuf[outLen], blockLen);
./src/openssl/ciphers.c:393:                memcpy(outBuf, ctx->cipherCtx.final, outLen2);
./src/openssl/ciphers.c:592:    memcpy(ctx->key, xmlSecBufferGetData(buffer), cipherKeyLen);
./src/openssl/app.c:1625:    strcpy(buf, password);
./src/nodeset.c:155:            memcpy(&ns, node, sizeof(ns));
./src/gcrypt/digests.c:296:            memcpy(ctx->dgst, buf, ctx->dgstSize);
./src/gcrypt/hmac.c:500:            memcpy(ctx->dgst, dgst, dgstSize);
./src/gcrypt/signatures.c:483:            memcpy(ctx->dgst, buf, ctx->dgstSize);
./src/gcrypt/kw_des.c:437:    memcpy(out, res, len);
./src/keysdata.c:936:    memcpy((*buf), xmlSecBufferGetData(buffer), (*bufSize));
./examples/xkms-server.c:790:    sprintf(header, http_header, resp_code, body_size);
./apps/cmdline.c:153:    value = (xmlSecAppCmdLineValuePtr) malloc(sizeof(xmlSecAppCmdLineValue));
./apps/cmdline.c:285:            buf = (char*)malloc(strlen(value->strValue) + 2);
./apps/cmdline.c:291:            memcpy(buf, value->strValue, strlen(value->strValue));

== files() ==
./src/buffer.c:475:    f = fopen(filename, "rb");
./src/gcrypt/digests.c:167:    err = gcry_md_open(&ctx->digestCtx, ctx->digest, GCRY_MD_FLAG_SECURE); /* we are paranoid */
./src/gcrypt/hmac.c:211:    err = gcry_md_open(&ctx->digestCtx, ctx->digest, GCRY_MD_FLAG_HMAC | GCRY_MD_FLAG_SECURE); /* we are paranoid */
./src/gcrypt/signatures.c:272:    err = gcry_md_open(&ctx->digestCtx, ctx->digest, GCRY_MD_FLAG_SECURE); /* we are paranoid */
./src/gcrypt/kw_des.c:401:    err = gcry_md_open(&digestCtx, GCRY_MD_SHA1, GCRY_MD_FLAG_SECURE); /* we are paranoid */
./src/gcrypt/kw_des.c:405:                    "gcry_md_open(GCRY_MD_SHA1)",
./src/gcrypt/kw_des.c:546:    err = gcry_cipher_open(&cipherCtx, GCRY_CIPHER_3DES, GCRY_CIPHER_MODE_CBC, GCRY_CIPHER_SECURE); /* we are paranoid */
./src/gcrypt/kw_des.c:550:                    "gcry_cipher_open(GCRY_CIPHER_3DES)",
./src/gcrypt/ciphers.c:494:    err = gcry_cipher_open(&ctx->cipherCtx, ctx->cipher, ctx->mode, GCRY_CIPHER_SECURE); /* we are paranoid */
./src/gcrypt/kw_aes.c:483:    err = gcry_cipher_open(&cipherCtx, ctx->cipher, ctx->mode, ctx->flags); 
./src/gcrypt/kw_aes.c:545:    err = gcry_cipher_open(&cipherCtx, ctx->cipher, ctx->mode, ctx->flags);
./apps/xmlsec.c:2960:    file = fopen(filename, "wb");

== logging() ==
./src/gnutls/globals.h:26:        (int)err, xmlSecErrorsSafeString(gcry_strerror((err)))
./src/gnutls/globals.h:29:        (int)err, xmlSecErrorsSafeString(gnutls_strerror((err)))
./src/openssl/x509vfy.c:331:            err         = X509_STORE_CTX_get_error(&xsc);
./src/openssl/crypto.c:455:    ERR_put_error(XMLSEC_OPENSSL_ERRORS_LIB,
./src/gcrypt/globals.h:28:        (int)err, xmlSecErrorsSafeString(gcry_strerror((err)))
./examples/decrypt3.c:348:        /* load key from a pem file, if key is not found then it's an error (is it?) */
./examples/decrypt3.c:355:        /* otherwise it's a binary key, if key is not found then it's an error (is it?) */

== environment() ==

== privileged() ==

== networking() ==
./examples/xkms-server.c:329:    sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
./examples/xkms-server.c:364:    saddr.sin_family            = AF_INET;
./src/xmldsig.c:1121:        fwrite(xmlSecBufferGetData(dsigCtx->result),
./src/xmldsig.c:1131:        fwrite(xmlSecBufferGetData(xmlSecDSigCtxGetPreSignBuffer(dsigCtx)),
./src/xmldsig.c:1210:        fwrite(xmlSecBufferGetData(dsigCtx->result),
./src/xmldsig.c:1220:        fwrite(xmlSecBufferGetData(xmlSecDSigCtxGetPreSignBuffer(dsigCtx)),
./src/xmldsig.c:1672:        fwrite(xmlSecBufferGetData(xmlSecDSigReferenceCtxGetPreDigestBuffer(dsigRefCtx)),
./src/xmldsig.c:1682:        fwrite(xmlSecBufferGetData(dsigRefCtx->result),
./src/xmldsig.c:1745:        fwrite(xmlSecBufferGetData(dsigRefCtx->result),
./src/xmldsig.c:1755:        fwrite(xmlSecBufferGetData(xmlSecDSigReferenceCtxGetPreDigestBuffer(dsigRefCtx)),
./src/xmlenc.c:1221:        fwrite(xmlSecBufferGetData(encCtx->result),
./src/xmlenc.c:1314:        fwrite(xmlSecBufferGetData(encCtx->result),
./src/buffer.c:488:        len = fread(buffer, 1, sizeof(buffer), f);
./src/openssl/x509.c:1897:    ret = BIO_write(mem, buf, size);
./src/openssl/x509.c:2011:    ret = BIO_write(mem, buf, size);
./src/openssl/x509.c:2128:    size = BIO_read(mem, res, size);
./src/gcrypt/digests.c:265:            gcry_md_write(ctx->digestCtx, xmlSecBufferGetData(in), inSize);
./src/gcrypt/digests.c:282:            buf = gcry_md_read(ctx->digestCtx, ctx->digest);
./src/gcrypt/hmac.c:471:            gcry_md_write(ctx->digestCtx, xmlSecBufferGetData(in), inSize);
./src/gcrypt/hmac.c:486:            dgst = gcry_md_read(ctx->digestCtx, ctx->digest);
./src/gcrypt/signatures.c:450:            gcry_md_write(ctx->digestCtx, xmlSecBufferGetData(in), inSize);
./src/gcrypt/signatures.c:469:            buf = gcry_md_read(ctx->digestCtx, ctx->digest);
./src/gcrypt/kw_des.c:411:    gcry_md_write(digestCtx, in, inSize);
./src/gcrypt/kw_des.c:424:    res = gcry_md_read(digestCtx, GCRY_MD_SHA1);
./src/gcrypt/kw_des.c:428:                    "gcry_md_read(GCRY_MD_SHA1)",
./examples/decrypt2.c:271:            fwrite(xmlSecBufferGetData(encCtx->result), 
./examples/xkms-server.c:329:    sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
./examples/xkms-server.c:338:        fprintf(stderr, "Error %d: socket() failed\n", errno);
./examples/xkms-server.c:367:    if(bind(sockfd, (struct sockaddr *)&saddr, sizeof(struct sockaddr)) != 0) {
./examples/xkms-server.c:368:        fprintf(stderr, "Error %d: bind() failed\n", errno);
./examples/xkms-server.c:373:    if(listen(sockfd, PENDING_QUEUE_SIZE) != 0) {
./examples/xkms-server.c:374:        fprintf(stderr, "Error %d: listen() failed\n", errno);
./examples/xkms-server.c:647:                fprintf(stderr, "Error %d [%s]: read() failed\n", errno, in_ip);
./examples/xkms-server.c:742:                fprintf(stderr, "Error %d [%s]: read() failed\n", errno, in_ip);
./examples/decrypt1.c:201:            fwrite(xmlSecBufferGetData(encCtx->result), 
./examples/xmldsigverify.c:258:        ret = fread(buf, 1, sizeof(buf), stdin);
./examples/decrypt3.c:204:            fwrite(xmlSecBufferGetData(encCtx->result), 
./apps/xmlsec.c:2989:        fwrite(xmlSecBufferGetData(buffer), xmlSecBufferGetSize(buffer), 1, f); 

== http:// ==
./src/nss/bignum.c:36: * (http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary)
./src/nss/bignum.c:101: * (http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary)
./src/nss/hmac.c:228: * HMAC (http://www.w3.org/TR/xmldsig-core/#sec-HMAC):
./src/nss/hmac.c:233: * <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1">
./src/nss/x509.c:146: * The X509Data  Element (http://www.w3.org/TR/xmldsig-core/#sec-X509Data)
./src/nss/x509.c:298: * The NSS X509 key data klass (http://www.w3.org/TR/xmldsig-core/#sec-X509Data).
./src/nss/x509.c:1994:     * NSS bug http://bugzilla.mozilla.org/show_bug.cgi?id=212864 is fixed
./src/nss/kw_aes.c:39: * http://bugzilla.mozilla.org/show_bug.cgi?id=213795
./src/nss/pkikeys.c:400: * The DSAKeyValue Element (http://www.w3.org/TR/xmldsig-core/#sec-DSAKeyValue)
./src/nss/pkikeys.c:1060: * http://www.w3.org/TR/xmldsig-core/#sec-RSAKeyValue
./src/templates.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/templates.c:81: * that it will define the http://www.w3.org/2000/09/xmldsig#
./src/kw_aes_des.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/kw_aes_des.c:32: * http://www.w3.org/TR/xmlenc-core/#sec-Alg-SymmetricKeyWrap
./src/kw_aes_des.c:279: * http://www.w3.org/TR/xmlenc-core/#sec-Alg-SymmetricKeyWrap:
./src/c14n.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/c14n.c:505: * (http://www.w3.org/TR/xmldsig-core/#sec-c14nAlg and
./src/c14n.c:506: * http://www.w3.org/TR/2001/REC-xml-c14n-20010315).
./src/c14n.c:553: * (http://www.w3.org/TR/xmldsig-core/#sec-c14nAlg and
./src/c14n.c:554: * http://www.w3.org/TR/2001/REC-xml-c14n-20010315).
./src/c14n.c:599: * C14N version 1.1 (http://www.w3.org/TR/xml-c14n11)
./src/c14n.c:645: * C14N version 1.1 (http://www.w3.org/TR/xml-c14n11) with comments
./src/c14n.c:692: * (http://www.w3.org/TR/xml-exc-c14n/).
./src/c14n.c:738: * (http://www.w3.org/TR/xml-exc-c14n/).
./src/c14n.c:783: * The "remove xml tags" transform klass (http://www.w3.org/TR/xmldsig-core/#sec-Base-64):
./src/xslt.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xslt.c:4: * XSLT Transform (http://www.w3.org/TR/xmldsig-core/#sec-XSLT)
./src/xslt.c:150: * XSLT transform klass (http://www.w3.org/TR/xmldsig-core/#sec-XSLT):
./src/io.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xmldsig.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xmldsig.c:5: *  http://www.w3.org/TR/xmldsig-core/
./src/xmldsig.c:6: *  http://www.w3.org/Signature/Overview.html
./src/xmldsig.c:405: * The Signature  element (http://www.w3.org/TR/xmldsig-core/#sec-Signature)
./src/xmldsig.c:448: *      xmlns   CDATA   #FIXED 'http://www.w3.org/2000/09/xmldsig#'
./src/xmldsig.c:638: * The SignedInfo Element (http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo)
./src/xmldsig.c:910: * The Object Element (http://www.w3.org/TR/xmldsig-core/#sec-Object)
./src/xmldsig.c:966: * The Manifest  Element (http://www.w3.org/TR/xmldsig-core/#sec-Manifest)
./src/xmldsig.c:1399: * The Reference Element (http://www.w3.org/TR/xmldsig-core/#sec-Reference)
./src/enveloped.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/enveloped.c:66: * The enveloped transform klass (http://www.w3.org/TR/xmldsig-core/#sec-EnvelopedSignature):
./src/globals.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/keys.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/mscrypto/csp_calg.h:7: * Copyright (c) 2005-2006 Cryptocom LTD (http://www.cryptocom.ru).
./src/mscrypto/certkeys.c:902: * http://www.w3.org/TR/xmldsig-core/#sec-RSAKeyValue
./src/mscrypto/certkeys.c:1570: * The DSAKeyValue Element (http://www.w3.org/TR/xmldsig-core/#sec-DSAKeyValue)
./src/mscrypto/digests.c:8: * Copyright (c) 2005-2006 Cryptocom LTD (http://www.cryptocom.ru).
./src/mscrypto/hmac.c:5: * HMAC Algorithm support (http://www.w3.org/TR/xmldsig-core/#sec-HMAC):
./src/mscrypto/hmac.c:9: * <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1">
./src/mscrypto/x509.c:132: * The X509Data  Element (http://www.w3.org/TR/xmldsig-core/#sec-X509Data)
./src/mscrypto/x509.c:284: * The MSCrypto X509 key data klass (http://www.w3.org/TR/xmldsig-core/#sec-X509Data).
./src/mscrypto/signatures.c:9: * Copyright (c) 2005-2006 Cryptocom LTD (http://www.cryptocom.ru).
./src/mscrypto/csp_oid.h:7: * Copyright (c) 2005-2006 Cryptocom LTD (http://www.cryptocom.ru).
./src/mscrypto/crypto.c:9: * Copyright (c) 2005-2006 Cryptocom LTD (http://www.cryptocom.ru).
./src/mscrypto/crypto.c:809:             * http://www.microsoft.com/mind/0697/crypto.asp (inituser)
./src/keysmngr.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/parser.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xmlenc.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xmlenc.c:5: *  http://www.w3.org/TR/xmlenc-core
./src/soap.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/soap.c:37: * XML Schema (http://schemas.xmlsoap.org/soap/envelope/):
./src/soap.c:107: * XML Schema (http://schemas.xmlsoap.org/soap/envelope/):
./src/soap.c:198: * XML Schema (http://schemas.xmlsoap.org/soap/envelope/):
./src/soap.c:565: * XML Schema (http://www.w3.org/2003/05/soap-envelope):
./src/soap.c:633: * XML Schema (http://www.w3.org/2003/05/soap-envelope):
./src/soap.c:690: * XML Schema (http://www.w3.org/2003/05/soap-envelope):
./src/soap.c:737: * XML Schema (http://www.w3.org/2003/05/soap-envelope):
./src/gnutls/x509.c:101: * The X509Data  Element (http://www.w3.org/TR/xmldsig-core/#sec-X509Data)
./src/gnutls/x509.c:253: * The GnuTLS X509 key data klass (http://www.w3.org/TR/xmldsig-core/#sec-X509Data).
./src/xpath.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xpath.c:534: * http://www.w3.org/TR/xmldsig-core/#sec-XPath for more details.
./src/xpath.c:678: * The XPath2 transform (http://www.w3.org/TR/xmldsig-filter2/).
./src/xpath.c:824: * (http://www.ietf.org/internet-drafts/draft-eastlake-xmldsig-uri-02.txt).
./src/bn.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/x509.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/buffer.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/transforms.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/transforms.c:4: * The Transforms Element (http://www.w3.org/TR/xmldsig-core/#sec-Transforms)
./src/transforms.c:788: * (http://www.w3.org/TR/xmldsig-core/#sec-ReferenceProcessingModel):
./src/transforms.c:790: * - URI="http://example.com/bar.xml"
./src/transforms.c:792: * 'http://example.com/bar.xml', that is probably an XML document given
./src/transforms.c:795: * - URI="http://example.com/bar.xml#chapter1"
./src/transforms.c:797: * external XML resource 'http://example.com/bar.xml', provided as an
./src/transforms.c:1992: * (http://www.w3.org/TR/xmldsig-core/#sec-Base-64):
./src/openssl/evp.c:295: * The DSAKeyValue Element (http://www.w3.org/TR/xmldsig-core/#sec-DSAKeyValue)
./src/openssl/evp.c:1018: * http://csrc.nist.gov/publications/PubsNISTIRs.html#NIST-IR-7802
./src/openssl/evp.c:1284: * http://www.w3.org/TR/xmldsig-core/#sec-RSAKeyValue
./src/openssl/hmac.c:5: * HMAC Algorithm support (http://www.w3.org/TR/xmldsig-core/#sec-HMAC):
./src/openssl/hmac.c:9: * <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1">
./src/openssl/bn.c:32: * (http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary)
./src/openssl/bn.c:90: * (http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary)
./src/openssl/x509.c:122: * The X509Data  Element (http://www.w3.org/TR/xmldsig-core/#sec-X509Data)
./src/openssl/x509.c:274: * The OpenSSL X509 key data klass (http://www.w3.org/TR/xmldsig-core/#sec-X509Data).
./src/openssl/signatures.c:687: * http://www.w3.org/TR/xmldsig-core/#sec-SignatureAlg:
./src/openssl/signatures.c:985: * http://csrc.nist.gov/publications/PubsNISTIRs.html#NIST-IR-7802
./src/openssl/app.c:761:        The documentation states (http://www.openssl.org/docs/crypto/PKCS12_parse.html):
./src/keyinfo.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/keyinfo.c:5: * (http://www.w3.org/TR/xmlSec-core/#sec-KeyInfo:
./src/keyinfo.c:680: * (http://www.w3.org/TR/xmldsig-core/#sec-KeyName):
./src/keyinfo.c:842: * (http://www.w3.org/TR/xmldsig-core/#sec-KeyValue):
./src/keyinfo.c:1047: * (http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod):
./src/keyinfo.c:1384: * (http://www.w3.org/TR/xmlenc-core/#sec-EncryptedKey):
./src/nodeset.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/errors.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/strings.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/strings.c:22:const xmlChar xmlSecNs[]                        = "http://www.aleksey.com/xmlsec/2002";
./src/strings.c:23:const xmlChar xmlSecDSigNs[]                    = "http://www.w3.org/2000/09/xmldsig#";
./src/strings.c:24:const xmlChar xmlSecEncNs[]                     = "http://www.w3.org/2001/04/xmlenc#";
./src/strings.c:25:const xmlChar xmlSecXkmsNs[]                    = "http://www.w3.org/2002/03/xkms#";
./src/strings.c:26:const xmlChar xmlSecXPathNs[]                   = "http://www.w3.org/TR/1999/REC-xpath-19991116";
./src/strings.c:27:const xmlChar xmlSecXPath2Ns[]                  = "http://www.w3.org/2002/06/xmldsig-filter2";
./src/strings.c:28:const xmlChar xmlSecXPointerNs[]                = "http://www.w3.org/2001/04/xmldsig-more/xptr";
./src/strings.c:29:const xmlChar xmlSecSoap11Ns[]                  = "http://schemas.xmlsoap.org/soap/envelope/";
./src/strings.c:30:const xmlChar xmlSecSoap12Ns[]                  = "http://www.w3.org/2002/06/soap-envelope";
./src/strings.c:66:const xmlChar xmlSecTypeEncContent[]            = "http://www.w3.org/2001/04/xmlenc#Content";
./src/strings.c:67:const xmlChar xmlSecTypeEncElement[]            = "http://www.w3.org/2001/04/xmlenc#Element";
./src/strings.c:221:const xmlChar xmlSecHrefAESKeyValue[]           = "http://www.aleksey.com/xmlsec/2002#AESKeyValue";
./src/strings.c:224:const xmlChar xmlSecHrefAes128Cbc[]             = "http://www.w3.org/2001/04/xmlenc#aes128-cbc";
./src/strings.c:227:const xmlChar xmlSecHrefAes192Cbc[]             = "http://www.w3.org/2001/04/xmlenc#aes192-cbc";
./src/strings.c:230:const xmlChar xmlSecHrefAes256Cbc[]             = "http://www.w3.org/2001/04/xmlenc#aes256-cbc";
./src/strings.c:233:const xmlChar xmlSecHrefKWAes128[]              = "http://www.w3.org/2001/04/xmlenc#kw-aes128";
./src/strings.c:236:const xmlChar xmlSecHrefKWAes192[]              = "http://www.w3.org/2001/04/xmlenc#kw-aes192";
./src/strings.c:239:const xmlChar xmlSecHrefKWAes256[]              = "http://www.w3.org/2001/04/xmlenc#kw-aes256";
./src/strings.c:247:const xmlChar xmlSecHrefBase64[]                = "http://www.w3.org/2000/09/xmldsig#base64";
./src/strings.c:255:const xmlChar xmlSecHrefC14N[]                  = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
./src/strings.c:258:const xmlChar xmlSecHrefC14NWithComments[]      = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments";
./src/strings.c:261:const xmlChar xmlSecHrefC14N11[]                = "http://www.w3.org/2006/12/xml-c14n11";
./src/strings.c:264:const xmlChar xmlSecHrefC14N11WithComments[]    = "http://www.w3.org/2006/12/xml-c14n11#WithComments";
./src/strings.c:267:const xmlChar xmlSecHrefExcC14N[]               = "http://www.w3.org/2001/10/xml-exc-c14n#";
./src/strings.c:270:const xmlChar xmlSecHrefExcC14NWithComments[]   = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments";
./src/strings.c:272:const xmlChar xmlSecNsExcC14N[]                 = "http://www.w3.org/2001/10/xml-exc-c14n#";
./src/strings.c:273:const xmlChar xmlSecNsExcC14NWithComments[]     = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments";
./src/strings.c:285:const xmlChar xmlSecHrefDESKeyValue[]           = "http://www.aleksey.com/xmlsec/2002#DESKeyValue";
./src/strings.c:288:const xmlChar xmlSecHrefDes3Cbc[]               = "http://www.w3.org/2001/04/xmlenc#tripledes-cbc";
./src/strings.c:291:const xmlChar xmlSecHrefKWDes3[]                = "http://www.w3.org/2001/04/xmlenc#kw-tripledes";
./src/strings.c:300:const xmlChar xmlSecHrefGOST2001KeyValue[]              = "http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411";
./src/strings.c:303:const xmlChar xmlSecHrefGost2001GostR3411_94[]          = "http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411";
./src/strings.c:312:const xmlChar xmlSecHrefDSAKeyValue[]           = "http://www.w3.org/2000/09/xmldsig#DSAKeyValue";
./src/strings.c:323:const xmlChar xmlSecHrefDsaSha1[]               = "http://www.w3.org/2000/09/xmldsig#dsa-sha1";
./src/strings.c:326:const xmlChar xmlSecHrefDsaSha256[]             = "http://www.w3.org/2009/xmldsig11#dsa-sha256";
./src/strings.c:336:const xmlChar xmlSecHrefECDSAKeyValue[]         = "http://scap.nist.gov/specifications/tmsad/#resource-1.0";
./src/strings.c:347:const xmlChar xmlSecHrefEcdsaSha1[]             = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1";
./src/strings.c:350:const xmlChar xmlSecHrefEcdsaSha224[]           = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224";
./src/strings.c:353:const xmlChar xmlSecHrefEcdsaSha256[]           = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256";
./src/strings.c:356:const xmlChar xmlSecHrefEcdsaSha384[]           = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384";
./src/strings.c:359:const xmlChar xmlSecHrefEcdsaSha512[]           = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512";
./src/strings.c:368:const xmlChar xmlSecHrefEncryptedKey[]          = "http://www.w3.org/2001/04/xmlenc#EncryptedKey";
./src/strings.c:376:const xmlChar xmlSecHrefEnveloped[]             = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
./src/strings.c:385:const xmlChar xmlSecHrefHMACKeyValue[]          = "http://www.aleksey.com/xmlsec/2002#HMACKeyValue";
./src/strings.c:390:const xmlChar xmlSecHrefHmacMd5[]               = "http://www.w3.org/2001/04/xmldsig-more#hmac-md5";
./src/strings.c:393:const xmlChar xmlSecHrefHmacRipemd160[]         = "http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160";
./src/strings.c:396:const xmlChar xmlSecHrefHmacSha1[]              = "http://www.w3.org/2000/09/xmldsig#hmac-sha1";
./src/strings.c:399:const xmlChar xmlSecHrefHmacSha224[]            = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha224";
./src/strings.c:402:const xmlChar xmlSecHrefHmacSha256[]            = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256";
./src/strings.c:405:const xmlChar xmlSecHrefHmacSha384[]            = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha384";
./src/strings.c:408:const xmlChar xmlSecHrefHmacSha512[]            = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha512";
./src/strings.c:439:const xmlChar xmlSecHrefMd5[]                   = "http://www.w3.org/2001/04/xmldsig-more#md5";
./src/strings.c:455:const xmlChar xmlSecHrefRipemd160[]             = "http://www.w3.org/2001/04/xmlenc#ripemd160";
./src/strings.c:464:const xmlChar xmlSecHrefRSAKeyValue[]           = "http://www.w3.org/2000/09/xmldsig#RSAKeyValue";
./src/strings.c:470:const xmlChar xmlSecHrefRsaMd5[]                = "http://www.w3.org/2001/04/xmldsig-more#rsa-md5";
./src/strings.c:473:const xmlChar xmlSecHrefRsaRipemd160[]          = "http://www.w3.org/2001/04/xmldsig-more#rsa-ripemd160";
./src/strings.c:476:const xmlChar xmlSecHrefRsaSha1[]               = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";
./src/strings.c:479:const xmlChar xmlSecHrefRsaSha224[]             = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha224";
./src/strings.c:482:const xmlChar xmlSecHrefRsaSha256[]             = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";
./src/strings.c:485:const xmlChar xmlSecHrefRsaSha384[]             = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384";
./src/strings.c:488:const xmlChar xmlSecHrefRsaSha512[]             = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512";
./src/strings.c:491:const xmlChar xmlSecHrefRsaPkcs1[]              = "http://www.w3.org/2001/04/xmlenc#rsa-1_5";
./src/strings.c:494:const xmlChar xmlSecHrefRsaOaep[]               = "http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p";
./src/strings.c:503:const xmlChar xmlSecHrefGostR3411_94[]                  = "http://www.w3.org/2001/04/xmldsig-more#gostr3411";
./src/strings.c:511:const xmlChar xmlSecHrefSha1[]                  = "http://www.w3.org/2000/09/xmldsig#sha1";
./src/strings.c:514:const xmlChar xmlSecHrefSha224[]                = "http://www.w3.org/2001/04/xmldsig-more#sha224";
./src/strings.c:517:const xmlChar xmlSecHrefSha256[]                = "http://www.w3.org/2001/04/xmlenc#sha256";
./src/strings.c:520:const xmlChar xmlSecHrefSha384[]                = "http://www.w3.org/2001/04/xmldsig-more#sha384";
./src/strings.c:523:const xmlChar xmlSecHrefSha512[]                = "http://www.w3.org/2001/04/xmlenc#sha512";
./src/strings.c:532:const xmlChar xmlSecHrefX509Data[]              = "http://www.w3.org/2000/09/xmldsig#X509Data";
./src/strings.c:543:const xmlChar xmlSecHrefRawX509Cert[]           = "http://www.w3.org/2000/09/xmldsig#rawX509Certificate";
./src/strings.c:554:const xmlChar xmlSecHrefPGPData[]               = "http://www.w3.org/2000/09/xmldsig#PGPData";
./src/strings.c:563:const xmlChar xmlSecHrefSPKIData[]              = "http://www.w3.org/2000/09/xmldsig#SPKIData";
./src/strings.c:588:const xmlChar xmlSecHrefXslt[]                  = "http://www.w3.org/TR/1999/REC-xslt-19991116";
./src/gcrypt/asymkeys.c:431: * (http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary)
./src/gcrypt/asymkeys.c:496: * (http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary)
./src/gcrypt/asymkeys.c:595: * (http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary)
./src/gcrypt/asymkeys.c:656: * The DSAKeyValue Element (http://www.w3.org/TR/xmldsig-core/#sec-DSAKeyValue)
./src/gcrypt/asymkeys.c:1364: * http://www.w3.org/TR/xmldsig-core/#sec-RSAKeyValue
./src/gcrypt/hmac.c:243: * HMAC (http://www.w3.org/TR/xmldsig-core/#sec-HMAC):
./src/gcrypt/hmac.c:248: * <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1">
./src/gcrypt/signatures.c:613: * http://www.w3.org/TR/xmldsig-core/#sec-SignatureAlg:
./src/gcrypt/signatures.c:968: * http://www.w3.org/TR/xmldsig-core/#sec-SignatureAlg:
./src/gcrypt/app.c:38:         http://www.gnupg.org/documentation/manuals/gcrypt/Initializing-the-library.html
./src/gcrypt/app.c:42:         http://www.gnupg.org/documentation/manuals/gcrypt/Controlling-the-library.html
./src/base64.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/base64.c:830: * The Base64 transform klass (http://www.w3.org/TR/xmldsig-core/#sec-Base-64).
./src/base64.c:832: * (http://www.ietf.org/rfc/rfc2045.txt). The base64 Transform element has
./src/dl.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/list.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/app.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xmlsec.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xmltree.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/membuf.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/keysdata.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xkms.c:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./src/xkms.c:5: *  http://www.w3.org/TR/xkms2/
./apps/xmlsec.c:53:    "Report bugs to http://www.aleksey.com/xmlsec/bugs.html\n";
./include/xmlsec/exports.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/buffer.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/membuf.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/dl.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/xkms.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/xkms.h:5: *  http://www.w3.org/TR/xkms2/
./include/xmlsec/keysdata.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/app.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/bn.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/private.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/nodeset.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/version.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/parser.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/errors.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/keysmngr.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/private/xkms.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/private/xkms.h:5: *  http://www.w3.org/TR/xkms2/
./include/xmlsec/private/xslt.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/xmlsec.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/x509.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/list.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/xmltree.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/xmldsig.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/xmldsig.h:5: *  http://www.w3.org/TR/xmldsig-core/
./include/xmlsec/xmldsig.h:6: *  http://www.w3.org/Signature/Overview.html
./include/xmlsec/strings.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/crypto.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/soap.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/soap.h:84: * <Code> element information item (http://www.w3.org/TR/2003/REC-soap12-part1-20030624/#faultcodes).
./include/xmlsec/io.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/transforms.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/keyinfo.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/keyinfo.h:5: * (http://www.w3.org/TR/xmlSec-core/#sec-KeyInfo:
./include/xmlsec/xmlenc.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/xmlenc.h:5: *  http://www.w3.org/TR/xmlenc-core
./include/xmlsec/keys.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/templates.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).
./include/xmlsec/base64.h:2: * XML Security Library (http://www.aleksey.com/xmlsec).

== encryption ==
./src/nss/app.c:129:    SSL_ClearSessionCache();
./src/mscrypto/x509vfy.c:390:                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:403:    if(CertCompareCertificateName(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, &(cert->pCertInfo->Subject), &(cert->pCertInfo->Issuer))) {
./src/mscrypto/x509vfy.c:409:                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:429:                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:452:                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:549:                    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:554:            if((nextCert != NULL) && !CertCompareCertificateName(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:772:                   X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:820:                   X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/x509vfy.c:1223:            PKCS_7_ASN_ENCODING | X509_ASN_ENCODING);
./src/mscrypto/x509vfy.c:1287:                        X509_ASN_ENCODING | PKCS_7_ASN_ENCODING);
./src/mscrypto/x509vfy.c:1326:                        PKCS_7_ASN_ENCODING | X509_ASN_ENCODING,
./src/mscrypto/certkeys.c:487:                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/certkeys.c:744:        return (CertGetPublicKeyLength(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/globals.h:26:#if defined(XMLSEC_OPENSSL_096) || defined(XMLSEC_OPENSSL_097)
./src/mscrypto/globals.h:31:#endif /* defined(XMLSEC_OPENSSL_096) || defined(XMLSEC_OPENSSL_097) */
./src/mscrypto/globals.h:34:#if defined(XMLSEC_OPENSSL_096)
./src/mscrypto/globals.h:36:#endif /* XMLSEC_OPENSSL_096 */
./src/mscrypto/x509.c:1757:    cert = CertCreateCertificateContext(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, buf, size);
./src/mscrypto/x509.c:1833:    crl = CertCreateCRLContext(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, buf, size);
./src/mscrypto/x509.c:1889:    csz = CertNameToStr(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, nm, CERT_X500_NAME_STR | CERT_NAME_STR_REVERSE_FLAG, NULL, 0);
./src/mscrypto/x509.c:1909:    csz = CertNameToStr(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, nm, CERT_X500_NAME_STR | CERT_NAME_STR_REVERSE_FLAG, resT, csz + 1);
./src/mscrypto/app.c:239:    pCert = CertCreateCertificateContext(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, data, dataSize);
./src/mscrypto/app.c:455:        pCert = CertCreateCertificateContext(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, data, dataSize);
./src/mscrypto/app.c:892:            pCert = CertCreateCertificateContext(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/mscrypto/keysstore.c:353:            X509_ASN_ENCODING | PKCS_7_ASN_ENCODING);
./src/mscrypto/keysstore.c:408:            X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
./src/gnutls/x509vfy.c:81:static gnutls_x509_crt_t xmlSecGnuTLSX509FindCert                       (xmlSecPtrListPtr certs,
./src/gnutls/x509vfy.c:86:static gnutls_x509_crt_t xmlSecGnuTLSX509FindSignedCert                 (xmlSecPtrListPtr certs,
./src/gnutls/x509vfy.c:87:                                                                         gnutls_x509_crt_t cert);
./src/gnutls/x509vfy.c:88:static gnutls_x509_crt_t xmlSecGnuTLSX509FindSignerCert                 (xmlSecPtrListPtr certs,
./src/gnutls/x509vfy.c:89:                                                                         gnutls_x509_crt_t cert);
./src/gnutls/x509vfy.c:118:gnutls_x509_crt_t
./src/gnutls/x509vfy.c:126:    gnutls_x509_crt_t res = NULL;
./src/gnutls/x509vfy.c:144:xmlSecGnuTLSX509CheckTime(const gnutls_x509_crt_t * cert_list,
./src/gnutls/x509vfy.c:154:        const gnutls_x509_crt_t cert = cert_list[ii];
./src/gnutls/x509vfy.c:160:        notValidBefore = gnutls_x509_crt_get_activation_time(cert);
./src/gnutls/x509vfy.c:164:                        "gnutls_x509_crt_get_activation_time",
./src/gnutls/x509vfy.c:169:        notValidAfter = gnutls_x509_crt_get_expiration_time(cert);
./src/gnutls/x509vfy.c:173:                        "gnutls_x509_crt_get_expiration_time",
./src/gnutls/x509vfy.c:213:gnutls_x509_crt_t
./src/gnutls/x509vfy.c:219:    gnutls_x509_crt_t res = NULL;
./src/gnutls/x509vfy.c:221:    gnutls_x509_crt_t * cert_list = NULL;
./src/gnutls/x509vfy.c:223:    gnutls_x509_crl_t * crl_list = NULL;
./src/gnutls/x509vfy.c:225:    gnutls_x509_crt_t * ca_list = NULL;
./src/gnutls/x509vfy.c:250:        cert_list = (gnutls_x509_crt_t *)xmlMalloc(sizeof(gnutls_x509_crt_t) * cert_list_length);
./src/gnutls/x509vfy.c:256:                        "size=%d", (int)(sizeof(gnutls_x509_crt_t) * cert_list_length));
./src/gnutls/x509vfy.c:262:        crl_list = (gnutls_x509_crl_t *)xmlMalloc(sizeof(gnutls_x509_crl_t) * crl_list_length);
./src/gnutls/x509vfy.c:268:                        "size=%d", (int)(sizeof(gnutls_x509_crl_t) * crl_list_length));
./src/gnutls/x509vfy.c:286:        ca_list = (gnutls_x509_crt_t *)xmlMalloc(sizeof(gnutls_x509_crt_t) * ca_list_length);
./src/gnutls/x509vfy.c:292:                        "size=%d", (int)(sizeof(gnutls_x509_crt_t) * ca_list_length));
./src/gnutls/x509vfy.c:313:    flags |= GNUTLS_VERIFY_DISABLE_TIME_CHECKS;
./src/gnutls/x509vfy.c:316:        flags |= GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2;
./src/gnutls/x509vfy.c:317:        flags |= GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5;
./src/gnutls/x509vfy.c:322:        gnutls_x509_crt_t cert, cert2;
./src/gnutls/x509vfy.c:346:            gnutls_x509_crt_t tmp;
./src/gnutls/x509vfy.c:360:        err = gnutls_x509_crt_list_verify(
./src/gnutls/x509vfy.c:366:        if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509vfy.c:369:                        "gnutls_x509_crt_list_verify",
./src/gnutls/x509vfy.c:371:                        XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509vfy.c:377:                        "gnutls_x509_crt_list_verify",
./src/gnutls/x509vfy.c:427:xmlSecGnuTLSX509StoreAdoptCert(xmlSecKeyDataStorePtr store, gnutls_x509_crt_t cert, xmlSecKeyDataType type) {
./src/gnutls/x509vfy.c:518:#define XMLSEC_GNUTLS_DN_ATTRS_SIZE             1024
./src/gnutls/x509vfy.c:521:    xmlSecGnuTLSDnAttr ll_attrs[XMLSEC_GNUTLS_DN_ATTRS_SIZE];
./src/gnutls/x509vfy.c:522:    xmlSecGnuTLSDnAttr rr_attrs[XMLSEC_GNUTLS_DN_ATTRS_SIZE];
./src/gnutls/x509vfy.c:535:    xmlSecGnuTLSDnAttrsInitialize(ll_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE);
./src/gnutls/x509vfy.c:536:    xmlSecGnuTLSDnAttrsInitialize(rr_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE);
./src/gnutls/x509vfy.c:539:    ret = xmlSecGnuTLSDnAttrsParse(ll, ll_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE);
./src/gnutls/x509vfy.c:549:    ret = xmlSecGnuTLSDnAttrsParse(rr, rr_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE);
./src/gnutls/x509vfy.c:560:    ret = xmlSecGnuTLSDnAttrsEqual(ll_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE,
./src/gnutls/x509vfy.c:561:                                   rr_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE);
./src/gnutls/x509vfy.c:576:    xmlSecGnuTLSDnAttrsDeinitialize(ll_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE);
./src/gnutls/x509vfy.c:577:    xmlSecGnuTLSDnAttrsDeinitialize(rr_attrs, XMLSEC_GNUTLS_DN_ATTRS_SIZE);
./src/gnutls/x509vfy.c:581:static gnutls_x509_crt_t
./src/gnutls/x509vfy.c:594:        gnutls_x509_crt_t cert = xmlSecPtrListGetItem(certs, ii);
./src/gnutls/x509vfy.c:679:static gnutls_x509_crt_t
./src/gnutls/x509vfy.c:680:xmlSecGnuTLSX509FindSignedCert(xmlSecPtrListPtr certs, gnutls_x509_crt_t cert) {
./src/gnutls/x509vfy.c:681:    gnutls_x509_crt_t res = NULL;
./src/gnutls/x509vfy.c:702:        gnutls_x509_crt_t tmp;
./src/gnutls/x509vfy.c:740:static gnutls_x509_crt_t
./src/gnutls/x509vfy.c:741:xmlSecGnuTLSX509FindSignerCert(xmlSecPtrListPtr certs, gnutls_x509_crt_t cert) {
./src/gnutls/x509vfy.c:742:    gnutls_x509_crt_t res = NULL;
./src/gnutls/x509vfy.c:763:        gnutls_x509_crt_t tmp;
./src/gnutls/globals.h:24:#define XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(err)  \
./src/gnutls/globals.h:27:#define XMLSEC_GNUTLS_REPORT_ERROR(err)         \
./src/gnutls/globals.h:29:        (int)err, xmlSecErrorsSafeString(gnutls_strerror((err)))
./src/gnutls/asymkeys.c:34:static void xmlSecGnuTLSDestroyParams(gnutls_datum_t * params, xmlSecSize num) {
./src/gnutls/asymkeys.c:39:        gnutls_free(params[ii].data);
./src/gnutls/asymkeys.c:52:static int xmlSecGnuTLSConvertParamsToMpis(gnutls_datum_t * params, xmlSecSize paramsNum,
./src/gnutls/asymkeys.c:69:                        XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(rc));
./src/gnutls/asymkeys.c:103:xmlSecGnuTLSKeyDataDsaAdoptPrivateKey(xmlSecKeyDataPtr data, gnutls_x509_privkey_t dsa_key) {
./src/gnutls/asymkeys.c:104:    gnutls_datum_t params[5];
./src/gnutls/asymkeys.c:114:    xmlSecAssert2(gnutls_x509_privkey_get_pk_algorithm(dsa_key) == GNUTLS_PK_DSA, -1);
./src/gnutls/asymkeys.c:117:    err = gnutls_x509_privkey_export_dsa_raw(dsa_key,
./src/gnutls/asymkeys.c:120:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/asymkeys.c:123:                    "gnutls_x509_privkey_export_dsa_raw",
./src/gnutls/asymkeys.c:125:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/asymkeys.c:152:                    XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(rc));
./src/gnutls/asymkeys.c:163:                    XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(rc));
./src/gnutls/asymkeys.c:183:    gnutls_x509_privkey_deinit(dsa_key);
./src/gnutls/asymkeys.c:202:                                     gnutls_datum_t * p, gnutls_datum_t * q,
./src/gnutls/asymkeys.c:203:                                     gnutls_datum_t * g, gnutls_datum_t * y) {
./src/gnutls/asymkeys.c:204:    gnutls_datum_t params[4];
./src/gnutls/asymkeys.c:245:                    XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(rc));
./src/gnutls/asymkeys.c:263:    gnutls_free(p->data);
./src/gnutls/asymkeys.c:264:    gnutls_free(q->data);
./src/gnutls/asymkeys.c:265:    gnutls_free(g->data);
./src/gnutls/asymkeys.c:266:    gnutls_free(y->data);
./src/gnutls/asymkeys.c:297:xmlSecGnuTLSKeyDataRsaAdoptPrivateKey(xmlSecKeyDataPtr data, gnutls_x509_privkey_t rsa_key) {
./src/gnutls/asymkeys.c:298:    gnutls_datum_t params[6];
./src/gnutls/asymkeys.c:308:    xmlSecAssert2(gnutls_x509_privkey_get_pk_algorithm(rsa_key) == GNUTLS_PK_RSA, -1);
./src/gnutls/asymkeys.c:311:    err = gnutls_x509_privkey_export_rsa_raw(rsa_key,
./src/gnutls/asymkeys.c:314:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/asymkeys.c:317:                    "gnutls_x509_privkey_export_rsa_raw",
./src/gnutls/asymkeys.c:319:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/asymkeys.c:347:                    XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(rc));
./src/gnutls/asymkeys.c:358:                    XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(rc));
./src/gnutls/asymkeys.c:378:    gnutls_x509_privkey_deinit(rsa_key);
./src/gnutls/asymkeys.c:395:                                     gnutls_datum_t * m, gnutls_datum_t * e) {
./src/gnutls/asymkeys.c:396:    gnutls_datum_t params[2];
./src/gnutls/asymkeys.c:433:                    XMLSEC_GNUTLS_GCRYPT_REPORT_ERROR(rc));
./src/gnutls/asymkeys.c:451:    gnutls_free(m->data);
./src/gnutls/asymkeys.c:452:    gnutls_free(e->data);
./src/gnutls/x509.c:51:static int              xmlSecGnuTLSX509CertificateNodeWrite    (gnutls_x509_crt_t cert,
./src/gnutls/x509.c:57:static int              xmlSecGnuTLSX509SubjectNameNodeWrite    (gnutls_x509_crt_t cert,
./src/gnutls/x509.c:63:static int              xmlSecGnuTLSX509IssuerSerialNodeWrite   (gnutls_x509_crt_t cert,
./src/gnutls/x509.c:69:static int              xmlSecGnuTLSX509SKINodeWrite            (gnutls_x509_crt_t cert,
./src/gnutls/x509.c:75:static int              xmlSecGnuTLSX509CRLNodeWrite            (gnutls_x509_crl_t crl,
./src/gnutls/x509.c:90:    gnutls_x509_crt_t   keyCert;
./src/gnutls/x509.c:271:gnutls_x509_crt_t
./src/gnutls/x509.c:293:xmlSecGnuTLSKeyDataX509AdoptKeyCert(xmlSecKeyDataPtr data, gnutls_x509_crt_t cert) {
./src/gnutls/x509.c:303:        gnutls_x509_crt_deinit(ctx->keyCert);
./src/gnutls/x509.c:319:xmlSecGnuTLSKeyDataX509AdoptCert(xmlSecKeyDataPtr data, gnutls_x509_crt_t cert) {
./src/gnutls/x509.c:352:gnutls_x509_crt_t
./src/gnutls/x509.c:394:xmlSecGnuTLSKeyDataX509AdoptCrl(xmlSecKeyDataPtr data, gnutls_x509_crl_t crl) {
./src/gnutls/x509.c:427:gnutls_x509_crl_t
./src/gnutls/x509.c:511:        gnutls_x509_crt_deinit(ctxDst->keyCert);
./src/gnutls/x509.c:565:        gnutls_x509_crt_deinit(ctx->keyCert);
./src/gnutls/x509.c:619:    gnutls_x509_crt_t cert;
./src/gnutls/x509.c:620:    gnutls_x509_crl_t crl;
./src/gnutls/x509.c:770:        gnutls_x509_crt_t cert;
./src/gnutls/x509.c:782:        gnutls_x509_crt_t cert;
./src/gnutls/x509.c:800:        gnutls_x509_crl_t crl;
./src/gnutls/x509.c:827:        gnutls_x509_crt_t cert;
./src/gnutls/x509.c:840:        gnutls_x509_crt_t cert;
./src/gnutls/x509.c:859:        gnutls_x509_crl_t crl;
./src/gnutls/x509.c:927:    gnutls_x509_crt_t cert;
./src/gnutls/x509.c:968:        gnutls_x509_crt_deinit(cert);
./src/gnutls/x509.c:978:xmlSecGnuTLSX509CertificateNodeWrite(gnutls_x509_crt_t cert, xmlNodePtr node, xmlSecKeyInfoCtxPtr keyInfoCtx) {
./src/gnutls/x509.c:1019:#define XMLSEC_GNUTLS_IS_SPACE(ch) \
./src/gnutls/x509.c:1030:    while(XMLSEC_GNUTLS_IS_SPACE(*p) && ((*p) != '\0')) ++p;
./src/gnutls/x509.c:1042:    while((p > str) && (XMLSEC_GNUTLS_IS_SPACE(*(p - 1)))) *(--p) = '\0';
./src/gnutls/x509.c:1049:    gnutls_x509_crt_t cert;
./src/gnutls/x509.c:1050:    gnutls_x509_crt_t cert2;
./src/gnutls/x509.c:1122:        gnutls_x509_crt_deinit(cert2);
./src/gnutls/x509.c:1132:xmlSecGnuTLSX509SubjectNameNodeWrite(gnutls_x509_crt_t cert, xmlNodePtr node, xmlSecKeyInfoCtxPtr keyInfoCtx ATTRIBUTE_UNUSED) {
./src/gnutls/x509.c:1176:    gnutls_x509_crt_t cert;
./src/gnutls/x509.c:1177:    gnutls_x509_crt_t cert2;
./src/gnutls/x509.c:1307:        gnutls_x509_crt_deinit(cert2);
./src/gnutls/x509.c:1319:xmlSecGnuTLSX509IssuerSerialNodeWrite(gnutls_x509_crt_t cert, xmlNodePtr node, xmlSecKeyInfoCtxPtr keyInfoCtx ATTRIBUTE_UNUSED) {
./src/gnutls/x509.c:1395:    gnutls_x509_crt_t cert;
./src/gnutls/x509.c:1396:    gnutls_x509_crt_t cert2;
./src/gnutls/x509.c:1466:        gnutls_x509_crt_deinit(cert2);
./src/gnutls/x509.c:1476:xmlSecGnuTLSX509SKINodeWrite(gnutls_x509_crt_t cert, xmlNodePtr node, xmlSecKeyInfoCtxPtr keyInfoCtx ATTRIBUTE_UNUSED) {
./src/gnutls/x509.c:1515:    gnutls_x509_crl_t crl;
./src/gnutls/x509.c:1556:        gnutls_x509_crl_deinit(crl);
./src/gnutls/x509.c:1566:xmlSecGnuTLSX509CRLNodeWrite(gnutls_x509_crl_t crl, xmlNodePtr node, xmlSecKeyInfoCtxPtr keyInfoCtx) {
./src/gnutls/x509.c:1632:        gnutls_x509_crt_t cert;
./src/gnutls/x509.c:1681:            key->notValidBefore = gnutls_x509_crt_get_activation_time(ctx->keyCert);
./src/gnutls/x509.c:1685:                            "gnutls_x509_crt_get_activation_time",
./src/gnutls/x509.c:1690:            key->notValidAfter = gnutls_x509_crt_get_expiration_time(ctx->keyCert);
./src/gnutls/x509.c:1694:                            "gnutls_x509_crt_get_expiration_time",
./src/gnutls/x509.c:1720:xmlSecGnuTLSX509CertGetKey(gnutls_x509_crt_t cert) {
./src/gnutls/x509.c:1729:    alg = gnutls_x509_crt_get_pk_algorithm(cert, &bits);
./src/gnutls/x509.c:1733:                    "gnutls_x509_crt_get_pk_algorithm",
./src/gnutls/x509.c:1735:                    XMLSEC_GNUTLS_REPORT_ERROR(alg));
./src/gnutls/x509.c:1741:    case GNUTLS_PK_RSA:
./src/gnutls/x509.c:1743:            gnutls_datum_t m, e;
./src/gnutls/x509.c:1755:            err = gnutls_x509_crt_get_pk_rsa_raw(cert, &m, &e);
./src/gnutls/x509.c:1756:            if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509.c:1759:                            "gnutls_x509_crt_get_pk_rsa_raw",
./src/gnutls/x509.c:1761:                            XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509.c:1772:                gnutls_free(m.data);
./src/gnutls/x509.c:1773:                gnutls_free(e.data);
./src/gnutls/x509.c:1782:    case GNUTLS_PK_DSA:
./src/gnutls/x509.c:1784:            gnutls_datum_t p, q, g, y;
./src/gnutls/x509.c:1796:            err = gnutls_x509_crt_get_pk_dsa_raw(cert, &p, &q, &g, &y);
./src/gnutls/x509.c:1797:            if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509.c:1800:                            "gnutls_x509_crt_get_pk_dsa_raw",
./src/gnutls/x509.c:1802:                            XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509.c:1813:                gnutls_free(p.data);
./src/gnutls/x509.c:1814:                gnutls_free(q.data);
./src/gnutls/x509.c:1815:                gnutls_free(g.data);
./src/gnutls/x509.c:1816:                gnutls_free(y.data);
./src/gnutls/x509.c:1828:                        "gnutls_x509_crt_get_pk_algorithm",
./src/gnutls/x509.c:1907:    gnutls_x509_crt_t cert;
./src/gnutls/x509.c:1933:        gnutls_x509_crt_deinit(cert);
./src/gnutls/x509.c:1944:        gnutls_x509_crt_deinit(cert);
./src/gnutls/x509utils.c:76:    return xmlSecGnuTLSX509CertDup((gnutls_x509_crt_t)ptr);
./src/gnutls/x509utils.c:83:    gnutls_x509_crt_deinit((gnutls_x509_crt_t)ptr);
./src/gnutls/x509utils.c:91:    xmlSecGnuTLSX509CertDebugDump((gnutls_x509_crt_t)ptr, output);
./src/gnutls/x509utils.c:100:    xmlSecGnuTLSX509CertDebugXmlDump((gnutls_x509_crt_t)ptr, output);
./src/gnutls/x509utils.c:132:    return xmlSecGnuTLSX509CrlDup((gnutls_x509_crl_t)ptr);
./src/gnutls/x509utils.c:139:    gnutls_x509_crl_deinit((gnutls_x509_crl_t)ptr);
./src/gnutls/x509utils.c:147:    xmlSecGnuTLSX509CrlDebugDump((gnutls_x509_crl_t)ptr, output);
./src/gnutls/x509utils.c:156:    xmlSecGnuTLSX509CrlDebugXmlDump((gnutls_x509_crl_t)ptr, output);
./src/gnutls/x509utils.c:167:gnutls_x509_crt_t
./src/gnutls/x509utils.c:168:xmlSecGnuTLSX509CertDup(gnutls_x509_crt_t src) {
./src/gnutls/x509utils.c:170:    gnutls_x509_crt_t res = NULL;
./src/gnutls/x509utils.c:201:xmlSecGnuTLSX509CertGetSubjectDN(gnutls_x509_crt_t cert) {
./src/gnutls/x509utils.c:209:    err = gnutls_x509_crt_get_dn(cert, NULL, &bufSize);
./src/gnutls/x509utils.c:210:    if((err != GNUTLS_E_SHORT_MEMORY_BUFFER) || (bufSize <= 0)) {
./src/gnutls/x509utils.c:213:                    "gnutls_x509_crt_get_dn",
./src/gnutls/x509utils.c:215:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:231:    err = gnutls_x509_crt_get_dn(cert, buf, &bufSize);
./src/gnutls/x509utils.c:232:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:235:                    "gnutls_x509_crt_get_dn",
./src/gnutls/x509utils.c:237:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:247:xmlSecGnuTLSX509CertGetIssuerDN(gnutls_x509_crt_t cert) {
./src/gnutls/x509utils.c:255:    err = gnutls_x509_crt_get_issuer_dn(cert, NULL, &bufSize);
./src/gnutls/x509utils.c:256:    if((err != GNUTLS_E_SHORT_MEMORY_BUFFER) || (bufSize <= 0)) {
./src/gnutls/x509utils.c:259:                    "gnutls_x509_crt_get_issuer_dn",
./src/gnutls/x509utils.c:261:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:277:    err = gnutls_x509_crt_get_issuer_dn(cert, buf, &bufSize);
./src/gnutls/x509utils.c:278:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:281:                    "gnutls_x509_crt_get_issuer_dn",
./src/gnutls/x509utils.c:283:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:293:xmlSecGnuTLSX509CertGetIssuerSerial(gnutls_x509_crt_t cert) {
./src/gnutls/x509utils.c:302:    err = gnutls_x509_crt_get_serial(cert, NULL, &bufSize);
./src/gnutls/x509utils.c:303:    if((err != GNUTLS_E_SHORT_MEMORY_BUFFER) || (bufSize <= 0)) {
./src/gnutls/x509utils.c:306:                    "gnutls_x509_crt_get_serial",
./src/gnutls/x509utils.c:308:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:324:    err = gnutls_x509_crt_get_serial(cert, buf, &bufSize);
./src/gnutls/x509utils.c:325:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:328:                    "gnutls_x509_crt_get_serial",
./src/gnutls/x509utils.c:330:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:353:xmlSecGnuTLSX509CertGetSKI(gnutls_x509_crt_t cert) {
./src/gnutls/x509utils.c:363:    err = gnutls_x509_crt_get_subject_key_id(cert, NULL, &bufSize, &critical);
./src/gnutls/x509utils.c:364:    if((err != GNUTLS_E_SHORT_MEMORY_BUFFER) || (bufSize <= 0)) {
./src/gnutls/x509utils.c:367:                    "gnutls_x509_crt_get_subject_key_id",
./src/gnutls/x509utils.c:369:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:385:    err = gnutls_x509_crt_get_subject_key_id(cert, buf, &bufSize, &critical);
./src/gnutls/x509utils.c:386:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:389:                    "gnutls_x509_crt_get_subject_key_id",
./src/gnutls/x509utils.c:391:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:414:gnutls_x509_crt_t
./src/gnutls/x509utils.c:434:gnutls_x509_crt_t
./src/gnutls/x509utils.c:436:    gnutls_x509_crt_t cert = NULL;
./src/gnutls/x509utils.c:437:    gnutls_x509_crt_fmt_t fmt;
./src/gnutls/x509utils.c:438:    gnutls_datum_t data;
./src/gnutls/x509utils.c:448:        fmt = GNUTLS_X509_FMT_PEM;
./src/gnutls/x509utils.c:452:        fmt = GNUTLS_X509_FMT_DER;
./src/gnutls/x509utils.c:464:    err = gnutls_x509_crt_init(&cert);
./src/gnutls/x509utils.c:465:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:468:                    "gnutls_x509_crt_init",
./src/gnutls/x509utils.c:470:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:476:    err = gnutls_x509_crt_import(cert, &data, fmt);
./src/gnutls/x509utils.c:477:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:480:                    "gnutls_x509_crt_import",
./src/gnutls/x509utils.c:482:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:483:        gnutls_x509_crt_deinit(cert);
./src/gnutls/x509utils.c:491:xmlSecGnuTLSX509CertBase64DerWrite(gnutls_x509_crt_t cert, int base64LineWrap) {
./src/gnutls/x509utils.c:500:    err = gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, NULL, &bufSize);
./src/gnutls/x509utils.c:501:    if((err != GNUTLS_E_SHORT_MEMORY_BUFFER) || (bufSize <= 0)) {
./src/gnutls/x509utils.c:504:                    "gnutls_x509_crt_export(GNUTLS_X509_FMT_DER)",
./src/gnutls/x509utils.c:506:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:522:    err = gnutls_x509_crt_export(cert, GNUTLS_X509_FMT_DER, buf, &bufSize);
./src/gnutls/x509utils.c:523:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:526:                    "gnutls_x509_crt_export(GNUTLS_X509_FMT_DER)",
./src/gnutls/x509utils.c:528:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:551:xmlSecGnuTLSX509CertDebugDump(gnutls_x509_crt_t cert, FILE* output) {
./src/gnutls/x509utils.c:583:xmlSecGnuTLSX509CertDebugXmlDump(gnutls_x509_crt_t cert, FILE* output) {
./src/gnutls/x509utils.c:622:gnutls_x509_crl_t
./src/gnutls/x509utils.c:623:xmlSecGnuTLSX509CrlDup(gnutls_x509_crl_t src) {
./src/gnutls/x509utils.c:625:    gnutls_x509_crl_t res = NULL;
./src/gnutls/x509utils.c:656:xmlSecGnuTLSX509CrlGetIssuerDN(gnutls_x509_crl_t crl) {
./src/gnutls/x509utils.c:664:    err = gnutls_x509_crl_get_issuer_dn(crl, NULL, &bufSize);
./src/gnutls/x509utils.c:665:    if((err != GNUTLS_E_SHORT_MEMORY_BUFFER) || (bufSize <= 0)) {
./src/gnutls/x509utils.c:668:                    "gnutls_x509_crl_get_issuer_dn",
./src/gnutls/x509utils.c:670:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:686:    err = gnutls_x509_crl_get_issuer_dn(crl, buf, &bufSize);
./src/gnutls/x509utils.c:687:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:690:                    "gnutls_x509_crl_get_issuer_dn",
./src/gnutls/x509utils.c:692:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:701:gnutls_x509_crl_t
./src/gnutls/x509utils.c:721:gnutls_x509_crl_t
./src/gnutls/x509utils.c:723:    gnutls_x509_crl_t crl = NULL;
./src/gnutls/x509utils.c:724:    gnutls_x509_crt_fmt_t fmt;
./src/gnutls/x509utils.c:725:    gnutls_datum_t data;
./src/gnutls/x509utils.c:735:        fmt = GNUTLS_X509_FMT_PEM;
./src/gnutls/x509utils.c:739:        fmt = GNUTLS_X509_FMT_DER;
./src/gnutls/x509utils.c:751:    err = gnutls_x509_crl_init(&crl);
./src/gnutls/x509utils.c:752:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:755:                    "gnutls_x509_crl_init",
./src/gnutls/x509utils.c:757:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:763:    err = gnutls_x509_crl_import(crl, &data, fmt);
./src/gnutls/x509utils.c:764:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:767:                    "gnutls_x509_crl_import",
./src/gnutls/x509utils.c:769:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:770:        gnutls_x509_crl_deinit(crl);
./src/gnutls/x509utils.c:778:xmlSecGnuTLSX509CrlBase64DerWrite(gnutls_x509_crl_t crl, int base64LineWrap) {
./src/gnutls/x509utils.c:787:    err = gnutls_x509_crl_export(crl, GNUTLS_X509_FMT_DER, NULL, &bufSize);
./src/gnutls/x509utils.c:788:    if((err != GNUTLS_E_SHORT_MEMORY_BUFFER) || (bufSize <= 0)) {
./src/gnutls/x509utils.c:791:                    "gnutls_x509_crl_export(GNUTLS_X509_FMT_DER)",
./src/gnutls/x509utils.c:793:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:809:    err = gnutls_x509_crl_export(crl, GNUTLS_X509_FMT_DER, buf, &bufSize);
./src/gnutls/x509utils.c:810:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:813:                    "gnutls_x509_crl_export(GNUTLS_X509_FMT_DER)",
./src/gnutls/x509utils.c:815:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:838:xmlSecGnuTLSX509CrlDebugDump(gnutls_x509_crl_t crl, FILE* output) {
./src/gnutls/x509utils.c:854:xmlSecGnuTLSX509CrlDebugXmlDump(gnutls_x509_crl_t crl, FILE* output) {
./src/gnutls/x509utils.c:912:                             gnutls_x509_privkey_t * priv_key,
./src/gnutls/x509utils.c:913:                             gnutls_x509_crt_t * key_cert,
./src/gnutls/x509utils.c:916:    gnutls_pkcs12_t pkcs12 = NULL;
./src/gnutls/x509utils.c:917:    gnutls_pkcs12_bag_t bag = NULL;
./src/gnutls/x509utils.c:918:    gnutls_x509_crt_t cert = NULL;
./src/gnutls/x509utils.c:919:    gnutls_datum_t datum;
./src/gnutls/x509utils.c:935:    err = gnutls_pkcs12_init(&pkcs12);
./src/gnutls/x509utils.c:936:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:939:                    "gnutls_pkcs12_init",
./src/gnutls/x509utils.c:941:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:947:    err = gnutls_pkcs12_import(pkcs12, &datum, GNUTLS_X509_FMT_DER, 0);
./src/gnutls/x509utils.c:948:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:951:                    "gnutls_pkcs12_import",
./src/gnutls/x509utils.c:953:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:958:    err = gnutls_pkcs12_verify_mac(pkcs12, pwd);
./src/gnutls/x509utils.c:959:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:962:                    "gnutls_pkcs12_verify_mac",
./src/gnutls/x509utils.c:964:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:974:        err = gnutls_pkcs12_bag_init(&bag);
./src/gnutls/x509utils.c:975:        if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:978:                        "gnutls_pkcs12_bag_init",
./src/gnutls/x509utils.c:980:                        XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:984:        err = gnutls_pkcs12_get_bag(pkcs12, idx, bag);
./src/gnutls/x509utils.c:985:        if(err == GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE) {
./src/gnutls/x509utils.c:988:        } else if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:991:                        "gnutls_pkcs12_get_bag",
./src/gnutls/x509utils.c:993:                        XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:998:        bag_type = gnutls_pkcs12_bag_get_type(bag, 0);
./src/gnutls/x509utils.c:1002:                        "gnutls_pkcs12_bag_get_type",
./src/gnutls/x509utils.c:1004:                        XMLSEC_GNUTLS_REPORT_ERROR(bag_type));
./src/gnutls/x509utils.c:1007:        if(bag_type == GNUTLS_BAG_ENCRYPTED) {
./src/gnutls/x509utils.c:1008:            err = gnutls_pkcs12_bag_decrypt(bag, pwd);
./src/gnutls/x509utils.c:1009:            if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1012:                            "gnutls_pkcs12_bag_decrypt",
./src/gnutls/x509utils.c:1014:                            XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1020:        elements_in_bag = gnutls_pkcs12_bag_get_count(bag);
./src/gnutls/x509utils.c:1024:                        "gnutls_pkcs12_bag_get_count",
./src/gnutls/x509utils.c:1026:                        XMLSEC_GNUTLS_REPORT_ERROR(bag_type));
./src/gnutls/x509utils.c:1030:            bag_type = gnutls_pkcs12_bag_get_type(bag, ii);
./src/gnutls/x509utils.c:1034:                            "gnutls_pkcs12_bag_get_type",
./src/gnutls/x509utils.c:1036:                            XMLSEC_GNUTLS_REPORT_ERROR(bag_type));
./src/gnutls/x509utils.c:1040:            err = gnutls_pkcs12_bag_get_data(bag, ii, &datum);
./src/gnutls/x509utils.c:1041:            if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1044:                            "gnutls_pkcs12_bag_get_data",
./src/gnutls/x509utils.c:1046:                            XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1051:            case GNUTLS_BAG_PKCS8_ENCRYPTED_KEY:
./src/gnutls/x509utils.c:1052:            case GNUTLS_BAG_PKCS8_KEY:
./src/gnutls/x509utils.c:1055:                    err = gnutls_x509_privkey_init(priv_key);
./src/gnutls/x509utils.c:1056:                    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1059:                                    "gnutls_x509_privkey_init",
./src/gnutls/x509utils.c:1061:                                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1065:                    err = gnutls_x509_privkey_import_pkcs8((*priv_key),
./src/gnutls/x509utils.c:1066:                                &datum, GNUTLS_X509_FMT_DER,
./src/gnutls/x509utils.c:1068:                                (bag_type == GNUTLS_BAG_PKCS8_KEY) ? GNUTLS_PKCS_PLAIN : 0);
./src/gnutls/x509utils.c:1069:                    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1072:                                    "gnutls_x509_privkey_import_pkcs8",
./src/gnutls/x509utils.c:1074:                                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1079:            case GNUTLS_BAG_CERTIFICATE:
./src/gnutls/x509utils.c:1080:                err = gnutls_x509_crt_init(&cert);
./src/gnutls/x509utils.c:1081:                if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1084:                                "gnutls_x509_crt_init",
./src/gnutls/x509utils.c:1086:                                XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1090:                err = gnutls_x509_crt_import(cert, &datum, GNUTLS_X509_FMT_DER);
./src/gnutls/x509utils.c:1091:                if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1094:                                "gnutls_x509_crt_import",
./src/gnutls/x509utils.c:1096:                                XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1118:        gnutls_pkcs12_bag_deinit(bag);
./src/gnutls/x509utils.c:1142:        err = gnutls_x509_privkey_get_key_id((*priv_key), 0, key_id, &key_id_size);
./src/gnutls/x509utils.c:1143:        if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1146:                        "gnutls_x509_privkey_get_key_id",
./src/gnutls/x509utils.c:1148:                        XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1152:            gnutls_x509_crt_t tmp;
./src/gnutls/x509utils.c:1160:            err = gnutls_x509_crt_get_key_id(tmp, 0, cert_id, &cert_id_size);
./src/gnutls/x509utils.c:1161:            if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/x509utils.c:1164:                            "gnutls_x509_crt_get_key_id",
./src/gnutls/x509utils.c:1166:                            XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/x509utils.c:1203:        gnutls_x509_crt_deinit(cert);
./src/gnutls/x509utils.c:1206:        gnutls_pkcs12_bag_deinit(bag);
./src/gnutls/x509utils.c:1209:        gnutls_pkcs12_deinit(pkcs12);
./src/gnutls/x509utils.c:1215:xmlSecGnuTLSCreateKeyDataAndAdoptPrivKey(gnutls_x509_privkey_t priv_key) {
./src/gnutls/x509utils.c:1223:    key_alg = gnutls_x509_privkey_get_pk_algorithm(priv_key);
./src/gnutls/x509utils.c:1227:                    "gnutls_x509_privkey_get_pk_algorithm",
./src/gnutls/x509utils.c:1229:                    XMLSEC_GNUTLS_REPORT_ERROR(key_alg));
./src/gnutls/x509utils.c:1234:    case GNUTLS_PK_RSA:
./src/gnutls/x509utils.c:1259:    case GNUTLS_PK_DSA:
./src/gnutls/x509utils.c:1285:                    "gnutls_x509_privkey_get_pk_algorithm",
./src/gnutls/x509utils.c:1474:#define XMLSEC_GNUTLS_IS_SPACE(ch)      \
./src/gnutls/x509utils.c:1512:            if(!XMLSEC_GNUTLS_IS_SPACE(ch)) {
./src/gnutls/x509utils.c:1529:                while((p > tmp) && (XMLSEC_GNUTLS_IS_SPACE(*(p - 1)))) {
./src/gnutls/x509utils.c:1557:            if(!XMLSEC_GNUTLS_IS_SPACE(ch)) {
./src/gnutls/x509utils.c:1580:                while((p > tmp) && (XMLSEC_GNUTLS_IS_SPACE(*(p - 1)))) {
./src/gnutls/x509utils.c:1627:            if(!XMLSEC_GNUTLS_IS_SPACE(ch)) {
./src/gnutls/app.c:52:    err = gnutls_global_init();
./src/gnutls/app.c:53:    if(err != GNUTLS_E_SUCCESS) {
./src/gnutls/app.c:56:                    "gnutls_global_init",
./src/gnutls/app.c:58:                    XMLSEC_GNUTLS_REPORT_ERROR(err));
./src/gnutls/app.c:76:    gnutls_global_deinit();
./src/gnutls/app.c:239:    gnutls_x509_crt_t cert;
./src/gnutls/app.c:275:        gnutls_x509_crt_deinit(cert);
./src/gnutls/app.c:372:    gnutls_x509_privkey_t priv_key = NULL;
./src/gnutls/app.c:373:    gnutls_x509_crt_t key_cert = NULL;
./src/gnutls/app.c:469:            gnutls_x509_crt_t cert = xmlSecPtrListRemoveAndReturn(&certsList, ii);
./src/gnutls/app.c:481:                gnutls_x509_crt_deinit(cert);
./src/gnutls/app.c:506:        gnutls_x509_crt_deinit(key_cert);
./src/gnutls/app.c:509:        gnutls_x509_privkey_deinit(priv_key);
./src/gnutls/app.c:584:    gnutls_x509_crt_t cert = NULL;
./src/gnutls/app.c:664:        gnutls_x509_crt_deinit(cert);
./src/gnutls/app.c:763:    gnutls_x509_crt_t cert;
./src/gnutls/app.c:798:        gnutls_x509_crt_deinit(cert);
./src/gnutls/x509utils.h:12:#ifndef __XMLSEC_GNUTLS_X509UTILS_H__
./src/gnutls/x509utils.h:13:#define __XMLSEC_GNUTLS_X509UTILS_H__
./src/gnutls/x509utils.h:48:gnutls_x509_crt_t       xmlSecGnuTLSX509CertDup                 (gnutls_x509_crt_t src);
./src/gnutls/x509utils.h:49:xmlChar *               xmlSecGnuTLSX509CertGetSubjectDN        (gnutls_x509_crt_t cert);
./src/gnutls/x509utils.h:50:xmlChar *               xmlSecGnuTLSX509CertGetIssuerDN         (gnutls_x509_crt_t cert);
./src/gnutls/x509utils.h:51:xmlChar *               xmlSecGnuTLSX509CertGetIssuerSerial     (gnutls_x509_crt_t cert);
./src/gnutls/x509utils.h:52:xmlChar *               xmlSecGnuTLSX509CertGetSKI              (gnutls_x509_crt_t cert);
./src/gnutls/x509utils.h:53:gnutls_x509_crt_t       xmlSecGnuTLSX509CertRead                (const xmlSecByte* buf,
./src/gnutls/x509utils.h:56:gnutls_x509_crt_t       xmlSecGnuTLSX509CertBase64DerRead       (xmlChar* buf);
./src/gnutls/x509utils.h:57:xmlChar*                xmlSecGnuTLSX509CertBase64DerWrite      (gnutls_x509_crt_t cert,
./src/gnutls/x509utils.h:59:void                    xmlSecGnuTLSX509CertDebugDump           (gnutls_x509_crt_t cert,
./src/gnutls/x509utils.h:61:void                    xmlSecGnuTLSX509CertDebugXmlDump        (gnutls_x509_crt_t cert,
./src/gnutls/x509utils.h:69:gnutls_x509_crl_t       xmlSecGnuTLSX509CrlDup                  (gnutls_x509_crl_t src);
./src/gnutls/x509utils.h:70:xmlChar *               xmlSecGnuTLSX509CrLGetIssuerDN          (gnutls_x509_crl_t crl);
./src/gnutls/x509utils.h:71:gnutls_x509_crl_t       xmlSecGnuTLSX509CrlRead                 (const xmlSecByte* buf,
./src/gnutls/x509utils.h:74:gnutls_x509_crl_t       xmlSecGnuTLSX509CrlBase64DerRead        (xmlChar* buf);
./src/gnutls/x509utils.h:75:xmlChar*                xmlSecGnuTLSX509CrlBase64DerWrite       (gnutls_x509_crl_t crl,
./src/gnutls/x509utils.h:77:void                    xmlSecGnuTLSX509CrlDebugDump            (gnutls_x509_crl_t crl,
./src/gnutls/x509utils.h:79:void                    xmlSecGnuTLSX509CrlDebugXmlDump         (gnutls_x509_crl_t crl,
./src/gnutls/x509utils.h:100:                                                                 gnutls_x509_privkey_t * priv_key,
./src/gnutls/x509utils.h:101:                                                                 gnutls_x509_crt_t * key_cert,
./src/gnutls/x509utils.h:109:xmlSecKeyDataPtr        xmlSecGnuTLSCreateKeyDataAndAdoptPrivKey(gnutls_x509_privkey_t priv_key);
./src/gnutls/x509utils.h:143:#endif /* ! __XMLSEC_GNUTLS_X509UTILS_H__ */
./src/openssl/x509vfy.c:48:    X509_STORE*         xst;
./src/openssl/x509vfy.c:50:    STACK_OF(X509_CRL)* crls;
./src/openssl/x509vfy.c:52:#if !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097)
./src/openssl/x509vfy.c:53:    X509_VERIFY_PARAM * vpm;
./src/openssl/x509vfy.c:54:#endif /* !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097) */
./src/openssl/x509vfy.c:89:static int              xmlSecOpenSSLX509VerifyCRL                      (X509_STORE* xst,
./src/openssl/x509vfy.c:90:                                                                         X509_CRL *crl );
./src/openssl/x509vfy.c:98:static int              xmlSecOpenSSLX509VerifyCertAgainstCrls          (STACK_OF(X509_CRL) *crls,
./src/openssl/x509vfy.c:100:static X509_NAME*       xmlSecOpenSSLX509NameRead                       (xmlSecByte *str,
./src/openssl/x509vfy.c:108:static int              xmlSecOpenSSLX509NamesCompare                   (X509_NAME *a,
./src/openssl/x509vfy.c:109:                                                                         X509_NAME *b);
./src/openssl/x509vfy.c:110:static int              xmlSecOpenSSLX509_NAME_cmp                      (const X509_NAME * a,
./src/openssl/x509vfy.c:111:                                                                         const X509_NAME * b);
./src/openssl/x509vfy.c:112:static int              xmlSecOpenSSLX509_NAME_ENTRY_cmp                (const X509_NAME_ENTRY * const *a,
./src/openssl/x509vfy.c:113:                                                                         const X509_NAME_ENTRY * const *b);
./src/openssl/x509vfy.c:173:                             XMLSEC_STACK_OF_X509_CRL* crls, xmlSecKeyInfoCtx* keyInfoCtx) {
./src/openssl/x509vfy.c:176:    STACK_OF(X509_CRL)* crls2 = NULL;
./src/openssl/x509vfy.c:194:    certs2 = sk_X509_dup(certs);
./src/openssl/x509vfy.c:198:                    "sk_X509_dup",
./src/openssl/x509vfy.c:206:        for(i = 0; i < sk_X509_num(ctx->untrusted); ++i) {
./src/openssl/x509vfy.c:207:            ret = sk_X509_push(certs2, sk_X509_value(ctx->untrusted, i));
./src/openssl/x509vfy.c:211:                            "sk_X509_push",
./src/openssl/x509vfy.c:221:        crls2 = sk_X509_CRL_dup(crls);
./src/openssl/x509vfy.c:225:                        "sk_X509_CRL_dup",
./src/openssl/x509vfy.c:231:        for(i = 0; i < sk_X509_CRL_num(crls2); ) {
./src/openssl/x509vfy.c:232:            ret = xmlSecOpenSSLX509VerifyCRL(ctx->xst, sk_X509_CRL_value(crls2, i));
./src/openssl/x509vfy.c:236:                (void)sk_X509_CRL_delete(crls2, i);
./src/openssl/x509vfy.c:249:    for(i = 0; i < sk_X509_num(certs2);) {
./src/openssl/x509vfy.c:250:        cert = sk_X509_value(certs2, i);
./src/openssl/x509vfy.c:255:                (void)sk_X509_delete(certs2, i);
./src/openssl/x509vfy.c:270:                (void)sk_X509_delete(certs2, i);
./src/openssl/x509vfy.c:285:    for(i = 0; i < sk_X509_num(certs2); ++i) {
./src/openssl/x509vfy.c:286:        cert = sk_X509_value(certs2, i);
./src/openssl/x509vfy.c:288:            X509_STORE_CTX xsc;
./src/openssl/x509vfy.c:290:#if !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097)
./src/openssl/x509vfy.c:291:            X509_VERIFY_PARAM * vpm = NULL;
./src/openssl/x509vfy.c:294:            vpm = X509_VERIFY_PARAM_new();
./src/openssl/x509vfy.c:298:                            "X509_VERIFY_PARAM_new",
./src/openssl/x509vfy.c:305:            vpm_flags &= (~X509_V_FLAG_X509_STRICT);
./src/openssl/x509vfy.c:307:            vpm_flags &= (~X509_V_FLAG_CRL_CHECK);
./src/openssl/x509vfy.c:309:            X509_VERIFY_PARAM_set_depth(vpm, 9);
./src/openssl/x509vfy.c:310:            X509_VERIFY_PARAM_set_flags(vpm, vpm_flags);
./src/openssl/x509vfy.c:311:#endif /* !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097) */
./src/openssl/x509vfy.c:314:            X509_STORE_CTX_init (&xsc, ctx->xst, cert, certs2);
./src/openssl/x509vfy.c:317:#if !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097)
./src/openssl/x509vfy.c:318:                vpm_flags |= X509_V_FLAG_USE_CHECK_TIME;
./src/openssl/x509vfy.c:319:                X509_VERIFY_PARAM_set_time(vpm, keyInfoCtx->certsVerificationTime);
./src/openssl/x509vfy.c:320:#endif /* !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097) */
./src/openssl/x509vfy.c:321:                X509_STORE_CTX_set_time(&xsc, 0, keyInfoCtx->certsVerificationTime);
./src/openssl/x509vfy.c:324:#if !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097)
./src/openssl/x509vfy.c:325:            X509_STORE_CTX_set0_param(&xsc, vpm);
./src/openssl/x509vfy.c:326:#endif /* !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097) */
./src/openssl/x509vfy.c:329:            ret         = X509_verify_cert(&xsc);
./src/openssl/x509vfy.c:330:            err_cert    = X509_STORE_CTX_get_current_cert(&xsc);
./src/openssl/x509vfy.c:331:            err         = X509_STORE_CTX_get_error(&xsc);
./src/openssl/x509vfy.c:332:            depth       = X509_STORE_CTX_get_error_depth(&xsc);
./src/openssl/x509vfy.c:334:            X509_STORE_CTX_cleanup (&xsc);
./src/openssl/x509vfy.c:343:                X509_NAME_oneline(X509_get_subject_name(err_cert), buf, sizeof buf);
./src/openssl/x509vfy.c:344:                err_msg = X509_verify_cert_error_string(err);
./src/openssl/x509vfy.c:347:                            "X509_verify_cert",
./src/openssl/x509vfy.c:358:                X509_NAME_oneline(X509_get_subject_name(err_cert), buf, sizeof buf);
./src/openssl/x509vfy.c:359:                err_msg = X509_verify_cert_error_string(err);
./src/openssl/x509vfy.c:362:                            "X509_verify_cert",
./src/openssl/x509vfy.c:376:        err_msg = X509_verify_cert_error_string(err);
./src/openssl/x509vfy.c:378:        case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
./src/openssl/x509vfy.c:379:            X509_NAME_oneline(X509_get_issuer_name(err_cert), buf, sizeof buf);
./src/openssl/x509vfy.c:389:        case X509_V_ERR_CERT_NOT_YET_VALID:
./src/openssl/x509vfy.c:390:        case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:
./src/openssl/x509vfy.c:398:        case X509_V_ERR_CERT_HAS_EXPIRED:
./src/openssl/x509vfy.c:399:        case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:
./src/openssl/x509vfy.c:419:        sk_X509_free(certs2);
./src/openssl/x509vfy.c:422:        sk_X509_CRL_free(crls2);
./src/openssl/x509vfy.c:451:        ret = X509_STORE_add_cert(ctx->xst, cert);
./src/openssl/x509vfy.c:455:                        "X509_STORE_add_cert",
./src/openssl/x509vfy.c:461:        X509_free(cert);
./src/openssl/x509vfy.c:465:        ret = sk_X509_push(ctx->untrusted, cert);
./src/openssl/x509vfy.c:469:                        "sk_X509_push",
./src/openssl/x509vfy.c:481: * @crl:                the pointer to OpenSSL X509_CRL.
./src/openssl/x509vfy.c:488:xmlSecOpenSSLX509StoreAdoptCrl(xmlSecKeyDataStorePtr store, X509_CRL* crl) {
./src/openssl/x509vfy.c:499:        ret = sk_X509_CRL_push(ctx->crls, crl);
./src/openssl/x509vfy.c:503:                        "sk_X509_CRL_push",
./src/openssl/x509vfy.c:525:    X509_LOOKUP *lookup = NULL;
./src/openssl/x509vfy.c:534:    lookup = X509_STORE_add_lookup(ctx->xst, X509_LOOKUP_hash_dir());
./src/openssl/x509vfy.c:538:                    "X509_STORE_add_lookup",
./src/openssl/x509vfy.c:543:    if(!X509_LOOKUP_add_dir(lookup, path, X509_FILETYPE_PEM)) {
./src/openssl/x509vfy.c:546:                    "X509_LOOKUP_add_dir",
./src/openssl/x509vfy.c:569:    X509_LOOKUP *lookup = NULL;
./src/openssl/x509vfy.c:578:    lookup = X509_STORE_add_lookup(ctx->xst, X509_LOOKUP_file());
./src/openssl/x509vfy.c:582:                    "X509_STORE_add_lookup",
./src/openssl/x509vfy.c:587:    if(!X509_LOOKUP_load_file(lookup, file, X509_FILETYPE_PEM)) {
./src/openssl/x509vfy.c:590:                    "X509_LOOKUP_load_file",
./src/openssl/x509vfy.c:603:    X509_LOOKUP *lookup = NULL;
./src/openssl/x509vfy.c:613:    ctx->xst = X509_STORE_new();
./src/openssl/x509vfy.c:617:                    "X509_STORE_new",
./src/openssl/x509vfy.c:623:    if(!X509_STORE_set_default_paths(ctx->xst)) {
./src/openssl/x509vfy.c:626:                    "X509_STORE_set_default_paths",
./src/openssl/x509vfy.c:633:    lookup = X509_STORE_add_lookup(ctx->xst, X509_LOOKUP_hash_dir());
./src/openssl/x509vfy.c:637:                    "X509_STORE_add_lookup",
./src/openssl/x509vfy.c:645:        if(!X509_LOOKUP_add_dir(lookup, (char*)path, X509_FILETYPE_PEM)) {
./src/openssl/x509vfy.c:648:                    "X509_LOOKUP_add_dir",
./src/openssl/x509vfy.c:656:        if(!X509_LOOKUP_add_dir(lookup, NULL, X509_FILETYPE_DEFAULT)) {
./src/openssl/x509vfy.c:659:                    "X509_LOOKUP_add_dir",
./src/openssl/x509vfy.c:667:    ctx->untrusted = sk_X509_new_null();
./src/openssl/x509vfy.c:671:                    "sk_X509_new_null",
./src/openssl/x509vfy.c:677:    ctx->crls = sk_X509_CRL_new_null();
./src/openssl/x509vfy.c:681:                    "sk_X509_CRL_new_null",
./src/openssl/x509vfy.c:687:#if !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097)
./src/openssl/x509vfy.c:688:    ctx->vpm = X509_VERIFY_PARAM_new();
./src/openssl/x509vfy.c:692:                    "X509_VERIFY_PARAM_new",
./src/openssl/x509vfy.c:697:    X509_VERIFY_PARAM_set_depth(ctx->vpm, 9); /* the default cert verification path in openssl */
./src/openssl/x509vfy.c:698:    X509_STORE_set1_param(ctx->xst, ctx->vpm);
./src/openssl/x509vfy.c:700:#else  /* !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097) */
./src/openssl/x509vfy.c:702:#endif /* !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097) */
./src/openssl/x509vfy.c:717:        X509_STORE_free(ctx->xst);
./src/openssl/x509vfy.c:720:        sk_X509_pop_free(ctx->untrusted, X509_free);
./src/openssl/x509vfy.c:723:        sk_X509_CRL_pop_free(ctx->crls, X509_CRL_free);
./src/openssl/x509vfy.c:725:#if !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097)
./src/openssl/x509vfy.c:727:        X509_VERIFY_PARAM_free(ctx->vpm);
./src/openssl/x509vfy.c:729:#endif /* !defined(XMLSEC_OPENSSL_096) && !defined(XMLSEC_OPENSSL_097) */
./src/openssl/x509vfy.c:741:xmlSecOpenSSLX509VerifyCRL(X509_STORE* xst, X509_CRL *crl ) {
./src/openssl/x509vfy.c:742:    X509_STORE_CTX xsc;
./src/openssl/x509vfy.c:743:    X509_OBJECT xobj;
./src/openssl/x509vfy.c:750:    X509_STORE_CTX_init(&xsc, xst, NULL, NULL);
./src/openssl/x509vfy.c:751:    ret = X509_STORE_get_by_subject(&xsc, X509_LU_X509,
./src/openssl/x509vfy.c:752:                                    X509_CRL_get_issuer(crl), &xobj);
./src/openssl/x509vfy.c:756:                    "X509_STORE_get_by_subject",
./src/openssl/x509vfy.c:761:    pkey = X509_get_pubkey(xobj.data.x509);
./src/openssl/x509vfy.c:762:    X509_OBJECT_free_contents(&xobj);
./src/openssl/x509vfy.c:766:                    "X509_get_pubkey",
./src/openssl/x509vfy.c:771:    ret = X509_CRL_verify(crl, pkey);
./src/openssl/x509vfy.c:776:                    "X509_CRL_verify",
./src/openssl/x509vfy.c:780:    X509_STORE_CTX_cleanup (&xsc);
./src/openssl/x509vfy.c:795:        X509_NAME *nm;
./src/openssl/x509vfy.c:796:        X509_NAME *subj;
./src/openssl/x509vfy.c:809:        for(i = 0; i < sk_X509_num(certs); ++i) {
./src/openssl/x509vfy.c:810:            cert = sk_X509_value(certs, i);
./src/openssl/x509vfy.c:811:            subj = X509_get_subject_name(cert);
./src/openssl/x509vfy.c:813:                X509_NAME_free(nm);
./src/openssl/x509vfy.c:817:        X509_NAME_free(nm);
./src/openssl/x509vfy.c:819:        X509_NAME *nm;
./src/openssl/x509vfy.c:820:        X509_NAME *issuer;
./src/openssl/x509vfy.c:842:            X509_NAME_free(nm);
./src/openssl/x509vfy.c:852:            X509_NAME_free(nm);
./src/openssl/x509vfy.c:864:            X509_NAME_free(nm);
./src/openssl/x509vfy.c:870:        for(i = 0; i < sk_X509_num(certs); ++i) {
./src/openssl/x509vfy.c:871:            cert = sk_X509_value(certs, i);
./src/openssl/x509vfy.c:872:            if(ASN1_INTEGER_cmp(X509_get_serialNumber(cert), serial) != 0) {
./src/openssl/x509vfy.c:875:            issuer = X509_get_issuer_name(cert);
./src/openssl/x509vfy.c:878:                X509_NAME_free(nm);
./src/openssl/x509vfy.c:883:        X509_NAME_free(nm);
./src/openssl/x509vfy.c:888:        X509_EXTENSION *ext;
./src/openssl/x509vfy.c:902:        for(i = 0; i < sk_X509_num(certs); ++i) {
./src/openssl/x509vfy.c:903:            cert = sk_X509_value(certs, i);
./src/openssl/x509vfy.c:904:            index = X509_get_ext_by_NID(cert, NID_subject_key_identifier, -1);
./src/openssl/x509vfy.c:905:            if((index >= 0)  && (ext = X509_get_ext(cert, index))) {
./src/openssl/x509vfy.c:928:    certSubjHash = X509_subject_name_hash(cert);
./src/openssl/x509vfy.c:929:    for(i = 0; i < sk_X509_num(chain); ++i) {
./src/openssl/x509vfy.c:930:        if((sk_X509_value(chain, i) != cert) &&
./src/openssl/x509vfy.c:931:           (X509_issuer_name_hash(sk_X509_value(chain, i)) == certSubjHash)) {
./src/openssl/x509vfy.c:933:            return(sk_X509_value(chain, i));
./src/openssl/x509vfy.c:940:xmlSecOpenSSLX509VerifyCertAgainstCrls(STACK_OF(X509_CRL) *crls, X509* cert) {
./src/openssl/x509vfy.c:941:    X509_NAME *issuer;
./src/openssl/x509vfy.c:942:    X509_CRL *crl = NULL;
./src/openssl/x509vfy.c:943:    X509_REVOKED *revoked;
./src/openssl/x509vfy.c:954:    issuer = X509_get_issuer_name(cert);
./src/openssl/x509vfy.c:955:    n = sk_X509_CRL_num(crls);
./src/openssl/x509vfy.c:957:        crl = sk_X509_CRL_value(crls, i);
./src/openssl/x509vfy.c:962:        if(xmlSecOpenSSLX509NamesCompare(X509_CRL_get_issuer(crl), issuer) == 0) {
./src/openssl/x509vfy.c:974:    ret = X509_cmp_current_time(X509_CRL_get_nextUpdate(crl));
./src/openssl/x509vfy.c:983:    n = sk_X509_REVOKED_num(X509_CRL_get_REVOKED(crl));
./src/openssl/x509vfy.c:985:        revoked = sk_X509_REVOKED_value(X509_CRL_get_REVOKED(crl), i);
./src/openssl/x509vfy.c:986:        if (ASN1_INTEGER_cmp(revoked->serialNumber, X509_get_serialNumber(cert)) == 0) {
./src/openssl/x509vfy.c:998:static X509_NAME *
./src/openssl/x509vfy.c:1003:    X509_NAME *nm;
./src/openssl/x509vfy.c:1008:    nm = X509_NAME_new();
./src/openssl/x509vfy.c:1012:                    "X509_NAME_new",
./src/openssl/x509vfy.c:1031:            X509_NAME_free(nm);
./src/openssl/x509vfy.c:1047:                    X509_NAME_free(nm);
./src/openssl/x509vfy.c:1059:                    X509_NAME_free(nm);
./src/openssl/x509vfy.c:1075:                    X509_NAME_free(nm);
./src/openssl/x509vfy.c:1089:                X509_NAME_free(nm);
./src/openssl/x509vfy.c:1100:                    X509_NAME_free(nm);
./src/openssl/x509vfy.c:1112:        X509_NAME_add_entry_by_txt(nm, (char*)name, type, value, valueLen, -1, 0);
./src/openssl/x509vfy.c:1175:int xmlSecOpenSSLX509_NAME_cmp(const X509_NAME * a, const X509_NAME * b) {
./src/openssl/x509vfy.c:1177:    const X509_NAME_ENTRY *na,*nb;
./src/openssl/x509vfy.c:1182:    if (sk_X509_NAME_ENTRY_num(a->entries) != sk_X509_NAME_ENTRY_num(b->entries)) {
./src/openssl/x509vfy.c:1183:        return sk_X509_NAME_ENTRY_num(a->entries) - sk_X509_NAME_ENTRY_num(b->entries);
./src/openssl/x509vfy.c:1186:    for (i=sk_X509_NAME_ENTRY_num(a->entries)-1; i>=0; i--) {
./src/openssl/x509vfy.c:1187:        na=sk_X509_NAME_ENTRY_value(a->entries,i);
./src/openssl/x509vfy.c:1188:        nb=sk_X509_NAME_ENTRY_value(b->entries,i);
./src/openssl/x509vfy.c:1190:        ret = xmlSecOpenSSLX509_NAME_ENTRY_cmp(&na, &nb);
./src/openssl/x509vfy.c:1203: * We have to sort X509_NAME entries to get correct results.
./src/openssl/x509vfy.c:1207:xmlSecOpenSSLX509NamesCompare(X509_NAME *a, X509_NAME *b) {
./src/openssl/x509vfy.c:1208:    X509_NAME *a1 = NULL;
./src/openssl/x509vfy.c:1209:    X509_NAME *b1 = NULL;
./src/openssl/x509vfy.c:1215:    a1 = X509_NAME_dup(a);
./src/openssl/x509vfy.c:1219:                    "X509_NAME_dup",
./src/openssl/x509vfy.c:1224:    b1 = X509_NAME_dup(b);
./src/openssl/x509vfy.c:1228:                    "X509_NAME_dup",
./src/openssl/x509vfy.c:1235:    (void)sk_X509_NAME_ENTRY_set_cmp_func(a1->entries, xmlSecOpenSSLX509_NAME_ENTRY_cmp);
./src/openssl/x509vfy.c:1236:    sk_X509_NAME_ENTRY_sort(a1->entries);
./src/openssl/x509vfy.c:1237:    (void)sk_X509_NAME_ENTRY_set_cmp_func(b1->entries, xmlSecOpenSSLX509_NAME_ENTRY_cmp);
./src/openssl/x509vfy.c:1238:    sk_X509_NAME_ENTRY_sort(b1->entries);
./src/openssl/x509vfy.c:1241:    ret = xmlSecOpenSSLX509_NAME_cmp(a1, b1);
./src/openssl/x509vfy.c:1244:    X509_NAME_free(a1);
./src/openssl/x509vfy.c:1245:    X509_NAME_free(b1);
./src/openssl/x509vfy.c:1250:xmlSecOpenSSLX509_NAME_ENTRY_cmp(const X509_NAME_ENTRY * const *a, const X509_NAME_ENTRY * const *b) {
./src/openssl/digests.c:198:#ifndef XMLSEC_OPENSSL_096
./src/openssl/digests.c:200:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/digests.c:215:#ifndef XMLSEC_OPENSSL_096
./src/openssl/digests.c:217:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/digests.c:285:#ifndef XMLSEC_OPENSSL_096
./src/openssl/digests.c:295:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/digests.c:297:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/digests.c:306:#ifndef XMLSEC_OPENSSL_096
./src/openssl/digests.c:316:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/digests.c:318:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/digests.c:335:#ifndef XMLSEC_OPENSSL_096
./src/openssl/digests.c:345:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/digests.c:347:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/hmac.c:37:#define XMLSEC_OPENSSL_MIN_HMAC_SIZE            80
./src/openssl/hmac.c:38:#define XMLSEC_OPENSSL_MAX_HMAC_SIZE            (EVP_MAX_MD_SIZE * 8)
./src/openssl/hmac.c:45:static int g_xmlsec_openssl_hmac_min_length = XMLSEC_OPENSSL_MIN_HMAC_SIZE;
./src/openssl/hmac.c:80:    xmlSecByte          dgst[XMLSEC_OPENSSL_MAX_HMAC_SIZE];
./src/openssl/hmac.c:235:#ifndef XMLSEC_OPENSSL_096
./src/openssl/hmac.c:237:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/hmac.c:251:#ifndef XMLSEC_OPENSSL_096
./src/openssl/hmac.c:253:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/x509.c:78:static int              xmlSecOpenSSLX509CRLNodeWrite           (X509_CRL* crl,
./src/openssl/x509.c:89:static X509_CRL*        xmlSecOpenSSLX509CrlDerRead             (xmlSecByte* buf,
./src/openssl/x509.c:91:static X509_CRL*        xmlSecOpenSSLX509CrlBase64DerRead       (xmlChar* buf);
./src/openssl/x509.c:92:static xmlChar*         xmlSecOpenSSLX509CrlBase64DerWrite      (X509_CRL* crl,
./src/openssl/x509.c:94:static xmlChar*         xmlSecOpenSSLX509NameWrite              (X509_NAME* nm);
./src/openssl/x509.c:114:    STACK_OF(X509_CRL)* crlsList;
./src/openssl/x509.c:324:        X509_free(ctx->keyCert);
./src/openssl/x509.c:351:        ctx->certsList = sk_X509_new_null();
./src/openssl/x509.c:355:                        "sk_X509_new_null",
./src/openssl/x509.c:362:    ret = sk_X509_push(ctx->certsList, cert);
./src/openssl/x509.c:366:                    "sk_X509_push",
./src/openssl/x509.c:394:    xmlSecAssert2((int)pos < sk_X509_num(ctx->certsList), NULL);
./src/openssl/x509.c:396:    return(sk_X509_value(ctx->certsList, pos));
./src/openssl/x509.c:416:    return((ctx->certsList != NULL) ? sk_X509_num(ctx->certsList) : 0);
./src/openssl/x509.c:429:xmlSecOpenSSLKeyDataX509AdoptCrl(xmlSecKeyDataPtr data, X509_CRL* crl) {
./src/openssl/x509.c:440:        ctx->crlsList = sk_X509_CRL_new_null();
./src/openssl/x509.c:444:                        "sk_X509_CRL_new_null",
./src/openssl/x509.c:451:    ret = sk_X509_CRL_push(ctx->crlsList, crl);
./src/openssl/x509.c:455:                    "sk_X509_CRL_push",
./src/openssl/x509.c:474:X509_CRL*
./src/openssl/x509.c:484:    xmlSecAssert2((int)pos < sk_X509_CRL_num(ctx->crlsList), NULL);
./src/openssl/x509.c:486:    return(sk_X509_CRL_value(ctx->crlsList, pos));
./src/openssl/x509.c:506:    return((ctx->crlsList != NULL) ? sk_X509_CRL_num(ctx->crlsList) : 0);
./src/openssl/x509.c:526:    X509_CRL* crlSrc;
./src/openssl/x509.c:527:    X509_CRL* crlDst;
./src/openssl/x509.c:547:        certDst = X509_dup(certSrc);
./src/openssl/x509.c:551:                        "X509_dup",
./src/openssl/x509.c:564:            X509_free(certDst);
./src/openssl/x509.c:582:        crlDst = X509_CRL_dup(crlSrc);
./src/openssl/x509.c:586:                        "X509_CRL_dup",
./src/openssl/x509.c:599:            X509_CRL_free(crlDst);
./src/openssl/x509.c:607:        certDst = X509_dup(certSrc);
./src/openssl/x509.c:611:                        "X509_dup",
./src/openssl/x509.c:623:            X509_free(certDst);
./src/openssl/x509.c:640:        sk_X509_pop_free(ctx->certsList, X509_free);
./src/openssl/x509.c:643:        sk_X509_CRL_pop_free(ctx->crlsList, X509_CRL_free);
./src/openssl/x509.c:646:        X509_free(ctx->keyCert);
./src/openssl/x509.c:701:    X509_CRL* crl;
./src/openssl/x509.c:997:        X509_free(cert);
./src/openssl/x509.c:1103:    cert2 = X509_dup(cert);
./src/openssl/x509.c:1107:                    "X509_dup",
./src/openssl/x509.c:1122:        X509_free(cert2);
./src/openssl/x509.c:1139:    buf = xmlSecOpenSSLX509NameWrite(X509_get_subject_name(cert));
./src/openssl/x509.c:1143:            "xmlSecOpenSSLX509NameWrite(X509_get_subject_name)",
./src/openssl/x509.c:1281:    cert2 = X509_dup(cert);
./src/openssl/x509.c:1285:                    "X509_dup",
./src/openssl/x509.c:1300:        X509_free(cert2);
./src/openssl/x509.c:1356:    buf = xmlSecOpenSSLX509NameWrite(X509_get_issuer_name(cert));
./src/openssl/x509.c:1360:                    "xmlSecOpenSSLX509NameWrite(X509_get_issuer_name)",
./src/openssl/x509.c:1368:    buf = xmlSecOpenSSLASN1IntegerWrite(X509_get_serialNumber(cert));
./src/openssl/x509.c:1372:                    "xmlSecOpenSSLASN1IntegerWrite(X509_get_serialNumber)",
./src/openssl/x509.c:1440:    cert2 = X509_dup(cert);
./src/openssl/x509.c:1444:                    "X509_dup",
./src/openssl/x509.c:1458:        X509_free(cert2);
./src/openssl/x509.c:1505:    X509_CRL* crl;
./src/openssl/x509.c:1546:        X509_CRL_free(crl);
./src/openssl/x509.c:1556:xmlSecOpenSSLX509CRLNodeWrite(X509_CRL* crl, xmlNodePtr node, xmlSecKeyInfoCtxPtr keyInfoCtx) {
./src/openssl/x509.c:1627:            ctx->keyCert = X509_dup(cert);
./src/openssl/x509.c:1631:                            "X509_dup",
./src/openssl/x509.c:1669:            if((X509_get_notBefore(ctx->keyCert) != NULL) && (X509_get_notAfter(ctx->keyCert) != NULL)) {
./src/openssl/x509.c:1670:                ret = xmlSecOpenSSLX509CertGetTime(X509_get_notBefore(ctx->keyCert), &(key->notValidBefore));
./src/openssl/x509.c:1679:                ret = xmlSecOpenSSLX509CertGetTime(X509_get_notAfter(ctx->keyCert), &(key->notValidAfter));
./src/openssl/x509.c:1754:#ifndef XMLSEC_OPENSSL_096
./src/openssl/x509.c:1763:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/x509.c:1834:    pKey = X509_get_pubkey(cert);
./src/openssl/x509.c:1838:                    "X509_get_pubkey",
./src/openssl/x509.c:1908:    cert = d2i_X509_bio(mem, NULL);
./src/openssl/x509.c:1912:                    "d2i_X509_bio",
./src/openssl/x509.c:1943:    i2d_X509_bio(mem, cert);
./src/openssl/x509.c:1972:static X509_CRL*
./src/openssl/x509.c:1992:static X509_CRL*
./src/openssl/x509.c:1994:    X509_CRL *crl = NULL;
./src/openssl/x509.c:2022:    crl = d2i_X509_CRL_bio(mem, NULL);
./src/openssl/x509.c:2026:                    "d2i_X509_CRL_bio",
./src/openssl/x509.c:2038:xmlSecOpenSSLX509CrlBase64DerWrite(X509_CRL* crl, int base64LineWrap) {
./src/openssl/x509.c:2057:    i2d_X509_CRL_bio(mem, crl);
./src/openssl/x509.c:2087:xmlSecOpenSSLX509NameWrite(X509_NAME* nm) {
./src/openssl/x509.c:2104:    if (X509_NAME_print_ex(mem, nm, 0, XN_FLAG_RFC2253) <=0) {
./src/openssl/x509.c:2107:                    "X509_NAME_print_ex",
./src/openssl/x509.c:2177:        OPENSSL_free(p);
./src/openssl/x509.c:2180:    OPENSSL_free(p);
./src/openssl/x509.c:2189:    X509_EXTENSION *ext;
./src/openssl/x509.c:2194:    index = X509_get_ext_by_NID(cert, NID_subject_key_identifier, -1);
./src/openssl/x509.c:2204:    ext = X509_get_ext(cert, index);
./src/openssl/x509.c:2208:                    "X509_get_ext",
./src/openssl/x509.c:2249:        X509_NAME_oneline(X509_get_subject_name(cert), buf, sizeof(buf)));
./src/openssl/x509.c:2251:        X509_NAME_oneline(X509_get_issuer_name(cert), buf, sizeof(buf)));
./src/openssl/x509.c:2253:    bn = ASN1_INTEGER_to_BN(X509_get_serialNumber(cert),NULL);
./src/openssl/x509.c:2274:        BAD_CAST X509_NAME_oneline(X509_get_subject_name(cert), buf, sizeof(buf))
./src/openssl/x509.c:2281:        BAD_CAST X509_NAME_oneline(X509_get_issuer_name(cert), buf, sizeof(buf)));
./src/openssl/x509.c:2285:    bn = ASN1_INTEGER_to_BN(X509_get_serialNumber(cert),NULL);
./src/openssl/x509.c:2387:        X509_free(cert);
./src/openssl/x509.c:2398:        X509_free(cert);
./src/openssl/signatures.c:27:#define XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE                       (20 * 2)
./src/openssl/signatures.c:34:#ifdef XMLSEC_OPENSSL_100
./src/openssl/signatures.c:36:#endif /* XMLSEC_OPENSSL_100 */
./src/openssl/signatures.c:43:#define XMLSEC_OPENSSL_ECDSA_SIGNATURE_SIZE                     ((512 / 8) * 2)
./src/openssl/signatures.c:242:#ifdef XMLSEC_OPENSSL_100
./src/openssl/signatures.c:247:#endif /* XMLSEC_OPENSSL_100 */
./src/openssl/signatures.c:369:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:371:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:389:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:391:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:536:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:546:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:548:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:550:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:560:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:562:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:571:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:581:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:583:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:585:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:595:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:597:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:621:            if(signSize < XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE) {
./src/openssl/signatures.c:622:                signSize = XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE;
./src/openssl/signatures.c:626:            if(signSize < XMLSEC_OPENSSL_ECDSA_SIGNATURE_SIZE) {
./src/openssl/signatures.c:627:                signSize = XMLSEC_OPENSSL_ECDSA_SIGNATURE_SIZE;
./src/openssl/signatures.c:721:    if((rSize > (XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE / 2)) ||
./src/openssl/signatures.c:722:       (sSize > (XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE / 2))) {
./src/openssl/signatures.c:728:                    rSize, sSize, XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE / 2);
./src/openssl/signatures.c:733:    memset(sig, 0, XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE);
./src/openssl/signatures.c:734:    BN_bn2bin(s->r, sig + (XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE / 2) - rSize);
./src/openssl/signatures.c:735:    BN_bn2bin(s->s, sig + XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE - sSize);
./src/openssl/signatures.c:736:    *siglen = XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE;
./src/openssl/signatures.c:755:    if(siglen != XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE) {
./src/openssl/signatures.c:761:                    siglen, XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE);
./src/openssl/signatures.c:765:    s->r = BN_bin2bn(sigbuf, XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE / 2, NULL);
./src/openssl/signatures.c:766:    s->s = BN_bin2bn(sigbuf + (XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE / 2),
./src/openssl/signatures.c:767:                       XMLSEC_OPENSSL_DSA_SIGNATURE_SIZE / 2, NULL);
./src/openssl/signatures.c:830:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:848:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:854:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:861:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:865:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:871:#ifdef XMLSEC_OPENSSL_100
./src/openssl/signatures.c:873:#endif /* XMLSEC_OPENSSL_100 */
./src/openssl/signatures.c:929:#ifdef XMLSEC_OPENSSL_100
./src/openssl/signatures.c:971:#endif /* XMLSEC_OPENSSL_100 */
./src/openssl/signatures.c:1043:    if(xLen > (XMLSEC_OPENSSL_ECDSA_SIGNATURE_SIZE / 2)) {
./src/openssl/signatures.c:1049:                    xLen, XMLSEC_OPENSSL_ECDSA_SIGNATURE_SIZE / 2);
./src/openssl/signatures.c:1126:    if(xLen > (XMLSEC_OPENSSL_ECDSA_SIGNATURE_SIZE / 2)) {
./src/openssl/signatures.c:1132:                    xLen, XMLSEC_OPENSSL_ECDSA_SIGNATURE_SIZE / 2);
./src/openssl/signatures.c:1213:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1231:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1237:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1244:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1248:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1311:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1329:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1335:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1342:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1346:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1409:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1427:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1433:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1440:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1444:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1507:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1525:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1531:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1538:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1542:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1605:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1623:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1629:#ifndef XMLSEC_OPENSSL_096
./src/openssl/signatures.c:1636:#else /* XMLSEC_OPENSSL_096 */
./src/openssl/signatures.c:1640:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/kw_des.c:533:#ifndef XMLSEC_OPENSSL_096
./src/openssl/kw_des.c:535:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/ciphers.c:147:#ifndef XMLSEC_OPENSSL_096
./src/openssl/ciphers.c:149:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/ciphers.c:207:#ifndef XMLSEC_OPENSSL_096
./src/openssl/ciphers.c:217:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/ciphers.c:230:#ifndef XMLSEC_OPENSSL_096
./src/openssl/ciphers.c:249:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/ciphers.c:322:#ifndef XMLSEC_OPENSSL_096
./src/openssl/ciphers.c:357:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/ciphers.c:381:#ifndef XMLSEC_OPENSSL_096
./src/openssl/ciphers.c:405:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/app.c:63:    OPENSSL_config(NULL);
./src/openssl/app.c:64:    OpenSSL_add_all_algorithms();
./src/openssl/app.c:103:    X509_TRUST_cleanup();
./src/openssl/app.c:106:#ifndef XMLSEC_OPENSSL_096
./src/openssl/app.c:108:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/app.c:554:        X509_free(cert);
./src/openssl/app.c:749:        chain = sk_X509_new_null();
./src/openssl/app.c:753:                        "sk_X509_new_null",
./src/openssl/app.c:771:    for(i = 0; i < sk_X509_num(chain); ++i) {
./src/openssl/app.c:772:        xmlSecAssert2(sk_X509_value(chain, i), NULL);
./src/openssl/app.c:774:        if(X509_cmp(sk_X509_value(chain, i), cert) == 0) {
./src/openssl/app.c:781:        tmpcert = X509_dup(cert);
./src/openssl/app.c:785:                        "X509_dup",
./src/openssl/app.c:792:        ret = sk_X509_push(chain, tmpcert);
./src/openssl/app.c:796:                        "sk_X509_push",
./src/openssl/app.c:800:            X509_free(tmpcert);
./src/openssl/app.c:817:    for(i = 0; i < sk_X509_num(chain); ++i) {
./src/openssl/app.c:818:        xmlSecAssert2(sk_X509_value(chain, i), NULL);
./src/openssl/app.c:820:        tmpcert = X509_dup(sk_X509_value(chain, i));
./src/openssl/app.c:824:                        "X509_dup",
./src/openssl/app.c:828:            X509_free(tmpcert);
./src/openssl/app.c:890:        sk_X509_pop_free(chain, X509_free);
./src/openssl/app.c:893:        X509_free(cert);
./src/openssl/app.c:940:        X509_free(cert);
./src/openssl/app.c:953:        X509_free(cert);
./src/openssl/app.c:967:        X509_free(cert);
./src/openssl/app.c:980:        X509_free(cert);
./src/openssl/app.c:993:        X509_free(cert);
./src/openssl/app.c:1154:        X509_free(cert);
./src/openssl/app.c:1252:        cert = PEM_read_bio_X509_AUX(bio, NULL, NULL, NULL);
./src/openssl/app.c:1256:                        "PEM_read_bio_X509_AUX",
./src/openssl/app.c:1264:        cert = d2i_X509_bio(bio, NULL);
./src/openssl/app.c:1268:                        "d2i_X509_bio",
./src/openssl/kw_aes.c:13:#ifndef XMLSEC_OPENSSL_096
./src/openssl/kw_aes.c:512:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/crypto.c:455:    ERR_put_error(XMLSEC_OPENSSL_ERRORS_LIB,
./src/openssl/crypto.c:456:                XMLSEC_OPENSSL_ERRORS_FUNCTION,
./src/openssl/crypto.c:467:        { ERR_PACK(XMLSEC_OPENSSL_ERRORS_LIB,0,0),      "xmlsec routines"},
./src/openssl/crypto.c:471:        { XMLSEC_OPENSSL_ERRORS_LIB,                    "xmlsec lib"},
./src/openssl/crypto.c:484:    ERR_load_strings(XMLSEC_OPENSSL_ERRORS_LIB, xmlSecOpenSSLStrLib); /* define xmlsec lib name */
./src/openssl/crypto.c:485:    ERR_load_strings(XMLSEC_OPENSSL_ERRORS_LIB, xmlSecOpenSSLStrDefReason); /* define default reason */
./src/openssl/crypto.c:486:    ERR_load_strings(XMLSEC_OPENSSL_ERRORS_LIB, xmlSecOpenSSLStrReasons);
./src/openssl/symkeys.c:184:#ifndef XMLSEC_OPENSSL_096
./src/openssl/symkeys.c:188:#endif /* XMLSEC_OPENSSL_096 */
./src/openssl/symkeys.c:201:#ifndef XMLSEC_OPENSSL_096
./src/openssl/symkeys.c:281:#endif /* XMLSEC_OPENSSL_096 */
./include/xmlsec/nss/x509.h:9:#ifndef __XMLSEC_NSS_X509_H__
./include/xmlsec/nss/x509.h:10:#define __XMLSEC_NSS_X509_H__
./include/xmlsec/nss/x509.h:91:#endif /* __XMLSEC_NSS_X509_H__ */
./include/xmlsec/mscrypto/x509.h:9:#ifndef __XMLSEC_MSCRYPTO_X509_H__
./include/xmlsec/mscrypto/x509.h:10:#define __XMLSEC_MSCRYPTO_X509_H__
./include/xmlsec/mscrypto/x509.h:92:#endif /* __XMLSEC_MSCRYPTO_X509_H__ */
./include/xmlsec/gnutls/app.h:9:#ifndef __XMLSEC_GNUTLS_APP_H__
./include/xmlsec/gnutls/app.h:10:#define __XMLSEC_GNUTLS_APP_H__
./include/xmlsec/gnutls/app.h:95:#endif /* __XMLSEC_GNUTLS_APP_H__ */
./include/xmlsec/gnutls/symbols.h:9:#ifndef __XMLSEC_GNUTLS_SYMBOLS_H__
./include/xmlsec/gnutls/symbols.h:10:#define __XMLSEC_GNUTLS_SYMBOLS_H__
./include/xmlsec/gnutls/symbols.h:102:#endif /* __XMLSEC_GNUTLS_CRYPTO_H__ */
./include/xmlsec/gnutls/symbols.h:104:#define __XMLSEC_GNUTLS_CRYPTO_H__
./include/xmlsec/gnutls/x509.h:9:#ifndef __XMLSEC_GNUTLS_X509_H__
./include/xmlsec/gnutls/x509.h:10:#define __XMLSEC_GNUTLS_X509_H__
./include/xmlsec/gnutls/x509.h:41:XMLSEC_CRYPTO_EXPORT gnutls_x509_crt_t  xmlSecGnuTLSKeyDataX509GetKeyCert       (xmlSecKeyDataPtr data);
./include/xmlsec/gnutls/x509.h:43:                                                                                 gnutls_x509_crt_t cert);
./include/xmlsec/gnutls/x509.h:46:                                                                                 gnutls_x509_crt_t cert);
./include/xmlsec/gnutls/x509.h:47:XMLSEC_CRYPTO_EXPORT gnutls_x509_crt_t  xmlSecGnuTLSKeyDataX509GetCert          (xmlSecKeyDataPtr data,
./include/xmlsec/gnutls/x509.h:52:                                                                                 gnutls_x509_crl_t crl);
./include/xmlsec/gnutls/x509.h:53:XMLSEC_CRYPTO_EXPORT gnutls_x509_crl_t  xmlSecGnuTLSKeyDataX509GetCrl           (xmlSecKeyDataPtr data,
./include/xmlsec/gnutls/x509.h:58:XMLSEC_CRYPTO_EXPORT xmlSecKeyDataPtr   xmlSecGnuTLSX509CertGetKey              (gnutls_x509_crt_t cert);
./include/xmlsec/gnutls/x509.h:87:XMLSEC_CRYPTO_EXPORT gnutls_x509_crt_t  xmlSecGnuTLSX509StoreFindCert   (const xmlSecKeyDataStorePtr store,
./include/xmlsec/gnutls/x509.h:93:XMLSEC_CRYPTO_EXPORT gnutls_x509_crt_t  xmlSecGnuTLSX509StoreVerify     (xmlSecKeyDataStorePtr store,
./include/xmlsec/gnutls/x509.h:98:                                                                         gnutls_x509_crt_t cert,
./include/xmlsec/gnutls/x509.h:110:#endif /* __XMLSEC_GNUTLS_X509_H__ */
./include/xmlsec/gnutls/crypto.h:9:#ifndef __XMLSEC_GNUTLS_CRYPTO_H__
./include/xmlsec/gnutls/crypto.h:10:#define __XMLSEC_GNUTLS_CRYPTO_H__
./include/xmlsec/gnutls/crypto.h:167:                                                                                 gnutls_x509_privkey_t dsa_key);
./include/xmlsec/gnutls/crypto.h:169:                                                                                 gnutls_datum_t * p,
./include/xmlsec/gnutls/crypto.h:170:                                                                                 gnutls_datum_t * q,
./include/xmlsec/gnutls/crypto.h:171:                                                                                 gnutls_datum_t * g,
./include/xmlsec/gnutls/crypto.h:172:                                                                                 gnutls_datum_t * y);
./include/xmlsec/gnutls/crypto.h:299:                                                                                 gnutls_x509_privkey_t rsa_key);
./include/xmlsec/gnutls/crypto.h:301:                                                                                 gnutls_datum_t * m,
./include/xmlsec/gnutls/crypto.h:302:                                                                                 gnutls_datum_t * e);
./include/xmlsec/gnutls/crypto.h:460:#endif /* __XMLSEC_GNUTLS_CRYPTO_H__ */
./include/xmlsec/gnutls/crypto.h:462:#define __XMLSEC_GNUTLS_CRYPTO_H__
./include/xmlsec/openssl/evp.h:9:#ifndef __XMLSEC_OPENSSL_EVP_H__
./include/xmlsec/openssl/evp.h:10:#define __XMLSEC_OPENSSL_EVP_H__
./include/xmlsec/openssl/evp.h:42:#endif /* __XMLSEC_OPENSSL_EVP_H__ */
./include/xmlsec/openssl/app.h:9:#ifndef __XMLSEC_OPENSSL_APP_H__
./include/xmlsec/openssl/app.h:10:#define __XMLSEC_OPENSSL_APP_H__
./include/xmlsec/openssl/app.h:126:#endif /* __XMLSEC_OPENSSL_APP_H__ */
./include/xmlsec/openssl/symbols.h:9:#ifndef __XMLSEC_OPENSSL_SYMBOLS_H__
./include/xmlsec/openssl/symbols.h:10:#define __XMLSEC_OPENSSL_SYMBOLS_H__
./include/xmlsec/openssl/symbols.h:131:#endif /* __XMLSEC_OPENSSL_CRYPTO_H__ */
./include/xmlsec/openssl/symbols.h:133:#define __XMLSEC_OPENSSL_CRYPTO_H__
./include/xmlsec/openssl/x509.h:9:#ifndef __XMLSEC_OPENSSL_X509_H__
./include/xmlsec/openssl/x509.h:10:#define __XMLSEC_OPENSSL_X509_H__
./include/xmlsec/openssl/x509.h:32: * XMLSEC_STACK_OF_X509_CRL:
./include/xmlsec/openssl/x509.h:36:#define XMLSEC_STACK_OF_X509_CRL        STACK_OF(X509_CRL)
./include/xmlsec/openssl/x509.h:58:                                                                         X509_CRL* crl);
./include/xmlsec/openssl/x509.h:59:XMLSEC_CRYPTO_EXPORT X509_CRL*          xmlSecOpenSSLKeyDataX509GetCrl  (xmlSecKeyDataPtr data,
./include/xmlsec/openssl/x509.h:91:                                                                         XMLSEC_STACK_OF_X509_CRL* crls,
./include/xmlsec/openssl/x509.h:97:                                                                         X509_CRL* crl);
./include/xmlsec/openssl/x509.h:109:#endif /* __XMLSEC_OPENSSL_X509_H__ */
./include/xmlsec/openssl/crypto.h:9:#ifndef __XMLSEC_OPENSSL_CRYPTO_H__
./include/xmlsec/openssl/crypto.h:10:#define __XMLSEC_OPENSSL_CRYPTO_H__
./include/xmlsec/openssl/crypto.h:662: * XMLSEC_OPENSSL_ERRORS_LIB:
./include/xmlsec/openssl/crypto.h:666:#define XMLSEC_OPENSSL_ERRORS_LIB                       (ERR_LIB_USER + 57)
./include/xmlsec/openssl/crypto.h:669: * XMLSEC_OPENSSL_ERRORS_FUNCTION:
./include/xmlsec/openssl/crypto.h:673:#define XMLSEC_OPENSSL_ERRORS_FUNCTION                  0
./include/xmlsec/openssl/crypto.h:687:#endif /* __XMLSEC_OPENSSL_CRYPTO_H__ */
./include/xmlsec/openssl/crypto.h:689:#define __XMLSEC_OPENSSL_CRYPTO_H__
./include/xmlsec/x509.h:9:#ifndef __XMLSEC_X509_H__
./include/xmlsec/x509.h:10:#define __XMLSEC_X509_H__
./include/xmlsec/x509.h:79:#endif /* __XMLSEC_X509_H__ */
./src/nss/x509vfy.c:51:     *          https://bugzilla.mozilla.org/show_bug.cgi?id=211051
./src/nss/x509vfy.c:357:    /* nss doesn't support emailAddress (see https://bugzilla.mozilla.org/show_bug.cgi?id=561689)
./src/nss/x509vfy.c:548:         * when new certs are added https://bugzilla.mozilla.org/show_bug.cgi?id=211051
./src/nss/keytrans.c:76:   https://bugzilla.mozilla.org/show_bug.cgi?id=158747
./src/nss/keytrans.c:112:   https://bugzilla.mozilla.org/show_bug.cgi?id=158747
./src/nss/keytrans.c:709:   https://bugzilla.mozilla.org/show_bug.cgi?id=158747
./src/nss/crypto.c:184:   https://bugzilla.mozilla.org/show_bug.cgi?id=158747
./include/xmlsec/nss/crypto.h:364:   https://bugzilla.mozilla.org/show_bug.cgi?id=158747

== sql() ==

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==
./examples/encrypt1.c:97:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/sign2.c:99:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/verify1.c:94:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/encrypt3.c:100:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/verify4.c:106:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/sign3.c:103:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/decrypt2.c:98:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/sign1.c:96:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/xkms-server.c:161:                        "(LD_LIBRARY_PATH) envornment variable.\n", errno);
./examples/decrypt1.c:95:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/encrypt2.c:98:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/verify3.c:98:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/verify2.c:97:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/xmldsigverify.c:94:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./examples/decrypt3.c:100:                        "(LD_LIBRARY_PATH) envornment variable.\n");
./apps/xmlsec.c:2454:                        "this it installed, check shared libraries path (LD_LIBRARY_PATH)\n"

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./src/nss/x509vfy.c:673:                /* TODO: read octect values */
./src/nss/x509.c:877:    /* TODO: return verified/not verified status */
./src/nss/x509.c:885:    /* TODO */
./src/nss/keytrans.c:78:#ifdef XMLSEC_NSS_RSA_OAEP_TODO
./src/nss/keytrans.c:84:#endif /* XMLSEC_NSS_RSA_OAEP_TODO */
./src/nss/keytrans.c:114:#ifdef XMLSEC_NSS_RSA_OAEP_TODO
./src/nss/keytrans.c:121:#endif /* XMLSEC_NSS_RSA_OAEP_TODO */
./src/nss/keytrans.c:711:#ifdef XMLSEC_NSS_RSA_OAEP_TODO
./src/nss/keytrans.c:752:#endif /* XMLSEC_NSS_RSA_OAEP_TODO */
./src/nss/app.c:258:    /* XXX not handled yet  */
./src/nss/crypto.c:186:#ifdef XMLSEC_NSS_RSA_OAEP_TODO
./src/nss/crypto.c:188:#endif /* XMLSEC_NSS_RSA_OAEP_TODO */
./src/xslt.c:495:/* TODO: create PopBin method instead */
./src/xmldsig.c:624:        /* TODO */
./src/mscrypto/x509vfy.c:607:    /* TODO: The context to be added here is not duplicated first,
./src/mscrypto/digests.c:351:            /* TODO: make a MSCrypto compatible assert here */
./src/mscrypto/hmac.c:567:            /* TODO: make a MSCrypto compatible assert here */
./src/mscrypto/x509.c:846:    /* TODO: return verified/not verified status */
./src/mscrypto/x509.c:854:    /* TODO */
./src/mscrypto/app.c:1238:    /* TODO */
./src/mscrypto/app.c:1256:    /* TODO */
./src/mscrypto/app.c:1274:    /* TODO */
./src/mscrypto/crypto.c:308:    /* TODO: if necessary, do additional shutdown here */
./src/mscrypto/crypto.c:830:                    /* ALEKSEY TODO - NEED TO DELETE ALL THE TEMP CONTEXTS ON SHUTDOWN
./src/xmlenc.c:884:            /* TODO: decode the name? */
./src/xmlenc.c:946:    /* TODO: KeyInfo node != NULL and encKey != NULL */
./src/gnutls/x509.c:747:    /* TODO: return verified/not verified status */
./src/gnutls/x509.c:755:    /* TODO */
./src/gnutls/app.c:858:    /* TODO */
./src/transforms.c:1304:        /* TODO: don't destroy nodes here */
./src/openssl/x509vfy.c:1083:                /* TODO: read octect values */
./src/openssl/evp.c:1220:    /* XXX-MAK: Fix this. */
./src/openssl/x509.c:827:    /* TODO: return verified/not verified status */
./src/openssl/x509.c:835:    /* TODO */
./src/openssl/signatures.c:960:    /* XXX-MAK: This worries me, not sure that the keys are right. */
./src/openssl/signatures.c:1251:    /* XXX-MAK: This worries me, not sure that the keys are right. */
./src/openssl/signatures.c:1349:    /* XXX-MAK: This worries me, not sure that the keys are right. */
./src/openssl/signatures.c:1447:    /* XXX-MAK: This worries me, not sure that the keys are right. */
./src/openssl/signatures.c:1545:    /* XXX-MAK: This worries me, not sure that the keys are right. */
./src/openssl/signatures.c:1643:    /* XXX-MAK: This worries me, not sure that the keys are right. */
./src/openssl/app.c:1339:    /* TODO */
./src/keyinfo.c:719:    /* TODO: do we need to decode the name? */
./src/keyinfo.c:741:            /* TODO: since we will destroy tmpKey anyway, we can easily
./src/skeleton/app.c:13:/* TODO: aadd Skeleton include files */
./src/skeleton/app.c:35:    /* TODO: initialize Skeleton crypto engine */
./src/skeleton/app.c:50:    /* TODO: shutdown Skeleton crypto engine */
./src/skeleton/app.c:75:    /* TODO: load key */
./src/skeleton/app.c:103:    /* TODO: load key */
./src/skeleton/app.c:132:    /* TODO */
./src/skeleton/app.c:159:    /* TODO */
./src/skeleton/app.c:190:    /* TODO: load pkcs12 file */
./src/skeleton/app.c:219:    /* TODO: load pkcs12 file */
./src/skeleton/app.c:251:    /* TODO: load cert and add to keys manager */
./src/skeleton/app.c:281:    /* TODO: load cert and add to keys manager */
./src/skeleton/app.c:307:    /* TODO: if Skeleton crypto engine has another default
./src/skeleton/app.c:369:    /* TODO: if Skeleton crypto engine has another default
./src/skeleton/app.c:414:    /* TODO: if Skeleton crypto engine has another default
./src/skeleton/app.c:459:    /* TODO: if Skeleton crypto engine has another default
./src/skeleton/app.c:496:    /* TODO */
./src/skeleton/crypto.c:13:/* TODO: add Skeleton include files */
./src/skeleton/crypto.c:261:    /* TODO: if necessary do, additional initialization here */
./src/skeleton/crypto.c:273:    /* TODO: if necessary, do additional shutdown here */
./src/skeleton/crypto.c:289:    /* TODO: add key data stores */
./src/strings.c:333:/* XXX-MAK: More constants will be needed later. */
./src/gcrypt/app.c:306:    /* TODO */
./src/gcrypt/app.c:336:    /* TODO */
./src/gcrypt/app.c:366:    /* TODO */
./src/gcrypt/app.c:397:    /* TODO */
./src/gcrypt/app.c:428:    /* TODO */
./src/gcrypt/app.c:461:    /* TODO */
./src/gcrypt/app.c:523:    /* TODO */
./src/gcrypt/crypto.c:282:    /* TODO: add key data stores */
./src/dl.c:294:    /* TODO */
./src/xmltree.c:186:        /* TODO: add indents */
./src/xmltree.c:221:    /* TODO: add indents */
./src/xmltree.c:253:        /* TODO: add indents */
./src/xmltree.c:268:    /* TODO: add indents */
./src/xmltree.c:324:    /* TODO: add indents */
./src/xmltree.c:380:    /* TODO: add indents */
./src/xkms.c:2828:    /* TODO: OCSP, PGP, PGPWeb, SPKI */
./include/xmlsec/nss/crypto.h:366:#ifdef XMLSEC_NSS_RSA_OAEP_TODO
./include/xmlsec/nss/crypto.h:375:#endif /* XMLSEC_NSS_RSA_OAEP_TODO */
./include/xmlsec/strings.h:333:/* XXX-MAK: More constants will be needed later. */
./include/xmlsec/keyinfo.h:221:    void*                               pgpReserved;    /* TODO */

== unsafe input mechanisms ==

