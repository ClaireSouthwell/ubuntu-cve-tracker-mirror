#!/bin/bash
# Author: Kees Cook <kees@ubuntu.com>
# Author: Marc Deslauriers <marc.deslauriers@ubuntu.com>
# Copyright: 2011,2012 Canonical, Ltd
# License: GPLv3
#
# Walk through the steps to do a standard kernel publication using the
# CVE statuses populated in UCT ahead of time. This handles steps 1
# through 5 of:
# https://wiki.ubuntu.com/SecurityTeam/UpdatePublication
#
# This script is still in the testing phase...
set -e

help()
{
    echo "$0 [-n] [-i CVE] RELEASE PACKAGE VERSION" >&2
    echo " -n                Dry run" >&2
    echo " -i CVE[,CVE...]   Ignore specific CVEs in the changelog" >&2
    echo " -a CVE[,CVE...]   Add specific CVEs not found in the pending fixes" >&2
    echo " -u USN            Use specific USN" >&2
    echo " -f                Fetch a new USN" >&2
    echo " -s                Skip binary package build check" >&2
}

GENERATE_ARGS=
DRYRUN=
EXTRA_CVES=
USN=
FETCH=
SKIP_BUILD_CHECK=
POCKET="Security"
while getopts "nsfi:a:u:p:" opt
do
    case "$opt" in
        i) GENERATE_ARGS="--ignore-cves $OPTARG";;
        a) EXTRA_CVES="$OPTARG";;
        u) USN="$OPTARG";;
        n) DRYRUN="1";;
        f) FETCH="1";;
        p) POCKET="$OPTARG";;
        s) SKIP_BUILD_CHECK="--skip-build-check";;
        h) help; exit 0;;
        ?) help; exit 1;;
    esac
done
shift $(($OPTIND - 1))

REL="$1"
PKG="$2"
VERSION="$3"

if [ -z "$REL" ] || [ -z "$PKG" ] || [ -z "$VERSION" ]; then
    help
    exit 1
fi

if [ -z "$USN" ] && [ -z "$DRYRUN" ] && [ -z "$FETCH" ]; then
    echo "No USN specified. Must choose one of the following:" >&2
    echo " '-n' (dry-run)" >&2
    echo " '-f' (fetch new USN)." >&2
    echo " '-u USN' (specific USN)" >&2
    echo " '-p Pocket' (specific pocket, default 'Security')" >&2
    help
    exit 1
fi

cd $UCT

latest=$(./scripts/report-latest-usn-version -r $REL $PKG)
./scripts/report-pending-fixes -D -r $REL $PKG $latest $VERSION -a "$EXTRA_CVES"
cves="$(./scripts/report-pending-fixes -r $REL $PKG $latest $VERSION) $EXTRA_CVES"

# Sanity check to make sure we don't publish a new USN when one
# already exists for the same kernel
if [ "$latest" = "$VERSION" ]; then
    echo "A USN already exists for kernel version $VERSION!" >&2
    echo "Try using report-mismatched-cve-fixes.py to get it modified!" >&2
    exit 1
fi

if [ -z "$USN" ]; then
    if [ -n "$DRYRUN" ]; then
        USN=$(echo N-1)
    else
        USN=$(ssh people.canonical.com "~ubuntu-security/bin/get-next-usn" $REL $PKG)
        trap "echo Please re-use $USN! Reserved for $REL $PKG" ERR
    fi
fi

USN_SH=~/new-usn-${REL}-${PKG}.sh
DIR=/tmp/usn-$REL-$PKG
rm -rf $DIR
$UCT/scripts/sis-changes $SKIP_BUILD_CHECK --ppa ubuntu --pocket $POCKET -r $REL --download $DIR $PKG
cd $DIR
$UCT/scripts/sis-generate-usn --kernel-mode --no-new-warn $GENERATE_ARGS --cves $(echo $cves | sed -e 's/ /,/g') --filter-bins '^linux-image-\d' $USN *.changes > $USN_SH
${EDITOR:-vi} $USN_SH

if [ -z "$DRYRUN" ]; then
    bash $USN_SH
    ssh people.canonical.com "~ubuntu-security/bin/check-upload $USN"
fi

echo SRCPKG='"'$PKG'"'
echo USN=$USN
