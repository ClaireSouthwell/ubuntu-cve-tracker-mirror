#!/usr/bin/python

# Scan for new CVEs, and report on stdout.
#
# Author: Martin Pitt <martin.pitt@ubuntu.com>
# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Author: Marc Deslauriers <marc.deslauriers@cubuntu.com>
# Copyright (C) 2005-2013 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import os, os.path, re, datetime, sys, urllib, time
import xml.sax, xml.sax.handler, xml.sax.xmlreader
import shutil, subprocess
import unittest
import optparse
import cve_lib
import progressbar
import tempfile
from cgi import escape

# load settings, if any
cve_lib.read_config()

parser = optparse.OptionParser()
parser.add_option("-r", "--report", help="Just report CVEs that need checking", action="store_true")
parser.add_option("-v", "--verbose", help="Report verbose XML details", action="store_true")
parser.add_option("-k", "--known", help="Only report CVEs already known", action="store_true")
parser.add_option("-N", "--skip-nfu", help="Skip any CVEs marked as NFU (used with -k)", action="store_true")
parser.add_option("-R", "--refresh", help="Refresh CVE descriptions", action="store_true")
parser.add_option("", "--test", help="Run regression tests", action="store_true")
parser.add_option("--untriaged", help="Process untriaged CVEs from output of locate_cves.py", metavar="FILE")
parser.add_option("--mbox", help="Process untriaged CVEs from mbox file", metavar="FILE")
parser.add_option("--import-missing-debian", help="Process missing Debian CVEs", action="store_true")
(opt, args) = parser.parse_args()

# Pull in package details
import source_map
source = source_map.load()

built_using_map = None

destdir = "."

# Skip stuff older than 2005
cve_limit = 2004

ignore_strings = ["** REJECT **", "Internet Explorer",
    "Windows 98", "Windows 2000", "Windows XP", "Windows Server 2003",
    "Windows NT", "Mercury Board", "ZeroBoard", "AntiVirus", "Microsoft",
    "SGI IRIX", "FreeBSD", "IBM AIX", "SCO", "OS X", "Mac OS",
    "Apple QuickTime", "Cisco", "ActiveX", "Joomla!", "TYPO3", "Linksys",
    "Netgear", "TP-LINK", "Belkin", "Juniper"]

###################

def merge_list(list, list2, intersection = None):
    """Write the union of list and list2 into list. If intersection is not
    None, that list will be filled with the intersection of list and list2."""

    for e in list2:
        if e not in list:
            list.append(e)
        else:
            if intersection != None:
                intersection.append(e)

###################

def subtract_list(list, list2):
    """Remove all elements from list which occur in list2."""

    for e in list2:
        if e in list:
            list.remove(e)


###################

def wordwrap(text, width):
    """
    A word-wrap function that preserves existing line breaks
    and most spaces in the text. Expects that existing line
    breaks are posix newlines (\n).
    """
    return reduce(lambda line, word, width=width: '%s%s%s' %
                  (line,
                   ' \n'[(len(line)-line.rfind('\n')-1
                         + len(word.split('\n',1)[0]
                              ) >= width)],
                   word),
                  text.split(' ')
                 )

def _wrap_desc(desc):
    return wordwrap(desc,75).replace(' \n','\n')

def add_CVE_to_tracker(cve, info, package, bug_urls=[], ref_urls=[]):
    src = '%s/active/00boilerplate'%(destdir)

    # Use the first boilerplate for template
    first_boiler = ""
    for b in package.split():
        if os.path.exists(src + "." + b):
            src = src + "." + b
            first_boiler = src
            break
    dst = '%s/active/%s'%(destdir,cve)
    template = file(src).readlines()
    cve_file = file(dst,'w')
    orig_priority = ""
    for line in template:
        line = line.rstrip()
        if line.startswith('Candidate:'):
            print >>cve_file, 'Candidate: %s'%(cve)
        elif info['public'] and line.startswith('PublicDate:'):
            print >>cve_file, 'PublicDate: %s'%(info['public'])
        elif line.startswith('References:'):
            print >>cve_file, 'References:\n http://cve.mitre.org/cgi-bin/cvename.cgi?name=%s'%(cve)
            for i in ref_urls:
                print >>cve_file, " %s" % i
        elif line.startswith('Bugs:'):
            print >>cve_file, line
            for i in bug_urls:
                print >>cve_file, " %s" % i
        elif not line.startswith('#'):
            if line.startswith('Priority:'):
                orig_priority = line.split()[1]
            print >>cve_file, line

        if line.startswith('Description:'):
            for desc_line in _wrap_desc(info['desc']).split('\n'):
                print >>cve_file, " %s" % (desc_line)

    # Now add package information (with Priority_<pkg>) from other boilers
    if len(package.split()) > 1:
        for p in package.split():
            skip_emptyline = False
            boiler = '%s/active/00boilerplate.%s'%(destdir, p)
            if os.path.exists(boiler) and boiler != first_boiler:
                template = file(boiler).readlines()
                for line in template:
                    line = line.rstrip()
                    if line.startswith('Candidate:') or \
                       line.startswith('PublicDate:') or \
                       line.startswith('References:') or \
                       line.startswith('Description:') or \
                       line.startswith('Ubuntu-Description:') or \
                       line.startswith('Notes:') or \
                       line.startswith('Bugs:') or \
                       line.startswith('Discovered-by:') or \
                       line.startswith('Assigned-to:') or \
                       line.startswith('#'):
                        continue
                    if line.startswith('Priority:'):
                        new_priority = line.split()[1]
                        if new_priority == orig_priority:
                            continue
                        elif orig_priority == "":
                            print >>cve_file, line
                        else:
                            print >>cve_file, 'Priority_%s: %s' % (p, new_priority)
                            skip_emptyline = True
                    elif skip_emptyline and line == "":
                        skip_emptyline = False
                        continue
                    else:
                        print >>cve_file, line
                print ""

    cve_file.close()

    return dst

class PercentageFile(object):
    def __init__(self, filename):
        self.size = os.stat(filename)[6]
        self.delivered = 0
        self.f = file(filename)
        widgets = [progressbar.Percentage(), ' ',
                   progressbar.Bar(marker='=', left='[', right=']'),
                   ' ', str(self.size), ' ', progressbar.ETA()]
        self.bar = progressbar.ProgressBar(widgets=widgets,
                                           maxval=self.size).start()

    def read(self, size=None):
        if size is None:
            data = self.f.read()
        else:
            data = self.f.read(size)

        self.delivered += len(data)

        if self.size != 0:
            self.bar.update(self.delivered)
            if self.size == self.delivered:
                self.bar.finish()

        return data

###################
def get_fake_nvd_xml_header():
    '''Generate NVD header xml'''
    today = "%s-%s-%s" % (datetime.date.today().year,
                          datetime.date.today().month,
                          datetime.date.today().day)
    return '''<?xml version='1.0' encoding='UTF-8'?>
<nvd xmlns="http://nvd.nist.gov/feeds/cve/1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" pub_date="%s" xsi:schemaLocation="http://nvd.nist.gov/feeds/cve/1.2 http://nvd.nist.gov/schema/nvdcve.xsd" nvd_xml_version="1.2">
''' % (today)

def get_fake_nvd_xml_footer():
    '''Generate NVD footer xml'''
    return '''</nvd>\n'''

def convert_to_xml(cves, cve, desc):
    s = '''  <entry type="CVE" severity="Medium" seq="%s" published="%s" name="%s" modified="%s" CVSS_version="2.0" CVSS_vector="(AV:N/AC:M/Au:N/C:N/I:P/A:P)" CVSS_score="0.0" CVSS_impact_subscore="0.0" CVSS_exploit_subscore="0.0" CVSS_base_score="0.0">
    <desc>
      <descript source="cve">%s</descript>
    </desc>
    <loss_types />
    <range />
''' % (re.sub(r'CVE\-', '', cve),
       cves[cve]['date'].strftime("%Y-%m-%d"),
       cve,
       cves[cve]['date'].strftime("%Y-%m-%d"),
       desc)

    if cves.has_key(cve) and cves[cve].has_key('refs') and len(cves[cve]['refs']) > 0:
        s += '    <refs>\n'
        for r in cves[cve]['refs']:
            s += '<ref url="%s" source="MISC">%s</ref>\n' % (r, r)
        s += '    </refs>\n'
    else:
        s += '    <refs />\n'

    s += '''    <vuln_soft />
  </entry>
'''
    return s

def import_debian(handler):
    '''Import Debian CVEs and DSAs missing from the tracker'''
    cves = dict()
    cve = None
    xml = get_fake_nvd_xml_header()

    today = datetime.date.today()
    known = set(CVEKnownList + CVEIgnoreList)

    # pull in CVEs from data/DSA/list
    dsas = cve_lib.load_debian_dsas(cve_lib.config['secure_testing_path']+'/data/DSA/list')
    for dsa in dsas:
        for cve in dsas[dsa]['cves']:
            if not cve_lib.CVE_RE.match(cve):
                if opt.verbose:
                    print >>sys.stderr, "Skipping %s, not well-formed?" % cve
                continue

            year = int(re.split('-', cve)[1])
            if year < cve_limit:
                continue

            # If we already know about the CVE, skip it
            if cve in known:
                continue

            cves[cve] = dict()
            cves[cve]['subject'] = escape(dsas[dsa]['desc'])
            cves[cve]['date'] = dsas[dsa]['date']

            if opt.verbose:
                print >>sys.stderr, "Processing %s: %s (%s)" % (dsa, dsas[dsa]['desc'], cves[cve]['date'])

    # Now pull in CVEs from the data/CVE/list
    for cve in handler.debian:
        if opt.verbose:
            print >>sys.stderr, "[--- Processing %s ---]" % cve

        if cves.has_key(cve):
            if opt.verbose:
                print >>sys.stderr, "Skipping %s, already found in DSA" % cve
            continue

        if not cve_lib.CVE_RE.match(cve):
            if opt.verbose:
                print >>sys.stderr, "Skipping %s, not well-formed?" % cve
            continue

        year = int(re.split('-', cve)[1])
        if year < cve_limit:
            if opt.verbose:
                print >>sys.stderr, "Skipping %s, year %d predates %d" % (cve, year, cve_limit)
            continue

        # If we already know about the CVE, skip it
        if cve in known:
            if opt.verbose:
                print >>sys.stderr, "Skipping %s, already known" % cve
            continue

        if handler.debian[cve]['desc'] or handler.debian[cve]['state'] == 'FOUND' :
            cves[cve] = dict()
            cves[cve]['subject'] = escape(handler.debian[cve]['desc'])
            if cves[cve]['subject'] == '':
                cves[cve]['subject'] = '[Unkown description]'

            # just make something up. It'll get adjusted whenever mitre adds it
            date = "%s-12-31" % year
            if year >= today.year:
                date = "%s-%s-%s" % (today.year, today.month, today.day)
            cves[cve]['date'] = datetime.datetime.strptime(date, "%Y-%m-%d")

            if opt.verbose:
                print >>sys.stderr, "Processing %s: %s (%s)" % (cve, handler.debian[cve]['desc'], cves[cve]['date'])

    keys = cves.keys()
    keys.sort()
    for c in keys:
        xml += convert_to_xml(cves, c, cves[c]['subject'])

    xml += get_fake_nvd_xml_footer()

    tmp, tmpname = tempfile.mkstemp(prefix='debian-import_')
    os.write(tmp, xml)
    os.close(tmp)

    return tmpname

def read_locate_cves_output(f):
    '''Read in output of UCT/scripts/locate_cves.py
       This is sneaky because we read in the output and then output a fake XML
       file for processing.
    '''
    if not os.path.isfile(f):
        print >>sys.stderr, "'%s' not a file" % f
        sys.exit(1)

    name = os.path.abspath(f + ".xml")
    if os.path.exists(name):
        print >>sys.stderr, "'%s' already exists" % name
        sys.exit(1)

    lines = file(f).readlines()
    cves = dict()
    cve = None
    subject = ""
    for line in lines:
        if line == "\n": # record delimiter
            if cve != None:
                cves[cve]['subject'] = subject
            cve = None
            subject = ""
            continue

        if line.startswith("Couldn't find CVE"):
            cve = line.split()[2]
            if not cve_lib.CVE_RE.match(cve):
                print >>sys.stderr, "Skipping malformed CVE: '%s' from '%s'" % (cve, f)
                cve = None
            elif cves.has_key(cve):
                if opt.verbose:
                    print >>sys.stderr, "Skipping duplicate '%s' from '%s'" % (cve, f)
                cve = None
            else:
                if opt.verbose:
                    print >>sys.stderr, "Adding '%s'" % cve
                cves[cve] = dict()
            continue

        if cve == None:
             continue

        if line.startswith("Message date:"):
            try:
                date = " ".join(line.split(": ")[1].strip().split()[0:5])
                cves[cve]['date'] = datetime.datetime.strptime(date, "%a, %d %b %Y %H:%M:%S")
            except Exception:
                print >>sys.stderr, "Could not process date '%s', skipping %s from '%s'" % (line, cve, f)
                del cves[cve]
                cve = None
                continue
        if line.startswith("Message subject:") or subject != "":
            s = re.sub(r'Message subject: ', "", line)
            if subject == "":
                subject = s.strip()
            else:
                subject += " " + s.strip()

        # Try to fake up some urls
        rhsa_regex = '\[RHSA-\d\d\d\d:\d+-\d+\]'
        osssec_regex = '\[oss-security\]'
        if re.search(r'' + rhsa_regex, subject):
            rhsa = re.sub(r'.*(%s).*' % rhsa_regex, r'\1', subject).strip('[|]')
            url = "https://rhn.redhat.com/errata/%s-%s.html" % (rhsa.split(':')[0], rhsa.split(':')[1].split('-')[0])
            cves[cve].setdefault('refs',[]+[url])
        elif re.search(r'' + osssec_regex, subject) and cves[cve].has_key('date'):
            # NOTE: while we can determine the url for the year/month/day, we
            # cannot determine the specific message on that day. This gets us
            # close though, so use it.
            url = "http://www.openwall.com/lists/oss-security/%s" % (cves[cve]['date'].strftime("%Y/%m/%d"))
            cves[cve].setdefault('refs',[]+[url])

    xml = get_fake_nvd_xml_header()

    keys = cves.keys()
    keys.sort()
    for c in keys:
        desc = '''ML-Date: %s, ML-Subject: %s''' % (cves[c]['date'], escape(cves[c]['subject']))
        xml += convert_to_xml(cves, c, desc)

    xml += get_fake_nvd_xml_footer()

    tmp, tmpname = tempfile.mkstemp()
    os.write(tmp, xml)

    os.close(tmp)
    shutil.move(tmpname, name)
    return name

###################

def read_mbox_file(f):
    '''Run an mbox file through UCT/scripts/locate_cves.py
       And process through read_locate_cves_output()
    '''
    if not os.path.isfile(f):
        print >>sys.stderr, "'%s' not a file" % f
        sys.exit(1)

    child = subprocess.Popen(['./scripts/locate_cves.py', f], stdout=subprocess.PIPE)
    out, err = child.communicate()

    tmp, tmpname = tempfile.mkstemp()
    os.write(tmp, out)
    os.close(tmp)

    xml_file = read_locate_cves_output(tmpname)
    os.unlink(tmpname)
    return xml_file

###################

def dpkg_compare_versions(v1, op, v2):
    import subprocess
    try:
        sp = subprocess.Popen(['dpkg', '--compare-versions', v1, op, v2], close_fds=True)
    except OSError, e:
        return [127, str(e)]
    sp.communicate()
    if sp.returncode == 0:
        return True
    return False

def get_built_using(pkgs=[]):
    global built_using_map
    if built_using_map is None:
        built_using_map = source_map.load_built_using_collection(
                              source_map.load(data_type='packages'))

    out = ""
    for pkg in pkgs:
        out += source_map.get_built_using(built_using_map, pkg)

    return out

class CVEHandler(xml.sax.handler.ContentHandler):
    """SAX handler for processing mitre's CVE database XML."""

    def __init__(self, ignore=[]):
        # For per-hit processing
        self.curr_cve = None
        self.curr_desc = None
        self.curr_desc_ready = False
        self.curr_refs = []
        self.curr_chars_collect = False
        self.curr_chars = ""
        self.num_ignored = 0
        self.num_added = 0
        self.num_skipped = 0
        self.curr_public = None

        # For long-term (human) processing
        self.cve_ignore = set()
        for cve in ignore:
            self.cve_ignore.add(cve)
        self.cve_seen = set()
        self.cve_list = []
        self.cve_data = dict()
        self.saved_ignore_reason = ""
        self.saved_package = ""
        self.saved_cve = ""
        self.debian = None

        # File-type detection
        self.use_nvd = None

        # Load debian CVE states, if configured
        if cve_lib.config.has_key('secure_testing_path'):
            self.debian = cve_lib.load_debian_cves(cve_lib.config['secure_testing_path']+'/data/CVE/list')

    def updateTimestamp(self):
        # Get UTC time
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S",time.gmtime())

        # Append to timestamp file list
        file('%s/check-cves.log'%(destdir),'a').write('%s UTC - %s added, %s ignored, %s skipped, %s total - files: %s\n' % \
            (timestamp, self.num_added, self.num_ignored, self.num_skipped, self.num_added + self.num_ignored, map (lambda x: os.path.basename(x), args)))

    def printReport(self):
        print "\n %4d CVEs added" % self.num_added
        print " %4d CVEs ignored" % self.num_ignored
        print " %4d CVEs skipped" % self.num_skipped
        print "---------------------------"
        print "%5d total CVEs triaged" % (self.num_added + self.num_ignored)

    def startElement(self, name, attrs):
        # NVD items
        if name == "entry":
            # Detect broken XML
            if self.use_nvd != None and self.use_nvd == False:
                raise KeyError, "saw 'entry' in Mitre XML"
            if self.use_nvd == None and opt.verbose:
                print >>sys.stderr, "Detected NVD XML schema"
            self.use_nvd = True
            self.curr_cve = attrs['name']
            self.curr_public = attrs['published']
            self.curr_refs = []
            self.curr_url = None
            self.curr_desc = None
            self.curr_desc_ready = False
        if name == "descript":
            self.curr_chars_collect = True
            self.curr_chars = ""
            if attrs['source'] == 'cve':
                self.curr_desc_ready = True
        # Mitre items
        if name == "item":
            # Detect broken XML
            if self.use_nvd != None and self.use_nvd == True:
                raise KeyError, "saw 'item' in NVD XML"
            if self.use_nvd == None and opt.verbose:
                print >>sys.stderr, "Detected Mitre XML schema"
            self.use_nvd = False
            self.curr_cve = attrs['name']
            self.curr_refs = []
            self.curr_url = None
            self.curr_desc = None
        if name == "desc" and self.use_nvd == False:
            self.curr_chars_collect = True
            self.curr_chars = ""

        # Common
        if name == "ref":
            self.curr_chars_collect = True
            self.curr_chars = ""
            self.curr_url = None
            self.curr_source = None
            if attrs.has_key('url'):
                self.curr_url = attrs['url']
            if attrs.has_key('source'):
                self.curr_source = attrs['source']

    def characters(self, content):
        if self.curr_chars_collect:
            self.curr_chars += content

    def endElement(self, name):
        self.curr_chars_collect = False
        # NVD items
        if name == "descript" and self.curr_desc_ready:
            self.curr_desc = self.curr_chars.encode("ascii", "replace")
            self.curr_desc_ready = False
        if name == "entry":
            self.handle_cve()
        # Mitre items
        if name == "desc" and not self.use_nvd:
            self.curr_desc = self.curr_chars.encode("ascii", "replace")
        if name == "item":
            self.handle_cve()
        # Common
        if name == "ref":
            self.curr_refs += [(self.curr_source,self.curr_chars.encode("ascii", "replace"),self.curr_url)]

    def handle_cve(self):

        # Skip CVEs we know about already
        if self.curr_cve in self.cve_ignore:
            return

        limit = cve_limit
        if not opt.refresh:
            limit = 2005
        if int(self.curr_cve.split("-")[1]) < limit:
            return

        # Check for ** RESERVED **
        s = '** RESERVED **'
        if self.curr_desc.find(s) >= 0 and self.curr_desc.find("Linux") < 0:
            return

        if self.curr_cve in self.cve_seen:
            print >>sys.stderr, "Skipping repeat: %s" % (self.curr_cve)
            return
        self.cve_seen.add(self.curr_cve)

        self.cve_list += [self.curr_cve]
        self.cve_data.setdefault(self.curr_cve,dict())
        self.cve_data[self.curr_cve].setdefault('desc',self.curr_desc)
        self.cve_data[self.curr_cve].setdefault('public',self.curr_public)
        self.cve_data[self.curr_cve].setdefault('refs',[]+self.curr_refs)

    def cves(self):
        return self.cve_list

    def get_ignore_suggestion(self, text):
        '''Try to find a reasonable suggestion for the user.'''
        suggestion = ""

        # strip out the added mailing list stuff (locate_cves.py importing)
        rev_text = re.sub(r'^ML-Date: .* ML-Subject: ', '', text)
        rev_text = re.sub(r'^(|Re: )CVE (r|R)equest: ', '', rev_text)

        first_sentence = re.split(r'\. ', rev_text)[0]

        # hunt for module/component
        match = re.search(r'(?: in t|^T)he (.*) (library|template|component|module|plug-?in|extension|application) (?:.* )?for (Joomla!|Drupal|WordPress|TYPO3|Mambo|Android|jQuery)', first_sentence)
        if match:
            module = match.group(1)
            for marker in [" module"," ("]:
                if marker in module:
                    module = module.split(marker)[0]
            return "%s %s for %s" % (module, match.group(2), match.group(3))

        # drop commas-extensions
        if ',' in first_sentence:
            first_sentence = re.split(r',', first_sentence)[0]
        phrases = re.split(r' [io]n ', first_sentence)

        # default to the last phrase
        suggestion = phrases[-1]
        # move to earlier phrase if suggestion starts with "a"
        if suggestion.startswith('a '):
            suggestion = phrases[-2]

        version_preps = '\s+(before|through)\s*'
        version_regex = '\s+([a-zA-Z\._\-]*[0-9]+[a-zA-Z\._\-]*)+'
        # prefer 'Apple iOS before <version>' or 'Apple Mac OS X through
        # <version' in the last phrase over other suggestions
        if not re.search(r'' + version_preps + version_regex, suggestion):
            # grab the first phrase with something that may be a version number
            for p in phrases:
                if re.search(r'' + version_regex, p):
                    suggestion = p
                    break
                if re.search(r'^[^,]+\s+for\s+', p):
                    suggestion = p
                    break

        # try to find a good suggestion from the phrase (ie suggest 'Linux
        # kernel' from 'the Linux kernel before 2.6.27')
        suggestion = re.split(r'\s+([a-zA-Z\._\-]*[0-9]+[a-zA-Z\._\-]*)+', suggestion)[0]
        # "blah in component for Software"
        if re.search(r'^[^,]+\s+for\s+', suggestion):
            suggestion = re.split(r'[^,]+\s+for\s+', suggestion)[1]
        # clean up leading "the"
        suggestion = re.sub(r'^\s*[tT]he\s+', '', suggestion)
        # clean up trailing version prepositions like "before" or "through" from
        # version details
        suggestion = re.sub(r'' + version_preps + '$', '', suggestion)
        # clean up trailing parens
        suggestion = re.sub(r'\s+\([^\)]+\)\s*$', '', suggestion)

        # Chop off action verbs
        if re.search(r'\s+(has|creates|allows?)($|\s+.*)', suggestion):
            suggestion = re.sub(r'\s+(has|creates|allows?)($|\s+.*)', '', suggestion)

        # if the phrase is too long, truncate it to max_length, but make
        # sure we don't have a partial word at the end
        max_length = 64
        if len(suggestion) > max_length:
            suggestion = suggestion[:max_length]
            suggestion = re.sub(r'\s+\w+$', '', suggestion)

        return suggestion

    def human_process_cve(self, cve):

        # Check if this was once an embargoed issue
        if cve in EmbargoList:
            print '**!!** no longer embargoed **!!**'
            print '==========================details from embargo entry=========================='
            print file(os.path.join('embargoed',cve)).read().rstrip()
            print '=================================end details=================================='
        # Display CVE information
        if self.cve_data[cve]['public']:
            print ' Published: %s' % (self.cve_data[cve]['public'])
        for ref in self.cve_data[cve]['refs']:
            print ' %s: %s' % (ref[0],ref[1]),
            # Do not repeat URL if it matches the contents of the reference
            if ref[2] and ref[1].strip() != ref[2].strip():
                print ' %s' % (ref[2]),
            print
        print '%s' % (self.cve_data[cve]['desc'])
        if self.debian and self.debian.has_key(cve):
            print 'Debian CVE Tracker: %s' % (self.debian[cve]['state'])
            if len(self.debian[cve]['note']):
                print "\t" + "\n\t".join(self.debian[cve]['note'])
            for pkg in self.debian[cve]['pkgs']:
                info = []
                if self.debian[cve]['pkgs'][pkg]['priority']:
                    info.append(self.debian[cve]['pkgs'][pkg]['priority'])
                if self.debian[cve]['pkgs'][pkg]['bug']:
                    info.append(self.debian[cve]['pkgs'][pkg]['bug'])
                if self.debian[cve]['pkgs'][pkg]['note']:
                    info.append(self.debian[cve]['pkgs'][pkg]['note'])
                print "  Debian: %s: %s (%s)" % (pkg,self.debian[cve]['pkgs'][pkg]['state'],"; ".join(info))
                # Display version and component details for Ubuntu's pkg
                answer = source_map.madison(source, pkg)
                for name in sorted(answer.keys()):
                    for pkg in sorted(answer[name].keys()):
                        print '    Ubuntu: %s | %s | %s' % (pkg, answer[name][pkg], name)

        response = 'skip'
        reason = ""
        package = ""
        # Skip CVEs that are obviously not about Ubuntu
        for s in ignore_strings:
            if self.cve_data[cve]['desc'].find(s) >= 0 and self.cve_data[cve]['desc'].find("Linux") < 0:
                response = 'ignore'
                reason = s
        # Default to Debian state, if available
        if self.debian and self.debian.has_key(cve) and self.debian[cve]['state']:
            if self.debian[cve]['state'].startswith('NOT-FOR-US:'):
                response = 'ignore'
                reason = self.debian[cve]['state'].split(':',1)[1].lstrip()
            if self.debian[cve]['state'] == 'FOUND':
                response = 'add'
                package = " ".join(self.debian[cve]['pkgs'])

        info = ''
        while info == "" or not info[0] in ['i','a','s','q','r']:
            print 'A]dd (or R]epeat), I]gnore forever, S]kip for now, or Q]uit? [%s] ' % (response),
            info = sys.stdin.readline().strip().lower()
            if info == "":
                info = response

        if info.startswith('q'):
            self.printReport()
            sys.exit(0)
        elif info.startswith('a') or info.startswith('r'):
            do_repeat = False
            self.num_added += 1
            if info.startswith('r'):
                info = self.saved_package
                do_repeat = True
            else:
                info = ""
                while info == "":
                    print 'Package(s) affected? ',
                    if package == "":
                        package = self.saved_package
                    if package != "":
                        print '[%s] ' % (package),
                    info = sys.stdin.readline().strip()
                    if info == '':
                        info = package
            self.saved_package = info

            # Build up list of reference urls
            ref_urls = []
            if self.debian and \
               self.debian.has_key(cve) and \
               self.debian[cve].has_key('note'):
                for line in self.debian[cve]['note']:
                    tmp = line.lstrip("NOTE: ")
                    if tmp.startswith("http"):
                        ref_urls.append(tmp)
            if self.cve_data[cve].has_key('refs'):
                for ref in self.cve_data[cve]['refs']:
                    url = ""
                    if ref[1].strip().startswith("http"):
                        url = ref[1].strip()
                    elif ref[2] is not None and ref[2].strip().startswith("http"):
                        url = ref[2].strip()
                    else: # no urls
                        continue

                    if '//' not in url: # invalid url
                        continue

                    # ignore certain reference URLs which we don't use
                    ignored_urls = ['www.securityfocus.com', 'www.osvdb.org']
                    if url.split('//')[1].split('/')[0] in ignored_urls:
                        continue

                    if url not in ref_urls:
                        ref_urls.append(url)

            # Build up list of bug urls
            bug_urls = []
            pkgs = info.split()
            for pkg in pkgs:
                if self.debian and \
                   self.debian.has_key(cve) and \
                   self.debian[cve]['pkgs'] and \
                   self.debian[cve]['pkgs'].has_key(pkg):
                    bug = None
                    if self.debian[cve]['pkgs'][pkg]['priority'] and \
                       re.search(r'^bug #[0-9]+$', self.debian[cve]['pkgs'][pkg]['priority']):
                        bug = self.debian[cve]['pkgs'][pkg]['priority'].split('#')[1]
                    elif self.debian[cve]['pkgs'][pkg]['bug']:
                        bug = self.debian[cve]['pkgs'][pkg]['bug']
                    if bug:
                        url = "http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=%s" % bug
                        if url not in bug_urls:
                            bug_urls.append(url)

            # Add to tracker from 00boilerplate
            dst = add_CVE_to_tracker(cve,self.cve_data[cve], info, bug_urls, ref_urls)

            # Build up command line
            cmd = ['./scripts/active_edit','-c',cve,'--yes']

            for pkg in pkgs:
                # The Debian convention is to specify the fixed version as the state
                # with the bug number as the priority for fixed bugs. Leverage this
                # with active_edit
                fixed_in = ""
                if self.debian and \
                   self.debian.has_key(cve) and \
                   self.debian[cve]['pkgs'] and \
                   self.debian[cve]['pkgs'].has_key(pkg) and \
                   self.debian[cve]['pkgs'][pkg]['state'] and \
                   re.search(r'^[0-9]', self.debian[cve]['pkgs'][pkg]['state']):
                    fixed_version = self.debian[cve]['pkgs'][pkg]['state']
                    fixed_in = ",%s" % fixed_version

                    # Now see if we can correlate this to an Ubuntu version
                    answer = source_map.madison(source, pkg)
                    for name in sorted(answer.keys()):
                        rel = name.split('/')[0].split('-')[0] # don't care about the pocket
                        version = answer[name][pkg]
                        # Try to compare apples to apples. Ie, if one of us has
                        # an epoch and the other doesn't, don't try to be smart
                        if (':' not in version and ':' not in fixed_version) or \
                           (':' in version and ':' in fixed_version):
                            if dpkg_compare_versions(version, 'ge', fixed_version):
                                if rel == cve_lib.devel_release:
                                    rel = 'devel'
                                fixed_in += ",%s,%s" % (rel, version)
                                break
                cmd += ['-p',"%s%s" % (pkg, fixed_in)]

            subprocess.call(cmd)
            if do_repeat:
                subprocess.call(['./scripts/active_dup',self.saved_cve,cve])
            # Spawn editor
            editor = os.getenv('EDITOR','vi')
            subprocess.call([editor,dst])
            self.saved_cve = cve

            print 'Detecting packages built using: %s...' % " ".join(pkgs),
            sys.stdout.flush()
            built_using = ""
            try:
                built_using = get_built_using(pkgs)
            except Exception as e:
                print >>sys.stderr, "ERROR: %s" % e
                pass # for now just show the error but don't break triage

            if built_using != "":
                print "found:\n"
                print "%s" % source_map.get_built_using_header()
                print "%s" % built_using
                print "IMPORTANT: the above packages are candidates for rebuilds when fixes are applied to:"
                print " %s" % "\n ".join(pkgs)
            else:
                print "none detected"

        elif info.startswith('i'):
            self.num_ignored += 1

            info = ""
            while info == "":
                print 'Reason to be ignored?'

                suggestion = self.get_ignore_suggestion(self.cve_data[cve]['desc'])
                print '   a) %s' % (suggestion)

                if reason == "" and self.saved_ignore_reason != "":
                    reason = self.saved_ignore_reason
                if reason != "" and reason != suggestion:
                    print '   b) %s' % (reason)
                print ' > ',

                info = sys.stdin.readline().strip()
                if info == "a":
                    reason = suggestion
                    info = reason
                elif info == "b":
                    info = reason
                # Enter defaults to only suggestion if only one exists
                elif len(info) == 0 and reason == suggestion:
                    info = reason
                elif len(info) < 3: # Fat fingers protection
                    print '\nError: Reason must be at least 3 characters long!\n'
                    info = ""
            self.saved_ignore_reason = info
            self.cve_resolved_ignore(cve, info)

        elif info.startswith('s'):
            self.num_skipped += 1
        print ''

    def cve_resolved_ignore(self, cve, reason):
        # Append to ignore list
        file('%s/ignored/not-for-us.txt'%(destdir),'a').write('%s # %s\n'%(cve,reason))

class CheckCVETest(unittest.TestCase):
    def test_get_ignore_suggestion(self):
        '''"Ignore" suggestion text extraction'''

        # Re-use the global handler
        h = handler

        self.assertEquals("Courier-Authlib", h.get_ignore_suggestion('''SQL injection vulnerability in authpgsqllib.c in Courier-Authlib before 0.62.0, when a non-Latin locale Postgres database is used, allows remote attackers to execute arbitrary SQL commands via query parameters containing apostrophes.'''))

        self.assertEquals("Apple Mac OS X", h.get_ignore_suggestion('''Buffer overflow in the DirectoryService Proxy in DirectoryService in Apple Mac OS X through 10.6.8 allows remote attackers to execute arbitrary code or cause a denial of service (application crash) via unspecified vectors.'''))

        self.assertEquals("KDE", h.get_ignore_suggestion('''HTMLTokenizer::scriptHandler in Konqueror in KDE 3.5.9 and 3.5.10 allows remote attackers to cause a denial of service (application crash) via an invalid document.load call that triggers use of a deleted object.  NOTE: some of these details are obtained from third party information.'''))

        self.assertEquals("Sun Solaris", h.get_ignore_suggestion('''The name service cache daemon (nscd) in Sun Solaris 10 and OpenSolaris snv_50 through snv_104 does not properly check permissions, which allows local users to gain privileges and obtain sensitive information via unspecified vectors.'''))

        self.assertEquals("Linux kernel", h.get_ignore_suggestion('''libata in the Linux kernel before 2.6.27.9 does not set minimum timeouts for SG_IO requests, which allows local users to cause a denial of service (Programmed I/O mode on drives) via multiple simultaneous invocations of an unspecified test program.'''))

        self.assertEquals("iGaming", h.get_ignore_suggestion('''Multiple SQL injection vulnerabilities in iGaming 1.5 and earlier allow remote attackers to execute arbitrary SQL commands via the browse parameter to (1) previews.php and (2) reviews.php, and the (3) id parameter to index.php in a viewarticle action.'''))

        self.assertEquals("PHP iCalendar", h.get_ignore_suggestion('''PHP iCalendar 2.24 and earlier allows remote attackers to bypass authentication by setting the phpicalendar and phpicalendar_login cookies to 1.'
'''))

        # Test length truncation, tweaked to avoid "has" matcher
        self.assertEquals("** TEST CVE ** This candidate HAS been reserved by an", h.get_ignore_suggestion('''** TEST CVE ** This candidate HAS been reserved by an organization or individual that will use it when announcing a new security problem.  When the candidate has been publicized, the details for this candidate will be provided.'''))

        self.assertEquals("Sun OpenSolaris", h.get_ignore_suggestion('''Unspecified vulnerability in the root/boot archive tool in Sun OpenSolaris has unknown impact and local attack vectors, related to a "Temporary file vulnerability," aka Bug ID 6653455.'''))

        self.assertEquals("Red Hat Certificate System", h.get_ignore_suggestion('''Red Hat Certificate System 7.2 uses world-readable permissions for password.conf and unspecified other configuration files, which allows local users to discover passwords by reading these files.'''))

        self.assertEquals("Microsoft Internet Explorer", h.get_ignore_suggestion('''An unspecified function in the JavaScript implementation in Microsoft Internet Explorer creates and exposes a "temporary footprint" when there is a current login to a web site, which makes it easier for remote attackers to trick a user into acting upon a spoofed pop-up message, aka an "in-session phishing attack." NOTE: as of 20090116, the only disclosure is a vague pre-advisory with no actionable information. However, because it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.'''))

        self.assertEquals("Umer Inc Songs Portal", h.get_ignore_suggestion('''SQL injection vulnerability in albums.php in Umer Inc Songs Portal allows remote attackers to execute arbitrary SQL commands via the id parameter.'''))

        self.assertEquals("Limbo CMS", h.get_ignore_suggestion('''SQL injection vulnerability in open.php in the Private Messaging (com_privmsg) component for Limbo CMS allows remote attackers to execute arbitrary SQL commands via the id parameter in a pms action to index.php.'''))

        self.assertEquals("phpscripts Ranking Script", h.get_ignore_suggestion('''phpscripts Ranking Script allows remote attackers to bypass authentication and gain administrative access by sending an admin=ja cookie.'''))

        self.assertEquals("A4Desk Event Calendar", h.get_ignore_suggestion('''PHP remote file inclusion vulnerability in index.php in A4Desk Event Calendar, when magic_quotes_gpc is disabled, allows remote attackers to execute arbitrary PHP code via a URL in the v parameter.'''))

        self.assertEquals("Galatolo WebManager", h.get_ignore_suggestion('''Cross-site scripting (XSS) vulnerability in result.php in Galatolo WebManager (GWM) 1.0 allows remote attackers to inject arbitrary web script or HTML via the key parameter.'''))

        self.assertEquals("Sun OpenSolaris", h.get_ignore_suggestion('''Unspecified vulnerability in the process (aka proc) filesystem in Sun OpenSolaris snv_85 through snv_100 allows local users to gain privileges via vectors related to the contract filesystem.'''))

        self.assertEquals("Dreampics Gallery Builder", h.get_ignore_suggestion('''SQL injection vulnerability in index.php in Dreampics Gallery Builder allows remote attackers to execute arbitrary SQL commands via the exhibition_id parameter in a gallery.viewPhotos action.'''))

        self.assertEquals("Omilen Photo Gallery component for Joomla!", h.get_ignore_suggestion('''Directory traversal vulnerability in the Omilen Photo Gallery (com_omphotogallery) component Beta 0.5 for Joomla! allows remote attackers to include and execute arbitrary local files via directory traversal sequences in the controller parameter to index.php.'''))

        self.assertEquals("Webform module for Drupal", h.get_ignore_suggestion('''Cross-site scripting (XSS) vulnerability in the Webform module 5.x before 5.x-2.7 and 6.x before 6.x-2.7, a module for Drupal, allows remote attackers to inject arbitrary web script or HTML via a submission.'''))

        self.assertEquals("Itamar Elharar MusicGallery component for Joomla!", h.get_ignore_suggestion('''SQL injection vulnerability in the Itamar Elharar MusicGallery (com_musicgallery) component for Joomla! allows remote attackers to execute arbitrary SQL commands via the id parameter in an itempage action to index.php.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.'''))

        self.assertEquals("Kide Shoutbox component for Joomla!", h.get_ignore_suggestion('''The Kide Shoutbox (com_kide) component 0.4.6 for Joomla! does not properly perform authentication, which allows remote attackers to post messages with an arbitrary account name via an insertar action to index.php.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.'''))

        self.assertEquals("WP-Forum plugin for WordPress", h.get_ignore_suggestion('''Multiple SQL injection vulnerabilities in the WP-Forum plugin before 2.4 for WordPress allow remote attackers to execute arbitrary SQL commands via (1) the search_max parameter in a search action to the default URI, related to wpf.class.php; (2) the forum parameter to an unspecified component, related to wpf.class.php; (3) the topic parameter in a viewforum action to the default URI, related to the remove_topic function in wpf.class.php; or the id parameter in a (4) editpost or (5) viewtopic action to the default URI, related to wpf-post.php.'''))

        self.assertEquals("ListMan extension for TYPO3", h.get_ignore_suggestion('''Cross-site scripting (XSS) vulnerability in the ListMan (nl_listman) extension 1.2.1 for TYPO3 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.'''))

        self.assertEquals("multiple status.net issues", h.get_ignore_suggestion('''ML-Date: 2011-01-25 12:08:05, ML-Subject: Re: CVE request: multiple status.net issues'''))
        self.assertEquals("multiple status.net issues", h.get_ignore_suggestion('''ML-Date: 2011-01-25 12:08:05, ML-Subject: CVE request: multiple status.net issues'''))
        self.assertEquals("multiple status.net issues", h.get_ignore_suggestion('''ML-Date: 2011-01-25 12:08:05, ML-Subject: multiple status.net issues'''))
        self.assertEquals("Mambo CMS", h.get_ignore_suggestion('''ML-Date: 2011-06-28 16:24:28, ML-Subject: Re: CVE Request: Mambo CMS 4.6.x | Multiple Cross Site Scripting Vulnerabilities'''))

        self.assertEquals("Apple iOS", h.get_ignore_suggestion('''The DNAv4 protocol implementation in the DHCP component in Apple iOS before 6 sends Wi-Fi packets containing a MAC address of a host on a previously used network, which might allow remote attackers to obtain sensitive information about previous device locations by sniffing an unencrypted Wi-Fi network for these packets.'''))

        self.assertEquals("Conceptronic", h.get_ignore_suggestion('''Multiple open redirect vulnerabilities on the Conceptronic C54APM access point with runtime code 1.26 allow remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via (1) the submit-url parameter in a Refresh action to goform/formWlSiteSurvey or (2) the wlan-url parameter to goform/formWlanSetup.'''))

        self.assertEquals("Tapjoy library for Android", h.get_ignore_suggestion('''The Tapjoy library for Android does not verify X.509 certificates from SSL servers, which allows man-in-the-middle attackers to spoof servers and obtain sensitive information via a crafted certificate.'''))

        self.assertEquals("kamkomesan application for Android", h.get_ignore_suggestion('''The kamkomesan (aka com.anek.kamkomesan) application 1.0 for Android does not verify X.509 certificates from SSL servers, which allows man-in-the-middle attackers to spoof servers and obtain sensitive information via a crafted certificate.'''))

        self.assertEquals("DataTables plugin for jQuery", h.get_ignore_suggestion('''Cross-site scripting (XSS) vulnerability in the DataTables plugin 1.10.8 and earlier for jQuery allows remote attackers to inject arbitrary web script or HTML via the scripts parameter to media/unit_testing/templates/6776.php.'''))

# CVEIgnoreList is a list of all CVEs we know about already.  These will be
# ignored when checking MITRE for new CVEs
ignored_path = 'ignored/not-for-us.txt'
if destdir != './' and destdir != '.':
    ignored_path = os.path.join(destdir, ignored_path)
CVEIgnoreList = cve_lib.parse_CVEs_from_uri(ignored_path)
CVEKnownList  = []
CVEKnownList += [cve for cve in os.listdir(destdir + "/ignored/") if cve.startswith('CVE-')]
CVEKnownList += [cve for cve in os.listdir(destdir + "/retired/") if cve.startswith('CVE-')]
(ActiveList, EmbargoList) = cve_lib.get_cve_list()
CVEKnownList += [cve for cve in ActiveList if cve not in EmbargoList]

if not opt.refresh:
    CVEIgnoreList += CVEKnownList

if opt.known:
    cvelist = CVEIgnoreList
    if opt.skip_nfu:
        cvelist = CVEKnownList
    for cve in sorted(cvelist):
        print cve
    sys.exit(0)

parser = xml.sax.make_parser()
handler = CVEHandler(CVEIgnoreList)
parser.setContentHandler(handler)

if opt.test:
    suite = unittest.TestSuite()
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(CheckCVETest))
    unittest.TextTestRunner(verbosity=2).run(suite)
    sys.exit(0)

untriaged_xml = ""
if opt.untriaged:
    untriaged_xml = read_locate_cves_output(opt.untriaged)
    args.append(untriaged_xml)

if opt.mbox:
    untriaged_xml = read_mbox_file(opt.mbox)
    args.append(untriaged_xml)

debian_import_xml = ""
if opt.import_missing_debian and handler.debian != None:
    debian_import_xml = import_debian(handler)
    args.append(debian_import_xml)

if len(args) == 0:
    args.append("http://cve.mitre.org/cve/downloads/allitems.xml")

for uri in args:
    print >>sys.stderr, 'Loading %s ...'%(uri)
    if '://' in uri:
        readable = urllib.urlopen(uri)
    else:
        readable = PercentageFile(uri)
    try:
        parser.parse(readable)
    except xml.sax._exceptions.SAXParseException, e:
        print "\n\nWARNING: %s is malformed:\n%s" % (uri, e)
        print >>sys.stderr, "Aborting"
        sys.exit(1)
    print ''

# Leaving our fake xml around is icky
if os.path.exists(untriaged_xml):
    os.unlink(untriaged_xml)
if os.path.exists(debian_import_xml):
    os.unlink(debian_import_xml)

if opt.refresh:
    for cve in sorted(CVEKnownList):

        # Get new information from the XML
        desc = None
        public = None
        try:
            desc = _wrap_desc(handler.cve_data[cve]['desc'].strip())
            public = handler.cve_data[cve]['public']
        except:
            if opt.verbose:
                print >>sys.stderr, '%s not listed in XML' % (cve)

        # Find the on-disk CVE file
        cvefile = ""
        for status in ['active','retired','ignored']:
            check = '%s/%s/%s' % (destdir, status, cve)
            if os.path.exists(check):
                cvefile = check
                break
        if cvefile == "":
            print >>sys.stderr, 'local dirs missing %s?!' % (cve)
            continue

        # Load CVE
        try:
            data = cve_lib.load_cve(cvefile)
        except ValueError, e:
            print >>sys.stderr, e
            continue

        # Set defaults for required fields if no XML value exists
        if not data.has_key('PublicDate') and not public:
            public = "unknown"

        updated = False
        # Update description if it needs it
        if desc:
            if data['Description'].strip() != desc:
                cve_lib.update_multiline_field(cvefile,'Description',desc)
                updated = True
        # Update Publication Date if it needs it
        if public:
            if not data.has_key('PublicDate') or (data.has_key('PublicDate') and data['PublicDate'] != public):
                cve_lib.update_field(cvefile,'PublicDate',public)
                updated = True

        # Add CVE Reference, if it's missing
        if data.has_key('References') and re.match('^CVE-\d+-\d+$',cve):
            mitre_ref = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=" + cve
            if not mitre_ref in data['References']:
                cve_lib.add_reference(cvefile,mitre_ref)
                updated = True

        if updated:
            print >>sys.stderr, "Refreshed %s" % (cvefile)
    sys.exit(0)

new_cves = handler.cves()
max = len(new_cves)
count = 0
for cve in new_cves:
    count += 1

    if opt.report:
        print cve
        continue

    print '\n***********************************************************************'
    print ' %s    (%d/%d: %d%%)' % (cve, count, max, (count * 100 / max))
    print ' http://cve.mitre.org/cgi-bin/cvename.cgi?name=%s' % (cve)
    print '***********************************************************************'
    handler.human_process_cve(cve)

if not opt.report:
    handler.updateTimestamp()
handler.printReport()

