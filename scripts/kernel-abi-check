#!/usr/bin/python
# Checks the kernel ABI versions to make sure there are no mismatches
# between -security and -updates.
#
# Copyright (C) 2009-2016 Canonical, Ltd.
# Author: Kees Cook <kees@ubuntu.com>
from __future__ import print_function

import optparse
import os
import subprocess
import sys
from cve_lib import meta_kernels

try:
    import lpl_common
except ImportError:
    uqt_dir = os.getenv('UQT')
    sys.path.append(os.path.join(os.getenv('UQT'), 'common/'))
    try:
        import lpl_common
    except ImportError:
        print("lpl_common.py seems to be missing. Make sure $UQT environment variable is set properly", file=sys.stderr)
        sys.exit(1)


# list of versions to masquerade as when things end up in the wrong pockets
glitches = { 'linux': {
                 'maverick': {
                     '2.6.35-28.49': '2.6.35-28.50'
                 },
                 'precise': {
                     '3.2.0-105.146': '3.2.0-106.147'
                 },
                 'trusty': {
                     '3.13.0-49.81': '3.13.0-49.83'
                 },
                 'utopic': {
                     '~': '3.16.0-44.59'
                 },
                 'xenial': {
                     '4.4.0-28.47': '4.4.0-31.50'
                 },
             },
             'linux-exynos5': { # oem linux-exynos5 accidentally miscopied to security
                 'trusty': {
                     '~': '3.13.0-5.6'
                 }
             },
             'linux-raspi2': { # linux-raspi2 accidentally miscopied to security
                 'xenial': {
                     '4.4.0-1016.22': '4.4.0-1017.23'
                 },
             },
             'linux-ti-omap4': {
                 'precise': {
                     '3.2.0-1483.110': '3.2.0-1484.111'
                 },
             },
             'linux-keystone': { # oem linux-keystone added post-release and
                                 #  no USNs, so use '~', '<version in security>
                 'trusty': {

#                     '~': '3.13.0-43.68'
                     '~': '3.13.0-68.96',
                 },
             },
             'linux-snapdragon': {
                 'xenial': {
                     '4.4.0-1019.22': '4.4.0-1020.23'
                 },
                 'yakkety': {
                     '~': '4.4.0-1035.39'
                 }
             },
             'linux-lts-utopic': { # first release of utopic backport kernel
                 'trusty': {
#                     '~': '3.16.0-25.33~14.04.2'
                     '3.16.0-46.62~14.04.1': '3.16.0-49.65~14.04.1'
                 }
             },
             'linux-lts-vivid': { # zombie vivid lives on
                 'trusty': {
                     '3.19.0-66.74~14.04.1': '3.19.0-74.82~14.04.1',
                 }
             },
             'linux-lts-wily': { # wily lts accidentally miscopied to security
                 'trusty': {
                     '4.2.0-18.22~14.04.1': '4.2.0-19.23~14.04.1',
                 }
             },
             'linux-lts-xenial': {
                 'trusty': {
                     '4.4.0-28.47~14.04.1': '4.4.0-31.50~14.04.1',
                 }
             },
           }

parser = optparse.OptionParser()
parser.add_option("-v", "--verbose", help="Show matches", action='store_true')
parser.add_option("--ignore-usn", help="Ignore need for USNs", action='store_true')
parser.add_option("--ignore-abi", help="Ignore ABI mismatches", action='store_true')
parser.add_option("--add-proposed", help="check proposed for ABI mismatches", action='store_true')
(opt, args) = parser.parse_args()

lp = lpl_common.connect()
ubuntu = lp.distributions['ubuntu']
archive = ubuntu.main_archive
pockets = ['Updates', 'Security']
if opt.add_proposed:
    pockets.append('Proposed')

def get_version(src, series, pocket):
    pubs = archive.getPublishedSources(exact_match=True,
                                   source_name=src,
                                   status="Published",
                                   pocket=pocket,
                                   distro_series=series)
    count = 0
    for pub in pubs:
        count += 1
    if count > 1:
        for pub in pubs:
            print(pub.source_package_version, file=sys.stderr)
        raise ValueError(count)
    if count == 1:
        return pubs[0].source_package_version
    return None

def get_usn_version(src, release):
    topdir = os.environ['UCT']
    if 'UCT_REVIEWED' in os.environ:
        topdir = os.environ['UCT_REVIEWED']
    cmd = [os.path.join(topdir,'scripts/report-version.py'),
           src, release]
    version = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0].strip()
    # Handle any pocket glitch remappings
    if src in glitches and release in glitches[src] and \
       version in glitches[src][release]:
        if opt.verbose:
            print('Pretending that %s %s is really %s for %s' % (release, version, glitches[src][release][version], src), file=sys.stderr)
        version = glitches[src][release][version]
    return version

def package_abi(version):
    return int(version.split('-').pop().split('.',1)[0])

def meta_abi(version, offset=-2):
    return int(version.split('.').pop(offset))

# The "srcs" list must have the main kernel listed first, with ABI tracked
# packages coming after it.
def pocket_abis_match(release, suffix, srcs, metas, ignored=None):
    global opt

    series = ubuntu.getSeries(name_or_version=release)

    pkg = dict()
    meta = dict()
    for pocket in pockets:
        for src in srcs:
            pkg.setdefault(src,dict())
            pkg[src].setdefault(pocket,dict())
            #print('fetching %s in %s %s ...' % (src, release, pocket))
            pkg[src][pocket]['name'] = src
            pkg[src][pocket]['version'] = get_version(src, series, pocket)
            if not pkg[src][pocket]['version']:
                pkg[src][pocket]['version'] = '0.0.0.0'

        # Add metas
        for src in metas:
            meta.setdefault(src,dict())
            meta[src].setdefault(pocket,dict())
            meta[src][pocket]['name'] = src
            meta[src][pocket]['version'] = get_version(src, series, pocket)
            if not meta[src][pocket]['version']:
                if opt.verbose:
                    print('%s missing in %s %s' % (src, release, pocket), file=sys.stderr)
                meta[src][pocket]['version'] = '0.0.0.0'

    rc = True

    # Check for primary kernel versions in -security that do not have a USN
    if not opt.ignore_usn:
        src = srcs[0]
        last_usn = get_usn_version(src, release)
        if not pkg[src]['Security']['version'] in ['0.0.0.0', last_usn]:
            rc = False
            print("USN needed: %s %s is %s (last USN: %s)" % (release, pkg[src][pocket]['name'], pkg[src][pocket]['version'], last_usn), file=sys.stderr)

    if opt.ignore_abi:
        return rc

    # Check for ABI mismatches
    for src in srcs:
        for pocket in pockets:
            if not pkg[src][pocket]['version']:
                raise ValueError('missing %s in %s %s' % (src, release, pocket))

            abi  = package_abi(pkg[src][pocket]['version'])

            for name in sorted(meta.keys()):
                mabi = meta_abi(meta[name][pocket]['version'])
                meta_ver = meta[name][pocket]['version']
                if meta[name][pocket]['version'] == "0.0.0.0":
                    meta_ver += " (DNE)"

                # Hack for different format and out of sync ABI on dapper
                if (release == 'dapper'):
                    mabi = meta_abi(meta[name][pocket]['version'],-1)
                    # no longer out of sync as of 2.6.15.57
                    if mabi < 57:
                        mabi -= 1

                # Allow certain ABIs to be ignored
                if ignored and ignored.get(abi,'') == mabi:
                    if opt.verbose:
                        print("skip: ABI ignored for %s-%s: %d == %d (%s %s vs %s %s)" % (release, pocket.lower(), mabi, abi, meta[name][pocket]['name'], meta_ver, pkg[src][pocket]['name'], pkg[src][pocket]['version']))
                    continue

                if abi != mabi:
                    rc = False
                    print("FAIL: ABI mismatch in %s-%s: %d != %d (%s %s vs %s %s)" % (release, pocket.lower(), mabi, abi, meta[name][pocket]['name'], meta_ver, pkg[src][pocket]['name'], pkg[src][pocket]['version']), file=sys.stderr)
                elif opt.verbose:
                    print("ok: ABI matches in %s-%s: %d == %d (%s %s vs %s %s)" % (release, pocket.lower(), mabi, abi, meta[name][pocket]['name'], meta_ver, pkg[src][pocket]['name'], pkg[src][pocket]['version']))

    #print("pocket_abis_match(%s, %s, %s, %s, %s) returned %s" % (release, suffix, srcs, metas, ignored, rc))
    return rc


ok = True

# The following table is loosely based on
# https://wiki.ubuntu.com/Kernel/Dev/ABIPackages and
# https://wiki.ubuntu.com/Kernel/Dev/TopicBranches
# the version number in the second parameter isn't currently used in the
# script.

#if not pocket_abis_match('lucid','-2.6.32',['linux','linux-backports-modules-2.6.32'],['linux-meta','linux-ports-meta']): ok = False
#if not pocket_abis_match('lucid','-2.6.32',['linux-ec2'],['linux-meta-ec2']): ok = False
#if not pocket_abis_match('lucid','-2.6.32',['linux-mvl-dove'],['linux-meta-mvl-dove'], ignored={211:209}): ok = False
#if not pocket_abis_match('lucid','-2.6.32',['linux-ti-omap'],['linux-meta-ti-omap']): ok = False
#if not pocket_abis_match('lucid','-2.6.31',['linux-fsl-imx51'],['linux-meta-fsl-imx51']): ok = False
#if not pocket_abis_match('lucid','-2.6.31',['linux-qcm-msm'],['linux-meta-qcm-msm']): ok = False

for (release, srcs, meta, suffix) in meta_kernels.get_next_kernel():
    if not pocket_abis_match(release, suffix, srcs, meta): ok = False

#if not pocket_abis_match('precise','-3.2.0',['linux-ti-omap4'],['linux-meta-ti-omap4']): ok = False
#if not pocket_abis_match('precise','-3.5.0',['linux-lts-quantal'],['linux-meta-lts-quantal']): ok = False
#if not pocket_abis_match('precise','-3.8.0',['linux-lts-raring'],['linux-meta-lts-raring']): ok = False
#if not pocket_abis_match('precise','-3.11.0',['linux-lts-saucy'],['linux-meta-lts-saucy']): ok = False
#if not pocket_abis_match('precise','-3.13.0',['linux-lts-trusty'],['linux-meta-lts-trusty']): ok = False

# linux-meta is 19 in the release pocket but not security and updates, so don't
# complain
#if not pocket_abis_match('raring','-3.8.0',['linux'],['linux-meta'],ignored={19:0}): ok = False
#if not pocket_abis_match('raring','-3.5.0',['linux-ti-omap4'],['linux-meta-ti-omap4']): ok = False

#if not pocket_abis_match('saucy','-3.11.0',['linux'],['linux-meta']): ok = False

# die linux-ti-omap4
#if not pocket_abis_match('saucy','-3.5.0',['linux-ti-omap4'],['linux-meta-ti-omap4']): ok = False

#if not pocket_abis_match('trusty','-3.13.0',['linux'],['linux-meta']): ok = False
#if not pocket_abis_match('trusty','-3.13.0',['linux-exynos5'],['linux-meta-exynos5']): ok = False
#if not pocket_abis_match('trusty','-3.13.0',['linux-keystone'],['linux-meta-keystone']): ok = False
#if not pocket_abis_match('trusty','-3.16.0',['linux-lts-utopic'],['linux-meta-lts-utopic']): ok = False
#if not pocket_abis_match('trusty','-3.19.0',['linux-lts-vivid'],['linux-meta-lts-vivid']): ok = False
#if not pocket_abis_match('trusty','-4.2.0', ['linux-lts-wily'],['linux-meta-lts-wily']): ok = False
#if not pocket_abis_match('trusty','-4.4.0', ['linux-lts-xenial'],['linux-meta-lts-xenial']): ok = False

#if not pocket_abis_match('utopic','-3.16.0',['linux'],['linux-meta']): ok = False

#if not pocket_abis_match('vivid','-3.19.0',['linux'],['linux-meta']): ok = False

#if not pocket_abis_match('xenial','-4.4.0',['linux'],['linux-meta']): ok = False
#if not pocket_abis_match('xenial','-4.4.0',['linux-raspi2'],['linux-meta-raspi2']): ok = False
#if not pocket_abis_match('xenial','-4.4.0',['linux-snapdragon'],['linux-meta-snapdragon']): ok = False

#if not pocket_abis_match('yakkety','-4.8.0',['linux'],['linux-meta']): ok = False
#if not pocket_abis_match('yakkety','-4.8.0',['linux-raspi2'],['linux-meta-raspi2']): ok = False
#if not pocket_abis_match('yakkety','-4.4.0',['linux-snapdragon'],['linux-meta-snapdragon']): ok = False

if ok:
    sys.exit(0)
else:
    sys.exit(1)
