#!/bin/bash
#
# This will generate markdown for the specified USN and update the USN website
# git tree so that a new instance of the website is automatically deployed with
# the new USN content.
#
# Copyright 2018, Canonical, Ltd.
# Author: Tyler Hicks <tyhicks@canonical.com>
# License: GPLv3
set -e
export LANG=C

. "$HOME"/.ubuntu-cve-tracker.conf
template="$usn_tool"/templates/webpage-markdown.txt
database="$usn_db_copy"
action=
orig_branch=
branch=

# $0: program name
usage() {
	echo "Usage: $0 <ACTION> [OPTION] <USN>"
	echo "Update the USN website git tree with markdown for the specified <USN>."
	echo "Specify <USN> with only the number portion of the ID, such as 2165-1."
	echo ""
	echo "Valid actions:"
	echo "  -a              Add <USN> to the USN site"
	echo "  -r              Remove <USN> from the USN site"
	echo "  -u              Update <USN> information the USN site"
	echo ""
	echo "Valid options:"
	echo "  -d [DATABASE]   Use DATABASE as the USN db to consult for information on <USN>"
	echo "  -h              Print usage information"
}

perr() {
	echo "ERROR: $1" 1>&2
}

# $1: USN database
# $2: The USN number
is_usn_in_db() {
	if ! "$usn_tool"/usn.py --db "$1" --show "$2" >/dev/null 2>&1; then
		return 1
	fi

	return 0
}

# $1: bzr tree path
is_bzr_tree_updated() {
	if (bzr info $1 | head -1 | grep -q ^Checkout >/dev/null 2>&1 ) ; then
		# Change directories in a subshell so we don't have to return to the
		# orig directory
		if ! (cd "$1" && bzr missing --theirs-only -q lp:usn-tool >/dev/null 2>&1); then
			return 1
		fi
	# Change directories in a subshell so we don't have to return to the
	# orig directory
	elif ! (cd "$1" && bzr missing -q :parent >/dev/null 2>&1); then
		return 1
	fi

	return 0
}

cleanup() {
	if [ -n "$orig_branch" ]; then
		git checkout -q "$orig_branch"
		orig_branch=
	fi

	if [ -n "$branch" ]; then
		git branch -qD "$branch"
		branch=
	fi
}

while getopts "ad:hru" opt ; do
	case "$opt" in
		a) action=add;;
		d) database="$(realpath $OPTARG)";;
		h) usage; exit 0;;
		r) action=remove;;
		u) action=update;;
		?) usage 1>&2; exit 1;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$action" ]; then
	usage 1>&2
	exit 1
fi

usn="$1"
markdown="$usn_website"/content/"$usn".md
trap cleanup EXIT

if ! is_bzr_tree_updated "$usn_tool"; then
	perr "The usn-tool bzr tree ($usn_tool) is out of date"
	exit 1
fi

cd "$usn_website"
git fetch -q origin
if [ -n "$(git status --porcelain)" ]; then
	perr "USN website git tree ($usn_website) is unclean:"
	git status -s 1>&2
	exit 1
fi

# https://git-blame.blogspot.com/2013/06/checking-current-branch-programatically.html
if ! orig_branch=$(git symbolic-ref --short -q HEAD); then
	orig_branch=
	perr "Unable to return to current checkout of USN website git tree ($usn_website)"
	perr "Save any work, checkout a regular branch such as master, and try again"
	exit 1
fi

# The cleanup function will delete $branch so we should only set the variable
# once we're certain the branch has been created
b="USN-${usn}"
git checkout -qb "$b" origin/master
branch="$b"

if [ "$action" = add ]; then
	if [ -f "$markdown" ]; then
		perr "markdown for USN-$usn already exists"
		exit 1
	elif ! is_usn_in_db "$database" "$usn"; then
		perr "Ensure that USN-$usn is in $database and try again"
		exit 1
	fi

	"$usn_tool"/usn.py --db "$database" --template "$template" "$usn" > "$markdown"
	git add -N "$markdown"
	git commit -qsm "Add USN-$usn ${SRCPKG:+- ${SRCPKG}}" "$markdown"
elif [ "$action" = remove ]; then
	if [ ! -f "$markdown" ]; then
		perr "markdown for USN-$usn doesn't exist"
		exit 1
	elif is_usn_in_db "$database" "$usn"; then
		perr "USN-$usn is still in $database"
		exit 1
	fi

	git rm -q "$markdown"
	git commit -qsm "Remove USN-$usn" "$markdown"
elif [ "$action" = update ]; then
	if [ ! -f "$markdown" ]; then
		perr "markdown for USN-$usn doesn't exist"
		exit 1
	elif ! is_usn_in_db "$database" "$usn"; then
		perr "Ensure that USN-$usn is in $database and try again"
		exit 1
	fi

	"$usn_tool"/usn.py --db "$database" --template "$template" "$usn" > "$markdown"
	git commit -qsm "Update USN-$usn" "$markdown"
fi

git push -q origin "$branch":master
git fetch -q origin
# The cleanup function will handle restoring the git tree state 

existence="exists"
if [ "$action" = remove ]; then
	existence="doesn't exist"
fi
echo "Success! Please monitor the website deployment status here:"
echo
echo "  https://jenkins.canonical.com/webteam/job/deploy-to-usn.ubuntu.com/"
echo
echo "Once the deployment is complete, verify that the USN page $existence:"
echo
echo "  https://usn.ubuntu.com/$usn/"
