#!/usr/bin/python3

import os
import oval_lib
import unittest
import mock
from datetime import datetime
from shutil import copyfile
import filecmp
import pickle
import collections

supported_oval_elements = ('definition', 'test', 'object', 'state', 'variable')
rel_test_path = "./tests/"
gold_oval_structure_path = "{}gold_oval_structure/".format(rel_test_path)

class MockOvalGeneratorUSN(oval_lib.OvalGeneratorUSN):
    generator_version = '1'
    oval_schema_version = '5.11.1'

    def __init__(self):
        self.release = {'desc': '18.04 LTS', 'kernel': '^4\\.15\\.', 'id': 10}
        self.release_codename = "bionic"
        self.tmpdir = rel_test_path
        self.output_dir = "./"
        self.output_filepath = 'com.ubuntu.{0}.usn.oval.xml'.format(self.release_codename)
        self.oval_structure = {
            key: open("{}{}.xml".format(rel_test_path, key), "w+") for key in supported_oval_elements
        }
        self.testdict = {}
        self.ns = 'oval:com.ubuntu.{}'.format(self.release_codename)

    def file_cleanup(self):
        for key in self.oval_structure:
            if os.path.exists(self.oval_structure[key].name):
                self.oval_structure[key].close()
                os.remove(self.oval_structure[key].name)

class TestOvalLib(unittest.TestCase):
    # Set up dummy values
    oval_gen_mock = MockOvalGeneratorUSN()

    # Read in USN data to use as input argument to function to test
    with open("{}test_usn.pickle".format(rel_test_path), "rb") as usnfile:
        usn_object_mock = pickle.load(usnfile)
    usn_mock = "4388-1"
    id_base_mock = 43881000000

    bin_dict_mock = collections.defaultdict(list)
#   bin_dict['1.8.8-1ubuntu0.2'] = ['haproxy']
    bin_dict_mock = {'5.0.0.1042.27': ['linux-image-gke-5.0'], '5.0.0-1059.64': ['linux-image-5.0.0-1059-oem-osp1'], '5.0.0.1059.58': ['linux-image-oem-osp1'], '5.0.0-1042.43': ['linux-image-5.0.0-1042-gke']}

    test_refs_mock = [{'version': '5.0.0.1042.27', 'pkgs': ['linux-image-gke-5.0'], 'testref_id': '438810000000'}, {'version': '5.0.0-1059.64', 'pkgs': ['linux-image-5.0.0-1059-oem-osp1'], 'testref_id': '438810000010'}, {'version': '5.0.0.1059.58', 'pkgs': ['linux-image-oem-osp1'], 'testref_id': '438810000020'}, {'version': '5.0.0-1042.43', 'pkgs': ['linux-image-5.0.0-1042-gke'], 'testref_id': '438810000030'}]

    definition = """
        <definition id="oval:com.ubuntu.bionic:def:43881000000" version="1" class="patch">
           <metadata>
              <title>4388-1 -- Linux kernel vulnerabilities</title>
              <affected family="unix">
                 <platform>Ubuntu 18.04 LTS</platform>
              </affected>
              <reference source="USN" ref_url="https://ubuntu.com/security/notices/USN-4388-1" ref_id="4388-1"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-0067.html" ref_id="CVE-2020-0067"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-0543.html" ref_id="CVE-2020-0543"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12114.html" ref_id="CVE-2020-12114"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12464.html" ref_id="CVE-2020-12464"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12659.html" ref_id="CVE-2020-12659"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-1749.html" ref_id="CVE-2020-1749"/>
              <description>Several security issues were fixed in the Linux kernel.</description>
              <advisory from="security@ubuntu.com">
                 <severity>Medium</severity>
                 <issued date="2020-06-09"/>
                 <ref>https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SRBDS</ref>
              </advisory>
           </metadata>
           <criteria>
              <criterion test_ref="oval:com.ubuntu.bionic:tst:438810000000" comment="?" />
              <criterion test_ref="oval:com.ubuntu.bionic:tst:438810000010" comment="?" />
              <criterion test_ref="oval:com.ubuntu.bionic:tst:438810000020" comment="?" />
              <criterion test_ref="oval:com.ubuntu.bionic:tst:438810000030" comment="?" />
           </criteria>
        </definition>"""

    test = ["""
        <linux:dpkginfo_test id="oval:com.ubuntu.bionic:tst:438810000000" version="1" check_existence="at_least_one_exists" check="at least one" comment="?">
          <linux:object object_ref="oval:com.ubuntu.bionic:obj:438810000000"/>
          <linux:state state_ref="oval:com.ubuntu.bionic:ste:438810000000"/>
        </linux:dpkginfo_test>""",
        """
        <linux:dpkginfo_test id="oval:com.ubuntu.bionic:tst:438810000010" version="1" check_existence="at_least_one_exists" check="at least one" comment="?">
          <linux:object object_ref="oval:com.ubuntu.bionic:obj:438810000010"/>
          <linux:state state_ref="oval:com.ubuntu.bionic:ste:438810000010"/>
        </linux:dpkginfo_test>
""",
        """
        <linux:dpkginfo_test id="oval:com.ubuntu.bionic:tst:438810000020" version="1" check_existence="at_least_one_exists" check="at least one" comment="?">
          <linux:object object_ref="oval:com.ubuntu.bionic:obj:438810000020"/>
          <linux:state state_ref="oval:com.ubuntu.bionic:ste:438810000020"/>
        </linux:dpkginfo_test>
""",
        """
        <linux:dpkginfo_test id="oval:com.ubuntu.bionic:tst:438810000030" version="1" check_existence="at_least_one_exists" check="at least one" comment="?">
          <linux:object object_ref="oval:com.ubuntu.bionic:obj:438810000030"/>
          <linux:state state_ref="oval:com.ubuntu.bionic:ste:438810000030"/>
        </linux:dpkginfo_test>
"""]

    obj = ["""
        <linux:dpkginfo_object id="oval:com.ubuntu.bionic:obj:438810000000" version="1">
          <linux:name var_ref="oval:com.ubuntu.bionic:var:438810000000" var_check="at least one" />
        </linux:dpkginfo_object>""",
        """
        <linux:dpkginfo_object id="oval:com.ubuntu.bionic:obj:438810000010" version="1">
          <linux:name var_ref="oval:com.ubuntu.bionic:var:438810000010" var_check="at least one" />
        </linux:dpkginfo_object>""",
        """
        <linux:dpkginfo_object id="oval:com.ubuntu.bionic:obj:438810000020" version="1">
          <linux:name var_ref="oval:com.ubuntu.bionic:var:438810000020" var_check="at least one" />
        </linux:dpkginfo_object>""",
        """
        <linux:dpkginfo_object id="oval:com.ubuntu.bionic:obj:438810000030" version="1">
          <linux:name var_ref="oval:com.ubuntu.bionic:var:438810000030" var_check="at least one" />
        </linux:dpkginfo_object>"""]

    state = ["""
        <linux:dpkginfo_state id="oval:com.ubuntu.bionic:ste:438810000000" version="1">
          <linux:evr datatype="evr_string" operation="less than">5.0.0.1042.27</linux:evr>
        </linux:dpkginfo_state>""",
        """
        <linux:dpkginfo_state id="oval:com.ubuntu.bionic:ste:438810000010" version="1">
          <linux:evr datatype="evr_string" operation="less than">5.0.0-1059.64</linux:evr>
        </linux:dpkginfo_state>""",
        """
        <linux:dpkginfo_state id="oval:com.ubuntu.bionic:ste:438810000020" version="1">
          <linux:evr datatype="evr_string" operation="less than">5.0.0.1059.58</linux:evr>
        </linux:dpkginfo_state>""",
        """
        <linux:dpkginfo_state id="oval:com.ubuntu.bionic:ste:438810000030" version="1">
          <linux:evr datatype="evr_string" operation="less than">5.0.0-1042.43</linux:evr>
        </linux:dpkginfo_state>"""]

    var = ["""
        <constant_variable id="oval:com.ubuntu.bionic:var:438810000000" version="1" datatype="string" comment="?">
            <value>linux-image-gke-5.0</value>
        </constant_variable>""",
        """
        <constant_variable id="oval:com.ubuntu.bionic:var:438810000010" version="1" datatype="string" comment="?">
            <value>linux-image-5.0.0-1059-oem-osp1</value>
        </constant_variable>""",
        """
        <constant_variable id="oval:com.ubuntu.bionic:var:438810000020" version="1" datatype="string" comment="?">
            <value>linux-image-oem-osp1</value>
        </constant_variable>""",
        """
        <constant_variable id="oval:com.ubuntu.bionic:var:438810000030" version="1" datatype="string" comment="?">
            <value>linux-image-5.0.0-1042-gke</value>
        </constant_variable>"""]

#   test_bin = {'haproxy': {'version': '1.8.8-1ubuntu0.2'}}
    test_bin = {'linux-image-gke-5.0': {'version': '5.0.0.1042.27'}, 'linux-image-5.0.0-1059-oem-osp1': {'version': '5.0.0-1059.64'}, 'linux-image-oem-osp1': {'version': '5.0.0.1059.58'}, 'linux-image-5.0.0-1042-gke': {'version': '5.0.0-1042.43'}}

    state_args = [["5.0.0.1042.27", "438810000000"], ["5.0.0-1059.64", "438810000010"], ["5.0.0.1059.58", "438810000020"], ["5.0.0-1042.43", "438810000030"]]
    var_args = [["438810000000", ['linux-image-gke-5.0']], ["438810000010", ['linux-image-5.0.0-1059-oem-osp1']], ["438810000020", ['linux-image-oem-osp1']], ["438810000030", ['linux-image-5.0.0-1042-gke']]]

#    @mock.patch("oval_lib._open", create=True)
#    @mock.patch("oval_lib.OvalGeneratorUSN.release_codename", create=True)
#    def test_creating_oval_file_structures(self, oval_release_name_mock, oval_lib_open_mock):
#        oval_release_name_mock = "focal"
#        test_oval_gen_usn = MockOvalGeneratorUSN()
#
#        oval_lib.OvalGeneratorUSN.load_oval_file_structures(test_oval_gen_usn)

    def test_open_nonexistent_cve(self):
        oval_gen_mock = MockOvalGeneratorUSN()

        cve_info = oval_lib.OvalGeneratorUSN.get_cve_info_from_file(oval_gen_mock, "CVE-DNE", rel_test_path)

        assert cve_info is None

        oval_gen_mock.file_cleanup()

    @mock.patch("os.path.join", autospec=True)
    @mock.patch("oval_lib.cvss_score", autospec=True)
    def test_create_dict_from_cve_file(self, cvss_calc_mock, path_join_mock):
        test_cve_file = "CVE-TEST"
        path_join_mock.return_value = ("{}{}".format(rel_test_path, test_cve_file))
        cvss_calc_mock.return_value = {
            "baseMetricV3":
            {
                "cvssV3":
                {
                    "baseScore": 9.8,
                    "baseSeverity": "Critical"
                }
            }
        }
        corr_cve_info = {
                'Priority': 'high',
                'PublicDate': '2012-05-25',
                'Candidate': 'CVE-TEST',
                'CVSS_SCORE': 9.8,
                'CVE_URL': 'https://people.canonical.com/~ubuntu-security/cve/TEST/CVE-TEST.html',
                'MITRE_URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-TEST',
                'CVSS': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
                'CVSS_SEVERITY_LEVEL': 'Critical'
        }

        cve_info = oval_lib.OvalGeneratorUSN.get_cve_info_from_file(self.oval_gen_mock, test_cve_file, rel_test_path)

        self.assertEqual(cve_info, corr_cve_info)

        self.oval_gen_mock.file_cleanup()

    def test_get_vers_from_binaries(self):
        vers_map = oval_lib.OvalGeneratorUSN.get_version_from_binaries(self.oval_gen_mock, self.test_bin)

        self.assertEqual(vers_map, self.bin_dict_mock)

    def test_create_testref_dictionary(self):
        test_ref = oval_lib.OvalGeneratorUSN.get_testref(self.oval_gen_mock, "5.0.0.1042.27", ['linux-image-gke-5.0'], "43881000000")

        self.assertEqual(test_ref, self.test_refs_mock[0])

    def test_format_cves_info(self):
        pass

    @mock.patch("oval_lib.OvalGeneratorUSN.format_cves_info", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.create_cves_references", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.create_bug_references", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.get_usn_severity", autospec=True)
    def test_create_usn_definition(self, get_usn_severity_mock, create_bug_ref_mock, create_cve_ref_mock, format_cves_info_mock):
        urls_mock = ['https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SRBDS']
        cves_info_mock = [{'Candidate': 'CVE-2020-0067', 'PublicDate': '2020-04-17 19:15:00 UTC', 'Priority': 'medium', 'CVSS': 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N', 'CVSS_SEVERITY_LEVEL': 'MEDIUM', 'CVSS_SCORE': 4.4, 'CVE_URL': 'https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-0067.html', 'MITRE_URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0067'}, {'Candidate': 'CVE-2020-0543', 'PublicDate': '2020-06-09 17:00:00 UTC', 'Priority': 'medium', 'CVSS': 'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N', 'CVSS_SEVERITY_LEVEL': 'MEDIUM', 'CVSS_SCORE': 5.5, 'CVE_URL': 'https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-0543.html', 'MITRE_URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0543'}, {'Candidate': 'CVE-2020-12114', 'PublicDate': '2020-05-04 12:15:00 UTC', 'Priority': 'medium', 'CVSS': 'CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H', 'CVSS_SEVERITY_LEVEL': 'MEDIUM', 'CVSS_SCORE': 4.7, 'CVE_URL': 'https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12114.html', 'MITRE_URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12114'}, {'Candidate': 'CVE-2020-12464', 'PublicDate': '2020-04-29 18:15:00 UTC', 'Priority': 'medium', 'CVSS': 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H', 'CVSS_SEVERITY_LEVEL': 'MEDIUM', 'CVSS_SCORE': 6.7, 'CVE_URL': 'https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12464.html', 'MITRE_URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12464'}, {'Candidate': 'CVE-2020-12659', 'PublicDate': '2020-05-05 07:15:00 UTC', 'Priority': 'low', 'CVSS': 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H', 'CVSS_SEVERITY_LEVEL': 'MEDIUM', 'CVSS_SCORE': 6.7, 'CVE_URL': 'https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12659.html', 'MITRE_URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12659'}, {'Candidate': 'CVE-2020-1749', 'PublicDate': '2020-03-04 08:53:00 UTC', 'Priority': 'medium', 'CVSS': None, 'CVSS_SEVERITY_LEVEL': None, 'CVSS_SCORE': None, 'CVE_URL': 'https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-1749.html', 'MITRE_URL': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1749'}]

        format_cves_info_mock.return_value = (urls_mock, cves_info_mock)
        create_cve_ref_mock.return_value = """<reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-0067.html" ref_id="CVE-2020-0067"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-0543.html" ref_id="CVE-2020-0543"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12114.html" ref_id="CVE-2020-12114"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12464.html" ref_id="CVE-2020-12464"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-12659.html" ref_id="CVE-2020-12659"/>
              <reference source="CVE" ref_url="https://people.canonical.com/~ubuntu-security/cve/2020/CVE-2020-1749.html" ref_id="CVE-2020-1749"/>"""
        create_bug_ref_mock.return_value = "<ref>https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SRBDS</ref>"
        get_usn_severity_mock.return_value = "Medium"
        definition_ret = oval_lib.OvalGeneratorUSN.create_usn_definition(self.oval_gen_mock, self.usn_object_mock, self.usn_mock, self.id_base_mock, self.test_refs_mock, rel_test_path)

        format_cves_info_mock.assert_called_with(self.oval_gen_mock, ['CVE-2020-0067', 'CVE-2020-0543', 'CVE-2020-12114', 'CVE-2020-12464', 'CVE-2020-12659', 'CVE-2020-1749', 'https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SRBDS'], rel_test_path)
        create_cve_ref_mock.assert_called_with(self.oval_gen_mock, cves_info_mock)
        get_usn_severity_mock.assert_called_with(self.oval_gen_mock, [2, 2, 2, 2, 1, 2])
        create_bug_ref_mock.assert_called_with(self.oval_gen_mock, urls_mock)

        self.assertEqual(definition_ret, self.definition)

    def test_create_usn_test(self):
        test_ret = oval_lib.OvalGeneratorUSN.create_usn_test(self.oval_gen_mock, 438810000000)

        self.assertEqual(test_ret, self.test[0])

    def test_create_usn_obj(self):
        test_ret = oval_lib.OvalGeneratorUSN.create_usn_object(self.oval_gen_mock, 438810000000)

        self.assertEqual(test_ret, self.obj[0])

    def test_create_usn_state(self):
        test_ret = oval_lib.OvalGeneratorUSN.create_usn_state(self.oval_gen_mock, *self.state_args[0])

        self.assertEqual(test_ret, self.state[0])

    def test_create_usn_var(self):
        test_ret = oval_lib.OvalGeneratorUSN.create_usn_variable(self.oval_gen_mock, *self.var_args[0])

        self.assertEqual(test_ret, self.var[0])

    @mock.patch("oval_lib.OvalGeneratorUSN.get_version_from_binaries", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.get_testref", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.create_usn_definition", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.create_usn_test", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.create_usn_object", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.create_usn_state", autospec=True)
    @mock.patch("oval_lib.OvalGeneratorUSN.create_usn_variable", autospec=True)
    def test_generate_usn_oval(self, usn_var_mock, usn_state_mock, usn_obj_mock, usn_test_mock, usn_def_mock, testref_mock, binary_vers_mock):
        #Set up dummy vals
        oval_gen_mock = MockOvalGeneratorUSN()

        test_refs_id_calls = [mock.call(oval_gen_mock, "438810000000"), mock.call(oval_gen_mock, "438810000010"), mock.call(oval_gen_mock, "438810000020"), mock.call(oval_gen_mock, "438810000030")]
        state_calls = [mock.call(oval_gen_mock, *item) for item in self.state_args]
        var_calls = [mock.call(oval_gen_mock, *item) for item in self.var_args]

        # mock return values
        binary_vers_mock.return_value = self.bin_dict_mock
        usn_def_mock.return_value = self.definition
        usn_test_mock.side_effect = self.test
        usn_obj_mock.side_effect = self.obj
        usn_state_mock.side_effect = self.state
        usn_var_mock.side_effect = self.var
        testref_mock.side_effect = self.test_refs_mock

        oval_lib.OvalGeneratorUSN.generate_usn_oval(oval_gen_mock, self.usn_object_mock, self.usn_mock, rel_test_path)

        # assertions
        usn_def_mock.assert_called_with(oval_gen_mock, self.usn_object_mock, self.usn_mock, self.id_base_mock, self.test_refs_mock, rel_test_path)
        usn_test_mock.assert_has_calls(test_refs_id_calls)
        usn_obj_mock.assert_has_calls(test_refs_id_calls)
        usn_state_mock.assert_has_calls(state_calls)
        usn_var_mock.assert_has_calls(var_calls)
        binary_vers_mock.assert_called_once_with(oval_gen_mock, self.test_bin)

        # possibly also assert equality of the actual written file contents

        oval_gen_mock.file_cleanup()

    @mock.patch("os.path.join", autospec=True)
    @mock.patch("oval_lib.datetime")
    @mock.patch("oval_lib.shutil.move", autospec=True)
    def test_write_oval_elements(self, move_mock, datetime_mock, path_join_mock):
        test_output_file = "{}oval.xml".format(rel_test_path)
        for elem in supported_oval_elements:
            copyfile("{}{}.xml".format(gold_oval_structure_path, elem), "{}{}.xml".format(rel_test_path, elem))

        path_join_mock.return_value = (test_output_file)
        datetime_mock.datetime.utcnow = mock.Mock(return_value=datetime(2020, 4, 9, 6, 47, 58))

        oval_lib.OvalGeneratorUSN.write_oval_elements(self.oval_gen_mock)

        self.assertTrue(filecmp.cmp("{}oval.xml".format(gold_oval_structure_path), test_output_file))

        # cleanup
        if os.path.exists(test_output_file):
            os.remove(test_output_file)


if __name__ == '__main__':
    unittest.main()
