#!/usr/bin/python
# Author: Kees Cook <kees@ubuntu.com>
# Copyright (C) 2011 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Will report which CVEs are pending to be fixed (or marked released) since
# a given version of a specific package.

import sys, optparse, cve_lib
from source_map import version_compare

parser = optparse.OptionParser()
parser.add_option("-r", "--release", help="Specify comma-separated list of which release to limit the search to (default is all)")
parser.add_option("-d", "--debug", help="Report additional debugging while processing", action='store_true')
parser.add_option("-s", "--states", help="Report CVE states with each CVE", action='store_true')
parser.add_option("-D", "--descriptions", help="Report USN descriptions with each CVE (exit 1 when missing some)", action='store_true')
parser.add_option("-a", "--add-cves", help="Add specific CVEs to the report (comma-separated)", action='store', metavar='CVE[,CVE...]', default="")
(opt, args) = parser.parse_args()

releases = None
if opt.release:
    releases = opt.release.split(',')

forced_cves = set()
if len(opt.add_cves)>0:
    for cve in opt.add_cves.split(','):
        forced_cves.add(cve)

pkg, prev_version = args

active, embargoed = cve_lib.get_cve_list()
cves = cve_lib.load_all(active, embargoed)

rc = 0
reportable = set(['pending','released'])
fixed = set()
for name in cves:
    cve = cves[name]
    if not cve['pkgs'].has_key(pkg):
        continue
    for rel in cve['pkgs'][pkg]:
        if rel == 'upstream' or (releases and not rel in releases):
            continue

        state, version = cve['pkgs'][pkg][rel]
        if not state in reportable:
            continue
        if version_compare(prev_version, version) >= 0 and not name in forced_cves:
            continue

        report = name

        if opt.states:
            report += " %s %s" % (state, version)

        if opt.descriptions:
            desc = cve['Ubuntu-Description'].strip()
            if len(desc):
                desc = " " + "\n ".join(desc.split('\n'))
            else:
                desc = " [XXX-NEEDED-XXX]"
                rc = 1
            report += "\n" + desc

        fixed.add(report)

for cve in sorted(fixed):
    print cve

sys.exit(rc)
