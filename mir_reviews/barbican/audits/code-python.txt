Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==
./api-guide/source/conf.py:86:gitsha = subprocess.Popen(
./api-guide/source/conf.py:91:pwd = subprocess.Popen(

== memory_management() ==
(unsupported type 'python')

== files() ==
./bin/versionbuild.py:69:    with open(VERSIONFILE, 'r') as file_old:
./bin/versionbuild.py:70:        with open(temp_name, 'w') as file_new:
./barbican/plugin/crypto/pkcs11.py:339:        self.lib = self.ffi.dlopen(library_path)
./barbican/plugin/snakeoil_ca.py:121:            with open(self.cert_path) as cert_fh:
./barbican/plugin/snakeoil_ca.py:130:            with open(self.cert_path, 'w') as cert_fh:
./barbican/plugin/snakeoil_ca.py:140:            with open(self.key_path) as key_fh:
./barbican/plugin/snakeoil_ca.py:149:            with open(self.key_path, 'w') as key_fh:
./barbican/plugin/snakeoil_ca.py:158:            with open(self.chain_path) as chain_fh:
./barbican/plugin/snakeoil_ca.py:166:            with open(self.chain_path, 'w') as chain_fh:
./barbican/plugin/snakeoil_ca.py:175:            with open(self.pkcs7_path) as pkcs7_fh:
./barbican/plugin/snakeoil_ca.py:183:            with open(self.pkcs7_path, 'w') as pkcs7_fh:
./barbican/plugin/snakeoil_ca.py:248:            with open(self.parent_chain_path) as fh:
./barbican/plugin/snakeoil_ca.py:265:        with open(temp_out) as pkcs7_fh:
./barbican/plugin/dogtag.py:719:                with open(self._expiration_data_path) as expiration_fh:
./barbican/plugin/dogtag.py:731:        with open(self._expiration_data_path, 'w') as expiration_fh:
./barbican/plugin/dogtag.py:738:            with open(self._host_aid_path) as host_aid_fh:
./barbican/plugin/dogtag.py:745:            with open(self._host_aid_path, 'w') as host_aid_fh:

== logging() ==
./functionaltests/api/v1/models/base_models.py:81:            LOG.error('Couldn\'t deserialize input: %s\n Because: %s',
./functionaltests/api/v1/functional/test_secrets.py:479:    def test_secret_create_defaults_bad_content_type_check_message(self):
./functionaltests/api/v1/functional/test_certificate_orders.py:280:    def confirm_error_message(self, resp, message):
./functionaltests/api/v1/functional/test_certificate_orders.py:350:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:366:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:402:        self.confirm_error_message(create_resp,
./functionaltests/api/v1/functional/test_certificate_orders.py:414:        self.confirm_error_message(create_resp,
./functionaltests/api/v1/functional/test_certificate_orders.py:437:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:486:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:500:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:514:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:556:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:570:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:582:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:599:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:619:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:633:        self.confirm_error_message(
./functionaltests/api/v1/functional/test_certificate_orders.py:647:        self.confirm_error_message(
./functionaltests/api/v1/behaviors/base_behaviors.py:34:            self.LOG.error("Error converting response to JSON: %s", e.message)
./functionaltests/api/v1/behaviors/base_behaviors.py:35:            self.LOG.error("Response Content: %s", response.content)
./barbican/queue/server.py:178:        LOG.debug(
./barbican/queue/keystone_listener.py:72:        LOG.debug("Input keystone event publisher_id = %s", publisher_id)
./barbican/queue/keystone_listener.py:73:        LOG.debug("Input keystone event payload = %s", payload)
./barbican/queue/keystone_listener.py:74:        LOG.debug("Input keystone event type = %s", event_type)
./barbican/queue/keystone_listener.py:75:        LOG.debug("Input keystone event metadata = %s", metadata)
./barbican/queue/keystone_listener.py:78:        LOG.debug('Keystone Event: resource type={0}, operation type={1}, '
./barbican/queue/retry_scheduler.py:158:            LOG.debug(
./barbican/tests/cmd/test_db_cleanup.py:421:    def test_db_cleanup_raise_integrity_error(self, project):
./barbican/tests/model/repositories/test_repositories.py:219:    def test_should_raise_operational_error_is_connection_error(
./barbican/tests/model/repositories/test_repositories.py:332:        result = repositories.is_db_connection_error(args)
./barbican/tests/model/repositories/test_repositories.py:341:        result = repositories.is_db_connection_error(args)
./barbican/tests/tasks/test_keystone_consumer.py:163:    def test_invoke_handle_error(self):
./barbican/tests/tasks/test_keystone_consumer.py:174:        task.handle_error(
./barbican/tests/tasks/test_resources.py:107:    def test_should_handle_error(self):
./barbican/tests/tasks/test_resources.py:108:        self.helper.handle_error(self.order, 'status_code', 'reason',
./barbican/tests/plugin/crypto/test_p11_crypto.py:232:    def test_generate_asymmetric_raises_error(self):
./barbican/tests/plugin/crypto/test_crypto.py:45:    def test_encrypt_unicode_raises_value_error(self):
./barbican/tests/plugin/util/test_utils.py:65:    def test_does_not_create_plugin_instance_due_to_error(self):
./barbican/tests/api/test_init.py:34:    def test_should_abort_with_read_error(self, mock_pecan_abort):
./barbican/tests/api/test_init.py:79:        status, message = api.generate_safe_exception_message(
./barbican/tests/api/test_init.py:93:        status, message = api.generate_safe_exception_message(
./barbican/tests/api/test_resources_policy.py:151:    def _generate_get_error(self):
./barbican/tests/api/test_resources_policy.py:253:                                            ._generate_get_error())
./barbican/tests/api/test_resources_policy.py:309:                                     side_effect=self._generate_get_error())
./barbican/tests/api/test_resources_policy.py:692:                                     side_effect=self._generate_get_error())
./barbican/tests/api/test_resources_policy.py:916:                                            ._generate_get_error())
./barbican/tests/api/test_resources_policy.py:962:                                     side_effect=self._generate_get_error())
./barbican/tests/api/test_resources_policy.py:1008:                                             ._generate_get_error())
./barbican/tests/api/test_resources_policy.py:1069:                                     side_effect=self._generate_get_error())
./barbican/cmd/worker.py:59:        LOG.debug("Booting up Barbican worker node...")
./barbican/cmd/db_manage.py:139:        LOG.debug("Performing database schema migration...")
./barbican/cmd/keystone_listener.py:57:        config.setup_remote_pydev_debug()
./barbican/cmd/retry_scheduler.py:59:        LOG.debug("Booting up Barbican worker retry/scheduler node...")
./barbican/model/clean.py:38:    LOG.debug("Cleaning up unassociated projects")
./barbican/model/clean.py:50:    LOG.debug("Children tables for Project table being checked: %s",
./barbican/model/clean.py:82:    LOG.debug("Cleaning soft deletes for %s without a child in %s",
./barbican/model/clean.py:109:    LOG.debug("Cleaning soft deletes: %s", model.__name__)
./barbican/model/clean.py:130:    LOG.debug("Cleaning up soft deletions where deletion date"
./barbican/model/clean.py:242:    LOG.debug("Children tables for Secret table being checked: %s",
./barbican/model/clean.py:283:    LOG.debug('Soft deleting expired secrets older than: %s',
./barbican/model/repositories.py:94:    LOG.debug('Sql connection = %s', CONF.sql_connection)
./barbican/model/repositories.py:206:def is_db_connection_error(args):
./barbican/model/repositories.py:218:    LOG.debug("Sql connection: %s; Args: %s", connection, engine_args)
./barbican/model/repositories.py:227:    engine.connect = wrap_db_error(engine.connect)
./barbican/model/repositories.py:246:def wrap_db_error(f):
./barbican/model/repositories.py:252:            if not is_db_connection_error(e.args[0]):
./barbican/model/repositories.py:265:                            is_db_connection_error(e.args[0])):
./barbican/model/repositories.py:298:    LOG.debug("Clean paging values limit=%s, offset=%s",
./barbican/model/repositories.py:340:        LOG.debug("Getting session...")
./barbican/model/repositories.py:382:        LOG.debug("Begin create from...")
./barbican/model/repositories.py:393:            LOG.debug("Saving entity...")
./barbican/model/repositories.py:399:        LOG.debug('Elapsed repo '
./barbican/model/repositories.py:647:        LOG.debug('Retrieving from %s to %s', offset, end_offset)
./barbican/model/repositories.py:652:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:963:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:966:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:1145:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:1148:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:1201:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:1204:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:1299:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:1302:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:1344:            LOG.debug("Consumer %s already exists for container %s,"
./barbican/model/repositories.py:1417:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:1420:        LOG.debug('Number of entities retrieved: %s out of %s',
./barbican/model/repositories.py:1510:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:1513:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:1675:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:1678:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:1743:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:1746:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/model/repositories.py:2031:        LOG.debug('Retrieving from %s to %s', start, end)
./barbican/model/repositories.py:2034:        LOG.debug('Number entities retrieved: %s out of %s',
./barbican/tasks/certificate_resources.py:357:    LOG.debug('in modify_certificate_request')
./barbican/tasks/resources.py:55:        (eg. order) in the ERROR status via the handle_error() call below.
./barbican/tasks/resources.py:109:                status, message = api.generate_safe_exception_message(name,
./barbican/tasks/resources.py:111:                self.handle_error(entity, status, message, e_orig,
./barbican/tasks/resources.py:150:    def handle_error(self, entity, status, message, exception,
./barbican/tasks/resources.py:198:    def handle_error(self, order, status, message, exception,
./barbican/tasks/resources.py:244:        LOG.debug('Creating BeginTypeOrder task processor')
./barbican/tasks/resources.py:289:            LOG.debug("...done creating keys order's secret.")
./barbican/tasks/resources.py:298:            LOG.debug("...done creating asymmetric order's secret.")
./barbican/tasks/resources.py:305:            LOG.debug("...done requesting a certificate.")
./barbican/tasks/resources.py:313:    def handle_error(self, order, status, message, exception,
./barbican/tasks/resources.py:315:        self.helper.handle_error(
./barbican/tasks/resources.py:330:        LOG.debug('Creating UpdateOrder task processor')
./barbican/tasks/resources.py:352:            LOG.debug("...done updating a certificate order.")
./barbican/tasks/resources.py:358:        LOG.debug("...done updating order.")
./barbican/tasks/resources.py:360:    def handle_error(self, order, status, message, exception,
./barbican/tasks/resources.py:362:        self.helper.handle_error(
./barbican/tasks/resources.py:377:        LOG.debug('Creating CheckCertificateStatusOrder task processor')
./barbican/tasks/resources.py:413:        LOG.debug("...done checking status of a certificate order.")
./barbican/tasks/resources.py:417:    def handle_error(self, order, status, message, exception,
./barbican/tasks/resources.py:419:        self.helper.handle_error(
./barbican/tasks/keystone_consumer.py:40:        LOG.debug('Creating KeystoneEventConsumer task processor')
./barbican/tasks/keystone_consumer.py:72:    def handle_error(self, project, status, message, exception,
./barbican/tasks/keystone_consumer.py:74:        LOG.error(
./barbican/plugin/kmip_secret_store.py:190:            LOG.debug("KMIP secret store only supports PKCS#1")
./barbican/plugin/kmip_secret_store.py:243:        LOG.debug("Starting symmetric key generation with KMIP plugin")
./barbican/plugin/kmip_secret_store.py:257:                LOG.debug("Opened connection to KMIP client for secret " +
./barbican/plugin/kmip_secret_store.py:260:                LOG.debug("SUCCESS: Symmetric key generated with "
./barbican/plugin/kmip_secret_store.py:278:        LOG.debug("Starting asymmetric key generation with KMIP plugin")
./barbican/plugin/kmip_secret_store.py:299:                LOG.debug("Opened connection to KMIP client for asymmetric " +
./barbican/plugin/kmip_secret_store.py:303:                LOG.debug("SUCCESS: Asymmetric key pair generated with "
./barbican/plugin/kmip_secret_store.py:325:        LOG.debug("Starting secret storage with KMIP plugin")
./barbican/plugin/kmip_secret_store.py:342:                LOG.debug("Opened connection to KMIP client")
./barbican/plugin/kmip_secret_store.py:344:                LOG.debug("SUCCESS: Key stored with uuid: %s", uuid)
./barbican/plugin/kmip_secret_store.py:359:        LOG.debug("Starting secret retrieval with KMIP plugin")
./barbican/plugin/kmip_secret_store.py:363:                LOG.debug("Opened connection to KMIP client for secret " +
./barbican/plugin/kmip_secret_store.py:400:        LOG.debug("Starting secret deletion with KMIP plugin")
./barbican/plugin/kmip_secret_store.py:404:                LOG.debug("Opened connection to KMIP client")
./barbican/plugin/kmip_secret_store.py:540:        LOG.error(u._LE("ERROR from KMIP server: %s"), msg)
./barbican/plugin/crypto/pkcs11.py:341:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:385:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:390:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:395:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:404:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:410:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:421:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:427:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:482:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:499:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:507:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:537:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:545:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:551:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:559:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:563:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:567:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:569:    def _check_error(self, value):
./barbican/plugin/crypto/pkcs11.py:581:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:618:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:623:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:628:        self._check_error(rv)
./barbican/plugin/crypto/pkcs11.py:633:        self._check_error(rv)
./barbican/plugin/snakeoil_ca.py:215:            LOG.debug('Keypair not found, creating new cert/key')
./barbican/plugin/snakeoil_ca.py:220:        LOG.debug('Generating Snakeoil CA')
./barbican/plugin/snakeoil_ca.py:244:        LOG.debug('Snakeoil CA cert/key generated')
./barbican/plugin/interface/certificate_manager.py:649:            LOG.error(u._LE("ERROR getting CA from plugin: %s"), e.message)
./barbican/plugin/interface/certificate_manager.py:681:                LOG.error(u._LE("ERROR adding CA from plugin: %s"), e.message)
./barbican/plugin/dogtag.py:141:        LOG.error("Error in importing transport cert."
./barbican/plugin/dogtag.py:197:        LOG.debug("starting DogtagKRAPlugin init")
./barbican/plugin/dogtag.py:206:        LOG.debug("completed DogtagKRAPlugin init")
./barbican/common/config.py:210:def setup_remote_pydev_debug():
./barbican/common/resources.py:45:        LOG.debug('Creating project for %s', project_id)
./barbican/api/app.py:78:        config.setup_remote_pydev_debug()
./barbican/api/middleware/context.py:65:            LOG.debug("==== Inserted barbican auth "
./barbican/api/middleware/context.py:69:            LOG.debug("==== Inserted barbican unauth "
./barbican/api/middleware/simple.py:36:        LOG.debug("Calling SimpleFilter")
./barbican/api/middleware/__init__.py:80:        LOG.debug(("*" * 40) + " REQUEST ENVIRON")
./barbican/api/middleware/__init__.py:82:            LOG.debug('%s=%s', key, value)
./barbican/api/middleware/__init__.py:83:        LOG.debug(' ')
./barbican/api/middleware/__init__.py:86:        LOG.debug(("*" * 40) + " RESPONSE HEADERS")
./barbican/api/middleware/__init__.py:88:            LOG.debug('%s=%s', key, value)
./barbican/api/middleware/__init__.py:89:        LOG.debug(' ')
./barbican/api/middleware/__init__.py:98:        LOG.debug(("*" * 40) + " BODY")
./barbican/api/middleware/__init__.py:103:        LOG.debug(' ')
./barbican/api/__init__.py:77:def generate_safe_exception_message(operation_name, excep):
./barbican/api/controllers/transportkeys.py:40:        LOG.debug('=== Creating TransportKeyController ===')
./barbican/api/controllers/transportkeys.py:52:        LOG.debug("== Getting transport key for %s", external_project_id)
./barbican/api/controllers/transportkeys.py:64:        LOG.debug("== Deleting transport key ===")
./barbican/api/controllers/transportkeys.py:80:        LOG.debug('Creating TransportKeyController')
./barbican/api/controllers/transportkeys.py:96:        LOG.debug('Start transport_keys on_get')
./barbican/api/controllers/transportkeys.py:135:        LOG.debug('Start transport_keys on_post')
./barbican/api/controllers/transportkeys.py:149:        LOG.debug('URI to transport key is %s', url)
./barbican/api/controllers/acls.py:68:        LOG.debug('Start secret ACL on_get '
./barbican/api/controllers/acls.py:102:        LOG.debug('Start on_patch...%s', data)
./barbican/api/controllers/acls.py:163:        LOG.debug('Start on_put...%s', data)
./barbican/api/controllers/acls.py:233:        LOG.debug('Start container ACL on_get '
./barbican/api/controllers/acls.py:267:        LOG.debug('Start ContainerACLsController on_patch...%s', data)
./barbican/api/controllers/acls.py:331:        LOG.debug('Start ContainerACLsController on_put...%s', data)
./barbican/api/controllers/versions.py:90:        LOG.debug('=== Creating V1Controller ===')
./barbican/api/controllers/versions.py:120:        LOG.debug('=== Creating VersionsController ===')
./barbican/api/controllers/versions.py:152:            LOG.debug("Redirecting Request to " + url)
./barbican/api/controllers/quotas.py:40:        LOG.debug('=== Creating QuotasController ===')
./barbican/api/controllers/quotas.py:51:        LOG.debug('=== QuotasController GET ===')
./barbican/api/controllers/quotas.py:62:        LOG.debug('=== Creating ProjectQuotasController ===')
./barbican/api/controllers/quotas.py:75:        LOG.debug('=== ProjectQuotasController GET ===')
./barbican/api/controllers/quotas.py:86:        LOG.debug('=== ProjectQuotasController PUT ===')
./barbican/api/controllers/quotas.py:101:        LOG.debug('=== ProjectQuotasController DELETE ===')
./barbican/api/controllers/quotas.py:116:        LOG.debug('=== Creating ProjectsQuotaController ===')
./barbican/api/controllers/cas.py:69:        LOG.debug('=== Creating CertificateAuthorityController ===')
./barbican/api/controllers/cas.py:99:        LOG.debug("== Getting certificate authority for %s", self.ca.id)
./barbican/api/controllers/cas.py:107:        LOG.debug("== Getting signing cert for %s", self.ca.id)
./barbican/api/controllers/cas.py:115:        LOG.debug("== Getting CA Cert Chain for %s", self.ca.id)
./barbican/api/controllers/cas.py:123:        LOG.debug("== Getting Projects for %s", self.ca.id)
./barbican/api/controllers/cas.py:144:        LOG.debug("== Saving CA %s to external_project_id %s",
./barbican/api/controllers/cas.py:178:        LOG.debug("== Removing CA %s from project_external_id %s",
./barbican/api/controllers/cas.py:216:        LOG.debug("== Setting preferred CA %s for project %s",
./barbican/api/controllers/cas.py:240:        LOG.debug("== Set global preferred CA %s", self.ca.id)
./barbican/api/controllers/cas.py:258:        LOG.debug('Creating CertificateAuthoritiesController')
./barbican/api/controllers/cas.py:295:        LOG.debug('Start certificate_authorities on_get (limited)')
./barbican/api/controllers/cas.py:331:        LOG.debug('Start certificate_authorities on_get')
./barbican/api/controllers/cas.py:409:        LOG.debug('Start certificate_authorities get_global_preferred CA')
./barbican/api/controllers/cas.py:427:        LOG.debug("== Unsetting global preferred CA")
./barbican/api/controllers/cas.py:442:        LOG.debug('Start certificate_authorities get project preferred CA')
./barbican/api/controllers/cas.py:460:        LOG.debug('Start on_post for project-ID %s:...', external_project_id)
./barbican/api/controllers/cas.py:481:        LOG.debug('URI to sub-CA is %s', url)
./barbican/api/controllers/containers.py:135:        LOG.debug('Start containers on_get for project-ID %s:', project_id)
./barbican/api/controllers/containers.py:186:        LOG.debug('Start on_post...%s', data)
./barbican/api/controllers/secrets.py:62:        LOG.debug('=== Creating SecretController ===')
./barbican/api/controllers/secrets.py:243:        LOG.debug('Creating SecretsController')
./barbican/api/controllers/secrets.py:273:        LOG.debug('Start secrets on_get '
./barbican/api/controllers/secrets.py:331:        LOG.debug('Start on_post for project-ID %s:...', external_project_id)
./barbican/api/controllers/secrets.py:357:        LOG.debug('URI to secret is %s', url)
./barbican/api/controllers/consumers.py:92:        LOG.debug('Start consumers on_get '
./barbican/api/controllers/consumers.py:137:        LOG.debug('Start on_post...%s', data)
./barbican/api/controllers/consumers.py:168:        LOG.debug('Start on_delete...%s', data)
./barbican/api/controllers/consumers.py:177:        LOG.debug("Found consumer: %s", consumer)
./barbican/api/controllers/orders.py:133:        LOG.debug('Creating OrdersController')
./barbican/api/controllers/orders.py:164:        LOG.debug('Start orders on_get '
./barbican/api/controllers/orders.py:208:        LOG.debug('Processing order type %s, request type %s',
./barbican/api/controllers/__init__.py:110:                status, message = api.generate_safe_exception_message(
./barbican/api/controllers/secretmeta.py:36:        LOG.debug('=== Creating SecretMetadataController ===')
./barbican/api/controllers/secretmeta.py:55:        LOG.debug('Start secret metadata on_get '
./barbican/api/controllers/secretmeta.py:70:        LOG.debug('Start secret metadata on_put...%s', data)
./barbican/api/controllers/secretmeta.py:76:        LOG.debug('URI to secret metadata is %s', url)
./barbican/api/controllers/secretmeta.py:98:        LOG.debug('Start secret metadatum on_post...%s', metadata)
./barbican/api/controllers/secretmeta.py:103:        LOG.debug('URI to secret metadata is %s', url)
./barbican/api/controllers/secretmeta.py:114:        LOG.debug('=== Creating SecretMetadatumController ===')
./barbican/api/controllers/secretmeta.py:129:        LOG.debug('Start secret metadatum on_get '
./barbican/api/controllers/secretmeta.py:160:            LOG.debug('Start secret metadatum on_put...%s', metadata)
./barbican/api/hooks.py:30:    def on_error(self, state, exc):
./barbican/api/hooks.py:54:    def on_error(self, state, exc):

== environment() ==

== privileged() ==

== networking() ==
./bin/versionbuild.py:74:                    file_new.write(''.join(
./bin/versionbuild.py:77:                    file_new.write(line)
./functionaltests/api/v1/functional/test_acls.py:320:    def test_secret_acl_auditor_with_acl_cannot_read(self):
./barbican/tests/test_middleware_auth.py:52:    response = connection.getresponse().read()
./barbican/tests/plugin/crypto/test_manager.py:24:class MyThread(threading.Thread):
./barbican/tests/plugin/crypto/test_manager.py:111:            t = MyThread(i, results)
./barbican/tests/plugin/test_dogtag.py:269:        os.write(fh, exp_time.strftime(
./barbican/tests/plugin/test_dogtag.py:275:        os.write(fh, "host_ca_aid")
./barbican/cmd/worker.py:48:    sys.stderr.write("ERROR: {0}\n".format(e))
./barbican/cmd/db_manage.py:179:            sys.stderr.write("ERROR: {0}\n".format(ex))
./barbican/cmd/keystone_listener.py:51:    sys.stderr.write("ERROR: {0}\n".format(e))
./barbican/cmd/retry_scheduler.py:48:    sys.stderr.write("ERROR: {0}\n".format(e))
./barbican/model/repositories.py:184:            db_connection = engine.connect()
./barbican/model/repositories.py:223:    # TODO(jfwood): sqlalchemy.event.listen(_ENGINE, 'checkout',
./barbican/model/migration/alembic_migrations/env.py:83:    connection = engine.connect()
./barbican/model/migration/alembic_migrations/versions/4070806f6972_add_orders_plugin_metadata_table_and_.py:19:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/3d36a26b88af_add_order_barbican_metadata_table.py:19:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/6a4457517a3_rename_acl_creator_only_to_project_.py:20:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/2d21598e7e70_added_ca_related_tables.py:19:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/13d127569afa_create_secret_store_metadata_table.py:34:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/dce488646127_add_secret_user_metadata.py:34:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/795737bb3c3_change_tenants_to_projects.py:36:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/161f8aceb687_fill_project_id_to_secrets_where_missing.py:18:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/46b98cde536_add_project_quotas_table.py:19:    con = op.get_bind()
./barbican/model/migration/alembic_migrations/versions/1a7cf79559e3_new_secret_and_container_acl_tables.py:19:    con = op.get_bind()
./barbican/plugin/snakeoil_ca.py:123:                                               cert_fh.read())
./barbican/plugin/snakeoil_ca.py:131:                cert_fh.write(crypto.dump_certificate(crypto.FILETYPE_PEM,
./barbican/plugin/snakeoil_ca.py:142:                                              key_fh.read())
./barbican/plugin/snakeoil_ca.py:150:                key_fh.write(crypto.dump_privatekey(crypto.FILETYPE_PEM, val))
./barbican/plugin/snakeoil_ca.py:159:                return chain_fh.read()
./barbican/plugin/snakeoil_ca.py:167:                chain_fh.write(val)
./barbican/plugin/snakeoil_ca.py:176:                return pkcs7_fh.read()
./barbican/plugin/snakeoil_ca.py:184:                pkcs7_fh.write(val)
./barbican/plugin/snakeoil_ca.py:249:                chain = fh.read()
./barbican/plugin/snakeoil_ca.py:257:        os.write(fin, chain)
./barbican/plugin/snakeoil_ca.py:266:            pkcs7 = pkcs7_fh.read()
./barbican/plugin/dogtag.py:721:                        expiration_fh.read(),
./barbican/plugin/dogtag.py:732:            expiration_fh.write(val.strftime("%Y-%m-%d %H:%M:%S.%f"))
./barbican/plugin/dogtag.py:739:                self._host_aid = host_aid_fh.read()
./barbican/plugin/dogtag.py:746:                host_aid_fh.write(val)
./barbican/api/middleware/__init__.py:100:            sys.stdout.write(part)
./barbican/api/__init__.py:51:        body = req.body_file.read(CONF.max_allowed_request_size_in_bytes)

== http:// ==
./bin/demo_requests.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./bin/demo_requests.py:39:end_point = 'http://localhost:9311'
./bin/versionbuild.py:9:#    http://www.apache.org/licenses/LICENSE-2.0
./setup.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./setup.py:21:# solution from: http://bugs.python.org/issue15881#msg170215
./functionaltests/common/config.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/common/config.py:29:        cfg.StrOpt('uri', default='http://localhost:5000/v3'),
./functionaltests/common/client.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/common/client.py:173:        # a URL to another. If a URL, say http://localhost/v1 doesn't have a
./functionaltests/common/auth.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/secret_models.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/ca_models.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/order_models.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/consumer_model.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/quota_models.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/base_models.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/acl_models.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/models/container_models.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_quotas_rbac.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_secretmeta.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_secretmeta.py:85:        secret_ref = 'http://localhost:9311/secrets/%s' % uuid.uuid4().hex
./functionaltests/api/v1/functional/test_secretmeta.py:112:        secret_ref = 'http://localhost:9311/secrets/%s' % uuid.uuid4().hex
./functionaltests/api/v1/functional/test_secrets_rbac.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_acls_rbac.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_consumers.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_rsa.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_acls.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_orders_rbac.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_cas.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_cas.py:281:            'http://localhost:9311/cas/invalid_ref'
./functionaltests/api/v1/functional/test_cas.py:288:            'http://localhost:9311/cas/missing_ref'
./functionaltests/api/v1/functional/test_secrets.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_quotas.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_orders.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_certificate_orders.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_certificate_orders.py:44:NOT_FOUND_CONTAINER_REF = "http://localhost:9311/v1/containers/not_found"
./functionaltests/api/v1/functional/test_containers.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_quotas_enforce.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/functional/test_containers_rbac.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/smoke/test_consumers.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/smoke/test_versions.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/smoke/test_secrets.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/smoke/test_orders.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/smoke/test_containers.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/acl_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/base_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/quota_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/secretmeta_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/secret_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/order_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/ca_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/container_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/v1/behaviors/consumer_behaviors.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./functionaltests/api/base.py:8:    http://www.apache.org/licenses/LICENSE-2.0
./barbican/queue/client.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/queue/__init__.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/queue/server.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/queue/keystone_listener.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/queue/retry_scheduler.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/queue/retry_scheduler.py:51:    http://docs.openstack.org/developer/oslo-incubator/api/openstack.common
./barbican/tests/queue/test_client.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/queue/test_retry_scheduler.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/queue/test_server.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/queue/test_keystone_listener.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/test_middleware_auth.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/test_middleware_auth.py:38:# -H "Content-type: application/json" http://localhost:35357/v2.0/tokens
./barbican/tests/cmd/test_barbican_manage.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/cmd/test_db_cleanup.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/cmd/test_cmd.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_secret_metadata.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_containers.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_secrets.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_acls.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_quotas.py:7:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_order_retry_tasks.py:7:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_orders.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_projects.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_transport_keys.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/repositories/test_repositories_consumers.py:5:#     http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/test_models.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/model/test_models.py:205:            'http://localhost:9110/123/secrets/123456')
./barbican/tests/model/test_models.py:210:            'http://localhost:9110/123/secrets/123456/')
./barbican/tests/tasks/test_certificate_resources.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/tasks/test_keystone_consumer.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/tasks/test_common.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/tasks/test_resources.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/test_resource.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/test_simple_certificate_manager.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/test_store_crypto.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/crypto/test_manager.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/crypto/test_p11_crypto.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/crypto/test_crypto.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/crypto/test_pkcs11.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/test_snakeoil_ca.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/test_dogtag.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/test_symantec.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/interface/test_certificate_manager.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/interface/test_certificate_manager.py:32:        self.order_ref = 'http://www.mycerts.com/v1/orders/123456'
./barbican/tests/plugin/interface/test_certificate_manager.py:33:        self.container_ref = 'http://www.mycerts.com/v1/containers/654321'
./barbican/tests/plugin/interface/test_secret_store.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/test_kmip.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/util/test_mime_types.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/util/test_utils.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/plugin/util/test_translations.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/utils.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/common/test_validators.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/common/test_validators.py:587:        validators.CONF.set_override("host_href", "http://localhost:9311",
./barbican/tests/common/test_validators.py:595:                'secret_ref': 'http://localhost:9311/1231'
./barbican/tests/common/test_validators.py:599:                'secret_ref': 'http://localhost:9311/1232'
./barbican/tests/common/test_validators.py:788:                'secret_ref': 'http://localhost:9311/v1/12345/secrets/1231'
./barbican/tests/common/test_validators.py:792:                'secret_ref': 'http://localhost:9311/v1/12345/secrets//1232'
./barbican/tests/common/test_validators.py:796:                'secret_ref': 'http://localhost:9311/v1/12345/secrets//1231/'
./barbican/tests/common/test_validators.py:818:                'secret_ref': 'http://kegsarecool.com:9311/1234/secrets/57890'
./barbican/tests/common/test_validators.py:822:                'secret_ref': 'http://invalid.fqdn:9311/v1/secrets/FAD23'
./barbican/tests/common/test_validators.py:842:        validators.CONF.set_override("host_href", "http://localhost:9311",
./barbican/tests/common/test_validators.py:850:                'secret_ref': 'http://localhost:9311/1231'
./barbican/tests/common/test_validators.py:854:                'secret_ref': 'http://localhost:9311/1232'
./barbican/tests/common/test_validators.py:858:                'secret_ref': 'http://localhost:9311/1233'
./barbican/tests/common/test_validators.py:919:            'secret_ref': 'http://localhost:9311/234234'
./barbican/tests/common/test_validators.py:937:                'secret_ref': 'http://localhost:9311/123'
./barbican/tests/common/test_validators.py:941:                'secret_ref': 'http://localhost:9311/123'
./barbican/tests/common/test_validators.py:958:        validators.CONF.set_override("host_href", "http://localhost:9311",
./barbican/tests/common/test_validators.py:966:                'secret_ref': 'http://localhost:9311/S4dfsdrf'
./barbican/tests/common/test_validators.py:970:                'secret_ref': 'http://localhost:9311/1231'
./barbican/tests/common/test_validators.py:974:                'secret_ref': 'http://localhost:9311/1232'
./barbican/tests/common/test_validators.py:978:                'secret_ref': 'http://localhost:9311/1233'
./barbican/tests/common/test_validators.py:994:            'secret_ref': 'http://localhost:9311/234234'
./barbican/tests/common/test_validators.py:1116:        self.URL = 'http://my.url/resource/UUID'
./barbican/tests/common/test_utils.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/common/test_hrefs.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/common/test_quota.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/database_utils.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/keys.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/test_init.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/test_resources_policy.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/middleware/test_context.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/middleware/test_simple.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/test_transport_keys_resource.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_secretmeta.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_acls.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_versions.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_cas.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_secrets.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_quotas.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_orders.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_containers.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/controllers/test_containers.py:130:        config.CONF.set_override("host_href", "http://localhost:9311",
./barbican/tests/api/controllers/test_containers.py:135:                'secret_ref': 'http://localhost:9311/secrets/does_not_exist'
./barbican/tests/api/test_resources.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tests/api/test_resources.py:116:        'URL': 'http://test/url'
./barbican/tests/api/test_resources.py:759:            'URL': 'http://consumer/1'
./barbican/tests/api/test_resources.py:1072:            'URL': 'http://consumer/1'
./barbican/tests/certificate_utils.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/i18n.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/context.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/worker.py:9:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/barbican_manage.py:9:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/db_manage.py:9:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/pkcs11_kek_rewrap.py:7:# http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/pkcs11_key_generation.py:7:# http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/pkcs11_migrate_kek_signatures.py:7:# http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/__init__.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/keystone_listener.py:8:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/cmd/retry_scheduler.py:9:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/clean.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/models.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/__init__.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/repositories.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/commands.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/order_ops.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/env.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/kek_init_ops.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/projects_init_ops.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/transport_keys_init_ops.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/versions/kilo_release.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/versions/13d127569afa_create_secret_store_metadata_table.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/versions/dce488646127_add_secret_user_metadata.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/versions/juno_initial.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/encrypted_init_ops.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/container_init_ops.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/model/migration/alembic_migrations/secrets_init_ops.py:7:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/tasks/certificate_resources.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tasks/resources.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tasks/__init__.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tasks/common.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/tasks/keystone_consumer.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/symantec.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/store_crypto.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/resources.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/kmip_secret_store.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/crypto/pkcs11.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/crypto/simple_crypto.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/crypto/manager.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/crypto/p11_crypto.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/crypto/crypto.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/snakeoil_ca.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/interface/certificate_manager.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/interface/secret_store.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/dogtag.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/simple_certificate_manager.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/util/mime_types.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/util/utils.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/plugin/util/translations.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/exception.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/config.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/config.py:53:    cfg.StrOpt('host_href', default='http://localhost:9311'),
./barbican/common/resources.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/quota.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/utils.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/utils.py:78:    For details see: http://tools.ietf.org/html/rfc2616#section-14.3
./barbican/common/utils.py:91:    For details see: http://tools.ietf.org/html/rfc2616#section-14.3
./barbican/common/__init__.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/validators.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/common/validators.py:363:            "$schema": "http://json-schema.org/draft-03/schema",
./barbican/common/validators.py:410:            "$schema": "http://json-schema.org/draft-03/schema",
./barbican/common/validators.py:476:            "$schema": "http://json-schema.org/draft-03/schema",
./barbican/common/validators.py:726:            "$schema": "http://json-schema.org/draft-04/schema#",
./barbican/common/hrefs.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/app.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/middleware/context.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/middleware/simple.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/middleware/__init__.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/__init__.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/transportkeys.py:7:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/acls.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/versions.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/versions.py:66:                    'href': 'http://docs.openstack.org/'
./barbican/api/controllers/quotas.py:7:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/cas.py:7:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/containers.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/secrets.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/consumers.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/orders.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/__init__.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/controllers/secretmeta.py:5:#       http://www.apache.org/licenses/LICENSE-2.0
./barbican/api/hooks.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./barbican/__init__.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./barbican/version.py:8:#         http://www.apache.org/licenses/LICENSE-2.0
./releasenotes/source/conf.py:6:#    http://www.apache.org/licenses/LICENSE-2.0
./doc/source/conf.py:6:#    http://www.apache.org/licenses/LICENSE-2.0
./doc/source/conf.py:76:# intersphinx_mapping = {'http://docs.python.org/': None}
./api-guide/source/conf.py:7:#    http://www.apache.org/licenses/LICENSE-2.0
./api-guide/source/conf.py:83:giturl = (u"http://git.openstack.org/cgit/openstack/barbican/tree/"

== encryption ==
./bin/demo_requests.py:48:    'URL': 'https://www.fooservice.com/widgets/1234'
./bin/versionbuild.py:28:https://bugs.launchpad.net/pbr/+bug/1206730
./barbican/tests/tasks/test_certificate_resources.py:218:                 'secret_ref': 'https://localhost/secrets/' +
./barbican/tests/tasks/test_certificate_resources.py:221:                 'secret_ref': 'https://localhost/secrets/' +
./barbican/tests/tasks/test_certificate_resources.py:224:                 'secret_ref': 'https://localhost/secrets/' +
./barbican/tests/tasks/test_certificate_resources.py:234:                 'secret_ref': 'https://localhost/secrets/' +
./barbican/tests/tasks/test_certificate_resources.py:237:                 'secret_ref': 'https://localhost/secrets/' +
./barbican/tests/tasks/test_certificate_resources.py:257:            "https://localhost/containers/" + self.container.id,
./barbican/tests/tasks/test_certificate_resources.py:530:            "https://localhost/containers/" + self.container_with_passphrase.id
./barbican/tests/tasks/test_certificate_resources.py:558:            "https://localhost/containers/" + self.container_with_passphrase.id
./barbican/tests/tasks/test_certificate_resources.py:860:        self.parent_ca_ref = 'https://localhost:6311/cas/' + self.parent_ca.id
./barbican/tests/tasks/test_certificate_resources.py:896:        self.parent_ca_ref = 'https://localhost:6311/cas/' + "BAD-CA-REF"
./barbican/tests/plugin/test_dogtag.py:203:        request_info.key_url = "https://example_url/1"
./barbican/tests/common/test_validators.py:1509:                         'https://localhost/v1/containers/good_container_ref',
./barbican/tests/common/test_validators.py:1683:                               'https://localhost/v1/cas/parent_ca_id',
./barbican/tests/common/test_hrefs.py:26:        test_ref = 'https://localhost/v1/containers/good_container_ref'
./barbican/tests/api/controllers/test_cas.py:448:            'parent_ca_ref': "https://localhost:9311/cas/" + parent_ca_id
./barbican/tests/api/controllers/test_orders.py:488:            'container_ref': 'https://localhost/v1/containers/' + container_id
./barbican/tests/api/controllers/test_orders.py:540:            'container_ref': 'https://localhost/v1/containers/' + container_id
./barbican/tests/api/controllers/test_orders.py:687:            'container_ref': 'https://localhost/v1/containers/not_found'
./barbican/tests/api/controllers/test_orders.py:710:            'container_ref': 'https://localhost/v1/containers/' + container_id
./barbican/tests/api/controllers/test_orders.py:724:            'container_ref': 'https://localhost/v1/containers/no_access'
./barbican/model/migration/commands.py:21:https://alembic.readthedocs.org/en/latest/api.html#module-alembic.command
./barbican/tasks/resources.py:58:        https://gist.github.com/jfwood/a8130265b0db3c793ec8
./barbican/plugin/dogtag.py:1118:                # https://fedorahosted.org/pki/ticket/1374
./barbican/common/config.py:235:    # TODO(krotscheck): Update with https://review.openstack.org/#/c/285368/

== sql() ==
./barbican/tests/cmd/test_db_cleanup.py:44:    query = session.query(model).filter(model.id == entry_id)
./barbican/tests/cmd/test_db_cleanup.py:53:    query = session.query(model)
./barbican/tests/model/repositories/test_repositories.py:377:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/tests/model/repositories/test_repositories.py:383:    def _build_get_project_entities_query(self, project_id, session):
./barbican/tests/database_utils.py:33:    dbapi_connection.execute("PRAGMA foreign_keys=ON")
./barbican/cmd/barbican_manage.py:205:        rewrapper.execute(dryrun)
./barbican/cmd/db_manage.py:157:    def execute(self):
./barbican/cmd/db_manage.py:175:        dm.execute()
./barbican/cmd/pkcs11_kek_rewrap.py:112:            query = transaction.session.query(models.KEKDatum)
./barbican/cmd/pkcs11_kek_rewrap.py:125:            projects = transaction.session.query(models.Project).all()
./barbican/cmd/pkcs11_kek_rewrap.py:133:    def execute(self, dry_run=True):
./barbican/cmd/pkcs11_kek_rewrap.py:162:    rewrapper.execute(args.dry_run)
./barbican/cmd/pkcs11_key_generation.py:109:    def execute(self):
./barbican/cmd/pkcs11_key_generation.py:121:    kg.execute()
./barbican/cmd/pkcs11_migrate_kek_signatures.py:109:            query = transaction.session.query(models.KEKDatum)
./barbican/cmd/pkcs11_migrate_kek_signatures.py:122:            projects = transaction.session.query(models.Project).all()
./barbican/cmd/pkcs11_migrate_kek_signatures.py:130:    def execute(self, dry_run=True):
./barbican/cmd/pkcs11_migrate_kek_signatures.py:166:    migrator.execute(args.dry_run)
./barbican/model/clean.py:52:    sub_query = session.query(models.Project.id)
./barbican/model/clean.py:57:    sub_query = sub_query.subquery()
./barbican/model/clean.py:59:    query = session.query(models.Project)
./barbican/model/clean.py:86:    sub_query = session.query(parent_model.id)
./barbican/model/clean.py:89:    sub_query = sub_query.subquery()
./barbican/model/clean.py:91:    query = session.query(parent_model)
./barbican/model/clean.py:111:    query = session.query(model)
./barbican/model/clean.py:180:    query = session.query(models.Secret.id)
./barbican/model/clean.py:201:    acl_user_sub_query = session.query(models.SecretACLUser.id)
./barbican/model/clean.py:205:    acl_user_sub_query = acl_user_sub_query.subquery()
./barbican/model/clean.py:208:    acl_user_query = session.query(models.SecretACLUser)
./barbican/model/clean.py:213:    acl_sub_query = session.query(models.SecretACL.id)
./barbican/model/clean.py:216:    acl_sub_query = acl_sub_query.subquery()
./barbican/model/clean.py:219:    acl_query = session.query(models.SecretACL)
./barbican/model/clean.py:249:        sub_query = session.query(table.id)
./barbican/model/clean.py:254:        sub_query = sub_query.subquery()
./barbican/model/clean.py:256:        query = session.query(table)
./barbican/model/repositories.py:350:            query = self._do_build_get_query(entity_id,
./barbican/model/repositories.py:433:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:471:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:500:        query = self._build_get_project_entities_query(project_id, session)
./barbican/model/repositories.py:518:        query = self._build_get_project_entities_query(project_id, session)
./barbican/model/repositories.py:538:        query = self._build_get_project_entities_query(project_id,
./barbican/model/repositories.py:563:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:565:        return session.query(models.Project).filter_by(id=entity_id)
./barbican/model/repositories.py:576:            query = session.query(models.Project)
./barbican/model/repositories.py:593:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:595:        query = session.query(models.Project)
./barbican/model/repositories.py:618:        query = session.query(models.Secret)
./barbican/model/repositories.py:664:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:671:        query = session.query(models.Secret)
./barbican/model/repositories.py:682:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:688:        query = session.query(models.Secret).filter_by(deleted=False)
./barbican/model/repositories.py:702:            query = session.query(models.Secret)
./barbican/model/repositories.py:728:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:730:        return session.query(models.EncryptedDatum).filter_by(id=entity_id)
./barbican/model/repositories.py:761:        query = session.query(models.SecretStoreMetadatum)
./barbican/model/repositories.py:774:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:776:        query = session.query(models.SecretStoreMetadatum)
./barbican/model/repositories.py:795:        query = session.query(models.SecretUserMetadatum)
./barbican/model/repositories.py:809:        query = session.query(models.SecretUserMetadatum)
./barbican/model/repositories.py:822:        query = session.query(models.SecretUserMetadatum)
./barbican/model/repositories.py:836:        query = session.query(models.SecretUserMetadatum)
./barbican/model/repositories.py:845:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:847:        query = session.query(models.SecretUserMetadatum)
./barbican/model/repositories.py:878:            query = session.query(models.KEKDatum)
./barbican/model/repositories.py:904:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:906:        return session.query(models.KEKDatum).filter_by(id=entity_id)
./barbican/model/repositories.py:912:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:920:        return session.query(models.KEKDatum).filter_by(
./barbican/model/repositories.py:951:        query = session.query(models.Order)
./barbican/model/repositories.py:979:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:981:        query = session.query(models.Order)
./barbican/model/repositories.py:991:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:997:        return session.query(models.Order).filter_by(
./barbican/model/repositories.py:1027:            query = session.query(models.OrderPluginMetadatum)
./barbican/model/repositories.py:1044:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1046:        query = session.query(models.OrderPluginMetadatum)
./barbican/model/repositories.py:1080:            query = session.query(models.OrderBarbicanMetadatum)
./barbican/model/repositories.py:1097:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1099:        query = session.query(models.OrderBarbicanMetadatum)
./barbican/model/repositories.py:1136:        query = session.query(models.OrderRetryTask)
./barbican/model/repositories.py:1161:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1163:        query = session.query(models.OrderRetryTask)
./barbican/model/repositories.py:1189:        query = session.query(models.Container)
./barbican/model/repositories.py:1217:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1219:        query = session.query(models.Container)
./barbican/model/repositories.py:1229:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:1235:        return session.query(models.Container).filter_by(
./barbican/model/repositories.py:1243:            query = session.query(models.Container)
./barbican/model/repositories.py:1264:        def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1266:            return session.query(models.ContainerSecret
./barbican/model/repositories.py:1290:        query = session.query(models.ContainerConsumerMetadatum)
./barbican/model/repositories.py:1316:            query = session.query(models.ContainerConsumerMetadatum)
./barbican/model/repositories.py:1360:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1362:        query = session.query(models.ContainerConsumerMetadatum)
./barbican/model/repositories.py:1369:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:1375:        query = session.query(
./barbican/model/repositories.py:1407:        query = session.query(models.TransportKey)
./barbican/model/repositories.py:1410:            query = session.query(models.TransportKey)
./barbican/model/repositories.py:1436:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1438:        return session.query(models.TransportKey).filter_by(id=entity_id)
./barbican/model/repositories.py:1471:            query1 = session.query(models.CertificateAuthority)
./barbican/model/repositories.py:1475:            query2 = session.query(models.CertificateAuthority)
./barbican/model/repositories.py:1486:            query = session.query(models.CertificateAuthority)
./barbican/model/repositories.py:1535:        query = session.query(models.CertificateAuthority).filter_by(
./barbican/model/repositories.py:1560:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1569:        query = session.query(models.CertificateAuthority)
./barbican/model/repositories.py:1579:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:1585:        return session.query(models.CertificateAuthority).filter_by(
./barbican/model/repositories.py:1615:            query = session.query(models.CertificateAuthorityMetadatum)
./barbican/model/repositories.py:1632:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1634:        query = session.query(models.CertificateAuthorityMetadatum)
./barbican/model/repositories.py:1662:        query = session.query(models.ProjectCertificateAuthority)
./barbican/model/repositories.py:1691:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1693:        return session.query(models.ProjectCertificateAuthority).filter_by(
./barbican/model/repositories.py:1700:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:1706:        return session.query(models.ProjectCertificateAuthority).filter_by(
./barbican/model/repositories.py:1730:        query = session.query(models.PreferredCertificateAuthority)
./barbican/model/repositories.py:1764:        query = session.query(models.PreferredCertificateAuthority)
./barbican/model/repositories.py:1780:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1782:        return session.query(models.PreferredCertificateAuthority).filter_by(
./barbican/model/repositories.py:1789:    def _build_get_project_entities_query(self, project_id, session):
./barbican/model/repositories.py:1795:        return session.query(models.PreferredCertificateAuthority).filter_by(
./barbican/model/repositories.py:1814:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1816:        query = session.query(models.SecretACL)
./barbican/model/repositories.py:1829:        query = session.query(models.SecretACL)
./barbican/model/repositories.py:1883:        query = session.query(sa_func.count(models.SecretACL.id))
./barbican/model/repositories.py:1909:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1912:        query = session.query(models.ContainerACL)
./barbican/model/repositories.py:1925:        query = session.query(models.ContainerACL)
./barbican/model/repositories.py:1979:        query = session.query(sa_func.count(models.ContainerACL.id))
./barbican/model/repositories.py:1996:    def _do_build_get_query(self, entity_id, external_project_id, session):
./barbican/model/repositories.py:1998:        return session.query(models.ProjectQuotas).filter_by(id=entity_id)
./barbican/model/repositories.py:2025:        query = session.query(models.ProjectQuotas)
./barbican/model/repositories.py:2053:        query = session.query(models.ProjectQuotas)
./barbican/model/repositories.py:2077:        query = session.query(models.ProjectQuotas)
./barbican/model/repositories.py:2101:        query = session.query(models.ProjectQuotas)
./barbican/model/migration/alembic_migrations/env.py:63:    Calls to context.execute() here emit the given string to the
./barbican/model/migration/alembic_migrations/versions/6a4457517a3_rename_acl_creator_only_to_project_.py:26:    op.execute('UPDATE secret_acls SET project_access = NOT project_access',
./barbican/model/migration/alembic_migrations/versions/6a4457517a3_rename_acl_creator_only_to_project_.py:34:    op.execute('UPDATE container_acls SET project_access = NOT project_access',
./barbican/model/migration/alembic_migrations/versions/161f8aceb687_fill_project_id_to_secrets_where_missing.py:44:    op.execute(secrets.update().
./barbican/tests/cmd/test_db_cleanup.py:20:from sqlalchemy.exc import IntegrityError
./barbican/tests/model/repositories/test_repositories.py:14:import sqlalchemy
./barbican/tests/tasks/test_keystone_consumer.py:18:import sqlalchemy
./barbican/tests/database_utils.py:23:from sqlalchemy.engine import Engine
./barbican/tests/database_utils.py:24:from sqlalchemy import event
./barbican/cmd/pkcs11_kek_rewrap.py:19:import sqlalchemy
./barbican/cmd/pkcs11_kek_rewrap.py:20:from sqlalchemy import orm
./barbican/cmd/pkcs11_kek_rewrap.py:21:from sqlalchemy.orm import scoping
./barbican/cmd/pkcs11_migrate_kek_signatures.py:19:import sqlalchemy
./barbican/cmd/pkcs11_migrate_kek_signatures.py:20:from sqlalchemy import orm
./barbican/cmd/pkcs11_migrate_kek_signatures.py:21:from sqlalchemy.orm import scoping
./barbican/model/clean.py:22:from sqlalchemy import sql as sa_sql
./barbican/model/models.py:24:import sqlalchemy as sa
./barbican/model/models.py:25:from sqlalchemy.ext import compiler
./barbican/model/models.py:26:from sqlalchemy.ext import declarative
./barbican/model/models.py:27:from sqlalchemy import orm
./barbican/model/models.py:28:from sqlalchemy.orm import collections as col
./barbican/model/models.py:29:from sqlalchemy import types as sql_types
./barbican/model/repositories.py:29:import sqlalchemy
./barbican/model/repositories.py:30:from sqlalchemy import func as sa_func
./barbican/model/repositories.py:31:from sqlalchemy import or_
./barbican/model/repositories.py:32:import sqlalchemy.orm as sa_orm
./barbican/model/migration/alembic_migrations/order_ops.py:22:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/env.py:18:from sqlalchemy import create_engine, pool
./barbican/model/migration/alembic_migrations/kek_init_ops.py:22:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/projects_init_ops.py:22:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/transport_keys_init_ops.py:22:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/aa2cf96a1d5_add_orderretrytask.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/2843d6469f25_add_sub_status_info_for_orders.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/4070806f6972_add_orders_plugin_metadata_table_and_.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/3041b53b95d7_remove_size_limits_on_meta_table_values.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/47b69e523451_made_plugin_names_in_kek_datum_non_.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/30dba269cc64_update_order_retry_tasks_table.py:17:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/10220ccbe7fa_remove_transport_keys_column_from_.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/d2780d5aa510_change_url_length.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/156cd9933643_add_project_column_to_consumer_table.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/1bc885808c76_add_project_id_to_secrets.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/3d36a26b88af_add_order_barbican_metadata_table.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/6a4457517a3_rename_acl_creator_only_to_project_.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/2d21598e7e70_added_ca_related_tables.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/1c0f328bfce0_fixing_composite_primary_keys_and_.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/13d127569afa_create_secret_store_metadata_table.py:29:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/443d6f4a69ac_added_secret_type_column_to_secrets_.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/254495565185_removing_redundant_fields_from_order.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/1bece815014f_remove_projectsecret_table.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/1bece815014f_remove_projectsecret_table.py:15:from sqlalchemy.dialects import postgresql
./barbican/model/migration/alembic_migrations/versions/1e86c18af2dd_add_new_columns_type_meta_containerid.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/dce488646127_add_secret_user_metadata.py:29:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/cd4106a1a0_add_cert_to_container_type.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/795737bb3c3_change_tenants_to_projects.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/4ecde3a3a72a_add_cas_column_to_project_quotas_table.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/161f8aceb687_fill_project_id_to_secrets_where_missing.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/46b98cde536_add_project_quotas_table.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/39a96e67e990_add_missing_constraints.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/3c3b04040bfe_add_owning_project_and_creator_to_cas.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/256da65e0c5f_change_keystone_id_for_external_id_in_.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/2ab3f5371bde_dsa_in_container_type_modelbase_to.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/versions/1a7cf79559e3_new_secret_and_container_acl_tables.py:14:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/encrypted_init_ops.py:22:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/container_init_ops.py:22:import sqlalchemy as sa
./barbican/model/migration/alembic_migrations/secrets_init_ops.py:22:import sqlalchemy as sa

== tmp() ==
./barbican/tests/cmd/test_barbican_manage.py:112:             '--verbose', '--log-file', '/tmp/whatevs'],
./barbican/tests/cmd/test_barbican_manage.py:119:            log_file='/tmp/whatevs')
./barbican/tests/cmd/test_db_cleanup.py:359:        test_log_file = "/tmp/sometempfile"
./barbican/tests/cmd/test_db_cleanup.py:416:        args = ("sql", 2, False, False, False, "/tmp/nope")
./barbican/tests/plugin/test_dogtag.py:96:        m.dogtag_plugin = mock.MagicMock(pem_path=None, nss_db_path='/tmp')

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./functionaltests/api/v1/functional/test_secrets.py:101:        # TODO(tdink) Move to a config file
./functionaltests/api/v1/functional/test_certificate_orders.py:390:        # TODO(alee) Dogtag does not currently return a error message
./functionaltests/api/v1/functional/test_certificate_orders.py:589:        # TODO(alee) - Not sure how to do this
./functionaltests/api/v1/functional/test_certificate_orders.py:607:        # TODO(alee) Not sure how to do this
./functionaltests/api/v1/functional/test_certificate_orders.py:739:        # TODO(alee) this test is broken because Dogtag does not return the
./functionaltests/api/v1/functional/test_certificate_orders.py:750:        # TODO(alee) confirm substatus - data error seen
./functionaltests/api/v1/behaviors/ca_behaviors.py:62:        # TODO(alee) refactor to use he client's get_list_of_models()
./barbican/queue/server.py:119:    # TODO(jvrbanac): Figure out how we should test third-party monitoring
./barbican/queue/keystone_listener.py:94:                # TODO(john-wood-w) This really should be retried on a
./barbican/tests/test_middleware_auth.py:43:# TODO(malini) flesh this out
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:34:                          'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:41:                           'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:192:                          'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:199:                           'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:318:                          'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:326:                           'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/repositories/test_repositories_certificate_authorities.py:335:            'ca_signing_certificate': 'XXXXX-updated-XXXXX',
./barbican/tests/model/test_models.py:301:                          'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/test_models.py:334:                          'ca_signing_certificate': 'XXXXX',
./barbican/tests/model/test_models.py:358:                          'ca_signing_certificate': 'XXXXX',
./barbican/tests/tasks/test_certificate_resources.py:158:            'plugin_ca_id': "XXXX",
./barbican/tests/tasks/test_certificate_resources.py:172:            'plugin_ca_id': "XXXX2",
./barbican/tests/tasks/test_certificate_resources.py:503:        # TODO(alee-3) Add tests to validate the request based on the validator
./barbican/tests/tasks/test_certificate_resources.py:552:        # TODO(alee-3) Add tests to validate the request based on the validator
./barbican/tests/tasks/test_certificate_resources.py:579:        # TODO(alee-3) Add tests to validate the request based on the validator
./barbican/tests/tasks/test_certificate_resources.py:600:        # TODO(alee-3) Add tests to validate the request based on the validator
./barbican/tests/tasks/test_certificate_resources.py:652:        # TODO(alee-3) Add real extensions data here
./barbican/tests/tasks/test_certificate_resources.py:663:        # TODO(alee-3) Add tests to validate the request based on the validator
./barbican/tests/tasks/test_certificate_resources.py:665:        # TODO(alee-3) Add tests to validate the extensions in the request
./barbican/tests/tasks/test_certificate_resources.py:855:                     'ca_signing_certificate': 'XXXXX',
./barbican/tests/tasks/test_certificate_resources.py:867:            'ca_signing_certificate': 'XXXXX',
./barbican/tests/plugin/test_snakeoil_ca.py:369:        # TODO(alee) Verify that ca cert is signed by parent CA
./barbican/tests/plugin/interface/test_certificate_manager.py:231:            cm.INFO_CA_SIGNING_CERT: "XXXXXXX-expired-XXXXXX",
./barbican/tests/plugin/interface/test_certificate_manager.py:239:            cm.INFO_CA_SIGNING_CERT: "XXXXXXX-no-longer-expired-XXXXXX",
./barbican/tests/plugin/interface/test_certificate_manager.py:247:            cm.INFO_CA_SIGNING_CERT: "XXXX-expired-to-be-deleted-XXXX",
./barbican/tests/plugin/interface/test_certificate_manager.py:255:            cm.INFO_CA_SIGNING_CERT: "XXXX-to-be-addeed-XXXX",
./barbican/tests/plugin/util/test_mime_types.py:143:        # TODO(rm_work): This is deprecated and should eventually be removed
./barbican/tests/utils.py:477:    # TODO(alee) fill in the relevant test here
./barbican/tests/common/test_validators.py:673:        # TODO(hgedikli): figure out why invalid_property is null here
./barbican/tests/api/controllers/test_cas.py:246:        # TODO(alee) need more detailed tests here
./barbican/tests/api/controllers/test_cas.py:253:        # TODO(alee) need more detailed tests here
./barbican/tests/api/controllers/test_cas.py:282:        # TODO(alee) need more detailed tests here
./barbican/tests/api/controllers/test_secrets.py:114:        # TODO(jvrbanac): Look into removing this patch
./barbican/tests/api/controllers/test_secrets.py:132:        # TODO(jvrbanac): Look into removing this patch
./barbican/tests/api/controllers/test_secrets.py:712:    # TODO(chellygel): Once test resources is split out, refactor this
./barbican/tests/api/controllers/test_orders.py:219:        # TODO(jvrbanac): Remove dependence on mocks
./barbican/tests/api/controllers/test_orders.py:334:            'request': 'XXXXXX'
./barbican/tests/api/controllers/test_orders.py:347:                'ca_signing_certificate': 'XXXXX',
./barbican/tests/api/controllers/test_orders.py:362:            'ca_signing_certificate': 'XXXXX',
./barbican/tests/api/controllers/test_orders.py:764:    # TODO(jvrbanac): Once test resources is split out, refactor this
./barbican/tests/api/test_resources.py:261:            'default_plugin_name', 'XXXABCDEF')
./barbican/model/clean.py:164:    # TODO(edtubill) Clean up projects that were soft deleted by
./barbican/model/models.py:286:    # TODO(jwood): Performance - Consider avoiding full load of all
./barbican/model/models.py:441:    # TODO(jwood) Why LargeBinary on Postgres (BYTEA) not work correctly?
./barbican/model/models.py:740:                    # TODO(hgedikli) move this into a common location
./barbican/model/models.py:741:                    # TODO(hgedikli) validate provided url
./barbican/model/models.py:742:                    # TODO(hgedikli) parse out secret_id with regex
./barbican/model/models.py:808:        # TODO(john-wood-w) This class should really be immutable due to the
./barbican/model/repositories.py:19:TODO: The top part of this file was 'borrowed' from Glance, but seems
./barbican/model/repositories.py:78:    # TODO(jvrbanac): Remove this as soon as we improve our unit testing
./barbican/model/repositories.py:166:    # TODO(jfwood):
./barbican/model/repositories.py:222:    # TODO(jfwood): if 'mysql' in connection_dict.drivername:
./barbican/model/repositories.py:223:    # TODO(jfwood): sqlalchemy.event.listen(_ENGINE, 'checkout',
./barbican/model/repositories.py:224:    # TODO(jfwood):                         ping_listener)
./barbican/model/repositories.py:454:            # TODO(jfwood): I18n this!
./barbican/model/repositories.py:876:        # TODO(jfwood): Reverse this...attempt insert first, then get on fail.
./barbican/model/repositories.py:1564:        # TODO(jfwood): Performance? Is the many-to-many join needed?
./barbican/tasks/certificate_resources.py:92:    # TODO(john-wood-w) We need to de-conflict barbican_meta (stored with order
./barbican/tasks/certificate_resources.py:112:            # TODO(alee) Fix this to be a non-project specific call once
./barbican/tasks/certificate_resources.py:166:    # TODO(john-wood-w) See note above about DTO's name.
./barbican/tasks/certificate_resources.py:244:    # TODO(alee) See if the checks below can be moved to the RBAC code
./barbican/tasks/certificate_resources.py:356:    # TODO(chellygel): Add the modify certificate request logic.
./barbican/tasks/certificate_resources.py:492:        # TODO(alee-3) We need code here to parse the encoded extensions and
./barbican/tasks/resources.py:52:        TODO(john-wood-w) This method suppresses exceptions for flows that
./barbican/plugin/symantec.py:69:        # TODO(chellygel) Add code to get the signing cert
./barbican/plugin/symantec.py:73:        # TODO(chellygel) Add code to get the cert chain
./barbican/plugin/symantec.py:153:        # TODO(chellygel): Research what certificate types are supported by
./barbican/plugin/store_crypto.py:117:        # TODO(john-wood-w) Need to revisit 1 to many datum relationship.
./barbican/plugin/store_crypto.py:283:    # TODO(jwood): Does this need to be in a critical section? Should the
./barbican/plugin/crypto/pkcs11.py:571:            # TODO(jkf) Expand error handling to raise different exceptions
./barbican/plugin/crypto/simple_crypto.py:113:        TODO (atiwari/reaperhulk): PyCrypto is not capable to serialize
./barbican/plugin/crypto/crypto.py:48:# TODO(john-wood-w) Need to harmonize these lower-level constants with the
./barbican/plugin/snakeoil_ca.py:66:    # TODO(alee) Figure out why C (country) is not working
./barbican/plugin/interface/secret_store.py:284:        self.mode = mode  # TODO(john-wood-w) Paul, is 'mode' required?
./barbican/plugin/interface/secret_store.py:296:    # TODO(john-wood-w) Remove 'content_type' once secret normalization work is
./barbican/plugin/dogtag.py:230:            # TODO(alee-3) send the transport key with the archival request
./barbican/plugin/dogtag.py:361:            # TODO(alee-3) send transport key as well when dogtag client API
./barbican/plugin/dogtag.py:370:        # TODO(alee) remove final field when content_type is removed
./barbican/plugin/dogtag.py:808:        # TODO(alee) Add code to get the signing cert
./barbican/plugin/dogtag.py:812:        # TODO(alee) Add code to get the cert chain
./barbican/plugin/dogtag.py:1216:            # TODO(alee-3) Handle case where SKI is provided
./barbican/plugin/simple_certificate_manager.py:34:        return "XXXXXXXXXXXXXXXXX"
./barbican/common/config.py:235:    # TODO(krotscheck): Update with https://review.openstack.org/#/c/285368/
./barbican/common/validators.py:179:        # TODO(jfwood): Get the list of mime_types from the crypto plugins?
./barbican/common/validators.py:467:# TODO(atiwari) - Split this validator module and unit tests
./barbican/common/validators.py:526:        # TODO(jfwood): Invoke the crypto plugin for this purpose
./barbican/common/validators.py:643:        TODO(alee-3) complete this function
./barbican/common/validators.py:657:        TODO(alee-3) complete this function
./barbican/common/validators.py:788:                    # TODO(hgedikli): move this to a common location
./barbican/common/hrefs.py:59:# TODO(hgedikli) handle list of fields in here
./barbican/common/hrefs.py:140:    TODO(Dave) Add some extra checking for valid prefix
./barbican/common/hrefs.py:153:    TODO(Dave) Implement this, or make one generic ID from REF function
./barbican/api/__init__.py:58:        # TODO(jwood): Investigate how to get UTF8 format via openstack
./barbican/api/controllers/transportkeys.py:69:            # TODO(alee) response should be 204 on success
./barbican/api/controllers/transportkeys.py:137:        # TODO(alee) POST should determine the plugin name and call the
./barbican/api/controllers/containers.py:191:        # TODO(hgedikli): performance optimizations
./barbican/api/controllers/consumers.py:205:        # TODO(john-wood-w) Why two calls to convert_to_hrefs()?
./barbican/api/controllers/orders.py:111:        # TODO(chellygel): Put 'meta' into a separate order association

== unsafe input mechanisms ==
(unsupported type 'python')

