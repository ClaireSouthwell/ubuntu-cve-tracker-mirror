#!/usr/bin/python3

# CVSS calculator based on https://cvssjs.github.io
# Author: leo.barbosa@canonical.com

import math

# Attack Vector (AV)
AV = {
    'N': 0.85,
    'A': 0.62,
    'L': 0.55,
    'P': 0.2,
    }

# Attack Complexity (AC)
AC = {
    'H': 0.44,
    'L': 0.77,
    }

# Privileges Required (PR)
PR = {
    'U': {
        'N': 0.85,
        'L': 0.62,
        'H': 0.27,
        },
    'C': {
        'N': 0.85,
        'L': 0.68,
        'H': 0.5,
        }
    }

# User Interaction (UI)
UI = {
    'N': 0.85,
    'R': 0.62
    }

# Scope (S)
S = {
    'U': 6.42,
    'C': 7.52,
    }

# Confidentiality (C)
C = {
    'N': 0,
    'L': 0.22,
    'H': 0.56
    }

# Integrity
I = {
    'N': 0,
    'L': 0.22,
    'H': 0.56
    }

# Availability
A = {
    'N': 0,
    'L': 0.22,
    'H': 0.56
    }

def round_up(n, decimals=0):
    mfactor = 10 ** decimals
    return math.ceil(n * mfactor) / mfactor

def calculate_cvss(cvss):
    cvss_variables = cvss.split('/')[1:]

    av = AV[cvss_variables[0].split(':')[1]]
    ac = AC[cvss_variables[1].split(':')[1]]
    pr = cvss_variables[2].split(':')[1]
    ui = UI[cvss_variables[3].split(':')[1]]
    s = S[cvss_variables[4].split(':')[1]]
    scope = cvss_variables[4].split(':')[1]
    c = C[cvss_variables[5].split(':')[1]]
    i = I[cvss_variables[6].split(':')[1]]
    a = A[cvss_variables[7].split(':')[1]]

    ISS = (1 -((1-c) * (1-i) * (1-a)))

    impact = 0
    if scope == 'C':
        impact = s * (ISS - 0.029) - 3.25 * ((ISS-0.02)**15)
    else:
        impact = s * ISS

    exploitability = 8.22 * av * ac * PR[scope][pr] * ui
    base_score = 0
    if ISS <= 0:
        pass
    else:
        if scope == 'U': # scope unchanged
            base_score = round_up(min(impact + exploitability, 10), 1)
        else:
            base_score = round_up(min(1.08* (impact + exploitability), 10), 1)

    if base_score == 0:
        return ("None", base_score)
    if base_score >= 0.1 and base_score <= 3.9:
        return ("Low", base_score)
    if base_score >= 4 and base_score <= 6.9:
        return ("Medium", base_score)
    if base_score >= 7 and base_score <= 8.9:
        return ("High", base_score)
    if base_score >= 9 and base_score <= 10:
        return ("Critical", base_score)


if __name__ == "__main__":
    # For tests: should return (Medium, 5.3)
    CVSS = "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
    calculate_cvss(CVSS)
