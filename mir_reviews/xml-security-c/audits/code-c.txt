Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./xsec/utils/XSECSafeBuffer.cpp:66:	memcpy(newBuffer, buffer, bufferSize);
./xsec/utils/XSECSafeBuffer.cpp:131:	strcpy((char *) buffer, inStr);
./xsec/utils/XSECSafeBuffer.cpp:145:	memcpy(buffer, other.buffer, bufferSize);
./xsec/utils/XSECSafeBuffer.cpp:189:	strcpy((char *) buffer, inStr);
./xsec/utils/XSECSafeBuffer.cpp:198:	strcpy((char *) buffer, (char *) inStr.buffer);
./xsec/utils/XSECSafeBuffer.cpp:251:	memcpy(buffer, inBuf, n);
./xsec/utils/XSECSafeBuffer.cpp:259:	memcpy(&buffer[offset], inBuf, n);
./xsec/utils/XSECSafeBuffer.cpp:278:	memcpy(&buffer[offset], inStr, il);
./xsec/utils/XSECSafeBuffer.cpp:298:	memcpy(&buffer[xoffset], inStr, il);
./xsec/utils/XSECSafeBuffer.cpp:308:	memcpy(outBuf, buffer, n);
./xsec/utils/XSECSafeBuffer.cpp:500:	memcpy(buffer, cpy.buffer, bufferSize);
./xsec/utils/XSECSafeBuffer.cpp:527:		memcpy(&buffer[offset], inBuf, bytesRead);
./xsec/utils/XSECSafeBuffer.cpp:569:	strcpy((char *) buffer, t);
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:133:    memcpy((void *) &sa.sin_addr,
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:156:    strcpy(fBuffer, "GET ");
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:179:		sprintf(fBuffer+i, ":%d", portNumber);
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:319:        memcpy(toFill, fBufferPos, len);
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:130:    memcpy((void *) &sa.sin_addr,
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:156:    strcpy(fBuffer, "POST ");
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:180:		sprintf(fBuffer+i, ":%d", portNumber);
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:186:	sprintf(fBuffer+i, "%d", strlen(content));
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:376:	memcpy(responseBuffer, fBufferPos, lent);
./xsec/tools/cipher/cipher.cpp:402:					strcpy((char *) keyStr, argv[paramCount]);
./xsec/tools/cipher/cipher.cpp:643:				char *baseURI = (char*)malloc(strlen(path) + 8 + 1 + strlen(filename) + 1);
./xsec/tools/cipher/cipher.cpp:649:				strcpy(baseURI, "file:///");		
./xsec/tools/checksig/InteropResolver.cpp:379:							memcpy(&octxski[2], xski, xlen);
./xsec/tools/checksig/checksig.cpp:442:		char *baseURI = (char*)malloc(strlen(path) + 8 + 1 + strlen(filename) + 1);
./xsec/tools/checksig/checksig.cpp:448:		strcpy(baseURI, "file:///");		
./xsec/tools/templatesign/templatesign.cpp:511:        memcpy(buffer, (char *) toWrite, (int) count);
./xsec/tools/templatesign/templatesign.cpp:1173:	char *baseURI = (char*)malloc(strlen(path) + 8 + 1 + strlen(filename) + 1);
./xsec/tools/templatesign/templatesign.cpp:1179:	strcpy(baseURI, "file:///");		
./xsec/tools/txfmout/txfmout.cpp:202:	strcpy(buf, m_name);
./xsec/tools/txfmout/txfmout.cpp:207:		sprintf(numBuf, "%d", m_counter);
./xsec/tools/txfmout/txfmout.cpp:506:	char *baseURI = (char*)malloc(strlen(path) + 8 + 1 + strlen(filename) + 1);
./xsec/tools/txfmout/txfmout.cpp:512:	strcpy(baseURI, "file:///");
./xsec/tools/xtest/xtest.cpp:518:		memcpy(mbuf, formatTarget->getRawBuffer(), len);
./xsec/tools/xtest/xtest.cpp:1451:		memcpy(mbuf, formatTarget->getRawBuffer(), len);
./xsec/tools/threadTest/threadtest.cpp:179:	memcpy(buf, formatTarget->getRawBuffer(), len);
./xsec/enc/XSECCryptoUtils.cpp:83:	memcpy(inp, input, inputLen);
./xsec/enc/XSECCryptoUtils.cpp:351:		memcpy(&output[bytesDone], shaOutput, bytesToDo);
./xsec/enc/XSECCryptoUtils.cpp:434:	memcpy(r, &input[4], 20);
./xsec/enc/XSECCryptoUtils.cpp:435:	memcpy(s, &input[26], 20);
./xsec/enc/XSECCryptoX509.cpp:44:		memcpy(b1, buf, len);
./xsec/enc/XSECCryptoException.cpp:61:		strcpy(msg, inMsg);
./xsec/enc/XSECCryptoException.cpp:65:		strcpy(msg, XSECCryptoExceptionStrings[type]);
./xsec/enc/XSECCryptoException.cpp:79:	strcpy(msg, (char *) inMsg.rawBuffer());
./xsec/enc/XSECCryptoException.cpp:93:		strcpy(msg, toCopy.msg);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:92:                memcpy(mask + outlen, md, len - outlen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:140:	    memcpy(db + emlen - flen - digestlen, from, (unsigned int) flen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:144:	    dbmask = (unsigned char*) OPENSSL_malloc(emlen - digestlen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:197:	    db = (unsigned char*) OPENSSL_malloc(dblen + num);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:208:	    memcpy(padded_from + lzero, from, flen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:245:				    memcpy(to, db + i, mlen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:290:		memcpy(mp_oaepParams, params, paramsLen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:562:	memcpy(preEncryptBuf, oid, oidLen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:563:	memcpy(&preEncryptBuf[oidLen], hashBuf, hashLen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:635:		memcpy(e, inBuf, inLength);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:778:		memcpy(t, plainBuf, decryptSize);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:972:		memcpy(ret->mp_oaepParams, mp_oaepParams, m_oaepParamsLen);
./xsec/enc/OpenSSL/OpenSSLCryptoHash.cpp:148:	memcpy(hash, m_mdValue, retLen);
./xsec/enc/OpenSSL/OpenSSLCryptoHashHMAC.cpp:189:	memcpy(hash, m_mdValue, retLen);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:413:		memcpy(e, inBuf, inLength);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:457:		memcpy(plainBuf, m_lastBlock, m_bytesInLastBlock);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:460:		memcpy(m_lastBlock, &plainBuf[outl + m_bytesInLastBlock - m_blockSize], m_blockSize);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:507:		memcpy(plainBuf, m_lastBlock, outl);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:536:		memcpy(scrPlainBuf, m_lastBlock, m_bytesInLastBlock);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:575:		memcpy(plainBuf, scrPlainBuf, outl);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:854:		memcpy(m_lastBlock, usedIV, m_ivSize);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:858:        memcpy(m_lastBlock, usedIV, m_ivSize);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:895:		memcpy(cipherBuf, m_lastBlock, m_ivSize);
./xsec/enc/NSS/NSSCryptoKeyRSA.cpp:677:      memcpy(&buf[encryptSize - inLength], inBuf, inLength);
./xsec/enc/NSS/NSSCryptoKeyRSA.cpp:785:	memcpy(b64, b, bLen);
./xsec/enc/NSS/NSSCryptoKeyRSA.cpp:813:	memcpy(b64, b, bLen);
./xsec/enc/NSS/NSSCryptoProvider.cpp:351:	memcpy(rv->data, os, retLen);
./xsec/enc/NSS/NSSCryptoHash.cpp:155:	memcpy(hash, m_mdValue, retLen);
./xsec/enc/NSS/NSSCryptoKeyDSA.cpp:533:	memcpy(b64, b, bLen);
./xsec/enc/NSS/NSSCryptoKeyDSA.cpp:562:	memcpy(b64, b, bLen);
./xsec/enc/NSS/NSSCryptoKeyDSA.cpp:591:	memcpy(b64, b, bLen);
./xsec/enc/NSS/NSSCryptoKeyDSA.cpp:620:	memcpy(b64, b, bLen);
./xsec/enc/NSS/NSSCryptoSymmetricKey.cpp:524:		memcpy(m_lastBlock, usedIV, m_ivSize);
./xsec/enc/NSS/NSSCryptoSymmetricKey.cpp:553:		memcpy(cipherBuf, m_lastBlock, m_ivSize);
./xsec/enc/NSS/NSSCryptoHashHMAC.cpp:255:	memcpy(hash, m_mdValue, retLen);
./xsec/transformers/TXFMMD5.cpp:131:		memcpy((char *) toFill, &md_value[md_len - toOutput], toOutput);
./xsec/transformers/TXFMMD5.cpp:141:	memcpy((char *) toFill, &md_value[md_len - toOutput], maxToFill);
./xsec/transformers/TXFMSB.cpp:121:		memcpy((char *) toFill, &(sb.rawBuffer()[sbs - toOutput]), toOutput);
./xsec/transformers/TXFMSB.cpp:131:	memcpy((char *) toFill, &(sb.rawBuffer()[sbs - toOutput]), maxToFill);
./xsec/transformers/TXFMCipher.cpp:126:			memcpy(&toFill[ret], m_outputBuffer, fill);
./xsec/transformers/TXFMBase64.cpp:114:			memcpy(&toFill[ret], m_outputBuffer, fill);
./xsec/transformers/TXFMSHA1.cpp:160:		memcpy((char *) toFill, &md_value[md_len - toOutput], toOutput);
./xsec/transformers/TXFMSHA1.cpp:170:	memcpy((char *) toFill, &md_value[md_len - toOutput], maxToFill);
./xsec/canon/XSECCanon.cpp:90:		memcpy(&outBuffer[i], &m_buffer[m_bufferPoint], remaining);
./xsec/canon/XSECCanon.cpp:107:		memcpy (&outBuffer[i], &m_buffer[m_bufferPoint], remaining);
./xsec/canon/XSECCanon.cpp:114:	memcpy(&outBuffer[i], &m_buffer[m_bufferPoint], bytesToGo);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:245:			memcpy(aesBuf, buf, 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:247:			memcpy(&aesBuf[8], &buf[8 * i], 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:263:			memcpy(buf, aesOutBuf, 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:265:			memcpy(&buf[8 * i], &aesOutBuf[8], 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:289:	memcpy(buf, s_AES_IV, 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:322:			memcpy(aesBuf, buf, 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:324:			memcpy(&aesBuf[8], &buf[8 * i], 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:338:			memcpy(buf, aesOutBuf, 8);
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:342:			memcpy(&buf[8 * i], &aesOutBuf[8], 8);
./xsec/xenc/impl/XENCCipherImpl.cpp:723:    memcpy(rawKey, sb.rawBuffer(), keySize);
./xsec/samples/IOStreamOutputter.cpp:474:        memcpy(buffer, (char *) toWrite, (int) count);
./xsec/utils/XSECSafeBuffer.cpp:64:	unsigned char * newBuffer = new unsigned char[newBufferSize];
./xsec/utils/XSECSafeBuffer.cpp:107:	buffer = new unsigned char[initialSize];
./xsec/utils/XSECSafeBuffer.cpp:117:	buffer = new unsigned char[bufferSize];
./xsec/utils/XSECSafeBuffer.cpp:129:	buffer = new unsigned char[bufferSize];
./xsec/utils/XSECSafeBuffer.cpp:143:	buffer = new unsigned char [bufferSize];
./xsec/utils/XSECSafeBuffer.cpp:495:		buffer = new unsigned char [cpy.bufferSize];
./xsec/utils/XSECSafeBufferFormatter.cpp:43:	sbf = new sbFormatTarget();
./xsec/utils/XSECSafeBufferFormatter.cpp:47:	formatter = new XMLFormatter(outEncoding,
./xsec/utils/XSECSafeBufferFormatter.cpp:69:	sbf = new sbFormatTarget();
./xsec/utils/XSECSafeBufferFormatter.cpp:73:	formatter = new XMLFormatter(outEncoding,
./xsec/utils/unixutils/XSECURIResolverGenericUnix.cpp:212:            BinFileInputStream* retStrm = new BinFileInputStream(realPath);
./xsec/utils/unixutils/XSECURIResolverGenericUnix.cpp:259:	ret = new XSECURIResolverGenericUnix();
./xsec/utils/XSECPlatformUtils.cpp:88:    TXFMOutputFile* sink = new TXFMOutputFile(doc);
./xsec/utils/XSECTXFMInputSource.cpp:64:	ret = new XSECBinTXFMInputStream(mp_chain, m_deleteWhenDone);
./xsec/utils/XSECSOAPRequestorSimple.cpp:125:	MemBufFormatTarget *formatTarget = new MemBufFormatTarget;
./xsec/utils/XSECSOAPRequestorSimple.cpp:139:	MemBufFormatTarget *formatTarget = new MemBufFormatTarget;
./xsec/utils/XSECDOMUtils.cpp:737:    ptr = utf8Path = new XMLByte[len + 1];
./xsec/tools/c14n/c14n.cpp:123:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/c14n/c14n.cpp:184:	    canon = new XSECC14n20010315(theDOM, subtree);
./xsec/tools/c14n/c14n.cpp:186:        canon = new XSECC14n20010315(theDOM);
./xsec/tools/cipher/XencInteropResolver.cpp:447:				OpenSSLCryptoKeyRSA * k = new OpenSSLCryptoKeyRSA(pk);
./xsec/tools/cipher/XencInteropResolver.cpp:535:					OpenSSLCryptoKeyRSA * k = new OpenSSLCryptoKeyRSA(pk);
./xsec/tools/cipher/cipher.cpp:304:			NSSCryptoProvider * cp = new NSSCryptoProvider();
./xsec/tools/cipher/cipher.cpp:455:				kek = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/cipher/cipher.cpp:524:				kek = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/cipher/cipher.cpp:556:		formatTarget = new LocalFileFormatTarget(outfile);
./xsec/tools/cipher/cipher.cpp:559:		formatTarget = new StdOutFormatTarget();
./xsec/tools/cipher/cipher.cpp:566:		XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/cipher/cipher.cpp:732:				BinFileInputStream * is = new BinFileInputStream(filename, XMLPlatformUtils::fgMemoryManager);
./xsec/tools/cipher/cipher.cpp:734:				BinFileInputStream * is = new BinFileInputStream(filename);
./xsec/tools/siginf/siginf.cpp:421:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/checksig/AnonymousResolver.cpp:61:	ret = new AnonymousResolver();
./xsec/tools/checksig/AnonymousResolver.cpp:96:		URLS = new URLInputSource(XMLURL(MAKE_UNICODE_STRING(anonURI)));
./xsec/tools/checksig/AnonymousResolver.cpp:99:		URLS = new URLInputSource(XMLURL(XMLURL(mp_baseURI), MAKE_UNICODE_STRING(anonURI)));
./xsec/tools/checksig/InteropResolver.cpp:196:	char * name = new char[strlen(n)];
./xsec/tools/checksig/InteropResolver.cpp:197:	char * value = new char[strlen(n)];
./xsec/tools/checksig/InteropResolver.cpp:349:				unsigned char * xski = new unsigned char[clen];
./xsec/tools/checksig/InteropResolver.cpp:374:							unsigned char * octxski = new unsigned char[xlen + 2];
./xsec/tools/checksig/InteropResolver.cpp:549:		unsigned char * x509buf = new unsigned char[strlen(transb64cert)];
./xsec/tools/checksig/InteropResolver.cpp:577:		unsigned char * crlbuf = new unsigned char[strlen(transb64crl)];
./xsec/tools/checksig/checksig.cpp:339:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/templatesign/templatesign.cpp:735:				key = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/templatesign/templatesign.cpp:748:				key = new OpenSSLCryptoKeyEC(pkey);
./xsec/tools/templatesign/templatesign.cpp:756:				key = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/templatesign/templatesign.cpp:811:			certs[certCount++] = new OpenSSLCryptoX509(x);
./xsec/tools/templatesign/templatesign.cpp:824:			OpenSSLCryptoKeyHMAC * hmacKey = new OpenSSLCryptoKeyHMAC();
./xsec/tools/templatesign/templatesign.cpp:1096:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/templatesign/templatesign.cpp:1159:	XSECProvider * prov = new XSECProvider;
./xsec/tools/templatesign/templatesign.cpp:1166:	XSECURIResolverGenericUnix* theResolver = new XSECURIResolverGenericUnix();
./xsec/tools/templatesign/templatesign.cpp:1348:	DOMPrintFormatTarget* formatTarget = new DOMPrintFormatTarget();
./xsec/tools/templatesign/templatesign.cpp:1366:    gEncodingName = new XMLCh[lent + 1];
./xsec/tools/templatesign/templatesign.cpp:1373:	gFormatter = new XMLFormatter("UTF-8", 0, formatTarget,
./xsec/tools/templatesign/templatesign.cpp:1376:	gFormatter = new XMLFormatter("UTF-8", formatTarget,
./xsec/tools/xklient/xklient.cpp:214:	XMLFormatTarget *formatTarget = new StdOutFormatTarget();
./xsec/tools/xklient/xklient.cpp:290:	unsigned char * binbuf = new unsigned char[bytes + 1];
./xsec/tools/xklient/xklient.cpp:616:				key = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:636:				key = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:888:				key = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:908:				key = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:1239:				key = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:1259:				key = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:1334:				proofOfPossessionKey = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:1355:				proofOfPossessionKey = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:1632:				key = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:1652:				key = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:1987:				key = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:2007:				key = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:2082:				proofOfPossessionKey = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:2103:				proofOfPossessionKey = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:2381:				key = new OpenSSLCryptoKeyDSA(pkey);
./xsec/tools/xklient/xklient.cpp:2401:				key = new OpenSSLCryptoKeyRSA(pkey);
./xsec/tools/xklient/xklient.cpp:4421:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/txfmout/txfmout.cpp:201:	char * buf = new char[strlen(m_name) + 10];
./xsec/tools/txfmout/txfmout.cpp:430:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/xtest/xtest.cpp:359:		hmacKey = new NSSCryptoKeyHMAC();
./xsec/tools/xtest/xtest.cpp:365:		hmacKey = new OpenSSLCryptoKeyHMAC();
./xsec/tools/xtest/xtest.cpp:428:	XMLFormatTarget *formatTarget = new StdOutFormatTarget();
./xsec/tools/xtest/xtest.cpp:483:		MemBufFormatTarget *formatTarget = new MemBufFormatTarget();
./xsec/tools/xtest/xtest.cpp:517:		char * mbuf = new char [len + 1];
./xsec/tools/xtest/xtest.cpp:533:		MemBufInputSource* memIS = new MemBufInputSource ((const XMLByte*) mbuf, 
./xsec/tools/xtest/xtest.cpp:1047:			OpenSSLCryptoKeyRSA * rsaKey = new OpenSSLCryptoKeyRSA(pk);
./xsec/tools/xtest/xtest.cpp:1103:		rsaKey = new OpenSSLCryptoKeyRSA(pk);
./xsec/tools/xtest/xtest.cpp:1153:		rsaKey = new NSSCryptoKeyRSA(pubKey, prvKey);
./xsec/tools/xtest/xtest.cpp:1418:		MemBufFormatTarget *formatTarget = new MemBufFormatTarget();
./xsec/tools/xtest/xtest.cpp:1450:		char * mbuf = new char [len + 1];
./xsec/tools/xtest/xtest.cpp:1474:		MemBufInputSource* memIS = new MemBufInputSource ((const XMLByte*) mbuf, 
./xsec/tools/xtest/xtest.cpp:2034:			OpenSSLCryptoKeyRSA * k = new OpenSSLCryptoKeyRSA(pk);
./xsec/tools/xtest/xtest.cpp:2039:			k = new OpenSSLCryptoKeyRSA(pk);
./xsec/tools/xtest/xtest.cpp:2043:			k = new OpenSSLCryptoKeyRSA(pk);
./xsec/tools/xtest/xtest.cpp:2101:			NSSCryptoKeyRSA * rsaKey = new NSSCryptoKeyRSA(pubKey, prvKey);
./xsec/tools/xtest/xtest.cpp:2655:			cp = new NSSCryptoProvider();
./xsec/tools/threadTest/threadtest.cpp:109:	XMLFormatTarget *formatTarget = new StdOutFormatTarget();
./xsec/tools/threadTest/threadtest.cpp:148:	MemBufFormatTarget *formatTarget = new MemBufFormatTarget();
./xsec/tools/threadTest/threadtest.cpp:178:	char * buf = new char [len + 1];
./xsec/tools/threadTest/threadtest.cpp:283:		OpenSSLCryptoKeyHMAC * hmacKey = new OpenSSLCryptoKeyHMAC();
./xsec/tools/threadTest/threadtest.cpp:345:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/tools/threadTest/threadtest.cpp:368:		MemBufInputSource* memIS = new MemBufInputSource ((const XMLByte*) buf, 
./xsec/tools/threadTest/threadtest.cpp:397:		OpenSSLCryptoKeyHMAC *hmacKey = new OpenSSLCryptoKeyHMAC();
./xsec/tools/threadTest/threadtest.cpp:659:	g_provider = new XSECProvider;
./xsec/enc/XSECCryptoUtils.cpp:81:	unsigned char * inp = new unsigned char[inputLen + 1];
./xsec/enc/XSECCryptoUtils.cpp:88:	XMLCh* uoutput = new XMLCh[l + 1];
./xsec/enc/XSECCryptoException.cpp:60:		msg = new char[strlen(inMsg) + 1];
./xsec/enc/XSECCryptoException.cpp:64:		msg = new char[strlen(XSECCryptoExceptionStrings[type]) + 1];
./xsec/enc/XSECCryptoException.cpp:78:	msg = new char[strlen((char *) inMsg.rawBuffer()) + 1];
./xsec/enc/XSECCryptoException.cpp:92:		msg = new char[strlen(toCopy.msg) + 1];
./xsec/enc/OpenSSL/OpenSSLCryptoKeyDSA.cpp:175:	unsigned char* sigVal = new unsigned char[sigLen + 1];
./xsec/enc/OpenSSL/OpenSSLCryptoKeyDSA.cpp:280:	unsigned char* rawSigBuf = new unsigned char[(BN_num_bits(dsa_sig->r) + BN_num_bits(dsa_sig->s) + 7) / 8];
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:427:	unsigned char* sigVal = new unsigned char[sigLen + 1];
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:454:	decryptBuf = new unsigned char [RSA_size(mp_rsaKey)];
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:559:	preEncryptBuf = new unsigned char[preEncryptLen];
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:560:	encryptBuf = new unsigned char[RSA_size(mp_rsaKey)];
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:348:                    ret = new OpenSSLCryptoKeyRSA(pkey);
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:352:                    ret = new OpenSSLCryptoKeyDSA(pkey);
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:357:                    ret = new OpenSSLCryptoKeyEC(pkey);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyEC.cpp:162:	unsigned char* sigVal = new unsigned char[sigLen + 1];
./xsec/enc/OpenSSL/OpenSSLCryptoKeyEC.cpp:262:	unsigned char* rawSigBuf = new unsigned char[keyLen * 2];
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:248:		ret = new OpenSSLCryptoKeyDSA(pkey);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:253:		ret = new OpenSSLCryptoKeyRSA(pkey);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:259:		ret = new OpenSSLCryptoKeyEC(pkey);
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:524:	scrPlainBuf = new unsigned char[3 * m_blockSize];
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:526:	cipherBuf = new unsigned char[m_blockSize];
./xsec/transformers/TXFMXSL.cpp:185:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/transformers/TXFMXSL.cpp:198:	MemBufInputSource* memIS = new MemBufInputSource ((const XMLByte*) txoh.buffer.rawBuffer(), txoh.offset, "XSECMem");
./xsec/canon/XSECC14n20010315.cpp:235:	nsBuf = new char [strlen(xmlnsList) + 1];
./xsec/canon/XSECC14n20010315.cpp:1187:							toIns = new XSECNodeListElt;
./xsec/canon/XSECC14n20010315.cpp:1258:						toIns = new XSECNodeListElt;
./xsec/canon/XSECC14n20010315.cpp:1337:					toIns = new XSECNodeListElt;
./xsec/canon/XSECC14n20010315.cpp:1471:				toIns = new XSECNodeListElt;
./xsec/dsig/DSIGXPathHere.cpp:93:		ret = new DSIGXPathHere(*this);
./xsec/dsig/DSIGSignature.cpp:182:	ret = new XSECBinTXFMInputStream(chain);
./xsec/dsig/DSIGReference.cpp:526:			XMLCh* tmp = new XMLCh[len + 1];
./xsec/dsig/DSIGReference.cpp:887:	ret = new XSECBinTXFMInputStream(txfmChain);	// Probs with MSVC++ mean no XSECnew
./xsec/dsig/DSIGTransformXSL.cpp:65:    MemBufFormatTarget* target = new MemBufFormatTarget;
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:761:			oaepParamsBuf = new unsigned char[bufLen];
./xsec/xenc/impl/XENCCipherImpl.cpp:654:    ret = new XSECBinTXFMInputStream(c); // Probs with MSVC++ mean no XSECnew
./xsec/framework/XSECProvider.cpp:47:	mp_URIResolver = new XSECURIResolverXerces();
./xsec/framework/XSECURIResolverXerces.cpp:85:		URLS = new URLInputSource(XMLURL(uri));
./xsec/framework/XSECURIResolverXerces.cpp:88:		URLS = new URLInputSource(XMLURL(XMLURL(mp_baseURI), uri));
./xsec/framework/XSECURIResolverXerces.cpp:112:	ret = new XSECURIResolverXerces();
./xsec/framework/XSECEnv.cpp:378:	iat = new IdAttributeType;
./xsec/framework/XSECEnv.cpp:427:	iat = new IdAttributeType;
./xsec/samples/simpleHMAC.cpp:145:		OpenSSLCryptoKeyHMAC * hmacKey = new OpenSSLCryptoKeyHMAC();
./xsec/samples/IOStreamOutputter.cpp:437:    XMLCh*  buf = new XMLCh[lent + 1];
./xsec/samples/IOStreamOutputter.cpp:894:    XMLCh*  buf = new XMLCh[lent + 1];
./xsec/samples/IOStreamOutputter.cpp:908:	DOMPrintFormatTarget* formatTarget = new DOMPrintFormatTarget();
./xsec/samples/IOStreamOutputter.cpp:927:    gEncodingName = new XMLCh[lent + 1];
./xsec/samples/IOStreamOutputter.cpp:934:	gFormatter = new XMLFormatter("UTF-8", 0, formatTarget,
./xsec/samples/IOStreamOutputter.cpp:937:	gFormatter = new XMLFormatter("UTF-8", formatTarget,
./xsec/samples/simpleEncrypt.cpp:185:		OpenSSLCryptoX509 * x509 = new OpenSSLCryptoX509();
./xsec/samples/simpleValidate.cpp:132:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/samples/simpleValidate.cpp:139:	MemBufInputSource* memIS = new MemBufInputSource ((const XMLByte*) docToValidate, (unsigned int) strlen(docToValidate), "XSECMem");
./xsec/samples/simpleValidate.cpp:181:		OpenSSLCryptoX509 * x509 = new OpenSSLCryptoX509();
./xsec/samples/simpleDecrypt.cpp:125:	XercesDOMParser * parser = new XercesDOMParser;
./xsec/samples/simpleDecrypt.cpp:132:	MemBufInputSource* memIS = new MemBufInputSource ((const XMLByte*) letter, (unsigned int) strlen(letter), "XSECMem");
./xsec/samples/simpleDecrypt.cpp:161:		OpenSSLCryptoKeyRSA * k = new OpenSSLCryptoKeyRSA(pk);

== files() ==
./xsec/tools/xklient/xklient.cpp:259:	FILE * f = fopen(infile, "r");
./xsec/tools/txfmout/txfmout.cpp:195:	if (m_out.is_open() != 0) {
./xsec/tools/txfmout/txfmout.cpp:214:	m_out.open(buf, ios::out | ios::binary);
./xsec/tools/txfmout/txfmout.cpp:223:	if (m_cout == false && m_newFilePerOpen == true && m_out.is_open() != 0) {
./xsec/tools/txfmout/txfmout.cpp:241:	if (m_out.is_open() != 0)
./xsec/tools/txfmout/txfmout.cpp:251:	if (m_cout || m_out.is_open() == false) {
./xsec/transformers/TXFMOutputFile.cpp:39:    if (f.is_open())
./xsec/transformers/TXFMOutputFile.cpp:67:    f.open(fileName, ios::binary|ios::out|ios::app);
./xsec/transformers/TXFMOutputFile.cpp:69:	if (f.is_open()) {
./xsec/transformers/TXFMOutputFile.cpp:110:	if (f.is_open())
./xsec/transformers/TXFMSHA1.cpp:134:		FILE * f = fopen("debug.out","a+b");

== logging() ==
./xsec/utils/XSECSOAPRequestorSimple.cpp:316:		XSECAutoPtrChar msg(sb.rawXMLChBuffer());
./xsec/tools/xklient/xklient.cpp:349:	virtual void 	error (const SAXParseException &exc);
./xsec/tools/xklient/xklient.cpp:382:void xkmsErrorHandler::error (const SAXParseException &exc) {
./xsec/tools/xklient/xklient.cpp:3827:		Janitor <XKMSMessageAbstractType> j_msg(msg);
./xsec/xkms/impl/XKMSStatusRequestImpl.cpp:48:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSStatusRequestImpl.cpp:56:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSReissueResultImpl.cpp:49:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSReissueResultImpl.cpp:57:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSRegisterResultImpl.cpp:57:m_msg(m_result.m_msg),
./xsec/xkms/impl/XKMSRegisterResultImpl.cpp:67:m_msg(m_result.m_msg),
./xsec/xkms/impl/XKMSValidateRequestImpl.cpp:48:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSValidateRequestImpl.cpp:58:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSLocateResultImpl.cpp:49:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSLocateResultImpl.cpp:57:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSValidateResultImpl.cpp:49:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSValidateResultImpl.cpp:57:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSRegisterRequestImpl.cpp:54:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSRegisterRequestImpl.cpp:62:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSLocateRequestImpl.cpp:48:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSLocateRequestImpl.cpp:58:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSRevokeResultImpl.cpp:49:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSRevokeResultImpl.cpp:57:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSRequestAbstractTypeImpl.cpp:51:m_msg(env)
./xsec/xkms/impl/XKMSRequestAbstractTypeImpl.cpp:60:m_msg(env, node)
./xsec/xkms/impl/XKMSCompoundRequestImpl.cpp:54:m_msg(m_request.m_msg) {
./xsec/xkms/impl/XKMSCompoundRequestImpl.cpp:62:m_msg(m_request.m_msg) {
./xsec/xkms/impl/XKMSRecoverRequestImpl.cpp:55:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSRecoverRequestImpl.cpp:62:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSPendingRequestImpl.cpp:48:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSPendingRequestImpl.cpp:56:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSResultImpl.cpp:48:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSResultImpl.cpp:56:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSReissueRequestImpl.cpp:54:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSReissueRequestImpl.cpp:62:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSStatusResultImpl.cpp:49:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSStatusResultImpl.cpp:61:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSRevokeRequestImpl.cpp:55:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSRevokeRequestImpl.cpp:63:m_msg(m_request.m_msg),
./xsec/xkms/impl/XKMSCompoundResultImpl.cpp:56:m_msg(m_result.m_msg) {
./xsec/xkms/impl/XKMSCompoundResultImpl.cpp:64:m_msg(m_result.m_msg){
./xsec/xkms/impl/XKMSRecoverResultImpl.cpp:57:m_msg(m_result.m_msg),
./xsec/xkms/impl/XKMSRecoverResultImpl.cpp:67:m_msg(m_result.m_msg),
./xsec/xkms/impl/XKMSResultTypeImpl.cpp:47:m_msg(env),
./xsec/xkms/impl/XKMSResultTypeImpl.cpp:58:m_msg(env, node),

== environment() ==
./xsec/utils/XSECPlatformUtils.cpp:90:        sink->setFile(getenv("XSEC_DEBUG_FILE"));
./xsec/utils/XSECPlatformUtils.cpp:127:	const char* sink = getenv("XSEC_DEBUG_FILE");

== privileged() ==

== networking() ==
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:126:                              sizeof(unsigned long), AF_INET)) == NULL)
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:138:    int s = socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:123:                              sizeof(unsigned long), AF_INET)) == NULL)
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:135:    int s = socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:138:    int s = socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:146:    if (connect(s, (struct sockaddr *) &sa, sizeof(sa)) < 0)
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:187:    if ((aLent = write(s, (void *) fBuffer, lent)) != lent)
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:196:    aLent = read(s, (void *)fBuffer, sizeof(fBuffer)-1);
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:327:        len = read(fSocket, (void *) toFill, maxToRead);
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:135:    int s = socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:143:    if (connect(s, (struct sockaddr *) &sa, sizeof(sa)) < 0)
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:200:    if ((aLent = write(s, (void *) fBuffer, lent)) != lent)
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:209:    aLent = read(s, (void *)fBuffer, sizeof(fBuffer)-1);
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:245:				aLent = read(s, 
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:357:		aLent = read(s, (void *)fBuffer, sizeof(fBuffer)-1);
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:378:	    aLent = read(s, &responseBuffer[lent], responseLength - lent);
./xsec/utils/XSECSOAPRequestorSimple.cpp:195:        theSerializer->write(doc, theOutput);
./xsec/utils/XSECSOAPRequestorSimple.cpp:204:        theSerializer->write(request, theOutput);
./xsec/tools/cipher/cipher.cpp:785:            theSerializer->write(doc, theOutput);
./xsec/tools/templatesign/templatesign.cpp:224:        cout.write((char *) toWrite, (int) count);
./xsec/tools/xklient/xklient.cpp:234:    theSerializer->write(doc, theOutput);
./xsec/tools/xklient/xklient.cpp:266:	int i = (int) fread(buf, 1, 1024, f);
./xsec/tools/xklient/xklient.cpp:271:		i = (int) fread(buf, 1, 1024, f);
./xsec/tools/txfmout/txfmout.cpp:253:		cout.write((const char *) buf,sz);
./xsec/tools/txfmout/txfmout.cpp:258:		m_out.write((const char *) buf, sz);
./xsec/tools/xtest/xtest.cpp:459:    theSerializer->write(doc, theOutput);
./xsec/tools/xtest/xtest.cpp:500:        theSerializer->write(inDoc,theOutput);
./xsec/tools/xtest/xtest.cpp:1436:        theSerializer->write(doc,theOutput);
./xsec/tools/threadTest/threadtest.cpp:127:    theSerializer->write(doc, theOutput);
./xsec/tools/threadTest/threadtest.cpp:165:    theSerializer->write(doc, theOutput);
./xsec/tools/threadTest/threadtest.cpp:553:		const HANDLE	hThread = CreateThread(
./xsec/tools/threadTest/threadtest.cpp:570:		const HANDLE	hThread = CreateThread(
./xsec/tools/threadTest/threadtest.cpp:586:	const HANDLE	hThread = CreateThread(
./xsec/tools/threadTest/threadtest.cpp:601:	const HANDLE h2Thread = CreateThread(
./xsec/enc/OpenSSL/OpenSSLCryptoKeyDSA.cpp:313:	BIO_write(b64, rawSigBuf, rawLen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyDSA.cpp:316:	unsigned int sigValLen = BIO_read(bmem, base64SignatureBuf, base64SignatureBufLen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:592:	BIO_write(b64, encryptBuf, encryptLen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:595:	unsigned int sigValLen = BIO_read(bmem, base64SignatureBuf, base64SignatureBufLen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyEC.cpp:286:	BIO_write(b64, rawSigBuf, keyLen * 2);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyEC.cpp:289:	unsigned int sigValLen = BIO_read(bmem, base64SignatureBuf, base64SignatureBufLen);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:89:	while ((l = BIO_read(bmem, buf, 1023)) > 0) {
./xsec/transformers/TXFMOutputFile.cpp:40:        f.write("\n----- END -----\n", 17);
./xsec/transformers/TXFMOutputFile.cpp:70:        f.write("\n----- BEGIN -----\n", 19);
./xsec/transformers/TXFMOutputFile.cpp:111:		f.write((char *) toFill, sz);
./xsec/transformers/TXFMSHA1.cpp:135:		fwrite(buffer, size, 1, f);
./xsec/dsig/DSIGTransformXSL.cpp:84:        theSerializer->write(node, theOutput);
./xsec/samples/IOStreamOutputter.cpp:156:        cout.write((char *) toWrite, count);
./xsec/samples/IOStreamOutputter.cpp:613:        cout.write((char *) toWrite, (int) count);

== http:// ==
./xsec/utils/XSECBinTXFMInputStream.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECSafeBuffer.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECSafeBufferFormatter.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/unixutils/XSECURIResolverGenericUnix.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/unixutils/XSECBinHTTPURIInputStream.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/unixutils/XSECSOAPRequestorSimpleUnix.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECXPathNodeList.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECPlatformUtils.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECTXFMInputSource.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECSOAPRequestorSimple.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECNameSpaceExpander.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/utils/XSECDOMUtils.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/c14n/c14n.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/cipher/XencInteropResolver.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/cipher/cipher.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/siginf/siginf.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/checksig/AnonymousResolver.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/checksig/InteropResolver.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/checksig/checksig.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/templatesign/templatesign.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/xklient/xklient.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/xklient/xklient.cpp:4340:	if (strEquals(systemId, "http://www.w3.org/2001/XMLSchema")) { 	
./xsec/tools/xklient/xklient.cpp:4440:		parser->setExternalSchemaLocation("http://www.w3.org/2002/03/xkms# http://www.w3.org/TR/xkms2/Schemas/xkms.xsd");
./xsec/tools/txfmout/txfmout.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/xtest/xtest.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/tools/xtest/xtest.cpp:401:		MAKE_UNICODE_STRING("xmlns:foo"), MAKE_UNICODE_STRING("http://www.foo.org"));
./xsec/tools/xtest/xtest.cpp:1303:				"xmlns:dsig=http://www.w3.org/2000/09/xmldsig#"); */
./xsec/tools/xtest/xtest.cpp:1308:		x->setNamespace("dsig", "http://www.w3.org/2000/09/xmldsig#");
./xsec/tools/threadTest/threadtest.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/XSECCryptoUtils.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/XSECCryptoUtils.cpp:104:			// RFC 3454 - see http://www.ietf.org/rfc/rfc3454.txt
./xsec/enc/XSECCryptoX509.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/XSCrypt/XSCryptCryptoBase64.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/XSECCryptoProvider.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/XSECCryptoException.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/XSECKeyInfoResolverDefault.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/XSECCryptoBase64.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoKeyDSA.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoBase64.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoKeyEC.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoKeyHMAC.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoHash.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoHashHMAC.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoX509.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoKeyHMAC.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoKeyRSA.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoKeyRSA.cpp:570:        //do the padding (http://www.w3.org/TR/xmlenc-core/#rsa-1_5)
./xsec/enc/NSS/NSSCryptoKeyRSA.cpp:646:    // do the padding (http://www.w3.org/TR/xmlenc-core/#rsa-1_5)
./xsec/enc/NSS/NSSCryptoProvider.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoHash.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoKeyDSA.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoSymmetricKey.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/enc/NSS/NSSCryptoHashHMAC.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMMD5.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMC14n.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMParser.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMChain.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMConcatChains.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMDocObject.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMSB.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMCipher.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMXSL.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMBase64.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMXPath.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMXPath.cpp:534:	// Set the xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"
./xsec/transformers/TXFMOutputFile.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMBase.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMSHA1.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMXPathFilter.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMEnvelope.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/transformers/TXFMURL.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/canon/XSECXMLNSStack.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/canon/XSECCanon.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/canon/XSECC14n20010315.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/canon/XSECC14n20010315.cpp:477:	theXercesNode->setAttribute(c_wstr(XalanDOMString("xmlns:ietf")), c_wstr(XalanDOMString("http://www.ietf.org")));
./xsec/canon/XSECC14n20010315.cpp:760:    // BUGFIX: we need to skip xmlns:xml if the value is http://www.w3.org/XML/1998/namespace
./xsec/canon/XSECC14n20010315.cpp:761:    if (strEquals(a->getLocalName(), "xml") && strEquals(a->getNodeValue(), "http://www.w3.org/XML/1998/namespace"))
./xsec/dsig/DSIGTransformXPathFilter.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoDEREncoded.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGTransformBase64.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGXPathHere.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGConstants.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoMgmtData.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGObject.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGReferenceList.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoName.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGXPathFilterExpr.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGSignature.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoExt.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGTransform.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoX509.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoPGPData.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoList.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGReference.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGAlgorithmHandlerDefault.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGTransformXSL.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoSPKIData.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGTransformList.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGTransformXPath.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGSignedInfo.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGKeyInfoValue.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGTransformC14n.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/dsig/DSIGTransformEnvelope.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCEncryptedKeyImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCCipherValueImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCEncryptedDataImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCCipherDataImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCEncryptedTypeImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCCipherReferenceImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCEncryptionMethodImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCAlgorithmHandlerDefault.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xenc/impl/XENCCipherImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSStatusRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSKeyBindingAbstractTypeImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSAuthenticationImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSReissueResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSReissueKeyBindingImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRegisterResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSValidityIntervalImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSValidateRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSKeyBindingImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSLocateResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSValidateResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRecoverKeyBindingImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRegisterRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSLocateRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSQueryKeyBindingImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSStatusImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRevokeResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRequestAbstractTypeImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSCompoundRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSResponseMechanismImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSUseKeyWithImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSUnverifiedKeyBindingImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSNotBoundAuthentication.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRecoverRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSPendingRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSReissueRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSStatusResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSMessageAbstractTypeImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRevokeRequestImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSMessageFactoryImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRevokeKeyBindingImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSCompoundResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRecoverResultImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRSAKeyPairImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSResultTypeImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSPrototypeKeyBindingImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/impl/XKMSRespondWithImpl.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/xkms/XKMSConstants.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/framework/XSECException.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/framework/XSECProvider.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/framework/XSECError.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/framework/XSECAlgorithmMapper.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/framework/XSECURIResolverXerces.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/framework/XSECEnv.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/samples/simpleHMAC.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/samples/IOStreamOutputter.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/samples/simpleEncrypt.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/samples/simpleValidate.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/samples/simpleValidate.cpp:68:<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n\
./xsec/samples/simpleValidate.cpp:70:<ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n\
./xsec/samples/simpleValidate.cpp:71:<ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"/>\n\
./xsec/samples/simpleValidate.cpp:74:<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n\
./xsec/samples/simpleValidate.cpp:75:<ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\"/>\n\
./xsec/samples/simpleValidate.cpp:77:<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n\
./xsec/samples/simpleDecrypt.cpp:10: * http://www.apache.org/licenses/LICENSE-2.0
./xsec/samples/simpleDecrypt.cpp:65:<xenc:EncryptedData Type=\"http://www.w3.org/2001/04/xmlenc#Element\" xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\">\n\
./xsec/samples/simpleDecrypt.cpp:66:<xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#tripledes-cbc\"/>\n\
./xsec/samples/simpleDecrypt.cpp:67:<ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n\
./xsec/samples/simpleDecrypt.cpp:68:<xenc:EncryptedKey xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\">\n\
./xsec/samples/simpleDecrypt.cpp:69:<xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#rsa-1_5\"/>\n\

== encryption ==
./xsec/tools/cipher/cipher.cpp:499:				x = PEM_read_bio_X509_AUX(bioX509,NULL,NULL,NULL);
./xsec/tools/cipher/cipher.cpp:518:				pkey = X509_get_pubkey(x);
./xsec/tools/cipher/cipher.cpp:530:				X509_free(x);
./xsec/tools/checksig/InteropResolver.cpp:176:	X509 * x509 = d2i_X509_bio(bioCert, NULL);
./xsec/tools/checksig/InteropResolver.cpp:184:X509_NAME * X509_NAME_create_from_txt(const char * n) {
./xsec/tools/checksig/InteropResolver.cpp:193:	X509_NAME_ENTRY * entries[10];
./xsec/tools/checksig/InteropResolver.cpp:251:		X509_NAME_ENTRY * xne;
./xsec/tools/checksig/InteropResolver.cpp:253:		xne = X509_NAME_ENTRY_create_by_txt(NULL, name, MBSTRING_ASC, (unsigned char *) value, -1);
./xsec/tools/checksig/InteropResolver.cpp:272:	X509_NAME *ret = NULL;
./xsec/tools/checksig/InteropResolver.cpp:278:		ret = X509_NAME_new();
./xsec/tools/checksig/InteropResolver.cpp:281:			if (!X509_NAME_add_entry(ret, entries[i], -1, 0)) {
./xsec/tools/checksig/InteropResolver.cpp:282:				X509_NAME_free(ret);
./xsec/tools/checksig/InteropResolver.cpp:292:		X509_NAME_ENTRY_free(entries[i]);
./xsec/tools/checksig/InteropResolver.cpp:327:					OPENSSL_free(xserial);
./xsec/tools/checksig/InteropResolver.cpp:334:				OPENSSL_free(xserial);
./xsec/tools/checksig/InteropResolver.cpp:363:					STACK_OF(X509_EXTENSION) *exts;
./xsec/tools/checksig/InteropResolver.cpp:369:						X509_EXTENSION * ext;
./xsec/tools/checksig/InteropResolver.cpp:381:							ext = sk_X509_EXTENSION_value(exts,extn);
./xsec/tools/checksig/InteropResolver.cpp:405:				X509_NAME * x509name = X509_get_subject_name(x);
./xsec/tools/checksig/InteropResolver.cpp:406:				X509_NAME * snname = X509_NAME_create_from_txt(csn);
./xsec/tools/checksig/InteropResolver.cpp:411:					if (!X509_NAME_cmp(x509name, snname)) {
./xsec/tools/checksig/InteropResolver.cpp:412:						X509_NAME_free(snname);
./xsec/tools/checksig/InteropResolver.cpp:416:					X509_NAME_free(snname);
./xsec/tools/checksig/InteropResolver.cpp:454:	X509 * x509 = d2i_X509_bio(bioCert, NULL);
./xsec/tools/checksig/InteropResolver.cpp:458:	X509_free(x509);
./xsec/tools/checksig/InteropResolver.cpp:562:#if defined(XSEC_OPENSSL_D2IX509_CONST_BUFFER)
./xsec/tools/checksig/InteropResolver.cpp:582:		X509_CRL * c;
./xsec/tools/checksig/InteropResolver.cpp:590:#if defined(XSEC_OPENSSL_D2IX509_CONST_BUFFER)
./xsec/tools/checksig/InteropResolver.cpp:591:			c =  d2i_X509_CRL(NULL, (const unsigned char **) (&crlbuf), crlbufLen);
./xsec/tools/checksig/InteropResolver.cpp:593:	c =  d2i_X509_CRL(NULL, &crlbuf, crlbufLen);
./xsec/tools/checksig/InteropResolver.cpp:605:        X509_REVOKED rtmp;
./xsec/tools/checksig/InteropResolver.cpp:609:		rtmp.serialNumber = X509_get_serialNumber(x);
./xsec/tools/checksig/InteropResolver.cpp:610:        idx = sk_X509_REVOKED_find(c->crl->revoked, &rtmp);
./xsec/tools/checksig/InteropResolver.cpp:621:		X509_free(x);
./xsec/tools/checksig/InteropResolver.cpp:622:		X509_CRL_free(c);
./xsec/tools/checksig/InteropResolver.cpp:638:				X509_free(x);
./xsec/tools/checksig/InteropResolver.cpp:644:		X509_free(x);
./xsec/tools/templatesign/templatesign.cpp:551:#   if defined(XSEC_OPENSSL_HAVE_EC)
./xsec/tools/templatesign/templatesign.cpp:674:#   if defined(XSEC_OPENSSL_HAVE_EC)
./xsec/tools/templatesign/templatesign.cpp:737:#   if defined(XSEC_OPENSSL_HAVE_EC)
./xsec/tools/templatesign/templatesign.cpp:799:			x = PEM_read_bio_X509_AUX(bioX509,NULL,NULL,NULL);
./xsec/tools/templatesign/templatesign.cpp:812:			X509_free(x);
./xsec/tools/templatesign/templatesign.cpp:1015:			#define MY_ENCODING_TYPE  (PKCS_7_ASN_ENCODING | X509_ASN_ENCODING)
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:57:#ifndef XSEC_OPENSSL_HAVE_MGF1
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:144:	    dbmask = (unsigned char*) OPENSSL_malloc(emlen - digestlen);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:161:	    OPENSSL_free(dbmask);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:197:	    db = (unsigned char*) OPENSSL_malloc(dblen + num);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:248:	    OPENSSL_free(db);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:255:	    if (db != NULL) OPENSSL_free(db);
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:650:#if defined(XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:725:#if defined(XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:815:#if defined(XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoKeyRSA.cpp:899://#if defined(XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:62:	OpenSSL_add_all_algorithms();		// Initialise Openssl
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:66:#ifdef XSEC_OPENSSL_HAVE_EC
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:150:#if defined(XSEC_OPENSSL_HAVE_CRYPTO_CLEANUP_ALL_EX_DATA)
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:154:	X509_TRUST_cleanup();
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:158:#ifdef XSEC_OPENSSL_HAVE_EC
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:287:#ifdef XSEC_OPENSSL_HAVE_EC
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:355:#if defined(XSEC_OPENSSL_HAVE_EC)
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:409:#if !defined (XSEC_OPENSSL_HAVE_AES)
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:436:#if defined(XSEC_OPENSSL_HAVE_SHA2) && !defined(OPENSSL_NO_SHA256)
./xsec/enc/OpenSSL/OpenSSLCryptoProvider.cpp:444:#if defined(XSEC_OPENSSL_HAVE_SHA2) && !defined(OPENSSL_NO_SHA512)
./xsec/enc/OpenSSL/OpenSSLCryptoKeyEC.cpp:31:#if defined (XSEC_HAVE_OPENSSL) && defined (XSEC_OPENSSL_HAVE_EC)
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:60:		X509_free(mp_X509);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:68:	mp_X509 = X509_dup(x);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:80:	i2d_X509_bio(b64, x);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:105:		X509_free(mp_X509);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:149:#if defined(XSEC_OPENSSL_D2IX509_CONST_BUFFER)
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:185:	pkey = X509_get_pubkey(mp_X509);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:206:#if defined(XSEC_OPENSSL_HAVE_EC)
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:237:	pkey = X509_get_pubkey(mp_X509);
./xsec/enc/OpenSSL/OpenSSLCryptoX509.cpp:256:#if defined(XSEC_OPENSSL_HAVE_EC)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:151:#if defined(XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:159:#if defined(XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:175:#if defined (XSEC_OPENSSL_HAVE_AES)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:190:#if defined (XSEC_OPENSSL_HAVE_GCM)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:242:#if defined (XSEC_OPENSSL_HAVE_GCM)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:295:#if defined (XSEC_OPENSSL_HAVE_GCM)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:343:#endif /* XSEC_OPENSSL_HAVE_AES */
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:373:#if defined (XSEC_OPENSSL_CANSET_PADDING)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:441:#if defined (XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:477:#if defined (XSEC_OPENSSL_CANSET_PADDING)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:643:#if defined (XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:650:#if defined (XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:665:#if defined (XSEC_OPENSSL_HAVE_AES)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:694:#ifdef XSEC_OPENSSL_HAVE_GCM
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:745:#ifdef XSEC_OPENSSL_HAVE_GCM
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:799:#ifdef XSEC_OPENSSL_HAVE_GCM
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:841:#endif /* XSEC_OPENSSL_HAVE_AES */
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:864:#if defined (XSEC_OPENSSL_CANSET_PADDING)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:910:#if defined (XSEC_OPENSSL_CONST_BUFFERS)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:944:#if !defined (XSEC_OPENSSL_CANSET_PADDING)
./xsec/enc/OpenSSL/OpenSSLCryptoSymmetricKey.cpp:964:#ifdef XSEC_OPENSSL_HAVE_GCM

== sql() ==
./xsec/transformers/TXFMXPath.cpp:463:		XObjectPtr xObj = xp->execute(contextNode, pr, xpec);
./xsec/transformers/TXFMXPathFilter.cpp:295:		XObjectPtr xObj = xp->execute(contextNode, pr, xpec);
./xsec/dsig/DSIGXPathHere.cpp:54:XObjectPtr DSIGXPathHere::execute(

== tmp() ==
./xsec/canon/XSECC14n20010315.cpp:544:		//tmp->element = theBridgeNavigator.mapNode(theResult.item(i));
./xsec/dsig/DSIGReference.cpp:621:				//tmp.sbStrcpyIn("Unknown attribute in <Reference> Element : ");
./xsec/dsig/DSIGReference.cpp:622:				//tmp.sbStrcatIn(error);

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./xsec/enc/XSECCryptoUtils.cpp:76:	// TODO - Fix this - it can be an interoperability issue as pass phrases from
./xsec/canon/XSECXMLNSStack.cpp:128:			// TODO - Fix this, it is naieve and slow
./xsec/xkms/impl/XKMSStatusImpl.cpp:126:	// TODO - CHECK the qualifier.

== unsafe input mechanisms ==

