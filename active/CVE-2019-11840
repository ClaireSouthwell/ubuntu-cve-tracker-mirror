Candidate: CVE-2019-11840
PublicDate: 2019-05-09 16:29:00 UTC
References:
 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11840
 https://go.googlesource.com/crypto/+/b7391e95e576cacdcdd422573063bc057239113d
 https://groups.google.com/forum/#!msg/golang-announce/tjyNcJxb2vQ/n0NRBziSCAAJ
Description:
 An issue was discovered in supplementary Go cryptography libraries, aka
 golang-googlecode-go-crypto, before 2019-03-20. A flaw was found in the
 amd64 implementation of golang.org/x/crypto/salsa20 and
 golang.org/x/crypto/salsa20/salsa. If more than 256 GiB of keystream is
 generated, or if the counter otherwise grows greater than 32 bits, the
 amd64 implementation will first generate incorrect output, and then cycle
 back to previously generated keystream. Repeated keystream bytes can lead
 to loss of confidentiality in encryption applications, or to predictability
 in CSPRNG applications.
Ubuntu-Description:
Notes:
 jdstrand> snapd contains an embedded copy of golang-go.crypto with the
  affected code
 jdstrand> snapd doesn't import/use the salsa code directly, but does vendor
  golang-gopkg-macaroon.v1, which imports golang.org/x/crypto/nacl/secretbox
  which does import salsa and contains the affected salsa2020XORKeyStream.
  snapd uses secretbox.Open() and secretbox.Seal(), both of which use
  salsa.XORKeyStream() (which wraps salsa2020XORKeyStream) via the internal
  decrypt() and encrypt() functions, respectively. In macaroon.v1, encrypt() is
  only used via AddThirdPartyCaveat() and decrypt() via Verify().
  .
  overlord/auth/auth.go in snapd uses Verify() in CheckMacaroon(),
  daemon/api.go uses CheckMacaroon() in UserFromRequest(), which is called by
  ServeHTTP(), the service used to process snap commands from the local system
  to the local snapd. This CVE does not affect decrypt() operations.
  .
  AddThirdPartyCaveat() is only used in unit tests, but not in the binaries of
  snapd builds.
  .
  For snapd, ignoring since only encryption operations (ie, secretbox.Seal())
  are affected with regard to loss of confidentiality/predictability and this
  function is only ever (ultimately) called via the snapd unit tests.
 jdstrand> lxd contains an embedded copy of golang-go.crypto, but does not
  import golang.org/x/crypto/nacl/secretbox or salsa. lxd in cosmic and later
  does not contain the affected code.
Bugs:
 https://bugzilla.redhat.com/show_bug.cgi?id=1691529
 https://github.com/golang/go/issues/30965
Priority: medium
Discovered-by:
Assigned-to:

Patches_golang-go.crypto:
 upstream: https://github.com/golang/crypto/commit/b7391e95e576cacdcdd422573063bc057239113d
upstream_golang-go.crypto: not-affected
precise/esm_golang-go.crypto: DNE
trusty/esm_golang-go.crypto: DNE
xenial_golang-go.crypto: needed
bionic_golang-go.crypto: needed
cosmic_golang-go.crypto: ignored (reached end-of-life)
disco_golang-go.crypto: needed
eoan_golang-go.crypto: needed
devel_golang-go.crypto: needed

Priority_snapd: negligible
Patches_snapd:
upstream_snapd: needed
precise/esm_snapd: DNE
trusty/esm_snapd: DNE
xenial_snapd: ignored
bionic_snapd: ignored
cosmic_snapd: ignored
disco_snapd: ignored
eoan_snapd: ignored
devel_snapd: ignored

Priority_lxd: negligible
Patches_lxd:
upstream_lxd: needed
precise/esm_lxd: DNE
trusty/esm_lxd: DNE
xenial_lxd: not-affected (code-not-compiled)
bionic_lxd: not-affected (code-not-compiled)
cosmic_lxd: not-affected (code-not-present)
disco_lxd: not-affected (code-not-present)
eoan_lxd: not-affected (code-not-present)
devel_lxd: not-affected (code-not-present)
