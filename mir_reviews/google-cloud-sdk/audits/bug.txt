I reviewed google-cloud-sdk version 0.9.26-2014061711570-0ubuntu2. This
should not be considered a full security review, rather just a quick gauge
of maintainability.

Because this package is so large and embeds so many projects it doesn't
feel useful to me to run through the usual review checklist; that
checklist is designed to audit a single codebase and determine overall
health, but this is dozens of projects glued together with many different
programming styles, goals, and many re-implementations of common tools. No
included tools seemed below average during this cursory inspection but
many felt like they were written with only cooperative users and resources
in mind rather than being exposed to potentially malicious actors.

No signatures appear to be published anywhere for the tarball; there is
no mechanism in place to ensure that updates come from the same source as
previous updates. HTTPS is used to protect the tarball download but no
certificate pinning is in place to deter MITM attacks. No data-at-rest
protection is offered, complicating any efforts to validate packaging
in the future.

Some various notes I collected while reviewing, I hope these are useful to
someone:

- embedded copies of apiclient, argcomplete, argparse, docker, gflags,
  google, googlecloudapis, googlecloudsdk, httplib2, mimeparse, oauth2,
  oauth2client, protorpc, requests, six, socks, uritemplate, websocket,
  yaml

- embedded copies of boto, crcmod, crcmod_osx, gcs-oauth2-boto-plugin,
  google-api-python-client, httplib2, python-gflags, retry-decorator,
  socksipy-branch

- Many different functions for running programs:
  RunShellWithReturnCodeAndStderr
  RunShellWithReturnCode
  RunScriptModule
  GetCommandStderr
  _wrapcall
  _wrapcall_2_6
  _ExecuteToolNoExitNoArgsWriteOutput
  _ExecuteToolNoExitNoArgs
  _ExecuteTool
  _ExecuteToolWriteOutputNoExit
  ExecuteCMDTool
  ExecuteShellTool
  ExecutePythonToolNoExitNoArgs
  ExecutePythonToolWriteOutputNoExitNoArgs
  ExecutePythonTool
  Run  (ssh)
  ShellCommand
  LocalClient
  Task
  PerfDiagCommand
  SshInstanceBase (ssh)

- FromFile() overwrite=False race condition

- Extensive pyflakes warnings

- _DoFreshInstall() doesn't verify any signatures though may use TLS.

- SearchForExecutableOnPath() doesn't actually look for executables and
  will happily use a file in the current working directory if PATH
  includes ":" as first or last char or "::" within the string, despite
  the documentation.

- ShellAction's Action's __call__() doesn't escape ' chars in
  _GCLOUD_RESTORE_ saved-away HOME, ZDOTDIR or ENV variables, allowing
  these to inject unexpected values to whatever command is executed.

- GenerateRcFile() populates a 'buf' with a shell script that includes
  "eval $_GCLOUD_RESTORE" -- combined with above, may allow unexpected
  behaviours

- GetBaseFile()'s predictable filenames and careless error checking may
  clobber user data with files named e.g. foo and foo.tmp123

- umask manipulation may lead to unexpected results if used in
  multithreaded environments

- AtomicWrite() race condition between creating a file, populating the
  file, and setting the file mode

- Nice warning in OnlineEdit why it uses unsafe subprocess.check_call()
  idiom, makes sense, thanks.


This package should be handled much like MySQL -- we should apply for
a MicroRelease Exception for this codebase and publish updates from
Google with as few changes as possible. Because so many dependencies
are embedded into the package Canonical shouldn't be maintaining both
distribution-provided versions of these tools and Google-provided
versions -- not every issue in every tool will be relevant to the way
it is used in this package. Google should decide which security issues
in the embedded tools are important to them and their users and provide
us with updates as they see fit.

This approach runs the risk that users may install the package simply to
use the dependencies included; this would be unwise, as Google's needs
are unlikely to directly align with the needs of these hypothetical users.

Please generate and distribute signatures of distributed tarballs.

Security team ACK for promoting to main.
