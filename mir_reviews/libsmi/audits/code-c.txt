Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==
./lib/data.c:4664:		    execv("/bin/sh", argv);
./tools/dump-scli.c:45:#define regexec(a, b, c, d, e)	0
./tools/dump-scli.c:314:	status = regexec(incl_regex, smiNode->name, (size_t) 0, NULL, 0);
./tools/dump-scli.c:324:	status = regexec(excl_regex, smiNode->name, (size_t) 0, NULL, 0);
./test/dumps/netsnmp/snmpv2-mib.h:56:snmpv2_mib_mgr_get_system(struct snmp_session *s, system_t **system);
./test/dumps/netsnmp/snmpv2-mib.h:63:snmpv2_mib_agt_read_system(system_t *system);
./test/dumps/netsnmp/snmpv2-mib.h:65:snmpv2_mib_agt_register_system();
./test/dumps/netsnmp/snmpv2-mib-agt-stub.c:170:int register_system()
./test/dumps/netsnmp/snmpv2-mib-agt-stub.c:248:    read_system(&system);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:63:int snmpv2_mib_mgr_get_system(struct snmp_session *s, system_t **system)
./lib/data.c:4664:		    execv("/bin/sh", argv);

== memory_management() ==
./tools/dump-mosy.c:97:	strcpy(s, append);
./tools/dump-mosy.c:98:	sprintf(append, ".%u%s", parentNode->oid[parentNode->oidlen-1], s);
./tools/dump-mosy.c:104:	    sprintf(s, "%s", append);
./tools/dump-mosy.c:115:	    sprintf(s, "%s%s", parentNode->name, append);
./tools/dump-mosy.c:124:	sprintf(&s[strlen(s)], "%u", smiNode->oid[i]);
./tools/dump-mosy.c:139:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-mosy.c:142:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-mosy.c:145:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-mosy.c:148:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/fortopat.c:137:    struct DH *iterDH = (struct DH *)malloc( sizeof( struct DH ) );
./tools/fortopat.c:151:	    iterDH = (struct DH *)malloc( sizeof( struct DH ) );
./tools/fortopat.c:177:	    strNum = (char *)malloc( endPos - pos );
./tools/fortopat.c:247:    smiAsprintf( &ret, "%s{%d,%d}", baseRegExp, minL, MIN( number, maxL));
./tools/fortopat.c:308:		if( i ) smiAsprintf(&ret, "%s)|(", ret);
./tools/fortopat.c:309:		smiAsprintf(&ret, "%s%s", ret,
./tools/fortopat.c:314:	    smiAsprintf(&ret, "%s)", ret);
./tools/fortopat.c:328:		if( i ) smiAsprintf( &ret, "%s)|(", ret );
./tools/fortopat.c:329:		smiAsprintf(&ret, "%s%s", 
./tools/fortopat.c:334:	    smiAsprintf( &ret, "%s)", ret );
./tools/fortopat.c:434:		if( i ) smiAsprintf( &ret, "%s)|(", ret );
./tools/fortopat.c:435:		smiAsprintf( &ret, "%s%s", 
./tools/fortopat.c:440:	    smiAsprintf(&ret, "%s)", ret);
./tools/fortopat.c:497:			smiAsprintf( &ret, "%s(0|[1-9](([0-9]){0,%d}))",
./tools/fortopat.c:513:			    smiAsprintf( &ret, "%s%s",ret, iterDH->separator );
./tools/fortopat.c:519:			smiAsprintf( &ret, "%s((0|[1-9](([0-9]){0,%d})",
./tools/fortopat.c:525:			    smiAsprintf( &ret, "%s%s",
./tools/fortopat.c:531:			    smiAsprintf(&ret,
./tools/fortopat.c:541:			    smiAsprintf( &ret, "%s)", ret );
./tools/fortopat.c:557:			smiAsprintf( &ret, "%s(%s{%d})",
./tools/fortopat.c:571:			    smiAsprintf( &ret, "%s%s", ret, iterDH->separator );
./tools/fortopat.c:576:			smiAsprintf( &ret, "%s(%s",
./tools/fortopat.c:581:			    smiAsprintf( &ret, "%s%s", ret, iterDH->separator );
./tools/fortopat.c:584:			smiAsprintf( &ret, "(%s){%u,%u})%s",
./tools/fortopat.c:605:			smiAsprintf( &ret, "%s(0|[1-9]([0-9]{0,%d}))",
./tools/fortopat.c:619:			    smiAsprintf( &ret, "%s%s", ret, iterDH->separator );
./tools/fortopat.c:624:			smiAsprintf( &ret, "%s(0|[1-9]([0-9]{0,%d})",
./tools/fortopat.c:631:		    smiAsprintf( &ret, "%s(%s",  ret, baseRegexp );
./tools/fortopat.c:635:			    smiAsprintf( &ret, "%s%s", ret, iterDH->separator );
./tools/fortopat.c:640:			    smiAsprintf( &ret, "%s)*",ret );
./tools/fortopat.c:644:			    smiAsprintf( &ret, "%s){%u,%u}",ret, lengths[ i ],
./tools/fortopat.c:666:				smiAsprintf( &ret, "%s%s)*%s",
./tools/fortopat.c:671:				smiAsprintf( &ret, "%s%s){%u,%u}%s",
./tools/fortopat.c:682:				smiAsprintf( &ret, "%s)*%s",
./tools/fortopat.c:688:				smiAsprintf( &ret, "%s){%u,%u}%s",
./tools/fortopat.c:710:	    smiAsprintf( &ret, "%s)|(", ret );
./tools/fortopat.c:714:	    smiAsprintf( &ret, "%s)", ret );
./tools/fortopat.c:716:		smiAsprintf( &ret, "%s){0,1}", ret );
./tools/fortopat.c:728:		smiAsprintf( &ret, "%s)", ret );
./tools/fortopat.c:758:	lengths = xmalloc(2 * num * sizeof(SmiUnsigned32));
./tools/fortopat.c:764:	lengths = xmalloc( 2 * sizeof(SmiUnsigned32));
./tools/dump-fig.c:93:		sprintf(string, "%s(%d)", childNode->name,
./tools/dump-fig.c:154:		sprintf(string, "%s : %s", childNode->name, smiType->name);
./tools/dump-smi.c:28:extern int smiAsprintf(char **strp, const char *format, ...);
./tools/dump-smi.c:248:    smiAsprintf(&s, "%04d%02d%02d%02d%02dZ",
./tools/dump-smi.c:327:	strcpy(s, append);
./tools/dump-smi.c:329:	    sprintf(append, " %u%s", parentNode->oid[parentNode->oidlen-1], s);
./tools/dump-smi.c:331:	    sprintf(append, " %s(%u)%s",
./tools/dump-smi.c:340:	    sprintf(s, "%s", append);
./tools/dump-smi.c:351:	    sprintf(s, "%s%s", parentNode->name, append);
./tools/dump-smi.c:360:	sprintf(&s[strlen(s)], "%u", smiNode->oid[i]);
./tools/dump-smi.c:457:    newImport = xmalloc(sizeof(Import));
./tools/dump-smi.c:520:                        char *newName = xmalloc(len + 5);
./tools/dump-smi.c:521:                        strcpy(newName, smiModule2->name);
./tools/dump-smi.c:656:    current_column += smiVasprintf(&s, fmt, ap);
./tools/dump-smi.c:756:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-smi.c:759:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-smi.c:762:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-smi.c:765:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-smi.c:778:	    sprintf(s, "%s", nn->name);
./tools/dump-smi.c:780:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-smi.c:788:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-smi.c:790:            sprintf(s, "'%*s'H", 2 * valuePtr->len, " ");
./tools/dump-smi.c:792:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-smi.c:799:            sprintf(s, "'%*s'H", 2 * valuePtr->len, " ");
./tools/dump-smi.c:801:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-smi.c:805:	    sprintf(s, "{");
./tools/dump-smi.c:815:			    sprintf(&s[strlen(s)], ", ");
./tools/dump-smi.c:817:			sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-smi.c:821:	    sprintf(&s[strlen(s)], "}");
./tools/dump-smi.c:831:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-smi.c:833:	    strcpy(s, "{");
./tools/dump-smi.c:836:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-smi.c:877:	    sprintf(s, "%s(%s)", nn->name,
./tools/dump-smi.c:898:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-smi.c:899:		sprintf(&s[strlen(s)], "..%s", 
./tools/dump-smi.c:902:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-smi.c:1518:                char *rowStatus = xmalloc(len + 10);
./tools/dump-smi.c:1519:                strcpy(rowStatus, smiParentNode->name);
./tools/dump-smi.c:1522:                strcpy(&rowStatus[len], "RowStatus");
./tools/dump-smi.c:1888:		    sprintf(s, "+%s+",
./tools/dump-scli.c:97:    sprintf(s, "%04d-%02d-%02d %02d:%02d",
./tools/dump-scli.c:281:    fullname = xmalloc(strlen(name) + (suffix ? strlen(suffix) : 0) + 2);
./tools/dump-scli.c:282:    strcpy(fullname, name);
./tools/dump-scli.c:493:	smiAsprintf(&name, "%s%d", iNode->name, m);
./tools/dump-scli.c:641:	fprintf(f, "    memcpy(%s->%s, %s, _%sLength * sizeof(guint32));\n",
./tools/dump-scli.c:649:	    fprintf(f, "    memcpy(%s->%s, %s, _%sLength);\n",
./tools/dump-scli.c:652:	    fprintf(f, "    memcpy(%s->%s, %s, %s_%sLENGTH);\n",
./tools/dump-scli.c:2607:	    "    memcpy(base, _base, sizeof(_base));\n"
./tools/dump-scli.c:2622:	    "        *%s = (%s_%s_t **) g_malloc0((g_list_length(out) + 1) * sizeof(%s_%s_t *));\n"
./tools/dump-scli.c:2663:	    "    memcpy(base, %s_oid, sizeof(%s_oid));\n",
./tools/dump-scli.c:2739:	    "    memcpy(base, %s_oid, sizeof(%s_oid));\n",
./tools/dump-scli.c:3020:	    "    memcpy(base, _base, sizeof(_base));\n"
./tools/dump-scli.c:3113:	    "    %s = (%s_%s_t *) g_malloc0(sizeof(%s_%s_t) + sizeof(gpointer));\n"
./tools/dump-xml.c:130:    smiAsprintf(&s, "%04d-%02d-%02d %02d:%02d",
./tools/dump-xml.c:145:    current_column += smiVasprintf(&s, fmt, ap);
./tools/dump-xml.c:211:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-xml.c:214:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-xml.c:217:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-xml.c:220:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-xml.c:233:	    sprintf(s, "%s", nn->name);
./tools/dump-xml.c:235:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-xml.c:243:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-xml.c:245:            sprintf(s, "0x%*s", 2 * valuePtr->len, "");
./tools/dump-xml.c:247:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-xml.c:253:	sprintf(s, "(");
./tools/dump-xml.c:257:		    sprintf(&s[strlen(s)], ", ");
./tools/dump-xml.c:265:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-xml.c:267:		    sprintf(s, "%d", i);
./tools/dump-xml.c:271:	sprintf(&s[strlen(s)], ")");
./tools/dump-xml.c:279:	    sprintf(&s[strlen(s)], i ? ".%u" : "%u", valuePtr->value.oid[i]);
./tools/dump-perl.c:121:    sprintf(s, "%04d-%02d-%02d %02d:%02d",
./tools/dump-perl.c:136:    current_column += smiVasprintf(&s, fmt, ap);
./tools/dump-perl.c:203:        sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-perl.c:206:        sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-perl.c:209:        sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-perl.c:212:        sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-perl.c:225:            sprintf(s, "%s", nn->name);
./tools/dump-perl.c:227:            sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-perl.c:235:            sprintf(s, "%s", valuePtr->value.ptr);
./tools/dump-perl.c:237:            sprintf(s, "0x%*s", 2 * valuePtr->len, "");
./tools/dump-perl.c:239:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-perl.c:245:        sprintf(s, "(");
./tools/dump-perl.c:249:                    sprintf(&s[strlen(s)], ", ");
./tools/dump-perl.c:257:                    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-perl.c:259:                    sprintf(s, "%d", i);
./tools/dump-perl.c:263:        sprintf(&s[strlen(s)], ")");
./tools/dump-perl.c:271:            sprintf(&s[strlen(s)], i ? ".%u" : "%u", valuePtr->value.oid[i]);
./tools/shhopt.c:141:	strcpy(ret, "--");
./tools/smilint.c:107:    errors = malloc((cnt + 1) * sizeof(Error));
./tools/smidiff.c:485:    sprintf(s, "%04d-%02d-%02d %02d:%02d",
./tools/smidiff.c:903:		name = (char *)malloc( strlen( smiType->name ) +
./tools/smidiff.c:905:		sprintf( name, "%s::%s",
./tools/smidiff.c:963:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/smidiff.c:966:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/smidiff.c:969:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/smidiff.c:972:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/smidiff.c:985:	    sprintf(s, "%s", nn->name);
./tools/smidiff.c:987:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/smidiff.c:995:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/smidiff.c:997:            sprintf(s, "'%*s'H", 2 * valuePtr->len, " ");
./tools/smidiff.c:999:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/smidiff.c:1006:	sprintf(s, "{");
./tools/smidiff.c:1016:			sprintf(&s[strlen(s)], ", ");
./tools/smidiff.c:1018:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/smidiff.c:1022:	sprintf(&s[strlen(s)], "}");
./tools/smidiff.c:1030:	    sprintf(s, "%s", nodePtr->name);
./tools/smidiff.c:1032:	    strcpy(s, "{");
./tools/smidiff.c:1035:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/smidiff.c:1053:	str = malloc( strlen( minStr ) + strlen( maxStr ) + 3 );
./tools/smidiff.c:1057:	sprintf(str, "%s..%s", minStr, maxStr);
./tools/smidiff.c:1080:		sprintf(str, "%s|", str);
./tools/smidiff.c:1096:	sprintf( str, "%s%s", str, subRange );
./tools/smidiff.c:1101:	sprintf(str, "%s)", str);
./tools/smidiff.c:1747:    strIdxLst = (char *)malloc( strlen( indexNode->name ) + 3);
./tools/smidiff.c:1749:	sprintf( strIdxLst, "`%s'", indexNode->name );
./tools/smidiff.c:1757:	sprintf( strIdxLst, "%s, `%s'", strIdxLst, indexNode->name );
./tools/smixlate.c:76:    token = dstring_new();
./tools/smixlate.c:77:    subst = dstring_new();
./tools/dump-types.c:100:    strcpy(flags, "---");
./tools/dump-types.c:192:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-types.c:195:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-types.c:198:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-types.c:201:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-types.c:214:	    sprintf(s, "%s", nn->name);
./tools/dump-types.c:216:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-types.c:224:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-types.c:226:            sprintf(s, "0x%*s", 2 * valuePtr->len, "");
./tools/dump-types.c:228:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-types.c:234:	sprintf(s, "(");
./tools/dump-types.c:238:		    sprintf(&s[strlen(s)], ", ");
./tools/dump-types.c:246:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-types.c:248:		    sprintf(s, "%d", i);
./tools/dump-types.c:252:	sprintf(&s[strlen(s)], ")");
./tools/dump-types.c:261:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-types.c:263:	    strcpy(s, "");
./tools/dump-types.c:266:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-types.c:295:	 newType = xmalloc(sizeof(TypeNode));
./tools/dump-types.c:381:	s = xmalloc(strlen(typeNode->smiType->name)+
./tools/dump-types.c:383:	sprintf(s, "%s::%s", typeNode->smiModule ? typeNode->smiModule->name : "",
./tools/dump-types.c:395:		name = xmalloc(strlen(smiNode->name) + 3);
./tools/dump-types.c:396:		sprintf(name, "(%s)", smiNode->name);
./tools/dump-types.c:411:		    name = xmalloc(strlen(smiNode->name) + 3);
./tools/dump-types.c:412:		    sprintf(name, "(%s)", smiNode->name);
./tools/dump-types.c:418:		    name = xmalloc(strlen(smiNode->name) + 3);
./tools/dump-types.c:419:		    sprintf(name, "(%s)", smiNode->name);
./tools/dump-types.c:449:	    strcpy(s1, getValueString(&range->minValue, smiType));
./tools/dump-types.c:450:	    strcpy(s2, getValueString(&range->maxValue, smiType));
./tools/dump-types.c:508: 	    newprefix = xmalloc(strlen(prefix)+10);
./tools/dump-types.c:509: 	    strcpy(newprefix, prefix);
./tools/dump-jax.c:89:    fullname = xmalloc(strlen(name) + (suffix ? strlen(suffix) : 0) + 2);
./tools/dump-jax.c:90:    strcpy(fullname, name);
./tools/dump-jax.c:503:            strcpy(init, "0");
./tools/dump-jax.c:505:            strcpy(init, "0");
./tools/dump-jax.c:511:                sprintf(init, "new byte[%ld]",
./tools/dump-jax.c:514:                sprintf(init, "new byte[0]");
./tools/dump-jax.c:517:            strcpy(init, "new AgentXOID()");
./tools/dump-jax.c:519:            strcpy(init, "null");
./tools/dump-jax.c:962:            strcpy(init, "0");
./tools/dump-jax.c:964:            strcpy(init, "0");
./tools/dump-jax.c:970:                sprintf(init, "new byte[%ld]",
./tools/dump-jax.c:973:                sprintf(init, "new byte[0]");
./tools/dump-jax.c:976:            strcpy(init, "new AgentXOID()");
./tools/dump-jax.c:978:            strcpy(init, "null");
./tools/dump-metrics.c:194:    smiAsprintf(&s, "%04d-%02d-%02d",
./tools/dump-metrics.c:297:	uCnt = (UsageCounter *) xmalloc(sizeof(UsageCounter));
./tools/dump-metrics.c:487:    sortCnt = (UsageCounter **) xmalloc(cnt * sizeof(UsageCounter *));
./tools/dump-metrics.c:545:    sortCnt = (UsageCounter **) xmalloc(cnt * sizeof(UsageCounter *));
./tools/dump-metrics.c:603:    sortCnt = (UsageCounter **) xmalloc(cnt * sizeof(UsageCounter *));
./tools/dump-metrics.c:657:    sortCnt = (UsageCounter **) xmalloc(cnt * sizeof(UsageCounter *));
./tools/dump-metrics.c:715:    sortCnt = (UsageCounter **) xmalloc(cnt * sizeof(UsageCounter *));
./tools/dump-metrics.c:1345:	    sprintf(buf, "[%d]", i);
./tools/dump-metrics.c:1384:	    sprintf(buf, "[%d]", i);
./tools/dump-imports.c:45:    imports = xmalloc(size);
./tools/dump-imports.c:101:    imp = (Imports *) xmalloc(sizeof(Imports));
./tools/dump-imports.c:118:	newprefix = xmalloc(strlen(prefix)+10);
./tools/dump-imports.c:119:	strcpy(newprefix, prefix);
./tools/dump-sming.c:206:    sprintf(s, "%04d-%02d-%02d %02d:%02d",
./tools/dump-sming.c:272:	strcpy(s, append);
./tools/dump-sming.c:273:	sprintf(append, ".%u%s", parentNode->oid[parentNode->oidlen-1], s);
./tools/dump-sming.c:279:	    sprintf(s, "%s", append);
./tools/dump-sming.c:289:	    sprintf(s, "%s%s", parentNode->name, append);
./tools/dump-sming.c:298:	sprintf(&s[strlen(s)], "%u", smiNode->oid[i]);
./tools/dump-sming.c:340:    newImport = xmalloc(sizeof(Import));
./tools/dump-sming.c:417:    current_column += vsprintf(s, fmt, ap);	/* buffer overwrite */
./tools/dump-sming.c:486:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-sming.c:489:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-sming.c:492:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-sming.c:495:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-sming.c:498:    sprintf(s, "%G", valuePtr->value.float32);
./tools/dump-sming.c:501:    sprintf(s, "%lG", valuePtr->value.float64);
./tools/dump-sming.c:504:    sprintf(s, "%LG", valuePtr->value.float128);
./tools/dump-sming.c:514:	    sprintf(s, "%s", nn->name);
./tools/dump-sming.c:516:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-sming.c:524:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-sming.c:526:            sprintf(s, "0x%*s", 2 * valuePtr->len, "");
./tools/dump-sming.c:528:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-sming.c:534:	sprintf(s, "(");
./tools/dump-sming.c:538:		    sprintf(&s[strlen(s)], ", ");
./tools/dump-sming.c:547:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-sming.c:549:		    sprintf(&s[strlen(s)], "%d", i);
./tools/dump-sming.c:553:	sprintf(&s[strlen(s)], ")");
./tools/dump-sming.c:560:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-sming.c:562:	    strcpy(s, "");
./tools/dump-sming.c:565:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-sming.c:568:	sprintf(s, "%s", typePtr->value.value.ptr);
./tools/dump-sming.c:573:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-sming.c:575:	    strcpy(s, "");
./tools/dump-sming.c:578:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-sming.c:581:	sprintf(s, "%s", valuePtr->value.ptr);
./tools/dump-sming.c:584:	sprintf(s, "%s", "");
./tools/dump-sming.c:609:	    sprintf(s, "%s(%s)", nn->name,
./tools/dump-sming.c:630:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-sming.c:631:		sprintf(&s[strlen(s)], "..%s", 
./tools/dump-sming.c:634:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-sming.c:660:	    sprintf(s, "%s(%s)", nn->name,
./tools/dump-sming.c:681:		sprintf(s, "%s", getValueString(&range->minValue, smiGetAttributeParentType(smiAttribute)));
./tools/dump-sming.c:682:		sprintf(&s[strlen(s)], "..%s", 
./tools/dump-sming.c:685:		sprintf(s, "%s", getValueString(&range->minValue, smiGetAttributeParentType(smiAttribute)));
./tools/dstring.h:51:dstring_new(void);
./tools/dump-netsnmp.c:163:    fullname = xmalloc(strlen(name) + (suffix ? strlen(suffix) : 0) + 2);
./tools/dump-netsnmp.c:164:    strcpy(fullname, name);
./tools/dump-netsnmp.c:880:    stubModuleName = xmalloc(strlen(baseName) + 10);
./tools/dump-netsnmp.c:881:    strcpy(stubModuleName, baseName);
./tools/dump-netsnmp.c:995:			"            memcpy((*%s)->__%s, vars->val.string, vars->val_len);\n",
./tools/dump-netsnmp.c:1075:	    "    *%s = (%s_t *) malloc(sizeof(%s_t));\n"
./tools/dump-netsnmp.c:1146:    stubModuleName = xmalloc(strlen(baseName) + 10);
./tools/dump-netsnmp.c:1147:    strcpy(stubModuleName, baseName);
./tools/dump-netsnmp.c:1198:    stubModuleName = xmalloc(strlen(baseName) + 10);
./tools/dump-netsnmp.c:1199:    strcpy(stubModuleName, baseName);
./tools/dump-cm.c:874:    note = xmalloc(length);
./tools/dump-cm.c:875:    strcpy(note, s1);
./tools/dump-cm.c:1121:	    graph = xmalloc(sizeof(Graph));
./tools/dump-cm.c:1152:		graph = xmalloc(sizeof(Graph));
./tools/fprint.c:53:    fprint_current_column += smiVasprintf(&s, fmt, ap);
./tools/dump-tree.c:405:	    newprefix = xmalloc(strlen(prefix)+10);
./tools/dump-tree.c:406:	    strcpy(newprefix, prefix);
./tools/dump-yang.c:167:    sprintf(s, "%04d-%02d-%02d",
./tools/dump-yang.c:188:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-yang.c:191:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-yang.c:194:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-yang.c:197:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-yang.c:210:	    sprintf(s, "%s", nn->name);
./tools/dump-yang.c:212:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-yang.c:220:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-yang.c:222:            sprintf(s, "0x%*s", 2 * valuePtr->len, "");
./tools/dump-yang.c:224:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-yang.c:230:	sprintf(s, "(");
./tools/dump-yang.c:234:		    sprintf(&s[strlen(s)], ", ");
./tools/dump-yang.c:242:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-yang.c:244:		    sprintf(s, "%d", i);
./tools/dump-yang.c:248:	sprintf(&s[strlen(s)], ")");
./tools/dump-yang.c:257:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-yang.c:259:	    strcpy(s, "");
./tools/dump-yang.c:262:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-yang.c:366:    newImport = xmalloc(sizeof(Import));
./tools/dump-yang.c:600:	    sprintf(s, "%s %-*s { %s %s; }\n",
./tools/dump-yang.c:620:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-yang.c:621:		sprintf(&s[strlen(s)], "..%s", 
./tools/dump-yang.c:624:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-corba.c:117:    fullname = xmalloc(strlen(name) + (suffix ? strlen(suffix) : 0) + 2);
./tools/dump-corba.c:118:    strcpy(fullname, name);
./tools/dump-corba.c:168:    idl = xmalloc(strlen(s) + 1);
./tools/dump-corba.c:206:    p = xmalloc(sizeof(IdlEntry));
./tools/dump-corba.c:265:    type_name = xmalloc(strlen(name) + 10);
./tools/dump-corba.c:266:    sprintf(type_name, "%sType", name);
./tools/dump-corba.c:284:    vbTypeName = xmalloc(strlen(name) + 10);
./tools/dump-corba.c:285:    sprintf(vbTypeName, "%sVBType", name);
./tools/dump-corba.c:328:    smiAsprintf(&s, "%04d%02d%02d%02d%02dZ",
./tools/dump-corba.c:421:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-corba.c:424:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-corba.c:427:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-corba.c:430:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-corba.c:443:	    sprintf(s, "%s", nn->name);
./tools/dump-corba.c:445:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-corba.c:453:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-corba.c:455:            sprintf(s, "'%*s'H", 2 * valuePtr->len, "");
./tools/dump-corba.c:457:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-corba.c:463:	sprintf(s, "{");
./tools/dump-corba.c:473:			sprintf(&s[strlen(s)], ", ");
./tools/dump-corba.c:475:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-corba.c:479:	sprintf(&s[strlen(s)], "}");
./tools/dump-corba.c:489:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-corba.c:491:	    strcpy(s, "{");
./tools/dump-corba.c:494:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-corba.c:522:    newImport = xmalloc(sizeof(Import));
./tools/dump-corba.c:610:    current_column += smiVasprintf(&s, fmt, ap);
./tools/dump-corba.c:682:    sprintf(s, "%04d-%02d-%02d %02d:%02d",
./tools/smidump.c:76:void *xmalloc(size_t size)
./tools/smidump.c:78:    char *m = malloc(size);
./tools/smidump.c:101:void *xcalloc(size_t nmemb, size_t size)
./tools/smidump.c:103:    char *m = calloc(nmemb, size);
./tools/smidump.c:146:	memcpy(&opt[opts], &opt[opts-1], sizeof(optStruct));
./tools/smidump.c:148:	opt[opts-1].longName  = xmalloc(strlen(driver->name) +
./tools/smidump.c:150:	sprintf(opt[opts-1].longName, "%s-%s",
./tools/smidump.c:322:    opt = xmalloc(sizeof(genericOpt));
./tools/smidump.c:323:    memcpy(opt, genericOpt, sizeof(genericOpt));
./tools/smidump.c:395:    modv = (SmiModule **) xmalloc((argc) * sizeof(SmiModule *));
./tools/rea.c:164:    newNode = xmalloc(sizeof(GraphNode));
./tools/rea.c:196:    newComponent = xmalloc(sizeof(GraphComponent));
./tools/rea.c:236:    newEdge = xmalloc(sizeof(GraphEdge));
./tools/smiquery.c:138:	sprintf(ss, "-");
./tools/smiquery.c:143:		sprintf(&ss[j], "              ");
./tools/smiquery.c:445:			    strcpy(s1, smiRenderValue(&range->minValue, type, 0));
./tools/smiquery.c:446:			    strcpy(s2, smiRenderValue(&range->maxValue, type, 0));
./tools/smidump.h:117:extern void *xmalloc(size_t size);
./tools/smidump.h:119:extern void *xcalloc(size_t nmemb, size_t size);
./tools/dump-sppi.c:123:    smiAsprintf(&s, "%04d%02d%02d%02d%02dZ",
./tools/dump-sppi.c:195:	strcpy(s, append);
./tools/dump-sppi.c:196:	sprintf(append, " %u%s", parentNode->oid[parentNode->oidlen-1], s);
./tools/dump-sppi.c:202:	    sprintf(s, "%s", append);
./tools/dump-sppi.c:212:	    sprintf(s, "%s%s", parentNode->name, append);
./tools/dump-sppi.c:221:	sprintf(&s[strlen(s)], "%u", smiNode->oid[i]);
./tools/dump-sppi.c:295:    newImport = xmalloc(sizeof(Import));
./tools/dump-sppi.c:466:    current_column += smiVasprintf(&s, fmt, ap);
./tools/dump-sppi.c:544:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-sppi.c:547:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-sppi.c:550:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-sppi.c:553:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-sppi.c:562:	    sprintf(s, "%s", nn->name);
./tools/dump-sppi.c:564:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-sppi.c:572:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-sppi.c:574:            sprintf(s, "'%*s'H", 2 * valuePtr->len, " ");
./tools/dump-sppi.c:576:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-sppi.c:582:	sprintf(s, "{");
./tools/dump-sppi.c:592:			sprintf(&s[strlen(s)], ", ");
./tools/dump-sppi.c:594:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-sppi.c:598:	sprintf(&s[strlen(s)], "}");
./tools/dump-sppi.c:609:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-sppi.c:611:	    strcpy(s, "{");
./tools/dump-sppi.c:614:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-sppi.c:648:	    sprintf(s, "%s(%s)", nn->name,
./tools/dump-sppi.c:669:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-sppi.c:670:		sprintf(&s[strlen(s)], "..%s", 
./tools/dump-sppi.c:673:		sprintf(s, "%s", getValueString(&range->minValue, smiType));
./tools/dump-sppi.c:703:        char *instanceId = xmalloc(len + 11);
./tools/dump-sppi.c:705:        strcpy(instanceId, smiParentNode->name);
./tools/dump-sppi.c:708:        strcpy(&instanceId[len], "InstanceId");
./tools/dump-sppi.c:805:        id = xmalloc(strlen(smiNode->name) + 10);
./tools/dump-sppi.c:806:        sprintf(id, "%s (%ld)%s", smiNode->name,
./tools/dump-sppi.c:894:                id = xmalloc(strlen(smiNode2->name) + 10);
./tools/dump-sppi.c:896:                    sprintf(id, "%s (%ld)%s", smiNode2->name, (long)smiNode2->oid,
./tools/dump-sppi.c:899:                    sprintf(id, "%s%s", smiNode2->name,
./tools/dump-sppi.c:1284:                char *instanceId = xmalloc(len + 11);
./tools/dump-sppi.c:1285:                strcpy(instanceId, smiParentNode->name);
./tools/dump-sppi.c:1288:                strcpy(&instanceId[len], "InstanceId");
./tools/dump-sppi.c:1534:		sprintf(s, "+%s+",
./tools/dump-sppi.c:1557:        char *newCompliance = xmalloc(65);
./tools/dump-sppi.c:1558:        char *newGroup = xmalloc(65);
./tools/dump-sppi.c:1559:        char *newId = xmalloc(65);
./tools/dump-sppi.c:1637:            char *instanceId = xmalloc(len + 11);
./tools/dump-sppi.c:1639:            strcpy(instanceId, smiParentNode->name);
./tools/dump-sppi.c:1642:            strcpy(&instanceId[len], "InstanceId");
./tools/dump-xsd.c:147:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-xsd.c:150:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-xsd.c:153:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-xsd.c:156:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-xsd.c:169:	    sprintf(s, "%s", nn->name);
./tools/dump-xsd.c:171:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-xsd.c:179:	    sprintf(s, "\"%s\"", valuePtr->value.ptr);
./tools/dump-xsd.c:181:            sprintf(s, "0x%*s", 2 * valuePtr->len, "");
./tools/dump-xsd.c:183:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-xsd.c:189:	sprintf(s, "(");
./tools/dump-xsd.c:193:		    sprintf(&s[strlen(s)], ", ");
./tools/dump-xsd.c:201:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-xsd.c:203:		    sprintf(s, "%d", i);
./tools/dump-xsd.c:207:	sprintf(&s[strlen(s)], ")");
./tools/dump-xsd.c:214:	    sprintf(s, "%s", nodePtr->name);
./tools/dump-xsd.c:216:	    strcpy(s, "");
./tools/dump-xsd.c:219:		sprintf(&s[strlen(s)], "%u", valuePtr->value.oid[i]);
./tools/dump-xsd.c:1850:	smiAsprintf( &ret, "%s/%s",
./tools/dump-xsd.c:1855:	smiAsprintf( &ret, "%s", smiNode->name );
./tools/dump-xsd.c:1956:	typePrefixes = xmalloc( sizeof( TypePrefix ) );
./tools/dump-xsd.c:1963:	oldTPr->next = xmalloc( sizeof( TypePrefix ) );
./tools/dump-xsd.c:2123:	smiAsprintf( &schemaLocation, "%s%c", schemaLocation, '/');
./tools/dump-svg.c:38:extern int smiAsprintf(char **strp, const char *format, ...);
./tools/dump-svg.c:80:	smiAsprintf(&s, "%04d-%02d-%02d",
./tools/dump-svg.c:83:	smiAsprintf(&s, "%04d-%02d-%02d %02d:%02d",
./tools/dump-svg.c:324:	    tooltip = (char *)xmalloc(2*strlen(node->description));
./tools/dump-svg.c:358:	    tooltipDescription = (char *)xmalloc(2*strlen(typeDescription));
./tools/dump-svg.c:364:		    tooltip = (char *)xmalloc(length);
./tools/dump-svg.c:365:		    strcpy(tooltip, algGetTypeName(node));
./tools/dump-svg.c:372:		    tooltip = (char *)xmalloc(length);
./tools/dump-svg.c:373:		    strcpy(tooltip, tooltipDescription);
./tools/dump-svg.c:377:		tooltip = (char *)xmalloc(length);
./tools/dump-svg.c:378:		strcpy(tooltip, tooltipDescription);
./tools/dump-svg.c:386:	    tooltip = (char *)xmalloc(length);
./tools/dump-svg.c:387:	    strcpy(tooltip, baseTypeTooltipText);
./tools/dump-svg.c:562:	    tooltipTable=(char *)xmalloc(2*strlen(node->smiNode->description));
./tools/dump-svg.c:566:	    tooltipEntry=(char *)xmalloc(2*strlen(smiGetFirstChildNode(
./tools/dump-svg.c:582:	tooltip = (char *)xmalloc(length);
./tools/dump-svg.c:584:	strcpy(tooltip, "\0");
./tools/dump-svg.c:1063:    note1 = xmalloc(length1);
./tools/dump-svg.c:1064:    strcpy(note1, s11);
./tools/dump-svg.c:1588:			sprintf(s, "+%s+", smiGetNodeModule(smiGetElementNode(
./tools/dump-svg.c:1639:	newElem = xmalloc(sizeof(StringListElem));
./tools/dump-svg.c:1661:		    cloneElem = xmalloc(sizeof(StringListElem));
./tools/dump-svg.c:1662:		    memcpy(cloneElem, tElem, sizeof(StringListElem));
./tools/dump-svg.c:1691:	    tooltip = (char *)xmalloc(2*strlen(smiNode->description));
./tools/dump-svg.c:1861:	tooltip = (char *)xmalloc(2*strlen(smiNode->description));
./tools/dump-svg.c:2050:			tooltip = (char *)xmalloc(2*strlen(
./tools/dump-svg.c:2140:			tooltip = (char *)xmalloc(2*strlen(
./tools/dump-svg.c:2186:	    sprintf(s, "+%s+", smiGetNodeModule(smiGetElementNode(
./tools/dump-svg.c:2239:		    tooltip = (char *)xmalloc(2*strlen(modv[i]->description));
./tools/dump-svg.c:2323:			tooltip = (char *)xmalloc(2*
./tools/dump-svg.c:2658:    StringListElem *markupList = xcalloc(miCount,sizeof(StringListElem));
./tools/dump-svg.c:3144:    int            *modId = xcalloc(modc,sizeof(int));
./tools/dump-svg.c:3145:    int            *nType = xcalloc(modc,sizeof(int));
./tools/dump-svg.c:3146:    int            *oGroup = xcalloc(modc,sizeof(int));
./tools/dump-svg.c:3147:    int            *nGroup = xcalloc(modc,sizeof(int));
./tools/dump-svg.c:3148:    int            *mCompl = xcalloc(modc,sizeof(int));
./tools/dump-svg.c:3222:    sprintf(width, "%i", CANVASWIDTH);
./tools/dump-svg.c:3223:    sprintf(height, "%i", CANVASHEIGHT);
./tools/dump-svg.c:3232:    link = xmalloc(length + 1);
./tools/dump-svg.c:3233:    strcpy(link, url);
./tools/dump-svg.c:3269:	    graph = xmalloc(sizeof(Graph));
./tools/dump-svg.c:3288:		graph = xmalloc(sizeof(Graph));
./tools/dump-python.c:121:    sprintf(s, "%04d-%02d-%02d %02d:%02d",
./tools/dump-python.c:136:    current_column += smiVasprintf(&s, fmt, ap);
./tools/dump-python.c:206:	sprintf(s, "%lu", valuePtr->value.unsigned32);
./tools/dump-python.c:209:	sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-python.c:212:	sprintf(s, UINT64_FORMAT, valuePtr->value.unsigned64);
./tools/dump-python.c:215:	sprintf(s, INT64_FORMAT, valuePtr->value.integer64);
./tools/dump-python.c:228:	    sprintf(s, "%s", nn->name);
./tools/dump-python.c:230:	    sprintf(s, "%ld", valuePtr->value.integer32);
./tools/dump-python.c:238:	    sprintf(s, "%s", valuePtr->value.ptr);
./tools/dump-python.c:240:            sprintf(s, "0x%*s", 2 * valuePtr->len, "");
./tools/dump-python.c:242:                sprintf(ss, "%02x", valuePtr->value.ptr[i]);
./tools/dump-python.c:248:	sprintf(s, "(");
./tools/dump-python.c:252:		    sprintf(&s[strlen(s)], ", ");
./tools/dump-python.c:260:		    sprintf(&s[strlen(s)], "%s", nn->name);
./tools/dump-python.c:262:		    sprintf(s, "%d", i);
./tools/dump-python.c:266:	sprintf(&s[strlen(s)], ")");
./tools/dump-python.c:274:	    sprintf(&s[strlen(s)], i ? ".%u" : "%u", valuePtr->value.oid[i]);
./tools/dstring.c:64:dstring_new(void)
./tools/dstring.c:68:    ds = calloc(1, sizeof(dstring_t));
./tools/dstring.c:90:        strcpy(ds->str, s);
./test/dumps/netsnmp/if-mib-mgr-stub.c:99:    *interfaces = (interfaces_t *) malloc(sizeof(interfaces_t));
./test/dumps/netsnmp/if-mib-mgr-stub.c:167:    *ifEntry = (ifEntry_t *) malloc(sizeof(ifEntry_t));
./test/dumps/netsnmp/if-mib-mgr-stub.c:182:            memcpy((*ifEntry)->__ifDescr, vars->val.string, vars->val_len);
./test/dumps/netsnmp/if-mib-mgr-stub.c:203:            memcpy((*ifEntry)->__ifPhysAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/if-mib-mgr-stub.c:320:    *ifMIBObjects = (ifMIBObjects_t *) malloc(sizeof(ifMIBObjects_t));
./test/dumps/netsnmp/if-mib-mgr-stub.c:390:    *ifXEntry = (ifXEntry_t *) malloc(sizeof(ifXEntry_t));
./test/dumps/netsnmp/if-mib-mgr-stub.c:400:            memcpy((*ifXEntry)->__ifName, vars->val.string, vars->val_len);
./test/dumps/netsnmp/if-mib-mgr-stub.c:470:            memcpy((*ifXEntry)->__ifAlias, vars->val.string, vars->val_len);
./test/dumps/netsnmp/if-mib-mgr-stub.c:513:    *ifStackEntry = (ifStackEntry_t *) malloc(sizeof(ifStackEntry_t));
./test/dumps/netsnmp/if-mib-mgr-stub.c:565:    *ifTestEntry = (ifTestEntry_t *) malloc(sizeof(ifTestEntry_t));
./test/dumps/netsnmp/if-mib-mgr-stub.c:596:            memcpy((*ifTestEntry)->__ifTestOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/if-mib-mgr-stub.c:635:    *ifRcvAddressEntry = (ifRcvAddressEntry_t *) malloc(sizeof(ifRcvAddressEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:244:    *etherStats2Entry = (etherStats2Entry_t *) malloc(sizeof(etherStats2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:297:    *tokenRingMLStats2Entry = (tokenRingMLStats2Entry_t *) malloc(sizeof(tokenRingMLStats2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:350:    *tokenRingPStats2Entry = (tokenRingPStats2Entry_t *) malloc(sizeof(tokenRingPStats2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:402:    *historyControl2Entry = (historyControl2Entry_t *) malloc(sizeof(historyControl2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:450:    *hostControl2Entry = (hostControl2Entry_t *) malloc(sizeof(hostControl2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:503:    *matrixControl2Entry = (matrixControl2Entry_t *) malloc(sizeof(matrixControl2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:556:    *channel2Entry = (channel2Entry_t *) malloc(sizeof(channel2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:609:    *filter2Entry = (filter2Entry_t *) malloc(sizeof(filter2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:662:    *ringStationControl2Entry = (ringStationControl2Entry_t *) malloc(sizeof(ringStationControl2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:715:    *sourceRoutingStats2Entry = (sourceRoutingStats2Entry_t *) malloc(sizeof(sourceRoutingStats2Entry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:767:    *protocolDir = (protocolDir_t *) malloc(sizeof(protocolDir_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:821:    *protocolDirEntry = (protocolDirEntry_t *) malloc(sizeof(protocolDirEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:836:            memcpy((*protocolDirEntry)->__protocolDirDescr, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:842:            memcpy((*protocolDirEntry)->__protocolDirType, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:863:            memcpy((*protocolDirEntry)->__protocolDirOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:910:    *protocolDistControlEntry = (protocolDistControlEntry_t *) malloc(sizeof(protocolDistControlEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:933:            memcpy((*protocolDistControlEntry)->__protocolDistControlOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:977:    *protocolDistStatsEntry = (protocolDistStatsEntry_t *) malloc(sizeof(protocolDistStatsEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1031:    *addressMap = (addressMap_t *) malloc(sizeof(addressMap_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1091:    *addressMapControlEntry = (addressMapControlEntry_t *) malloc(sizeof(addressMapControlEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1109:            memcpy((*addressMapControlEntry)->__addressMapControlOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1153:    *addressMapEntry = (addressMapEntry_t *) malloc(sizeof(addressMapEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1163:            memcpy((*addressMapEntry)->__addressMapPhysicalAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1216:    *hlHostControlEntry = (hlHostControlEntry_t *) malloc(sizeof(hlHostControlEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1269:            memcpy((*hlHostControlEntry)->__hlHostControlOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1317:    *nlHostEntry = (nlHostEntry_t *) malloc(sizeof(nlHostEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1399:    *hlMatrixControlEntry = (hlMatrixControlEntry_t *) malloc(sizeof(hlMatrixControlEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1452:            memcpy((*hlMatrixControlEntry)->__hlMatrixControlOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1497:    *nlMatrixSDEntry = (nlMatrixSDEntry_t *) malloc(sizeof(nlMatrixSDEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1556:    *nlMatrixDSEntry = (nlMatrixDSEntry_t *) malloc(sizeof(nlMatrixDSEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1622:    *nlMatrixTopNControlEntry = (nlMatrixTopNControlEntry_t *) malloc(sizeof(nlMatrixTopNControlEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1672:            memcpy((*nlMatrixTopNControlEntry)->__nlMatrixTopNControlOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1721:    *nlMatrixTopNEntry = (nlMatrixTopNEntry_t *) malloc(sizeof(nlMatrixTopNEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1736:            memcpy((*nlMatrixTopNEntry)->__nlMatrixTopNSourceAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1742:            memcpy((*nlMatrixTopNEntry)->__nlMatrixTopNDestAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1804:    *alHostEntry = (alHostEntry_t *) malloc(sizeof(alHostEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1873:    *alMatrixSDEntry = (alMatrixSDEntry_t *) malloc(sizeof(alMatrixSDEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1932:    *alMatrixDSEntry = (alMatrixDSEntry_t *) malloc(sizeof(alMatrixDSEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1998:    *alMatrixTopNControlEntry = (alMatrixTopNControlEntry_t *) malloc(sizeof(alMatrixTopNControlEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2048:            memcpy((*alMatrixTopNControlEntry)->__alMatrixTopNControlOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2098:    *alMatrixTopNEntry = (alMatrixTopNEntry_t *) malloc(sizeof(alMatrixTopNEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2113:            memcpy((*alMatrixTopNEntry)->__alMatrixTopNSourceAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2119:            memcpy((*alMatrixTopNEntry)->__alMatrixTopNDestAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2187:    *usrHistoryControlEntry = (usrHistoryControlEntry_t *) malloc(sizeof(usrHistoryControlEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2217:            memcpy((*usrHistoryControlEntry)->__usrHistoryControlOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2261:    *usrHistoryObjectEntry = (usrHistoryObjectEntry_t *) malloc(sizeof(usrHistoryObjectEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2314:    *usrHistoryEntry = (usrHistoryEntry_t *) malloc(sizeof(usrHistoryEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2385:    *probeConfig = (probeConfig_t *) malloc(sizeof(probeConfig_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2395:            memcpy((*probeConfig)->__probeCapabilities, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2401:            memcpy((*probeConfig)->__probeSoftwareRev, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2407:            memcpy((*probeConfig)->__probeHardwareRev, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2413:            memcpy((*probeConfig)->__probeDateTime, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2424:            memcpy((*probeConfig)->__probeDownloadFile, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2430:            memcpy((*probeConfig)->__probeDownloadTFTPServer, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2445:            memcpy((*probeConfig)->__netDefaultGateway, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2490:    *serialConfigEntry = (serialConfigEntry_t *) malloc(sizeof(serialConfigEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2515:            memcpy((*serialConfigEntry)->__serialModemInitString, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2521:            memcpy((*serialConfigEntry)->__serialModemHangUpString, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2527:            memcpy((*serialConfigEntry)->__serialModemConnectResp, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2533:            memcpy((*serialConfigEntry)->__serialModemNoConnectResp, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2583:    *netConfigEntry = (netConfigEntry_t *) malloc(sizeof(netConfigEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2593:            memcpy((*netConfigEntry)->__netConfigIPAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2598:            memcpy((*netConfigEntry)->__netConfigSubnetMask, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2644:    *trapDestEntry = (trapDestEntry_t *) malloc(sizeof(trapDestEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2654:            memcpy((*trapDestEntry)->__trapDestCommunity, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2665:            memcpy((*trapDestEntry)->__trapDestAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2671:            memcpy((*trapDestEntry)->__trapDestOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2721:    *serialConnectionEntry = (serialConnectionEntry_t *) malloc(sizeof(serialConnectionEntry_t));
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2731:            memcpy((*serialConnectionEntry)->__serialConnectDestIpAddress, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2741:            memcpy((*serialConnectionEntry)->__serialConnectDialString, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2747:            memcpy((*serialConnectionEntry)->__serialConnectSwitchConnectSeq, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2753:            memcpy((*serialConnectionEntry)->__serialConnectSwitchDisconnectSeq, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2759:            memcpy((*serialConnectionEntry)->__serialConnectSwitchResetSeq, vars->val.string, vars->val_len);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2765:            memcpy((*serialConnectionEntry)->__serialConnectOwner, vars->val.string, vars->val_len);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:93:    *system = (system_t *) malloc(sizeof(system_t));
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:103:            memcpy((*system)->__sysDescr, vars->val.string, vars->val_len);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:117:            memcpy((*system)->__sysContact, vars->val.string, vars->val_len);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:123:            memcpy((*system)->__sysName, vars->val.string, vars->val_len);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:129:            memcpy((*system)->__sysLocation, vars->val.string, vars->val_len);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:179:    *sysOREntry = (sysOREntry_t *) malloc(sizeof(sysOREntry_t));
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:192:            memcpy((*sysOREntry)->__sysORDescr, vars->val.string, vars->val_len);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:264:    *snmp = (snmp_t *) malloc(sizeof(snmp_t));
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:456:    *snmpSet = (snmpSet_t *) malloc(sizeof(snmpSet_t));
./test/dumps/netsnmp/mau-mib-mgr-stub.c:97:    *rpMauEntry = (rpMauEntry_t *) malloc(sizeof(rpMauEntry_t));
./test/dumps/netsnmp/mau-mib-mgr-stub.c:187:    *rpJackEntry = (rpJackEntry_t *) malloc(sizeof(rpJackEntry_t));
./test/dumps/netsnmp/mau-mib-mgr-stub.c:247:    *ifMauEntry = (ifMauEntry_t *) malloc(sizeof(ifMauEntry_t));
./test/dumps/netsnmp/mau-mib-mgr-stub.c:313:            memcpy((*ifMauEntry)->__ifMauTypeListBits, vars->val.string, vars->val_len);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:354:    *ifJackEntry = (ifJackEntry_t *) malloc(sizeof(ifJackEntry_t));
./test/dumps/netsnmp/mau-mib-mgr-stub.c:405:    *broadMauBasicEntry = (broadMauBasicEntry_t *) malloc(sizeof(broadMauBasicEntry_t));
./test/dumps/netsnmp/mau-mib-mgr-stub.c:483:    *ifMauAutoNegEntry = (ifMauAutoNegEntry_t *) malloc(sizeof(ifMauAutoNegEntry_t));
./test/dumps/netsnmp/mau-mib-mgr-stub.c:528:            memcpy((*ifMauAutoNegEntry)->__ifMauAutoNegCapabilityBits, vars->val.string, vars->val_len);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:534:            memcpy((*ifMauAutoNegEntry)->__ifMauAutoNegCapAdvertisedBits, vars->val.string, vars->val_len);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:540:            memcpy((*ifMauAutoNegEntry)->__ifMauAutoNegCapReceivedBits, vars->val.string, vars->val_len);
./lib/parser-smi.c:1317:		memcpy(valuePtr->value.ptr,
./lib/parser-smi.c:1729:void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
./lib/parser-smi.c:1768:      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
./lib/parser-smi.c:8510:				sprintf(md, "%s.%s", (yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].id));
./lib/parser-smi.c:8707:			    sprintf(md, "%s.%s", (yyvsp[(1) - (6)].id), (yyvsp[(3) - (6)].id));
./lib/snprintf.h:48:extern int asprintf (char **ret, const char *format, ...);
./lib/snprintf.h:52:extern int vasprintf (char **ret, const char *format, va_list args);
./lib/smi.c:232:	    smiAsprintf(&p, "%s%c%s",
./lib/smi.c:245:	    smiAsprintf(&pp, "%s%s", smiHandle->path, p);
./lib/smi.c:249:	    smiAsprintf(&pp, "%s%s", p, smiHandle->path);
./lib/smi.c:356:			smiAsprintf(&s, "%s%s", smiHandle->path, arg);
./lib/smi.c:360:			smiAsprintf(&s, "%s%s", arg, smiHandle->path);
./lib/smi.c:1877:	    smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:1896:		smiAsprintf(&s, "%s::%s",
./lib/smi.c:1899:		smiAsprintf(&s, "%s", nodePtr->name);
./lib/smi.c:1906:	smiAsprintf(&s, "%s%s%u", ss ? ss : "", i ? "." : "", oid[i]);
./lib/smi.c:1911:	smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:1934:	    smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:1951:		smiAsprintf(&s, "%0*lu.",
./lib/smi.c:1961:		smiAsprintf(&s, "%lu", smiValuePtr->value.unsigned32);
./lib/smi.c:1964:	    smiAsprintf(&s, "%lx", smiValuePtr->value.unsigned32);
./lib/smi.c:1966:	    smiAsprintf(&s, "%lo", smiValuePtr->value.unsigned32);
./lib/smi.c:1988:		sprintf(f, "%%0%s.", UINT64_FORMAT);
./lib/smi.c:1990:		smiAsprintf(&s, f,
./lib/smi.c:2000:		smiAsprintf(&s, UINT64_FORMAT, smiValuePtr->value.unsigned64);
./lib/smi.c:2003:	    strcpy(f, UINT64_FORMAT);
./lib/smi.c:2005:	    smiAsprintf(&s, f, smiValuePtr->value.unsigned64);
./lib/smi.c:2007:	    strcpy(f, UINT64_FORMAT);
./lib/smi.c:2009:	    smiAsprintf(&s, f, smiValuePtr->value.unsigned64);
./lib/smi.c:2031:		smiAsprintf(&s, "%0*ld.",
./lib/smi.c:2041:		smiAsprintf(&s, "%ld", smiValuePtr->value.integer32);
./lib/smi.c:2045:		smiAsprintf(&s, "%lx", smiValuePtr->value.integer32);
./lib/smi.c:2047:		smiAsprintf(&s, "-%lx", - smiValuePtr->value.integer32);
./lib/smi.c:2051:		smiAsprintf(&s, "%lo", smiValuePtr->value.integer32);
./lib/smi.c:2053:		smiAsprintf(&s, "-%lo", - smiValuePtr->value.integer32);
./lib/smi.c:2084:		sprintf(f, "%%0%s.", INT64_FORMAT);
./lib/smi.c:2086:		smiAsprintf(&s, f,
./lib/smi.c:2096:		smiAsprintf(&s, INT64_FORMAT, smiValuePtr->value.integer64);
./lib/smi.c:2100:		strcpy(f, UINT64_FORMAT);
./lib/smi.c:2102:		smiAsprintf(&s, f, smiValuePtr->value.integer64);
./lib/smi.c:2104:		sprintf(f, "-%s", UINT64_FORMAT);
./lib/smi.c:2106:		smiAsprintf(&s, f, - smiValuePtr->value.integer64);
./lib/smi.c:2110:		strcpy(f, UINT64_FORMAT);
./lib/smi.c:2111:		sprintf(f, "-%s", UINT64_FORMAT);
./lib/smi.c:2113:		smiAsprintf(&s, f, smiValuePtr->value.integer64);
./lib/smi.c:2115:		smiAsprintf(&s, f, - smiValuePtr->value.integer64);
./lib/smi.c:2150:		smiAsprintf(&s, "");
./lib/smi.c:2153:		    smiAsprintf(&s, "%s%02x", ss, smiValuePtr->value.ptr[i]);
./lib/smi.c:2157:		smiAsprintf(&s, "%s", smiValuePtr->value.ptr);
./lib/smi.c:2161:	    smiAsprintf(&s, "");
./lib/smi.c:2186:				smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:2193:			smiAsprintf(&s, "%s%c", ss, smiValuePtr->value.ptr[i+k]);
./lib/smi.c:2215:			sprintf(f, "%%s%s", UINT64_FORMAT);
./lib/smi.c:2216:			smiAsprintf(&s, f, ss, vv);
./lib/smi.c:2221:			sprintf(f, "%%s%s", UINT64_FORMAT);
./lib/smi.c:2223:			smiAsprintf(&s, f, ss, vv);
./lib/smi.c:2228:			sprintf(f, "%%s%%0%s", UINT64_FORMAT);
./lib/smi.c:2231:			smiAsprintf(&s, f, ss, xlen, vv);
./lib/smi.c:2240:			    smiAsprintf(&s, "%s%c",
./lib/smi.c:2250:			smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:2265:			smiAsprintf(&s, "%s%c", ss, fmt[0]);
./lib/smi.c:2286:		    smiAsprintf(&s, "%s(%ld)",
./lib/smi.c:2289:		    smiAsprintf(&s, "%s", nn->name);
./lib/smi.c:2292:		smiAsprintf(&s, "%ld", smiValuePtr->value.integer32);
./lib/smi.c:2295:	    smiAsprintf(&s, "%ld", smiValuePtr->value.integer32);
./lib/smi.c:2299:	smiAsprintf(&s, "");
./lib/smi.c:2312:		    smiAsprintf(&s, "%s%s%s(%d)",
./lib/smi.c:2315:		    smiAsprintf(&s, "%s%s%s",
./lib/smi.c:2318:		    smiAsprintf(&s, "%s%s%d",
./lib/smi.c:2331:	    smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:2348:	    smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:2357:	    smiAsprintf(&s, "%s", smiNodePtr->name);
./lib/smi.c:2359:	    smiAsprintf(&s, "%s::%s", modulePtr->name, smiNodePtr->name);
./lib/smi.c:2374:	    smiAsprintf(&s, SMI_UNKNOWN_LABEL);
./lib/smi.c:2383:	    smiAsprintf(&s, "%s", smiTypePtr->name);
./lib/smi.c:2385:	    smiAsprintf(&s, "%s::%s", modulePtr->name, smiTypePtr->name);
./lib/smi.c:2564:int smiAsprintf(char **strp, const char *format, ...)
./lib/smi.c:2570:    rc = vasprintf(strp, format, ap);
./lib/smi.c:2580:int smiVasprintf(char **strp, const char *format, va_list ap)
./lib/smi.c:2584:    rc = vasprintf(strp, format, ap);
./lib/snprintf.c:481:    tmp = malloc (sz);
./lib/snprintf.c:485:    ret2 = vsprintf (tmp, format, args);
./lib/snprintf.c:499:asprintf (char **ret, const char *format, ...)
./lib/snprintf.c:505:  val = vasprintf (ret, format, args);
./lib/snprintf.c:511:    tmp = malloc (val + 1);
./lib/snprintf.c:515:    ret2 = vsprintf (tmp, format, args);
./lib/snprintf.c:541:    tmp = malloc (val + 1);
./lib/snprintf.c:545:    ret2 = vsprintf (tmp, format, args);
./lib/snprintf.c:559:vasprintf (char **ret, const char *format, va_list args)
./lib/snprintf.c:576:  state.str    = malloc(state.sz);
./lib/parser-sming.c:493:   char* res =(char*)malloc(sizeof(char)*len/2+1);
./lib/parser-sming.c:494:   char* tmp =(char*)malloc(sizeof(char)*3);
./lib/parser-sming.c:754:void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
./lib/parser-sming.c:793:      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
./lib/parser-sming.c:2901:						classPtr->uniqueList = (List*)malloc(sizeof(List));
./lib/parser-sming.c:4819:			    sprintf(s, "%s::%s", (yyvsp[(1) - (3)].text), (yyvsp[(3) - (3)].text));
./lib/parser-sming.c:4840:			    sprintf(s, "%s::%s", (yyvsp[(1) - (3)].text), (yyvsp[(3) - (3)].text));
./lib/parser-sming.c:4858:				strcpy((yyval.text), (yyvsp[(1) - (2)].text));
./lib/parser-sming.c:4897:			    strcpy((yyval.text), (yyvsp[(1) - (2)].text));
./lib/parser-sming.c:5098:				strcpy((yyval.valuePtr)->value.ptr,(yyvsp[(1) - (1)].text));
./lib/parser-sming.c:5272:			    sprintf(s, "%s::%s", (yyvsp[(1) - (3)].text), (yyvsp[(3) - (3)].text));
./lib/parser-sming.c:5281:				strcpy((yyval.text),(yyvsp[(1) - (1)].text));
./lib/error.c:966:	    smiVasprintf(&buffer, errors[i].fmt, ap);
./lib/error.c:972:	    smiVasprintf(&buffer, errors[i].fmt, ap);
./lib/smi.h:626:extern int smiAsprintf(char **strp, const char *format, ...);
./lib/smi.h:628:extern int smiVasprintf(char **strp, const char *format, va_list ap);
./lib/smi.h:634: * simple wrappers around the standard malloc() and friends functions,
./lib/smi.h:637: * / deallocate memory with the 'right' version of malloc() and
./lib/scanner-sming.c:7481:	return (void *) malloc( size );
./lib/scanner-smi.c:13022:                sprintf(tmpbuf, "%llu", yylval.unsigned64);
./lib/scanner-smi.c:13061:                sprintf(tmpbuf, "%lld", yylval.integer64);
./lib/scanner-smi.c:14148:	return (void *) malloc( size );
./lib/util.c:88:    char *m = calloc(1, size);
./lib/util.c:160:	smiAsprintf(&s, "TZ=%s", tz);
./lib/data.c:4614:		smiAsprintf(&path, "%s%c%s%s", dir, DIR_SEPARATOR,
./lib/data.c:4628:		    smiAsprintf(&path, "%s%c%s%s", dir, DIR_SEPARATOR,
./lib/data.c:4656:	smiAsprintf(&path, "%s%c%s",
./lib/data.c:4659:	    smiAsprintf(&cmd, "%s %s", smiHandle->cacheProg, modulename);
./tools/dump-svg-script.h:6:"var collapsed = new Array(2);\n"
./tools/dump-svg-script.h:7:"var name = new Array(%i);\n"
./tools/dump-svg-script.h:8:"var clickStatus = new Array(%i);\n"
./tools/dump-svg-script.h:9:"var redCount = new Array(%i);\n"
./tools/dump-svg-script.h:10:"var salmonCount = new Array(%i);\n"
./tools/dump-svg-script.h:451:"    collapsed[0] = new Array(%i);\n"
./tools/dump-svg-script.h:452:"    collapsed[1] = new Array(%i);\n"
./tools/dump-svg-script.h:467:"    revert = new Array(paths.length);\n"
./tools/dump-jax.c:310:            "        oid = new AgentXOID(OID);\n"
./tools/dump-jax.c:332:            "        oid = new AgentXOID(OID);\n"
./tools/dump-jax.c:352:            "        AgentXOID oid = new AgentXOID(getOID(), column, entry.getInstance());\n"
./tools/dump-jax.c:677:                        "            %s = new byte[value.length];\n"
./tools/dump-jax.c:832:                        "            %s = new byte[value.length];\n"
./tools/dump-jax.c:997:            "        oid = new AgentXOID(%sOID);\n"
./tools/dump-jax.c:998:            "        data = new Vector();\n",
./tools/dump-jax.c:1006:                "        %sOID = new AgentXOID(%sName);\n"
./tools/dump-jax.c:1044:                        "            %s = new byte[value.length];\n"
./tools/dump-jax.c:1249:                    "    private static AgentXVarBind varBind_%s = new AgentXVarBind(\n"
./tools/dump-jax.c:1299:			"        varBind = new AgentXVarBind(oid,\n"
./tools/dump-jax.c:1314:			"        varBind = new AgentXVarBind(oid,\n"
./tools/dump-jax.c:1425:                        "            %s = new byte[value.length];\n"

== files() ==
./tools/dump-mosy.c:481:	f = fopen(output, "w");
./tools/dump-smi.c:1966:	f = fopen(output, "w");
./tools/dump-smi.c:1997:	f = fopen(output, "w");
./tools/dump-scli.c:291:    f = fopen(fullname, "w");
./tools/dump-xml.c:959:	f = fopen(output, "w");
./tools/dump-perl.c:1092:        f = fopen(output, "w");
./tools/dump-sizes.c:1258:	  f = fopen(output, "w");
./tools/dump-types.c:577:	f = fopen(output, "w");
./tools/dump-jax.c:99:    f = fopen(fullname, "w");
./tools/dump-metrics.c:1605:	f = fopen(output, "w");
./tools/dump-boilerplate.c:163:	f = fopen(output, "w");
./tools/dump-imports.c:150:	f = fopen(output, "w");
./tools/dump-compliance.c:251:	f = fopen(output, "w");
./tools/dump-sming.c:1606:	f = fopen(output, "w");
./tools/dump-netsnmp.c:173:    f = fopen(fullname, "w");
./tools/dump-netsnmp.c:1058:	    "    peer = snmp_open(s);\n"
./tools/dump-identifiers.c:130:	f = fopen(output, "w");
./tools/dump-tree.c:461:	f = fopen(output, "w");
./tools/dump-yang.c:1338:	f = fopen(output, "w");
./tools/dump-corba.c:127:    f = fopen(fullname, "w");
./tools/dump-sppi.c:1708:	f = fopen(output, "w");
./tools/dump-xsd.c:1979:	f = fopen(output, "w");
./tools/dump-xsd.c:2053:	f = fopen(output, "w");
./tools/dump-python.c:1075:	f = fopen(output, "w");
./test/dumps/netsnmp/if-mib-mgr-stub.c:86:    peer = snmp_open(s);
./test/dumps/netsnmp/if-mib-mgr-stub.c:154:    peer = snmp_open(s);
./test/dumps/netsnmp/if-mib-mgr-stub.c:307:    peer = snmp_open(s);
./test/dumps/netsnmp/if-mib-mgr-stub.c:377:    peer = snmp_open(s);
./test/dumps/netsnmp/if-mib-mgr-stub.c:500:    peer = snmp_open(s);
./test/dumps/netsnmp/if-mib-mgr-stub.c:552:    peer = snmp_open(s);
./test/dumps/netsnmp/if-mib-mgr-stub.c:622:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:231:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:284:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:337:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:389:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:437:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:490:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:543:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:596:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:649:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:702:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:754:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:808:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:897:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:964:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1018:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1078:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1140:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1203:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1304:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1386:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1484:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1543:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1609:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1708:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1791:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1860:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1919:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:1985:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2085:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2174:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2248:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2301:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2372:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2477:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2570:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2631:    peer = snmp_open(s);
./test/dumps/netsnmp/rmon2-mib-mgr-stub.c:2708:    peer = snmp_open(s);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:80:    peer = snmp_open(s);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:166:    peer = snmp_open(s);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:251:    peer = snmp_open(s);
./test/dumps/netsnmp/snmpv2-mib-mgr-stub.c:443:    peer = snmp_open(s);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:84:    peer = snmp_open(s);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:174:    peer = snmp_open(s);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:234:    peer = snmp_open(s);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:341:    peer = snmp_open(s);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:392:    peer = snmp_open(s);
./test/dumps/netsnmp/mau-mib-mgr-stub.c:470:    peer = snmp_open(s);
./lib/smi.c:336:    file = fopen(filename, "r");
./lib/data.c:4690:    file = fopen(path, "r");

== logging() ==
./tools/dump-mosy.c:484:	    perror(NULL);
./tools/dump-mosy.c:521:    if (fflush(f) || ferror(f)) {
./tools/dump-mosy.c:522:	perror("smidump: write error");
./tools/dump-smi.c:1969:	    perror(NULL);
./tools/dump-smi.c:1976:	if (fflush(f) || ferror(f)) {
./tools/dump-smi.c:1977:	    perror("smidump: write error");
./tools/dump-smi.c:2000:	    perror(NULL);
./tools/dump-smi.c:2009:    if (fflush(f) || ferror(f)) {
./tools/dump-smi.c:2010:	perror("smidump: write error");
./tools/dump-scli.c:46:#define regerror(a,b,c,d)	strncpy(c, "regex not supported", d)
./tools/dump-scli.c:294:        perror(NULL);
./tools/dump-scli.c:1398:    if (fflush(f) || ferror(f)) {
./tools/dump-scli.c:1399:	perror("smidump: write error");
./tools/dump-scli.c:3300:    if (fflush(f) || ferror(f)) {
./tools/dump-scli.c:3301:	perror("smidump: write error");
./tools/dump-scli.c:3321:	    regerror(code, incl_regex, buffer, sizeof(buffer));
./tools/dump-scli.c:3332:	    regerror(code, excl_regex, buffer, sizeof(buffer));
./tools/dump-xml.c:962:	    perror(NULL);
./tools/dump-xml.c:996:    if (fflush(f) || ferror(f)) {
./tools/dump-xml.c:997:	perror("smidump: write error");
./tools/dump-perl.c:1095:            perror(NULL);
./tools/dump-perl.c:1104:    if (fflush(f) || ferror(f)) {
./tools/dump-perl.c:1105:	perror("smidump: write error");
./tools/smidiff.c:56:    int id;		/* error id used in the error() invocation */
./tools/smidiff.c:3205:    if (fflush(stdout) || ferror(stdout)) {
./tools/smidiff.c:3206:	perror("smidiff: write error");
./tools/dump-sizes.c:1261:	       perror(NULL);
./tools/dump-sizes.c:1315:     if (fflush(f) || ferror(f)) {
./tools/dump-sizes.c:1316:	  perror("smidump: write error");
./tools/dump-types.c:580:	    perror(NULL);
./tools/dump-types.c:666:    if (fflush(f) || ferror(f)) {
./tools/dump-types.c:667:	perror("smidump: write error");
./tools/dump-jax.c:102:        perror(NULL);
./tools/dump-jax.c:434:    if (fflush(f) || ferror(f)) {
./tools/dump-jax.c:435:	perror("smidump: write error");
./tools/dump-jax.c:715:    if (fflush(f) || ferror(f)) {
./tools/dump-jax.c:716:	perror("smidump: write error");
./tools/dump-jax.c:870:    if (fflush(f) || ferror(f)) {
./tools/dump-jax.c:871:	perror("smidump: write error");
./tools/dump-jax.c:1162:    if (fflush(f) || ferror(f)) {
./tools/dump-jax.c:1163:	perror("smidump: write error");
./tools/dump-jax.c:1342:    if (fflush(f) || ferror(f)) {
./tools/dump-jax.c:1343:	perror("smidump: write error");
./tools/dump-jax.c:1466:    if (fflush(f) || ferror(f)) {
./tools/dump-jax.c:1467:	perror("smidump: write error");
./tools/dump-metrics.c:1608:	    perror(NULL);
./tools/dump-metrics.c:1655:    if (fflush(f) || ferror(f)) {
./tools/dump-metrics.c:1656:	perror("smidump: write error");
./tools/dump-boilerplate.c:166:	    perror(NULL);
./tools/dump-boilerplate.c:215:    if (fflush(f) || ferror(f)) {
./tools/dump-boilerplate.c:216:	perror("smidump: write error");
./tools/dump-imports.c:153:	    perror(NULL);
./tools/dump-imports.c:173:    if (fflush(f) || ferror(f)) {
./tools/dump-imports.c:174:	perror("smidump: write error");
./tools/dump-compliance.c:254:	    perror(NULL);
./tools/dump-compliance.c:273:    if (fflush(f) || ferror(f)) {
./tools/dump-compliance.c:274:	perror("smidump: write error");
./tools/dump-sming.c:1609:	    perror(NULL);
./tools/dump-sming.c:1670:    if (fflush(f) || ferror(f)) {
./tools/dump-sming.c:1671:	perror("smidump: write error");
./tools/dump-netsnmp.c:176:        perror(NULL);
./tools/dump-netsnmp.c:1182:    if (fflush(f) || ferror(f)) {
./tools/dump-netsnmp.c:1183:	perror("smidump: write error");
./tools/dump-netsnmp.c:1285:    if (fflush(f) || ferror(f)) {
./tools/dump-netsnmp.c:1286:	perror("smidump: write error");
./tools/dump-cm.c:1182:    if (fflush(stdout) || ferror(stdout)) {
./tools/dump-cm.c:1183:	perror("smidump: write error");
./tools/dump-identifiers.c:133:	    perror(NULL);
./tools/dump-identifiers.c:190:    if (fflush(f) || ferror(f)) {
./tools/dump-identifiers.c:191:	perror("smidump: write error");
./tools/dump-tree.c:464:	    perror(NULL);
./tools/dump-tree.c:503:    if (fflush(f) || ferror(f)) {
./tools/dump-tree.c:504:	perror("smidump: write error");
./tools/dump-yang.c:1341:	    perror(NULL);
./tools/dump-yang.c:1391:    if (fflush(f) || ferror(f)) {
./tools/dump-yang.c:1392:	perror("smidump: write error");
./tools/dump-corba.c:130:        perror(NULL);
./tools/dump-corba.c:1593:    if (fflush(f) || ferror(f)) {
./tools/dump-corba.c:1594:	perror("smidump: write error");
./tools/dump-corba.c:1702:    if (fflush(f) || ferror(f)) {
./tools/dump-corba.c:1703:	perror("smidump: write error");
./tools/dump-sppi.c:1711:	    perror(NULL);
./tools/dump-sppi.c:1720:    if (fflush(f) || ferror(f)) {
./tools/dump-sppi.c:1721:	perror("smidump: write error");
./tools/dump-xsd.c:1982:	    perror(NULL);
./tools/dump-xsd.c:2035:    if (fflush(f) || ferror(f)) {
./tools/dump-xsd.c:2036:	perror("smidump: write error");
./tools/dump-xsd.c:2056:	    perror(NULL);
./tools/dump-xsd.c:2101:    if (fflush(f) || ferror(f)) {
./tools/dump-xsd.c:2102:	perror("smidump: write error");
./tools/dump-svg.c:3305:    if (fflush(stdout) || ferror(stdout)) {
./tools/dump-svg.c:3306:	perror("smidump: write error");
./tools/dump-python.c:1078:	    perror(NULL);
./tools/dump-python.c:1087:    if (fflush(f) || ferror(f)) {
./tools/dump-python.c:1088:	perror("smidump: write error");
./lib/parser-smi.c:2747:      yyerror (YY_("syntax error: cannot back up")); \
./lib/parser-smi.c:3095:yysyntax_error (char *yyresult, int yystate, int yychar)
./lib/parser-smi.c:9883:      yyerror (YY_("syntax error"));
./lib/parser-smi.c:9886:	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
./lib/parser-smi.c:9906:	    (void) yysyntax_error (yymsg, yystate, yychar);
./lib/parser-smi.c:9907:	    yyerror (yymsg);
./lib/parser-smi.c:9911:	    yyerror (YY_("syntax error"));
./lib/parser-smi.c:10029:  yyerror (YY_("memory exhausted"));
./lib/parser-sming.c:1586:      yyerror (YY_("syntax error: cannot back up")); \
./lib/parser-sming.c:1934:yysyntax_error (char *yyresult, int yystate, int yychar)
./lib/parser-sming.c:5418:      yyerror (YY_("syntax error"));
./lib/parser-sming.c:5421:	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
./lib/parser-sming.c:5441:	    (void) yysyntax_error (yymsg, yystate, yychar);
./lib/parser-sming.c:5442:	    yyerror (yymsg);
./lib/parser-sming.c:5446:	    yyerror (YY_("syntax error"));
./lib/parser-sming.c:5564:  yyerror (YY_("memory exhausted"));
./lib/check.c:2199:void smiyyerror(char *msg, Parser *parserPtr)
./lib/check.h:69:extern void smiyyerror(char *msg, Parser *parserPtr);
./lib/error.c:54:    int id;			/* error id, used in error() invocation	     */
./lib/error.c:187:      "flushing recent incorrect declaration, see previous error(s)", NULL},
./lib/error.h:25:#define yyerror(parserPtr, msg)	smiyyerror(msg, parserPtr)
./lib/scanner-sming.c:5208:static void yy_fatal_error (yyconst char msg[]  );
./lib/scanner-sming.c:5512:		if ( c == EOF && ferror( smingin ) ) \
./lib/scanner-sming.c:5519:		while ( (result = fread(buf, 1, max_size, smingin))==0 && ferror(smingin)) \
./lib/scanner-sming.c:5549:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
./lib/scanner-sming.c:7302:static void yy_fatal_error (yyconst char* msg )
./lib/scanner-sming.c:7395:int smingget_debug  (void)
./lib/scanner-sming.c:7400:void smingset_debug (int  bdebug )
./lib/scanner-smi.c:11209:static void yy_fatal_error (yyconst char msg[]  );
./lib/scanner-smi.c:11579:		if ( c == EOF && ferror( smiin ) ) \
./lib/scanner-smi.c:11586:		while ( (result = fread(buf, 1, max_size, smiin))==0 && ferror(smiin)) \
./lib/scanner-smi.c:11616:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
./lib/scanner-smi.c:11863:/* Special-case a common error (dashed seperator lines with
./lib/scanner-smi.c:13969:static void yy_fatal_error (yyconst char* msg )
./lib/scanner-smi.c:14062:int smiget_debug  (void)
./lib/scanner-smi.c:14067:void smiset_debug (int  bdebug )
./lib/data.c:4692:	smiPrintError(parserPtr, ERR_OPENING_INPUTFILE, path, strerror(errno));

== environment() ==
./lib/smi.c:242:    p = getenv("SMIPATH");
./lib/util.c:157:    tz = getenv("TZ");

== privileged() ==

== networking() ==
./tools/dump-sizes.c:842:ber_len_varbind(SmiNode *smiNode, len_type flags)
./tools/dump-sizes.c:951:	       b = ber_len_varbind(child, len_min);
./tools/dump-sizes.c:952:	       a = ber_len_varbind(child, len_mean);
./tools/dump-sizes.c:953:	       w = ber_len_varbind(child, len_max);
./tools/dump-sizes.c:994:		 b = ber_len_varbind(child, len_min);
./tools/dump-sizes.c:995:		 a = ber_len_varbind(child, len_mean);
./tools/dump-sizes.c:996:		 w = ber_len_varbind(child, len_max);
./tools/dump-sizes.c:1048:	       b = ber_len_varbind(child, len_min);
./tools/dump-sizes.c:1049:	       a = ber_len_varbind(child, len_mean);
./tools/dump-sizes.c:1050:	       w = ber_len_varbind(child, len_max);
./tools/dump-sizes.c:1121:	  b = ber_len_varbind(varNode, len_min);
./tools/dump-sizes.c:1122:	  a = ber_len_varbind(varNode, len_mean);
./tools/dump-sizes.c:1123:	  w = ber_len_varbind(varNode, len_max);
./tools/dump-sizes.c:1175:	     b = ber_len_varbind(varNode, len_min);
./tools/dump-sizes.c:1176:	     a = ber_len_varbind(varNode, len_mean);
./tools/dump-sizes.c:1177:	     w = ber_len_varbind(varNode, len_max);
./lib/scanner-sming.c:217:	 * instead of fread(), to make sure we stop fetching input after
./lib/scanner-sming.c:5493: * we now use fwrite().
./lib/scanner-sming.c:5495:#define ECHO (void) fwrite( smingtext, smingleng, 1, smingout )
./lib/scanner-sming.c:5519:		while ( (result = fread(buf, 1, max_size, smingin))==0 && ferror(smingin)) \
./lib/scanner-smi.c:217:	 * instead of fread(), to make sure we stop fetching input after
./lib/scanner-smi.c:11560: * we now use fwrite().
./lib/scanner-smi.c:11562:#define ECHO (void) fwrite( smitext, smileng, 1, smiout )
./lib/scanner-smi.c:11586:		while ( (result = fread(buf, 1, max_size, smiin))==0 && ferror(smiin)) \

== http:// ==
./tools/dump-svg-script.h:3:"//SVG - Learning By Coding - http://www.datenverdrahten.de/svglbc/\n"
./tools/dump-xml.c:971:	    fprint(f, "<!DOCTYPE smi SYSTEM \"http://www.ibr.cs.tu-bs.de/projects/nmrg/smi.dtd\">\n");
./tools/dump-xml.c:979:	    fprint(f, "<smi xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");
./tools/dump-xml.c:980:	    fprint(f, "     xsi:noNamespaceSchemaLocation=\"http://www.ibr.cs.tu-bs.de/projects/nmrg/smi.xsd\">\n");
./tools/dump-cm.c:120:    printf("<diagram xmlns:dia=\"http://www.lysator.liu.se/~alla/dia/\">\n");
./tools/dump-corba.c:6: *	force, published as Open Group <URL:http://www.opengroup.org/>
./tools/smidump.c:182:   http://en.wikipedia.org/wiki/Format_string_vulnerabilities
./tools/dump-xsd.c:42:static char *schemaLocation = "http://www.ibr.cs.tu-bs.de/projects/libsmi/xsd/";
./tools/dump-xsd.c:2003:/*      fprintf(f, "            xmlns:xmn=\"http://www.w3.org/XML/1998/namespace\"\n"); */
./tools/dump-xsd.c:2004:	fprintf(f, "            xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n");
./tools/dump-xsd.c:2071:    fprintf(f, "            xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n");
./tools/dump-svg.c:34:#define URL "http://www.ibr.cs.tu-bs.de/projects/libsmi/svg/mib2svg.cgi?"
./tools/dump-svg.c:1073:    printf("  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n");
./tools/dump-svg.c:1078:    printf("     xmlns=\"http://www.w3.org/2000/svg\"\n");
./tools/dump-svg.c:1079:    printf("     xmlns:xlink=\"http://www.w3.org/1999/xlink\"");
./tools/dump-svg.c:2805: * and: http://citeseer.ist.psu.edu/fruchterman91graph.html
./lib/data.c:4746:	 * http://www.ibr.cs.tu-bs.de/pipermail/libsmi/2010-August/001214.html
./lib/data.c:4747:	 * http://www.ibr.cs.tu-bs.de/pipermail/libsmi/2011-May/001249.html
./lib/data.c:4801:	 * http://www.ibr.cs.tu-bs.de/pipermail/libsmi/2010-August/001214.html
./lib/data.c:4802:	 * http://www.ibr.cs.tu-bs.de/pipermail/libsmi/2011-May/001249.html

== encryption ==

== sql() ==

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./tools/dump-mosy.c:340:	case SMI_INDEX_EXPAND:	/* TODO: we have to do more work here! */
./tools/fortopat.c:241:	/* XXX - fix this to use the normal error reporting mechanism XXX */
./tools/fortopat.c:726:	    /* TODO: add a warning that brackets have been added */
./tools/fortopat.c:732:	    /* TODO: some error handling */
./tools/dump-smi.c:64:/* XXX This breaks SMIv2 -> SMIv? compilation such that the IMPORT statement
./tools/dump-smi.c:300:    /* TODO: fully qualified if unambigous */
./tools/dump-smi.c:940:	/* TODO: non-local name if non-local */
./tools/dump-smi.c:941:    } /* TODO: empty? -> print error */
./tools/dump-smi.c:1080:	    /* TODO: else error */
./tools/dump-smi.c:1291:	    /* TODO: real agent capabilities */
./tools/dump-smi.c:1324:		    /* TODO: print non-local name qualified */
./tools/dump-smi.c:1337:		/* TODO: print non-local name qualified */
./tools/dump-smi.c:1412:	case SMI_INDEX_EXPAND:  /* TODO: we have to do more work here! */
./tools/dump-smi.c:1436:	    /* TODO: non-local name if non-local */
./tools/dump-smi.c:1486:	    /* TODO: non-local name? */
./tools/dump-smi.c:1595:		/* TODO: non-local name if non-local */
./tools/dump-smi.c:1596:	    } /* TODO: empty? -> print error */
./tools/dump-smi.c:1680:		/* TODO: non-local name if non-local */
./tools/dump-smi.c:1681:	    } /* TODO: empty? -> print error */
./tools/dump-smi.c:1897:		    ; /* TODO: search in options list */
./tools/dump-smi.c:1900:		    ; /* TODO: search in refinements list */
./tools/dump-scli.c:17: * TODO:
./tools/dump-scli.c:513:    case SMI_INDEX_EXPAND:	/* TODO: we have to do more work here! */
./tools/dump-scli.c:2144:    case SMI_INDEX_EXPAND:	/* TODO: we have to do more work here! */
./tools/dump-scli.c:2301:			"    /* XXX how to unpack %s->%s ? */\n",
./tools/dump-scli.c:2339:    case SMI_INDEX_EXPAND:	/* TODO: we have to do more work here! */
./tools/dump-scli.c:2496:			"    /* XXX how to pack %s ? */\n", cGroupName);
./tools/dump-xml.c:16: * TODO:
./tools/dump-xml.c:465:	} /* TODO: else print error */
./tools/dump-xml.c:474:	} /* TODO: else print error */
./tools/dump-xml.c:481:	} /* TODO: else print error */
./tools/dump-xml.c:490:	} /* TODO: else print error */
./tools/dump-perl.c:18: * TODO:
./tools/dump-perl.c:529:        } /* TODO: else print error */
./tools/dump-perl.c:539:        } /* TODO: else print error */
./tools/dump-perl.c:545:        } /* TODO: else print error */
./tools/dump-perl.c:551:        } /* TODO: else print error */
./tools/smidiff.c:18: * TODO:
./tools/dump-sizes.c:873:	       case SMI_INDEX_EXPAND: /* TODO: we have to do more work here! */
./tools/smixlate.c:87:     * TODO: - translate instance identifier to something meaningful
./tools/dump-jax.c:1450:                        "            undo_%s = -1; // TODO: better check!\n",
./tools/dump-metrics.c:262:    case SMI_INDEX_EXPAND:	/* TODO: we have to do more work here! */
./tools/dump-sming.c:124:/* TODO ...many more objects from RFC1213-MIB.. */    
./tools/dump-sming.c:132:    /* TODO: how to convert more SMIv1 information? */
./tools/dump-sming.c:245:    /* TODO: fully qualified if unambigous */
./tools/dump-sming.c:1218:		/* TODO: non-local name if non-local */
./tools/dump-sming.c:1219:	    } /* TODO: empty? -> print error */
./tools/dump-sming.c:1227:		/* TODO: non-local name if non-local */
./tools/dump-sming.c:1228:	    } /* TODO: else print error */
./tools/dump-sming.c:1234:		/* TODO: non-local name if non-local */
./tools/dump-sming.c:1247:		    /* TODO: non-local name if non-local */
./tools/dump-sming.c:1248:		} /* TODO: empty? -> print error */
./tools/dump-sming.c:1250:	    } /* TODO: else print error */
./tools/dump-sming.c:1256:		/* TODO: non-local name if non-local */
./tools/dump-sming.c:1257:	    } /* TODO: else print error */
./tools/dump-sming.c:1263:		/* TODO: non-local name if non-local */
./tools/dump-sming.c:1276:		    /* TODO: non-local name if non-local */
./tools/dump-sming.c:1277:		} /* TODO: empty? -> print error */
./tools/dump-sming.c:1279:	    } /* TODO: else print error */
./tools/dump-sming.c:1287:	    /* TODO: create list */
./tools/dump-sming.c:1372:		/* TODO: non-local name if non-local */
./tools/dump-sming.c:1373:	    } /* TODO: empty? -> print error */
./tools/dump-sming.c:1437:	    /* TODO: non-local name if non-local */
./tools/dump-sming.c:1438:	} /* TODO: empty? -> print error */
./tools/dump-sming.c:1528:		/* TODO: non-local name if non-local */
./tools/dump-sming.c:1529:	    } /* TODO: empty? -> print error */
./tools/dump-netsnmp.c:16: * TODO:
./tools/dump-tree.c:317:	    case SMI_INDEX_EXPAND:  /* TODO: we have to do more work here! */
./tools/dump-yang.c:26: * TODO:
./tools/dump-yang.c:1003:    fprintSegment(f, indent, "/* XXX table comments here XXX */\n", 0);
./tools/dump-yang.c:1046:    fprintSegment(f, indent, "/* XXX table comments here XXX */\n", 0);
./tools/dump-corba.c:486:	/* TODO */
./tools/dump-corba.c:804:	/* TODO: non-local name if non-local */
./tools/dump-corba.c:805:    } /* TODO: empty? -> print error */
./tools/dump-corba.c:1642:	    /* XXX what if the node is also of SMI_NODEKIND_MODULE ?? */
./tools/dump-sppi.c:168:    /* TODO: fully qualified if unambigous */
./tools/dump-sppi.c:760:	    /* TODO: non-local name if non-local */
./tools/dump-sppi.c:761:        } /* TODO: empty? -> print error */
./tools/dump-sppi.c:783:	/* TODO: non-local name if non-local */
./tools/dump-sppi.c:784:    } /* TODO: empty? -> print error */
./tools/dump-sppi.c:811:	/* TODO: non-local name if non-local */
./tools/dump-sppi.c:812:    } /* TODO: empty? -> print error */
./tools/dump-sppi.c:960:	/* TODO: else error */
./tools/dump-sppi.c:1107:		    /* TODO: print non-local name qualified */
./tools/dump-sppi.c:1120:		/* TODO: print non-local name qualified */
./tools/dump-sppi.c:1252:	    /* TODO: non-local name? */
./tools/dump-sppi.c:1353:	    /* TODO: non-local name if non-local */
./tools/dump-sppi.c:1354:	} /* TODO: empty? -> print error */
./tools/dump-sppi.c:1543:		; /* TODO: search in options list */
./tools/dump-sppi.c:1546:		; /* TODO: search in refinements list */
./tools/dump-xsd.c:709:	/* TODO */
./tools/dump-xsd.c:2133:    free( typePrefixes ); /* XXX: TODO: free all malloced types in a loop */
./tools/dump-svg.c:46:/* FIXME int or float? */
./tools/dump-svg.c:280: * FIXME stimmt das?
./tools/dump-svg.c:310:    /* FIXME
./tools/dump-svg.c:1032: * TODO
./tools/dump-svg.c:1095:	/* FIXME calculate things dynamically: */
./tools/dump-svg.c:1130: * FIXME this algorithm may work good for a monospace-font. we have some
./tools/dump-svg.c:2962:	/* FIXME do we need a stage with nodeoverlap and without edgeoverlap? */
./tools/dump-python.c:17: * TODO:
./tools/dump-python.c:529:	} /* TODO: else print error */
./tools/dump-python.c:537:	} /* TODO: else print error */
./tools/dump-python.c:543:	} /* TODO: else print error */
./tools/dump-python.c:549:	} /* TODO: else print error */
./ChangeLog:1491:	* lib/smi.c: fixed smiGetXXX() functions to find items even
./lib/parser-smi.c:881:	 * TODO: check whether the row is the only node below the
./lib/parser-smi.c:4509:				     * TODO: is this allowed in a SEQUENCE? 
./lib/parser-smi.c:4678:			    /* TODO: */
./lib/parser-smi.c:5883:			    /* TODO */
./lib/parser-smi.c:5891:			    /* TODO */
./lib/parser-smi.c:5899:			    /* TODO */
./lib/parser-smi.c:5917:			    /* TODO */
./lib/parser-smi.c:5924:    { (yyval.err) = 0; /* TODO: check range */ ;}
./lib/parser-smi.c:5929:    { (yyval.err) = 0; /* TODO: check range */ ;}
./lib/parser-smi.c:5950:			    /* TODO */
./lib/parser-smi.c:6046:			    /* TODO: any need to distinguish from INTEGER? */
./lib/parser-smi.c:6566:			    /* TODO: make it work correctly for SMIv1 */
./lib/parser-smi.c:6595:			    /* TODO: any need to distinguish from INTEGER? */
./lib/parser-smi.c:7752:			    /* TODO: non-negative is suggested */
./lib/parser-smi.c:7888:				    /* TODO:remember it's really read-create */
./lib/parser-smi.c:8526:					/* TODO: check: $1 == thisModule ? */
./lib/parser-smi.c:8641:			    /* TODO: search in local module and
./lib/parser-smi.c:9116:			    /* TODO: handle objectIdentifier */
./lib/parser-smi.c:9182:			    /* TODO: check that objectIdentifier is
./lib/parser-smi.c:9537:				 * TODO: PRODUCT_RELEASE Text
./lib/parser-smi.c:9538:				 * TODO: ModulePart_Capabilities
./lib/parser-smi.c:9636:			    /* TODO: handle objectIdentifier */
./lib/parser-smi.c:9807:				    (yyval.access) = SMI_ACCESS_READ_WRITE; /* TODO */
./lib/util.h:42:#define strtoull strtoul	/* TODO */
./lib/smi.c:2178:		    /* XXX UTF-8 not implemented, fall through to ASCII (a) */
./lib/smi.c:2202:		    /* XXX: limited to no more than
./lib/smi.c:2505:    case SMI_INDEX_EXPAND:	/* TODO: we have to do more work here! */
./lib/snprintf.c:78:  /* XXX - methods */
./lib/snprintf.c:180:      if((*state->append_char)(state, rep[10] + 23)) /* XXX */
./lib/parser-sming.c:3226:				//TODO check for repeated names
./lib/parser-sming.c:4985:				/* TODO */
./lib/parser-sming.c:5218:			    /* TODO: convert if it's an oid? */
./lib/parser-sming.c:5225:				/* TODO: XXX convert to int */
./lib/parser-sming.c:5232:				/* TODO: XXX convert to oid if found */
./lib/parser-sming.c:5239:				/* TODO: XXX check if valid reference found */
./lib/check.c:274:	    /* TODO: must ignore SEQUENCE types here ... */
./lib/check.c:345:	    /* TODO: must ignore SEQUENCE types here ... */
./lib/check.c:814:	    /* TODO: We need to check ranges of parent types as well
./lib/check.c:894:	    /* TODO: BITS are somehow treated as octet strings - but
./lib/check.c:1024:     * TODO: Check the size of the instance identifier and the OID
./lib/check.c:1688: *      XXX I'm not sure I traversed the whole compliance statement,
./lib/scanner-sming.c:6974:	/* TODO. We should be able to replace this entire function body
./lib/scanner-smi.c:13010:        /* TODO: proper handling for SPPI vs SMI modules. */
./lib/scanner-smi.c:13050:        /* TODO: proper handling for SPPI vs SMI modules. */
./lib/scanner-smi.c:13641:	/* TODO. We should be able to replace this entire function body
./lib/data.c:1722:/* TODO remove me
./lib/data.c:2165:		 * TODO: probably we should check if there are more matching
./lib/data.c:2209:		 * TODO: probably we should check if there are more matching
./lib/data.c:3871:    /* TODO: Check wheather this macro already exists?? */

== unsafe input mechanisms ==

