#!/usr/bin/env python
import os, re, sys
import optparse

import source_map
source_map = source_map.load()

releases = ['dapper', 'edgy', 'feisty', 'devel']

def update_cve(cve):
	'''Update an existing CVE file'''
	print "In update_cve()"

def create_cve(cve):
	'''Create a new CVE file'''
	print "In create_cve()"

parser = optparse.OptionParser()
parser.add_option("-p", "--package", dest="pkgname", help="package name", metavar="NAME")
parser.add_option("-c", "--cve", dest="cve", help="CVE entry", metavar="CVE-XXXX-XXXX")
(options, args) = parser.parse_args()

if not options.pkgname:
	os.write(sys.stderr.fileno(), "Need to supply a package name\n")
	sys.exit(1)

if not options.cve:
	os.write(sys.stderr.fileno(), "Need to supply a CVE entry\n")
	sys.exit(1)

cve = options.cve
pkgname = options.pkgname

pat = re.compile(r'^CVE-\d\d\d\d-\d\d\d\d$')
if not pat.search(cve):
	os.write(sys.stderr.fileno(), "Bad CVE entry.  Should be CVE-XXXX-XXXX\n")
	sys.exit(1)

# more here
pat = re.compile(r'\s')
if pat.search(pkgname):
	os.write(sys.stderr.fileno(), "Bad package name\n")
	sys.exit(1)

if not os.path.isfile("00boilerplate"):
	os.write(sys.stderr.fileno(), "Could not find 00boilerplate in the current directory\n")
	sys.exit(1)

if (os.path.isfile(cve)):
	os.write(sys.stdout.fileno(), "Update existing " + cve + "file (y|N)? ")
	ans = sys.stdin.readline()
	os.write(sys.stdout.fileno(), "\n")

	if ans.startswith("y") or ans.startswith("Y"):
		update_cve(cve)
	else:
		os.write(sys.stdout.fileno(), "Aborting\n")
		sys.exit(0)
else:
	create_cve(cve)

sys.exit(0)

