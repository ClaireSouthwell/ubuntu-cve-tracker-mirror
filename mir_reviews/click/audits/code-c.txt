Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==
./preload/clickpreload.c:173: * except to be executed with /bin/sh.  Chrooting for this causes more
./preload/clickpreload.c:182:int execvp (const char *file, char * const argv[])
./pk-plugin/pk-plugin-click.c:302:	ret = g_spawn_sync (NULL, argv, envp, G_SPAWN_SEARCH_PATH,
./pk-plugin/pk-plugin-click.c:307:	if (!g_spawn_check_exit_status (click_status, NULL)) {
./pk-plugin/pk-plugin-click.c:529:	ret = g_spawn_sync (NULL, argv, envp,
./pk-plugin/pk-plugin-click.c:535:	if (!g_spawn_check_exit_status (click_status, NULL)) {
./click/tests/preload.h:69:gboolean g_spawn_sync         (const gchar          *working_directory,

== memory_management() ==
./pk-plugin/pk-plugin-click.c:214:	buf = g_malloc (buflen);
./pk-plugin/pk-plugin-click.c:229:		buf = g_realloc (buf, buflen);
./pk-plugin/pk-plugin-click.c:414:	elements = g_new0 (gchar *, n_elements);

== files() ==
./preload/clickpreload.c:298:FILE *fopen (const char *pathname, const char *mode)
./preload/clickpreload.c:309:        return fdopen (dup_fd, mode);
./preload/clickpreload.c:329:        return fdopen (dup_fd, mode);
./preload/clickpreload.c:338:int open (const char *pathname, int flags, ...)

== logging() ==
./preload/clickpreload.c:68:        if (dlerror ()) \
./preload/clickpreload.c:77:    dlerror ();
./pk-plugin/pk-plugin-click.c:269:click_pk_error (PkPlugin *plugin, PkErrorEnum code,
./pk-plugin/pk-plugin-click.c:310:		click_pk_error (plugin, PK_ERROR_ENUM_INTERNAL_ERROR,
./pk-plugin/pk-plugin-click.c:377:		click_pk_error (plugin, PK_ERROR_ENUM_INTERNAL_ERROR,
./pk-plugin/pk-plugin-click.c:384:		click_pk_error (plugin, PK_ERROR_ENUM_INTERNAL_ERROR,
./pk-plugin/pk-plugin-click.c:538:		click_pk_error (plugin,
./pk-plugin/pk-plugin-click.c:577:		g_debug ("Click: installing %s", filenames[i]);
./pk-plugin/pk-plugin-click.c:639:		g_error ("Click: cannot remove packages without a username");
./pk-plugin/pk-plugin-click.c:643:		g_error ("Click: cannot parse package ID '%s'", package_id);
./pk-plugin/pk-plugin-click.c:652:		click_pk_error (plugin, PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE,
./pk-plugin/pk-plugin-click.c:661:		click_pk_error (plugin, PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE,
./pk-plugin/pk-plugin-click.c:670:		click_pk_error (plugin, PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE,
./pk-plugin/pk-plugin-click.c:678:		click_pk_error (plugin, PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE,
./pk-plugin/pk-plugin-click.c:685:		click_pk_error (plugin, PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE,
./pk-plugin/pk-plugin-click.c:692:		click_pk_error (plugin, PK_ERROR_ENUM_PACKAGE_FAILED_TO_REMOVE,
./pk-plugin/pk-plugin-click.c:721:		g_debug ("Click: removing %s", package_ids[i]);
./pk-plugin/pk-plugin-click.c:743:	g_debug ("Found package: %s", package_id);
./pk-plugin/pk-plugin-click.c:867:	g_debug ("Processing transaction");

== environment() ==
./preload/clickpreload.c:104:    base_path = getenv ("CLICK_BASE_DIR");
./preload/clickpreload.c:107:    package_path = getenv ("CLICK_PACKAGE_PATH");
./preload/clickpreload.c:108:    package_fd_str = getenv ("CLICK_PACKAGE_FD");
./pk-plugin/pk-plugin-click.c:253:	environ = g_get_environ ();

== privileged() ==
./preload/clickpreload.c:115:int chown (const char *path, uid_t owner, gid_t group)
./preload/clickpreload.c:125:int fchown (int fd, uid_t owner, gid_t group)
./preload/clickpreload.c:135:int lchown (const char *path, uid_t owner, gid_t group)
./preload/clickpreload.c:176:int chroot (const char *path)
./preload/clickpreload.c:269:int mknod (const char *pathname, mode_t mode, dev_t dev)
./preload/clickpreload.c:427:int chmod (const char *path, mode_t mode)
./preload/clickpreload.c:437:int fchmod (int fd, mode_t mode)
./click/tests/preload.h:13:extern int chown (const char *file, uid_t owner, gid_t group);

== networking() ==
./pk-plugin/pk-plugin-click.c:647:	click_db_read (db, NULL, &error);

== http:// ==
./preload/clickpreload.c:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./pk-plugin/pk-plugin-click.c:17: * along with this program.  If not, see <http://www.gnu.org/licenses/>.

== encryption ==

== sql() ==

== tmp() ==
./preload/clickpreload.c:184:    if (strcmp (file, "/.click/tmp.ci/preinst") == 0)

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./pk-plugin/pk-plugin-click.c:218:		/* TODO: getpwuid_r is apparently a portability headache;
./pk-plugin/pk-plugin-click.c:228:		buflen *= 2;  /* TODO: check overflow */
./pk-plugin/pk-plugin-click.c:526:	/* TODO: make --force-missing-framework configurable */
./pk-plugin/pk-plugin-click.c:696:	/* TODO: remove data? */
./pk-plugin/pk-plugin-click.c:881:			/* TODO: Simulation needs to be smarter - backend
./pk-plugin/pk-plugin-click.c:899:			/* TODO: Handle simulation? */

== unsafe input mechanisms ==

