Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./libgcab/glib-compat.c:112:  data_until = g_malloc (found_pos + 1);
./libgcab/cabinet.c:7:    return g_malloc (items *size);
./libgcab/cabinet.c:27:        memcpy (cd->in, data, size);
./libgcab/cabinet.c:239:        ch->reserved = g_malloc (ch->res_header);
./libgcab/cabinet.c:312:    cf->reserved = g_malloc (res_size);
./libgcab/cabinet.c:475:    cd->reserved = g_malloc (res_data);
./libgcab/decomp.c:804:  memcpy(CAB(extra_bits), bits, sizeof(bits));
./libgcab/decomp.c:805:  memcpy(CAB(lzx_position_base), base, sizeof(base));
./libgcab/decomp.c:1100:        memcpy(window + window_posn, inpos, (size_t) this_run);
./libgcab/decomp.c:1112:  memcpy(CAB(outbuf), window + ((!window_posn) ? window_size : window_posn) -

== files() ==

== logging() ==
./libgcab/gcab-cabinet.c:419:            g_set_error (error, GCAB_ERROR, GCAB_ERROR_FORMAT,
./libgcab/gcab-cabinet.c:426:            g_set_error (error, GCAB_ERROR, GCAB_ERROR_FORMAT,
./libgcab/gcab-cabinet.c:561:        g_debug ("signature offset: %u size: %u", offset, size);
./libgcab/gcab-folder.c:149:        g_set_error (error, GCAB_ERROR, GCAB_ERROR_FORMAT,
./libgcab/gcab-folder.c:176:            g_clear_error (error);
./libgcab/gcab-folder.c:189:                g_clear_error (error);
./libgcab/gcab-folder.c:206:        g_set_error (error, G_FILE_ERROR, G_FILE_ERROR_FAILED,
./libgcab/gcab-folder.c:389:                g_clear_error (&my_error);
./libgcab/gcab-folder.c:393:                g_propagate_error (error, my_error);
./libgcab/cabinet.c:102:        g_set_error(error, GCAB_ERROR, GCAB_ERROR_FORMAT,       \
./libgcab/cabinet.c:113:            g_set_error(error, GCAB_ERROR, GCAB_ERROR_FORMAT,           \
./libgcab/cabinet.c:118:            g_set_error(error, GCAB_ERROR, GCAB_ERROR_FORMAT,           \
./libgcab/cabinet.c:150:    g_debug ("%15s: %.2x", #field, (guint)p->field)
./libgcab/cabinet.c:152:    g_debug ("%15s: %.4x", #field, (guint)p->field)
./libgcab/cabinet.c:154:    g_debug ("%15s: %.8x", #field, (guint)p->field)
./libgcab/cabinet.c:156:    g_debug ("%15s: %s", #field, p->field)
./libgcab/cabinet.c:158:    g_debug ("%15s:", #field), hexdump (p->field, size)
./libgcab/cabinet.c:160:    g_debug ("%15s:", #field), hexdump (field, size)
./libgcab/cabinet.c:216:        g_set_error (error, GCAB_ERROR, GCAB_ERROR_FORMAT,
./libgcab/cabinet.c:254:        g_debug ("CFHEADER");
./libgcab/cabinet.c:316:        g_debug ("CFOLDER");
./libgcab/cabinet.c:362:        g_debug ("CFILE");
./libgcab/cabinet.c:450:        g_set_error (error, GCAB_ERROR, GCAB_ERROR_FAILED,
./libgcab/cabinet.c:467:        g_set_error (error, GCAB_ERROR, GCAB_ERROR_FAILED,
./libgcab/cabinet.c:483:        g_debug ("CDATA");
./libgcab/cabinet.c:558:        g_set_error (error, GCAB_ERROR, GCAB_ERROR_FAILED,
./libgcab/cabinet.c:562:        g_set_error (error, GCAB_ERROR, GCAB_ERROR_FAILED,
./gcab.c:10:gcab_error (const gchar *format, ...)
./gcab.c:82:        gcab_error (_("can't write file %s: %s"), resname, error->message);
./gcab.c:87:    g_clear_error (&error);
./gcab.c:145:        gcab_error (_("option parsing failed: %s\n"), (error && error->message) ? error->message : "unknown error");
./gcab.c:154:        gcab_error (_("Please specify a single operation."));
./gcab.c:157:        gcab_error (_("cabinet file must be specified."));
./gcab.c:171:            gcab_error (_("can't open %s for reading: %s\n"), args[0], (error && error->message) ? error->message : "unknown error");
./gcab.c:173:            gcab_error (_("error reading %s: %s\n"), args[0], (error && error->message) ? error->message : "unknown error");
./gcab.c:208:                gcab_error (_("error during extraction: %s"), (error && error->message) ? error->message : "unknown error");
./gcab.c:220:                gcab_error (_("error while reading signature: %s"), (error && error->message) ? error->message : "unknown error");
./gcab.c:231:        gcab_error (_("please specify input files."));
./gcab.c:250:            g_clear_error (&error);
./gcab.c:259:        gcab_error (_("no files to be archived."));
./gcab.c:265:        gcab_error (_("can't create cab file %s: %s"), args[0], (error && error->message) ? error->message : "unknown error");
./gcab.c:269:        gcab_error (_("can't add folder to cab file %s: %s"), args[0], (error && error->message) ? error->message : "unknown error");
./gcab.c:277:        gcab_error (_("can't write cab file %s: %s"), args[0], (error && error->message) ? error->message : "unknown error");

== environment() ==
./libgcab/gcab-cabinet.c:560:    if (g_getenv ("GCAB_DEBUG"))
./libgcab/cabinet.c:253:    if (g_getenv ("GCAB_DEBUG")) {
./libgcab/cabinet.c:315:    if (g_getenv ("GCAB_DEBUG")) {
./libgcab/cabinet.c:361:    if (g_getenv ("GCAB_DEBUG")) {
./libgcab/cabinet.c:482:    if (g_getenv ("GCAB_DEBUG")) {

== privileged() ==

== networking() ==
./libgcab/gcab-cabinet.c:191:gcab_cabinet_write (GCabCabinet *self,
./libgcab/gcab-cabinet.c:259:        in = G_INPUT_STREAM (g_file_read (file->file, cancellable, error));
./libgcab/gcab-cabinet.c:263:        while ((len = g_input_stream_read (in,
./libgcab/gcab-cabinet.c:266:            if (!cdata_write (&block, dstream, folder.typecomp, data, DATABLOCKSIZE, &written, cancellable, error))
./libgcab/gcab-cabinet.c:278:        if (!cdata_write (&block, dstream, folder.typecomp, data, offset, &written, cancellable, error))
./libgcab/gcab-cabinet.c:291:    if (!cheader_write (&header, dstream, cancellable, error))
./libgcab/gcab-cabinet.c:294:    if (!cfolder_write (&folder, dstream, cancellable, error))
./libgcab/gcab-cabinet.c:302:        if (!cfile_write (&file->cfile, dstream, cancellable, error))
./libgcab/gcab-cabinet.c:338:    return gcab_cabinet_write (self, out, file_callback, NULL, user_data, cancellable, error);
./libgcab/gcab-cabinet.c:391:    if (!cheader_read (&cheader, in, cancellable, error))
./libgcab/gcab-cabinet.c:401:        if (!cfolder_read (&cfolder, cheader.res_folder, in, cancellable, error))
./libgcab/gcab-cabinet.c:415:        if (!cfile_read (&cfile, in, cancellable, error))
./libgcab/gcab-cabinet.c:569:    if (g_input_stream_read (self->stream, self->signature->data, self->signature->len,
./libgcab/cabinet.h:101:gboolean     cheader_write                      (cheader_t *ch,
./libgcab/cabinet.h:105:gboolean     cheader_read                       (cheader_t *ch,
./libgcab/cabinet.h:109:gboolean     cfolder_write                      (cfolder_t *cf,
./libgcab/cabinet.h:113:gboolean     cfolder_read                       (cfolder_t *cf,
./libgcab/cabinet.h:118:gboolean     cfile_write                        (cfile_t *cf,
./libgcab/cabinet.h:122:gboolean     cfile_read                         (cfile_t *cf,
./libgcab/cabinet.h:126:gboolean     cdata_write                        (cdata_t *cd,
./libgcab/cabinet.h:134:gboolean     cdata_read                         (cdata_t *cd,
./libgcab/gcab-cabinet.h:82:gboolean           gcab_cabinet_write         (GCabCabinet *cabinet,
./libgcab/gcab-folder.c:410:                if (!cdata_read (&cdata, res_data, self->comptype,
./libgcab/glib-compat.c:114:  res = g_input_stream_read (G_INPUT_STREAM (stream),
./libgcab/cabinet.c:74:      res = g_input_stream_read (G_INPUT_STREAM (stream), &b, 1, NULL, NULL);
./libgcab/cabinet.c:109:        gint _val = g_input_stream_read (G_INPUT_STREAM (in), buff, size, cancellable, error); \
./libgcab/cabinet.c:172:cheader_write (cheader_t *ch, GDataOutputStream *out,
./libgcab/cabinet.c:196:        if (g_output_stream_write (stream, ch->reserved, ch->res_header,
./libgcab/cabinet.c:205:cheader_read (cheader_t *ch, GDataInputStream *in,
./libgcab/cabinet.c:292:cfolder_write (cfolder_t *cf, GDataOutputStream *out,
./libgcab/cabinet.c:304:cfolder_read (cfolder_t *cf, u1 res_size, GDataInputStream *in,
./libgcab/cabinet.c:331:cfile_write (cfile_t *cf, GDataOutputStream *out,
./libgcab/cabinet.c:348:cfile_read (cfile_t *cf, GDataInputStream *in,
./libgcab/cabinet.c:413:cdata_write (cdata_t *cd, GDataOutputStream *out, int type,
./libgcab/cabinet.c:429:        (g_output_stream_write (stream, cd->in, cd->ncbytes, cancellable, error) == -1))
./libgcab/cabinet.c:455:cdata_read (cdata_t *cd, u1 res_data, gint comptype,
./gcab.c:168:        GInputStream *in = G_INPUT_STREAM (g_file_read (file, cancellable, &error));
./gcab.c:271:    if (!gcab_cabinet_write (cabinet, output,

== http:// ==
./libgcab/gcab-enums.c:18: * License along with this library. If not, see <http://www.gnu.org/licenses/>.
./libgcab/gcab-enums.h:18: * License along with this library. If not, see <http://www.gnu.org/licenses/>.
./libgcab/cabinet.h:21:   http://msdn.microsoft.com/en-us/library/bb417343.aspx */

== encryption ==

== sql() ==

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./libgcab/gcab-cabinet.c:210:    /* FIXME: current limitation of 1 folder */
./libgcab/gcab-priv.h:13:/* Copied from GStream, FIXME that should be in GLib imho */

== unsafe input mechanisms ==

