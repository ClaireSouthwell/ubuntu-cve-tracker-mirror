Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==
./pysnmp/smi/builder.py:255:                    exec(modData, g)

== memory_management() ==
(unsupported type 'python')

== files() ==
./setup.py:82:    'version': open(os.path.join('pysnmp','__init__.py')).read().split('\'')[1],
./pysnmp/smi/builder.py:165:                return open(os.path.join(self._srcName, f), mode).read()

== logging() ==
./examples/v3arch/twisted/manager/cmdgen/getnext-v3-pull-subtree.py:88:    # Stop reactor on SNMP error (optional)
./examples/v3arch/twisted/manager/cmdgen/getbulk-v2c.py:83:    # Stop reactor on SNMP error (optional)
./examples/v3arch/twisted/manager/cmdgen/getnext-v1.py:83:    # Stop reactor on SNMP error (optional)
./examples/v3arch/twisted/manager/cmdgen/getbulk-v3.py:84:    # Stop reactor on SNMP error (optional)
./examples/v3arch/twisted/manager/cmdgen/getnext-v2c-from-specific-address.py:83:    # Stop reactor on SNMP error (optional)
./pysnmp/carrier/asynsock/base.py:86:    def handle_error(self): raise
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:29:                raise socket.error(
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:49:                    raise socket.error(
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:54:                    raise socket.error(
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:59:                raise socket.error(
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:66:                raise socket.error(
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:76:                raise socket.error(
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:81:                raise socket.error(

== environment() ==

== privileged() ==

== networking() ==
./pysnmp/carrier/asynsock/dgram/udp6.py:3:    from socket import AF_INET6
./pysnmp/carrier/asynsock/dgram/udp6.py:5:    AF_INET6 = None
./pysnmp/carrier/asynsock/dgram/udp6.py:11:    sockFamily = AF_INET6
./pysnmp/carrier/asynsock/dgram/unix.py:5:    from socket import AF_UNIX
./pysnmp/carrier/asynsock/dgram/unix.py:7:    AF_UNIX = None
./pysnmp/carrier/asynsock/dgram/unix.py:15:    sockFamily = AF_UNIX
./pysnmp/carrier/asynsock/dgram/udp.py:2:from socket import AF_INET
./pysnmp/carrier/asynsock/dgram/udp.py:8:    sockFamily = AF_INET
./pysnmp/carrier/asynsock/dgram/base.py:20:    sockType = socket.SOCK_DGRAM
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:9:has_ipv6 = socket.has_ipv6 and hasattr(socket, 'AF_INET6')
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:26:            if address_family == socket.AF_INET:
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:28:            elif address_family != socket.AF_INET6:
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:73:            if address_family == socket.AF_INET:
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:75:            elif address_family != socket.AF_INET6:
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:142:            value = inet_pton(socket.AF_INET, value[0]) + \
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:152:                inet_ntop(socket.AF_INET, v[:4]),
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:171:            value = inet_pton(socket.AF_INET6, value[0]) + \
./pysnmp/smi/mibs/TRANSPORT-ADDRESS-MIB.py:183:                inet_ntop(socket.AF_INET6, v[:16]),
./pysnmp/smi/mibs/SNMPv2-TM.py:2:    from socket import inet_ntop, inet_pton, AF_INET
./pysnmp/smi/mibs/SNMPv2-TM.py:4:    from socket import inet_ntoa, inet_aton, AF_INET
./pysnmp/smi/mibs/SNMPv2-TM.py:26:            value = inet_pton(AF_INET, value[0]) + \
./pysnmp/smi/mibs/SNMPv2-TM.py:36:                inet_ntop(AF_INET, v[:4]),
./pysnmp/entity/rfc3413/oneliner/target.py:41:                                      socket.AF_INET,
./pysnmp/entity/rfc3413/oneliner/target.py:42:                                      socket.SOCK_DGRAM,
./pysnmp/entity/rfc3413/oneliner/target.py:54:                                      socket.AF_INET6,
./pysnmp/entity/rfc3413/oneliner/target.py:55:                                      socket.SOCK_DGRAM,
./setup.py:72:        sys.stderr.write("""WARNING! WARNING! WARNING!
./setup.py:82:    'version': open(os.path.join('pysnmp','__init__.py')).read().split('\'')[1],
./pysnmp/carrier/twisted/dgram/base.py:28:                self.transport.write(outgoingMessage, transportAddress)
./pysnmp/carrier/twisted/dgram/base.py:41:                self.transport.write(outgoingMessage, transportAddress)
./pysnmp/carrier/asynsock/dgram/base.py:29:                self.socket.bind(iface)
./pysnmp/carrier/asynsock/dgram/base.py:31:                raise error.CarrierError('bind() for %s failed: %s' % (iface is None and "<all local>" or iface, sys.exc_info()[1],))
./pysnmp/carrier/asynsock/dgram/base.py:36:            self.socket.bind(iface)
./pysnmp/carrier/asynsock/dgram/base.py:38:            raise error.CarrierError('bind() for %s failed: %s' % (iface, sys.exc_info()[1],))
./pysnmp/carrier/asynsock/dgram/base.py:57:    def handle_connect(self): pass
./pysnmp/carrier/asynsock/dgram/base.py:59:    def handle_write(self):
./pysnmp/carrier/asynsock/dgram/base.py:66:            self.socket.sendto(outgoingMessage, transportAddress)
./pysnmp/carrier/asynsock/dgram/base.py:71:                raise error.CarrierError('sendto() failed for %s: %s' % (transportAddress, sys.exc_info()[1]))
./pysnmp/carrier/asynsock/dgram/base.py:74:    def handle_read(self):
./pysnmp/carrier/asynsock/dgram/base.py:76:            incomingMessage, transportAddress = self.socket.recvfrom(65535)
./pysnmp/carrier/asynsock/dgram/base.py:91:                raise error.CarrierError('recvfrom() failed: %s' % (sys.exc_info()[1],))
./pysnmp/carrier/asynsock/base.py:26:                sock = socket.socket(self.sockFamily, self.sockType)
./pysnmp/carrier/asynsock/base.py:28:                raise error.CarrierError('socket() failed: %s' % sys.exc_info()[1])
./pysnmp/carrier/asynsock/base.py:46:        self.set_socket(sock)
./pysnmp/smi/builder.py:53:    def read(self, f):
./pysnmp/smi/builder.py:165:                return open(os.path.join(self._srcName, f), mode).read()
./pysnmp/smi/builder.py:236:                    modData, sfx = mibSource.read(modName)
./examples/v3arch/twisted/manager/ntfrcv/v2c-multiple-interfaces.py:19:from twisted.internet import reactor
./examples/v3arch/twisted/manager/ntfrcv/v2c-multiple-interfaces.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/ntfrcv/v3-multiple-users.py:22:from twisted.internet import reactor
./examples/v3arch/twisted/manager/ntfrcv/v3-multiple-users.py:24:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/getnext-v3-pull-subtree.py:16:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/getnext-v3-pull-subtree.py:18:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/getnext-v3-pull-subtree.py:20:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/get-v3-custom-context.py:17:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/get-v3-custom-context.py:19:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/get-v3-custom-context.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/set-v1.py:15:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/set-v1.py:17:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/set-v1.py:19:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/getbulk-v2c.py:17:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/getbulk-v2c.py:19:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/getbulk-v2c.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/set-v2c.py:15:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/set-v2c.py:17:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/set-v2c.py:19:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/getnext-v1.py:16:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/getnext-v1.py:18:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/getnext-v1.py:20:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/get-v1.py:15:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/get-v1.py:17:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/get-v1.py:18:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/set-v3.py:15:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/set-v3.py:17:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/set-v3.py:19:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/getbulk-v3.py:17:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/getbulk-v3.py:19:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/getbulk-v3.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/get-v3.py:15:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/get-v3.py:17:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/get-v3.py:18:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/getnext-v2c-from-specific-address.py:17:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/getnext-v2c-from-specific-address.py:19:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/getnext-v2c-from-specific-address.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/manager/cmdgen/get-v2c-custom-timeout.py:16:from twisted.internet import reactor, defer
./examples/v3arch/twisted/manager/cmdgen/get-v2c-custom-timeout.py:18:from pysnmp.entity.rfc3413.twisted import cmdgen
./examples/v3arch/twisted/manager/cmdgen/get-v2c-custom-timeout.py:19:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/ntforg/inform-v3.py:15:from twisted.internet import reactor
./examples/v3arch/twisted/agent/ntforg/inform-v3.py:17:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/ntforg/inform-v3.py:19:from pysnmp.entity.rfc3413.twisted import ntforg
./examples/v3arch/twisted/agent/ntforg/trap-v3.py:15:from twisted.internet import reactor
./examples/v3arch/twisted/agent/ntforg/trap-v3.py:17:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/ntforg/trap-v3.py:19:from pysnmp.entity.rfc3413.twisted import ntforg
./examples/v3arch/twisted/agent/ntforg/trap-v1.py:19:from twisted.internet import reactor
./examples/v3arch/twisted/agent/ntforg/trap-v1.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/ntforg/trap-v1.py:23:from pysnmp.entity.rfc3413.twisted import ntforg
./examples/v3arch/twisted/agent/ntforg/trap-v2c-multiple-targets.py:18:from twisted.internet import reactor
./examples/v3arch/twisted/agent/ntforg/trap-v2c-multiple-targets.py:20:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/ntforg/trap-v2c-multiple-targets.py:22:from pysnmp.entity.rfc3413.twisted import ntforg
./examples/v3arch/twisted/agent/ntforg/inform-v2c.py:17:from twisted.internet import reactor
./examples/v3arch/twisted/agent/ntforg/inform-v2c.py:19:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/ntforg/inform-v2c.py:21:from pysnmp.entity.rfc3413.twisted import ntforg
./examples/v3arch/twisted/agent/cmdrsp/v2c-custom-scalar-mib-objects.py:19:from twisted.internet import reactor
./examples/v3arch/twisted/agent/cmdrsp/v2c-custom-scalar-mib-objects.py:23:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/cmdrsp/v2c-multiple-interfaces.py:18:from twisted.internet import reactor
./examples/v3arch/twisted/agent/cmdrsp/v2c-multiple-interfaces.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/cmdrsp/v1-read-and-write-communities.py:18:from twisted.internet import reactor
./examples/v3arch/twisted/agent/cmdrsp/v1-read-and-write-communities.py:21:from pysnmp.carrier.twisted.dgram import udp
./examples/v3arch/twisted/agent/cmdrsp/v3-multiple-users.py:21:from twisted.internet import reactor
./examples/v3arch/twisted/agent/cmdrsp/v3-multiple-users.py:24:from pysnmp.carrier.twisted.dgram import udp
./pysnmp/carrier/twisted/dgram/unix.py:3:from twisted.internet import reactor
./pysnmp/carrier/twisted/dgram/unix.py:4:from pysnmp.carrier.twisted.dgram.base import DgramTwistedTransport
./pysnmp/carrier/twisted/dgram/udp.py:3:from twisted.internet import reactor
./pysnmp/carrier/twisted/dgram/udp.py:4:from pysnmp.carrier.twisted.dgram.base import DgramTwistedTransport
./pysnmp/carrier/twisted/dgram/base.py:3:from twisted.internet.protocol import DatagramProtocol
./pysnmp/carrier/twisted/dgram/base.py:4:from twisted.internet import reactor
./pysnmp/carrier/twisted/dgram/base.py:5:from pysnmp.carrier.twisted.base import AbstractTwistedTransport
./pysnmp/carrier/twisted/dispatch.py:12:from twisted.internet import reactor, task
./pysnmp/carrier/twisted/base.py:11:from pysnmp.carrier.twisted.dispatch import TwistedDispatcher
./pysnmp/entity/rfc3413/twisted/cmdgen.py:1:from twisted.internet import defer
./pysnmp/entity/rfc3413/twisted/ntforg.py:1:from twisted.internet import defer

== http:// ==
./setup.py:74:You may wish to grab them from http://www.voidspace.org.uk/python/modules.shtml
./setup.py:88:    'url': 'http://sourceforge.net/projects/pysnmp/',
./pysnmp/proto/secmod/eso/priv/aes192.py:2:# http://tools.ietf.org/html/draft-blumenthal-aes-usm-04
./pysnmp/proto/secmod/eso/priv/aes256.py:2:# http://tools.ietf.org/html/draft-blumenthal-aes-usm-04
./pysnmp/proto/secmod/eso/priv/des3.py:2:# http://www.snmp.com/eso/draft-reeder-snmpv3-usm-3desede-00.txt
./pysnmp/__init__.py:1:# http://www.python.org/dev/peps/pep-0396/
./pysnmp/smi/mibs/SNMP-USM-AES-MIB.py:20:if mibBuilder.loadTexts: snmpUsmAesMIB.setDescription("Definitions of Object Identities needed for\nthe use of AES by SNMP's User-based Security\nModel.\n\nCopyright (C) The Internet Society (2004).\n\nThis version of this MIB module is part of RFC 3826;\nsee the RFC itself for full legal notices.\nSupplementary information may be available on\nhttp://www.ietf.org/copyrights/ianamib.html.")

== encryption ==
./setup.py:37:   wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py

== sql() ==

== tmp() ==
./examples/v1arch/manager/ntfrcv.py:69:#    unix.domainName, unix.UnixSocketTransport().openServerMode('/tmp/snmp-manager')
./examples/v1arch/manager/getgen.py:83:#    encoder.encode(reqMsg), unix.domainName, '/tmp/snmp-agent'
./examples/v1arch/agent/cmdrsp.py:115:#    unix.domainName, unix.UnixSocketTransport().openServerMode('/tmp/snmp-agent')
./examples/v1arch/agent/ntforg.py:49:#    encoder.encode(trapMsg), unix.domainName, '/tmp/snmp-manager'
./examples/v3arch/oneliner/manager/cmdgen/getbulk-v3-with-custom-mib-path-and-options.py:24:    cmdgen.MibVariable('TCP-MIB', 'tcpConnTable').addMibSource('/tmp/mymibs'),

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==
./pysnmp/smi/builder.py:109:                # Dir relative to PYTHONPATH

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./pysnmp/proto/acmod/rfc3415.py:49:        # XXX partial context name match
./pysnmp/proto/acmod/rfc3415.py:71:        # XXX split onto object & instance ?
./pysnmp/proto/rfc1155.py:67:class TypeCoercionHackMixIn: # XXX
./pysnmp/proto/proxy/rfc2576.py:20:__v2ToV1ValueMap = { # XXX do not re-create same-type items?
./pysnmp/proto/proxy/rfc2576.py:119:        # 3.1.4 (XXX snmpTrapCommunity.0 is missing here)
./pysnmp/proto/rfc3412.py:6:from pysnmp.proto.api import verdec # XXX
./pysnmp/proto/rfc3412.py:161:# XXX is it still needed here?
./pysnmp/proto/rfc3412.py:248:        # Handle oversized messages XXX transport constrains?
./pysnmp/proto/rfc3412.py:280:            restOfWholeMsg = null # XXX fix decoder non-recursive return
./pysnmp/proto/rfc3412.py:361:                # XXX fails on unknown PDU
./pysnmp/proto/rfc3412.py:391:                except PySnmpError: # XXX
./pysnmp/proto/rfc3412.py:437:            # no-op ? XXX
./pysnmp/proto/mpmod/rfc2576.py:97:            # XXX rfc bug? why stateReference should be created?
./pysnmp/proto/mpmod/rfc3412.py:44:# XXX move somewhere?
./pysnmp/proto/mpmod/rfc3412.py:156:        # XXX need to coerce MIB value as it has incompatible constraints set
./pysnmp/proto/mpmod/rfc3412.py:182:        # XXX need to coerce MIB value as it has incompatible constraints set
./pysnmp/proto/mpmod/rfc3412.py:206:                # XXX
./pysnmp/proto/mpmod/rfc3412.py:247:            # XXX rfc bug? why stateReference should be created?
./pysnmp/proto/mpmod/rfc3412.py:354:            contextEngineId = snmpEngineID  # XXX impl-dep manner
./pysnmp/proto/mpmod/rfc3412.py:389:        # XXX need to coerce MIB value as it has incompatible constraints set
./pysnmp/proto/mpmod/rfc3412.py:407:        if pdu.tagSet in rfc3411.confirmedClassPDUs:  # XXX not needed?
./pysnmp/proto/mpmod/rfc3412.py:557:                    securityName = None  # XXX secmod cache used
./pysnmp/proto/mpmod/rfc3412.py:633:        # 7.2.7 XXX PDU would be parsed here?
./pysnmp/proto/mpmod/rfc3412.py:683:            # 7.2.11e XXX may need to pass Reports up to app in some cases...
./pysnmp/proto/mpmod/base.py:59:            pass # XXX maybe these should all follow some scheme?
./pysnmp/proto/secmod/eso/priv/des3.py:74:        # salt not yet hashed XXX
./pysnmp/proto/secmod/rfc2576.py:427:# XXX
./pysnmp/proto/secmod/rfc3414/service.py:386:                # 2.3 XXX is this correct?
./pysnmp/proto/secmod/rfc3414/service.py:390:        elif securityStateReference is not None:  # XXX Report?
./pysnmp/proto/secmod/rfc3414/service.py:594:        msg  # XXX 
./pysnmp/proto/secmod/rfc3414/service.py:670:                    # free securityStateReference XXX
./pysnmp/smi/instrum.py:151:            rowName = col.name[:-1] # XXX
./pysnmp/smi/mibs/SNMPv2-TC.py:172:# XXX
./pysnmp/smi/mibs/SNMPv2-TC.py:174:#        # XXX parse TC syntax
./pysnmp/smi/mibs/SNMPv2-SMI.py:174:    # XXX
./pysnmp/smi/mibs/SNMPv2-SMI.py:349:        while 1:  # XXX linear search here
./pysnmp/smi/mibs/SNMPv2-SMI.py:378:        while 1:  # XXX linear search here
./pysnmp/smi/mibs/SNMPv2-SMI.py:733:        if name in self._vars: # XXX
./pysnmp/smi/mibs/SNMPv2-SMI.py:1165:# XXX
./pysnmp/entity/rfc3413/oneliner/mibvar.py:46:    def getMibNode(self):  # XXX
./pysnmp/entity/rfc3413/oneliner/cmdgen.py:500:                    # XXX extra rows
./pysnmp/entity/rfc3413/oneliner/cmdgen.py:575:                varBindTotalTable.extend(varBindTable) # XXX out of table 
./pysnmp/entity/rfc3413/mibvar.py:28:        if hasattr(mibNode, 'createTest'): # table column XXX
./pysnmp/entity/rfc3413/ntforg.py:215:            # 3.3.1 XXX
./pysnmp/entity/rfc3413/ntforg.py:216:# XXX filtering's yet to be implemented
./pysnmp/entity/rfc3413/ntforg.py:385:# XXX

== unsafe input mechanisms ==
(unsupported type 'python')

