Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==
./cmd/arc_summary/arc_summary.py:1031:            p = Popen(command, stdin=PIPE, stdout=PIPE,

== memory_management() ==
(unsupported type 'python')

== files() ==
./cmd/arc_summary/arc_summary.py:62:        kstats = [line.strip() for line in open(fn)]
./cmd/arc_summary/arc_summary.py:1023:        with open("/sys/module/zfs/parameters/" + name) as f: value = f.read()
./cmd/dbufstat/dbufstat.py:553:            tmp = open(ofile, "w")
./cmd/dbufstat/dbufstat.py:565:            tmp = open(ifile, "r")
./cmd/arcstat/arcstat.py:151:    k = [line.strip() for line in open('/proc/spl/kstat/zfs/arcstats')]
./cmd/arcstat/arcstat.py:356:            out = open(opfile, "w")

== logging() ==

== environment() ==

== privileged() ==
./cmd/arcstat/arcstat.py:235:        data = fcntl.ioctl(sys.stdout.fileno(), termios.TIOCGWINSZ, '1234')

== networking() ==
./cmd/arc_summary/arc_summary.py:96:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:98:        sys.stdout.write("%s" % "----")
./cmd/arc_summary/arc_summary.py:99:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:103:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:294:    sys.stdout.write("ARC Summary: (%s)\n" % arc['health'])
./cmd/arc_summary/arc_summary.py:296:    sys.stdout.write("\tMemory Throttle Count:\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:298:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:301:    sys.stdout.write("ARC Misc:\n")
./cmd/arc_summary/arc_summary.py:302:    sys.stdout.write("\tDeleted:\t\t\t\t%s\n" % arc['arc_misc']['deleted'])
./cmd/arc_summary/arc_summary.py:303:    sys.stdout.write("\tMutex Misses:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:305:    sys.stdout.write("\tEvict Skips:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:307:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:310:    sys.stdout.write("ARC Size:\t\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:315:    sys.stdout.write("\tTarget Size: (Adaptive)\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:321:    sys.stdout.write("\tMin Size (Hard Limit):\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:327:    sys.stdout.write("\tMax Size (High Water):\t\t%d:1\t%s\n" % (
./cmd/arc_summary/arc_summary.py:333:    sys.stdout.write("\nARC Size Breakdown:\n")
./cmd/arc_summary/arc_summary.py:334:    sys.stdout.write("\tRecently Used Cache Size:\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:339:    sys.stdout.write("\tFrequently Used Cache Size:\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:345:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:348:    sys.stdout.write("ARC Hash Breakdown:\n")
./cmd/arc_summary/arc_summary.py:349:    sys.stdout.write("\tElements Max:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:351:    sys.stdout.write("\tElements Current:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:356:    sys.stdout.write("\tCollisions:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:358:    sys.stdout.write("\tChain Max:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:360:    sys.stdout.write("\tChains:\t\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:490:    sys.stdout.write("ARC Total accesses:\t\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:492:    sys.stdout.write("\tCache Hit Ratio:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:497:    sys.stdout.write("\tCache Miss Ratio:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:503:    sys.stdout.write("\tActual Hit Ratio:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:509:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:510:    sys.stdout.write("\tData Demand Efficiency:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:517:        sys.stdout.write("\tData Prefetch Efficiency:\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:522:    sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:524:    sys.stdout.write("\tCACHE HITS BY CACHE LIST:\n")
./cmd/arc_summary/arc_summary.py:526:        sys.stdout.write("\t  Anonymously Used:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:531:    sys.stdout.write("\t  Most Recently Used:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:536:    sys.stdout.write("\t  Most Frequently Used:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:541:    sys.stdout.write("\t  Most Recently Used Ghost:\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:546:    sys.stdout.write("\t  Most Frequently Used Ghost:\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:552:    sys.stdout.write("\n\tCACHE HITS BY DATA TYPE:\n")
./cmd/arc_summary/arc_summary.py:553:    sys.stdout.write("\t  Demand Data:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:558:    sys.stdout.write("\t  Prefetch Data:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:563:    sys.stdout.write("\t  Demand Metadata:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:568:    sys.stdout.write("\t  Prefetch Metadata:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:574:    sys.stdout.write("\n\tCACHE MISSES BY DATA TYPE:\n")
./cmd/arc_summary/arc_summary.py:575:    sys.stdout.write("\t  Demand Data:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:580:    sys.stdout.write("\t  Prefetch Data:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:585:    sys.stdout.write("\t  Demand Metadata:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:590:    sys.stdout.write("\t  Prefetch Metadata:\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:696:        sys.stdout.write("L2 ARC Summary: ")
./cmd/arc_summary/arc_summary.py:698:            sys.stdout.write("(DEGRADED)\n")
./cmd/arc_summary/arc_summary.py:700:            sys.stdout.write("(HEALTHY)\n")
./cmd/arc_summary/arc_summary.py:701:        sys.stdout.write("\tLow Memory Aborts:\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:703:        sys.stdout.write("\tFree on Write:\t\t\t\t%s\n" % arc['free_on_write'])
./cmd/arc_summary/arc_summary.py:704:        sys.stdout.write("\tR/W Clashes:\t\t\t\t%s\n" % arc['rw_clashes'])
./cmd/arc_summary/arc_summary.py:705:        sys.stdout.write("\tBad Checksums:\t\t\t\t%s\n" % arc['bad_checksums'])
./cmd/arc_summary/arc_summary.py:706:        sys.stdout.write("\tIO Errors:\t\t\t\t%s\n" % arc['io_errors'])
./cmd/arc_summary/arc_summary.py:707:        sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:709:        sys.stdout.write("L2 ARC Size: (Adaptive)\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:711:        sys.stdout.write("\tCompressed:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:716:        sys.stdout.write("\tHeader Size:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:721:        sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:725:            sys.stdout.write("L2 ARC Evicts:\n")
./cmd/arc_summary/arc_summary.py:726:            sys.stdout.write("\tLock Retries:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:728:            sys.stdout.write("\tUpon Reading:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:730:            sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:732:        sys.stdout.write("L2 ARC Breakdown:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:734:        sys.stdout.write("\tHit Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:740:        sys.stdout.write("\tMiss Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:746:        sys.stdout.write("\tFeeds:\t\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:748:        sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:750:        sys.stdout.write("L2 ARC Writes:\n")
./cmd/arc_summary/arc_summary.py:752:            sys.stdout.write("\tWrites Sent: (%s)\t\t\t\t%s\n" % (
./cmd/arc_summary/arc_summary.py:757:            sys.stdout.write("\t  Done Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:762:            sys.stdout.write("\t  Error Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:768:            sys.stdout.write("\tWrites Sent:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:882:        sys.stdout.write("File-Level Prefetch: (%s)" %
./cmd/arc_summary/arc_summary.py:884:        sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:886:        sys.stdout.write("DMU Efficiency:\t\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:888:        sys.stdout.write("\tHit Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:893:        sys.stdout.write("\tMiss Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:899:        sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:901:        sys.stdout.write("\tColinear:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:903:        sys.stdout.write("\t  Hit Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:909:        sys.stdout.write("\t  Miss Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:915:        sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:917:        sys.stdout.write("\tStride:\t\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:919:        sys.stdout.write("\t  Hit Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:925:        sys.stdout.write("\t  Miss Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:931:        sys.stdout.write("\n")
./cmd/arc_summary/arc_summary.py:932:        sys.stdout.write("DMU Misc: %s\n" % arc['dmu_misc']['status'])
./cmd/arc_summary/arc_summary.py:934:        sys.stdout.write("\tReclaim:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:936:        sys.stdout.write("\t  Successes:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:942:        sys.stdout.write("\t  Failures:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:948:        sys.stdout.write("\n\tStreams:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:950:        sys.stdout.write("\t  +Resets:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:956:        sys.stdout.write("\t  -Resets:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:962:        sys.stdout.write("\t  Bogus:\t\t\t\t%s\n" %
./cmd/arc_summary/arc_summary.py:1000:        sys.stdout.write("VDEV Cache Summary:\t\t\t\t%s\n" % arc['summary'])
./cmd/arc_summary/arc_summary.py:1001:        sys.stdout.write("\tHit Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:1005:        sys.stdout.write("\tMiss Ratio:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:1009:        sys.stdout.write("\tDelegations:\t\t\t%s\t%s\n" % (
./cmd/arc_summary/arc_summary.py:1023:        with open("/sys/module/zfs/parameters/" + name) as f: value = f.read()
./cmd/arc_summary/arc_summary.py:1046:                sys.stderr.write("%s: '%s' exited with code %i\n" %
./cmd/arc_summary/arc_summary.py:1048:                sys.stderr.write("Tunable descriptions will be disabled.\n")
./cmd/arc_summary/arc_summary.py:1050:            sys.stderr.write("%s: Cannot run '%s': %s\n" %
./cmd/arc_summary/arc_summary.py:1052:            sys.stderr.write("Tunable descriptions will be disabled.\n")
./cmd/arc_summary/arc_summary.py:1054:    sys.stdout.write("ZFS Tunable:\n")
./cmd/arc_summary/arc_summary.py:1064:            sys.stdout.write("\t# %s\n" % descriptions[name])
./cmd/arc_summary/arc_summary.py:1066:        sys.stdout.write(format % (name, values[name]))
./cmd/arc_summary/arc_summary.py:1083:    sys.stdout.write("ZFS Subsystem Report\t\t\t\t%s" % daydate)
./cmd/arc_summary/arc_summary.py:1088:    sys.stdout.write("Usage: arc_summary.py [-h] [-a] [-d] [-p PAGE]\n\n")
./cmd/arc_summary/arc_summary.py:1089:    sys.stdout.write("\t -h, --help           : "
./cmd/arc_summary/arc_summary.py:1091:    sys.stdout.write("\t -a, --alternate      : "
./cmd/arc_summary/arc_summary.py:1093:    sys.stdout.write("\t -d, --description    : "
./cmd/arc_summary/arc_summary.py:1095:    sys.stdout.write("\t -p PAGE, --page=PAGE : "
./cmd/arc_summary/arc_summary.py:1097:    sys.stdout.write("\t                        "
./cmd/arc_summary/arc_summary.py:1099:    sys.stdout.write("Examples:\n")
./cmd/arc_summary/arc_summary.py:1100:    sys.stdout.write("\tarc_summary.py -a\n")
./cmd/arc_summary/arc_summary.py:1101:    sys.stdout.write("\tarc_summary.py -p 4\n")
./cmd/arc_summary/arc_summary.py:1102:    sys.stdout.write("\tarc_summary.py -ad\n")
./cmd/arc_summary/arc_summary.py:1103:    sys.stdout.write("\tarc_summary.py --page=2\n")
./cmd/arc_summary/arc_summary.py:1136:            sys.stderr.write('the argument to -p must be between 1 and ' +
./cmd/dbufstat/dbufstat.py:116:            sys.stderr.write("\t")
./cmd/dbufstat/dbufstat.py:118:            sys.stderr.write(",\n\t")
./cmd/dbufstat/dbufstat.py:121:            sys.stderr.write(", ")
./cmd/dbufstat/dbufstat.py:123:        sys.stderr.write("%s" % key)
./cmd/dbufstat/dbufstat.py:126:    sys.stderr.write("\n\n")
./cmd/dbufstat/dbufstat.py:130:    sys.stderr.write("%s\n" % cmd)
./cmd/dbufstat/dbufstat.py:132:    sys.stderr.write("Field definitions incompatible with '-b' option:\n")
./cmd/dbufstat/dbufstat.py:135:    sys.stderr.write("Field definitions incompatible with '-d' option:\n")
./cmd/dbufstat/dbufstat.py:138:    sys.stderr.write("Field definitions incompatible with '-t' option:\n")
./cmd/dbufstat/dbufstat.py:141:    sys.stderr.write("Field definitions are as follows:\n")
./cmd/dbufstat/dbufstat.py:143:        sys.stderr.write("%11s : %s\n" % (key, cols[key][2]))
./cmd/dbufstat/dbufstat.py:144:    sys.stderr.write("\n")
./cmd/dbufstat/dbufstat.py:150:    sys.stderr.write("%s\n" % cmd)
./cmd/dbufstat/dbufstat.py:151:    sys.stderr.write("\t -b : Print table of information for each dbuf\n")
./cmd/dbufstat/dbufstat.py:152:    sys.stderr.write("\t -d : Print table of information for each dnode\n")
./cmd/dbufstat/dbufstat.py:153:    sys.stderr.write("\t -h : Print this help message\n")
./cmd/dbufstat/dbufstat.py:154:    sys.stderr.write("\t -r : Print raw values\n")
./cmd/dbufstat/dbufstat.py:155:    sys.stderr.write("\t -t : Print table of information for each dnode type"
./cmd/dbufstat/dbufstat.py:157:    sys.stderr.write("\t -v : List all possible field headers and definitions"
./cmd/dbufstat/dbufstat.py:159:    sys.stderr.write("\t -x : Print extended stats\n")
./cmd/dbufstat/dbufstat.py:160:    sys.stderr.write("\t -i : Redirect input from the specified file\n")
./cmd/dbufstat/dbufstat.py:161:    sys.stderr.write("\t -f : Specify specific fields to print (see -v)\n")
./cmd/dbufstat/dbufstat.py:162:    sys.stderr.write("\t -o : Redirect output to the specified file\n")
./cmd/dbufstat/dbufstat.py:163:    sys.stderr.write("\t -s : Override default field separator with custom "
./cmd/dbufstat/dbufstat.py:165:    sys.stderr.write("\nExamples:\n")
./cmd/dbufstat/dbufstat.py:166:    sys.stderr.write("\tdbufstat.py -d -o /tmp/d.log\n")
./cmd/dbufstat/dbufstat.py:167:    sys.stderr.write("\tdbufstat.py -t -s \",\" -o /tmp/t.log\n")
./cmd/dbufstat/dbufstat.py:168:    sys.stderr.write("\tdbufstat.py -v\n")
./cmd/dbufstat/dbufstat.py:169:    sys.stderr.write("\tdbufstat.py -d -f pool,object,objset,dsize,cached\n")
./cmd/dbufstat/dbufstat.py:170:    sys.stderr.write("\n")
./cmd/dbufstat/dbufstat.py:209:            sys.stdout.write("%s%s" % (
./cmd/dbufstat/dbufstat.py:211:        sys.stdout.write("\n")
./cmd/dbufstat/dbufstat.py:223:            sys.stdout.write("%*s%s" % (cols[col][0], col, sep))
./cmd/dbufstat/dbufstat.py:224:        sys.stdout.write("\n")
./cmd/dbufstat/dbufstat.py:543:            sys.stderr.write("Invalid column definition! -- %s\n" % invalid)
./cmd/dbufstat/dbufstat.py:547:            sys.stderr.write("Incompatible field specified! -- %s\n" %
./cmd/dbufstat/dbufstat.py:557:            sys.stderr.write("Cannot open %s for writing\n" % ofile)
./cmd/dbufstat/dbufstat.py:568:            sys.stderr.write("Cannot open %s for reading\n" % ifile)
./cmd/arcstat/arcstat.py:119:    sys.stderr.write("%s\n" % cmd)
./cmd/arcstat/arcstat.py:120:    sys.stderr.write("Field definitions are as follows:\n")
./cmd/arcstat/arcstat.py:122:        sys.stderr.write("%11s : %s\n" % (key, cols[key][2]))
./cmd/arcstat/arcstat.py:123:    sys.stderr.write("\n")
./cmd/arcstat/arcstat.py:129:    sys.stderr.write("%s\n" % cmd)
./cmd/arcstat/arcstat.py:130:    sys.stderr.write("\t -h : Print this help message\n")
./cmd/arcstat/arcstat.py:131:    sys.stderr.write("\t -v : List all possible field headers and definitions"
./cmd/arcstat/arcstat.py:133:    sys.stderr.write("\t -x : Print extended stats\n")
./cmd/arcstat/arcstat.py:134:    sys.stderr.write("\t -f : Specify specific fields to print (see -v)\n")
./cmd/arcstat/arcstat.py:135:    sys.stderr.write("\t -o : Redirect output to the specified file\n")
./cmd/arcstat/arcstat.py:136:    sys.stderr.write("\t -s : Override default field separator with custom "
./cmd/arcstat/arcstat.py:138:    sys.stderr.write("\nExamples:\n")
./cmd/arcstat/arcstat.py:139:    sys.stderr.write("\tarcstat.py -o /tmp/a.log 2 10\n")
./cmd/arcstat/arcstat.py:140:    sys.stderr.write("\tarcstat.py -s \",\" -o /tmp/a.log 2 10\n")
./cmd/arcstat/arcstat.py:141:    sys.stderr.write("\tarcstat.py -v\n")
./cmd/arcstat/arcstat.py:142:    sys.stderr.write("\tarcstat.py -f time,hit%,dh%,ph%,mh% 1\n")
./cmd/arcstat/arcstat.py:143:    sys.stderr.write("\n")
./cmd/arcstat/arcstat.py:217:        sys.stdout.write("%s%s" % (
./cmd/arcstat/arcstat.py:221:    sys.stdout.write("\n")
./cmd/arcstat/arcstat.py:229:        sys.stdout.write("%*s%s" % (cols[col][0], col, sep))
./cmd/arcstat/arcstat.py:230:    sys.stdout.write("\n")
./cmd/arcstat/arcstat.py:282:        sys.stderr.write(msg)
./cmd/arcstat/arcstat.py:342:                sys.stdout.write("No L2ARC Here\n%s\n" % ele)
./cmd/arcstat/arcstat.py:346:            sys.stderr.write("Invalid column definition! -- %s\n" % invalid)
./cmd/arcstat/arcstat.py:350:            sys.stderr.write("Incompatible field specified! -- %s\n" %
./cmd/arcstat/arcstat.py:360:            sys.stderr.write("Cannot open %s for writing\n" % opfile)

== http:// ==
./cmd/dbufstat/dbufstat.py:15:# or http://www.opensolaris.org/os/licensing.
./cmd/arcstat/arcstat.py:9:#     http://blogs.sun.com/realneel/entry/zfs_arc_statistics
./cmd/arcstat/arcstat.py:14:#    http://github.com/mharsch/arcstat
./cmd/arcstat/arcstat.py:27:# or http://www.opensolaris.org/os/licensing.

== encryption ==

== sql() ==

== tmp() ==
./cmd/dbufstat/dbufstat.py:166:    sys.stderr.write("\tdbufstat.py -d -o /tmp/d.log\n")
./cmd/dbufstat/dbufstat.py:167:    sys.stderr.write("\tdbufstat.py -t -s \",\" -o /tmp/t.log\n")
./cmd/arcstat/arcstat.py:139:    sys.stderr.write("\tarcstat.py -o /tmp/a.log 2 10\n")
./cmd/arcstat/arcstat.py:140:    sys.stderr.write("\tarcstat.py -s \",\" -o /tmp/a.log 2 10\n")

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==

== unsafe input mechanisms ==
(unsupported type 'python')

