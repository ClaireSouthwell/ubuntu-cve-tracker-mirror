Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./src/core/trust/impl/sqlite3/store.cpp:155:        auto memory = (char*)::malloc(s.size());
./src/core/trust/impl/sqlite3/store.cpp:156:        ::memcpy(memory, s.c_str(), s.size());

== files() ==
./src/core/trust/impl/sqlite3/store.cpp:256:        auto result = sqlite3_open(fn.c_str(), &db);

== logging() ==
./src/core/trust/impl/sqlite3/store.cpp:66:std::pair<int, bool> is_error(int result)
./src/core/trust/impl/sqlite3/store.cpp:133:        std::tie(result, error) = is_error(sqlite3_bind_null(statement, index));
./src/core/trust/impl/sqlite3/store.cpp:136:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:143:        std::tie(result, error) = is_error(sqlite3_bind_double(statement, index, d));
./src/core/trust/impl/sqlite3/store.cpp:146:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:161:        std::tie(result, error) = is_error(sqlite3_bind_text(statement, index, memory, s.size(), deleter));
./src/core/trust/impl/sqlite3/store.cpp:164:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:171:        std::tie(result, error) = is_error(sqlite3_bind_int(statement, index, i));
./src/core/trust/impl/sqlite3/store.cpp:174:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:181:        std::tie(result, error) = is_error(sqlite3_bind_int64(statement, index, i));
./src/core/trust/impl/sqlite3/store.cpp:184:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:209:        std::tie(result, error) = is_error(sqlite3_reset(statement));
./src/core/trust/impl/sqlite3/store.cpp:212:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:218:        std::tie(result, error) = is_error(sqlite3_clear_bindings(statement));
./src/core/trust/impl/sqlite3/store.cpp:221:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:227:        std::tie(result, error) = is_error(sqlite3_step (statement));
./src/core/trust/impl/sqlite3/store.cpp:230:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error_from_db());
./src/core/trust/impl/sqlite3/store.cpp:243:            throw std::runtime_error("Cannot construct prepared statement for null statement.");
./src/core/trust/impl/sqlite3/store.cpp:261:            throw std::runtime_error(ss.str());
./src/core/trust/impl/sqlite3/store.cpp:282:        std::tie(result, e) = is_error(
./src/core/trust/impl/sqlite3/store.cpp:291:            throw std::runtime_error(sqlite3_errstr(result) + std::string(": ") + error());
./src/core/trust/impl/sqlite3/store.cpp:296:    std::string error() const
./src/core/trust/impl/sqlite3/store.cpp:298:        auto msg = sqlite3_errmsg(db);
./src/core/trust/impl/sqlite3/store.cpp:308:    return db->error();
./src/core/trust/impl/sqlite3/store.cpp:580:                throw std::runtime_error("Cannot delete request as query points beyond the result set.");
./src/core/trust/impl/sqlite3/store.cpp:617:            throw std::runtime_error("Oops ... we should never reach here.");
./src/core/trust/impl/sqlite3/store.cpp:644:    const char* error() const;
./src/core/trust/expose.cpp:123:            auto error = dbus::Message::make_error(
./src/core/trust/expose.cpp:143:            auto error = core::dbus::Message::make_error(
./src/core/trust/expose.cpp:182:                    auto error = core::dbus::Message::make_error(
./src/core/trust/expose.cpp:261:            auto error = core::dbus::Message::make_error(
./src/core/trust/resolve.cpp:100:            if (result.is_error())
./src/core/trust/resolve.cpp:112:            if (result.is_error())
./src/core/trust/resolve.cpp:113:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:120:            if (result.is_error())
./src/core/trust/resolve.cpp:121:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:128:            if (result.is_error())
./src/core/trust/resolve.cpp:129:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:136:            if (result.is_error())
./src/core/trust/resolve.cpp:137:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:144:            if (result.is_error())
./src/core/trust/resolve.cpp:145:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:157:            if (result.is_error())
./src/core/trust/resolve.cpp:158:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:165:            if (result.is_error())
./src/core/trust/resolve.cpp:166:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:175:            if (result.is_error())
./src/core/trust/resolve.cpp:176:                throw std::runtime_error(result.error().print());
./src/core/trust/resolve.cpp:189:        if (response.is_error())
./src/core/trust/resolve.cpp:190:            throw std::runtime_error(response.error().print());
./src/core/trust/resolve.cpp:202:            if (response.is_error())
./src/core/trust/resolve.cpp:204:                throw std::runtime_error(response.error().print());
./src/core/trust/resolve.cpp:218:        if (result.is_error())
./src/core/trust/resolve.cpp:219:            throw std::runtime_error(result.error().print());
./include/core/trust/store.h:49:                : std::runtime_error(implementation_specific)
./include/core/trust/store.h:60:                : std::runtime_error(implementation_specific)
./include/core/trust/store.h:81:                QueryIsInErrorState() : std::runtime_error("Query is in error state, cannot extract result.")
./include/core/trust/store.h:91:                NoCurrentResult() : std::runtime_error("Query does not have a current result.")
./include/core/trust/store.h:178:        ServiceNameMustNotBeEmpty() : std::runtime_error("Service name must not be empty")

== environment() ==
./src/core/trust/impl/sqlite3/store.cpp:35:    return std::string{::getenv("HOME")};
./src/core/trust/impl/sqlite3/store.cpp:40:    char* value = ::getenv("XDG_DATA_HOME");

== privileged() ==

== networking() ==
./src/core/trust/expose.cpp:100:        worker = std::move(std::thread([this](){access_bus()->run();}));
./tests/remote_trust_store_test.cpp:62:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:114:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:186:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:255:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:323:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:391:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:472:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:553:        trap->signal_raised().connect([trap](core::posix::Signal)
./tests/remote_trust_store_test.cpp:639:        trap->signal_raised().connect([trap](core::posix::Signal)

== http:// ==
./src/core/trust/codec.h:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./src/core/trust/dbus_interface.h:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./src/core/trust/request.cpp:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./src/core/trust/impl/sqlite3/store.cpp:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./src/core/trust/expose.cpp:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./src/core/trust/resolve.cpp:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./tests/remote_trust_store_test.cpp:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./tests/trust_store_test.cpp:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./include/core/trust/resolve.h:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./include/core/trust/request.h:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./include/core/trust/expose.h:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./include/core/trust/store.h:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
./include/core/trust/visibility.h:14: * along with this program.  If not, see <http://www.gnu.org/licenses/>.

== encryption ==

== sql() ==
./src/core/trust/impl/sqlite3/store.cpp:546:        void execute()
./src/core/trust/impl/sqlite3/store.cpp:651:    std::shared_ptr<core::trust::Store::Query> query();
./src/core/trust/impl/sqlite3/store.cpp:714:std::shared_ptr<trust::Store::Query> sqlite::Store::query()
./src/core/trust/expose.cpp:92:            handle_add_query(msg);
./src/core/trust/expose.cpp:97:            handle_remove_query(msg);
./src/core/trust/expose.cpp:155:    void handle_add_query(const core::dbus::Message::Ptr& msg)
./src/core/trust/expose.cpp:162:            auto query = store->query();
./src/core/trust/expose.cpp:199:                query->execute();
./src/core/trust/expose.cpp:270:    void handle_remove_query(const core::dbus::Message::Ptr& msg)
./src/core/trust/resolve.cpp:116:        void execute()
./src/core/trust/resolve.cpp:212:    std::shared_ptr<core::trust::Store::Query> query()
./tests/remote_trust_store_test.cpp:158:        auto query = store->query();
./tests/remote_trust_store_test.cpp:159:        query->execute();
./tests/remote_trust_store_test.cpp:236:        auto query = store->query();
./tests/remote_trust_store_test.cpp:238:        query->execute();
./tests/remote_trust_store_test.cpp:304:        auto query = store->query();
./tests/remote_trust_store_test.cpp:306:        query->execute();
./tests/remote_trust_store_test.cpp:372:        auto query = store->query();
./tests/remote_trust_store_test.cpp:374:        query->execute();
./tests/remote_trust_store_test.cpp:449:        auto query = store->query();
./tests/remote_trust_store_test.cpp:453:        query->execute();
./tests/remote_trust_store_test.cpp:530:        auto query = store->query();
./tests/remote_trust_store_test.cpp:535:        query->execute();
./tests/remote_trust_store_test.cpp:614:        auto query = store->query();
./tests/remote_trust_store_test.cpp:616:        query->execute();
./tests/remote_trust_store_test.cpp:682:            auto query = store->query();
./tests/remote_trust_store_test.cpp:683:            query->execute();
./tests/remote_trust_store_test.cpp:692:        auto query = store->query();
./tests/remote_trust_store_test.cpp:693:        query->execute();
./tests/trust_store_test.cpp:69:    auto query = store->query();
./tests/trust_store_test.cpp:75:    EXPECT_NO_THROW(query->execute());
./tests/trust_store_test.cpp:107:    auto query = store->query();
./tests/trust_store_test.cpp:110:    query->execute();
./tests/trust_store_test.cpp:147:    auto query = store->query();
./tests/trust_store_test.cpp:149:    query->execute();
./tests/trust_store_test.cpp:181:    auto query = store->query();
./tests/trust_store_test.cpp:183:    query->execute();
./tests/trust_store_test.cpp:215:    auto query = store->query();
./tests/trust_store_test.cpp:217:    query->execute();
./tests/trust_store_test.cpp:258:    auto query = store->query();
./tests/trust_store_test.cpp:262:    query->execute();
./tests/trust_store_test.cpp:305:    auto query = store->query();
./tests/trust_store_test.cpp:310:    query->execute();
./tests/trust_store_test.cpp:350:    auto query = store->query();
./tests/trust_store_test.cpp:352:    query->execute();
./tests/trust_store_test.cpp:385:        auto query = store->query();
./tests/trust_store_test.cpp:386:        query->execute();
./tests/trust_store_test.cpp:395:    auto query = store->query();
./tests/trust_store_test.cpp:396:    query->execute();
./include/core/trust/store.h:128:        virtual void execute() = 0;
./include/core/trust/store.h:162:    virtual std::shared_ptr<Query> query() = 0;

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==

== unsafe input mechanisms ==

