#!/usr/bin/python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2008 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

# Set CVE_ALLOW_NEWER_PKGS=1 to skip new package checks
import glob, sys, optparse, cve_lib, os, re
import pprint

import source_map
source = source_map.load()

def ever_existed(pkg):
    for rel in cve_lib.releases:
        if rel in cve_lib.eol_releases:
            continue
        if source[rel].has_key(pkg):
            return True
    return False

EXIT_FAIL = 1
EXIT_OKAY = 0

parser = optparse.OptionParser()
parser.add_option("-v", "--verbose", dest="verbose", help="Enable verbose reporting", action='store_true')
parser.add_option("-d", "--debug", dest="debug", help="Enable debug reporting", action='store_true')
(opt, args) = parser.parse_args()

code = EXIT_OKAY

add_path = False
if len(args) == 0:
    for dir in ['active','retired','ignored']:
        args += sorted(glob.glob('%s/CVE-*' % (dir)))
    if os.path.islink('embargoed'):
        args += sorted(glob.glob('embargoed/[\w-]*'))
else:
    add_path = True

for cve in args:
    if add_path:
        if re.match(r'EMB-', cve):
            cve = os.path.join("./embargoed", cve)
        else:
            cve = os.path.join("./active", cve)
        
    ret, data = cve_lib.load_cve(cve)

    # Verify packages exist for releases
    if ret == EXIT_OKAY:
        for pkg in sorted(data['pkgs'].keys()):
            for release in sorted(data['pkgs'][pkg].keys()):
                rel = release
                # Adjust devel release name
                if rel == 'devel':
                    rel = 'intrepid'
                # Don't syntax check upstream
                if rel == 'upstream':
                    continue
                # Don't syntax check end-of-lifed releases
                if rel in cve_lib.eol_releases:
                    continue

                # Skip devel checks on retired CVEs
                if release == 'devel':
                    if cve.startswith('retired/'):
                        continue

                # Skip DNE's
                if data['pkgs'][pkg][release][0] == 'DNE':
                    if source[rel].has_key(pkg):
                        print >>sys.stderr, "%s: package '%s' DOES exist in '%s'!" % (cve,pkg,rel)
                        ret = EXIT_FAIL
                    continue

                # Check that package exists in a given release
                if not ever_existed(pkg):
                    print >>sys.stderr, "%s: unknown package '%s'" % (cve, pkg)
                    ret = EXIT_FAIL
                else:
                    if not source[rel].has_key(pkg):
                        print >>sys.stderr, "%s: package '%s' not in '%s'" % (cve, pkg, rel)
                        ret = EXIT_FAIL
                    elif int(os.environ.get('CVE_ALLOW_NEWER_PKGS','0')) == 0:
                        # Validate the version is <= version in release
                        if data['pkgs'][pkg][release][0] == 'released':
                            released = data['pkgs'][pkg][release][1]
                            if source_map.version_compare(released,source[rel][pkg]['version'])>0:
                                print >>sys.stderr, "%s: %s has %s > %s (in %s)" % (cve, pkg, released, source[rel][pkg]['version'], rel)
                                ret = EXIT_FAIL
                        
                
    # Report on failures
    if ret == EXIT_FAIL:
        code = EXIT_FAIL
    elif opt.debug:
        pp = pprint.PrettyPrinter(indent=4)
        pp.pprint(data)

if code == EXIT_OKAY and opt.verbose:
    print 'OK: %d CVEs' % (len(args))
sys.exit(code)
