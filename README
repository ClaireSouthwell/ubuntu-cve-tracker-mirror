----------
UBUNTU CVE
----------
With the newly revamped ubuntu-cve, it is much more like Debian's kernel-sec
list where you have these directories:

active/		(CVEs that need attention)
ignored/	(CVEs to be ignored, but want to track with special status/notes)
retired/	(CVEs that have been addressed)

ignored/ also has the file 'not-for-us.txt'.

check-cves pulls down the CVE list from MITRE, cross-references it with
ignored/, ignored/not-for-us.txt and retired/, then adds the new CVEs to
active/.  This is normally run on Wednesday, as this is when MITRE updates
its database.


CHECK-CVES
----------

Run like this:
./check-cves
./check-cves http://cve.mitre.org/data/downloads/allitems.xml
./check-cves <file>

Eg:
wget http://cve.mitre.org/data/downloads/allitems.xml
./check-cves ./allitems.xml

When running check-cves:
'a'dd 		to add to active/ (see Triaging, below)
'i'gnore 	to add to ignored/not-for-us.txt (see Triaging, below)
's'kip 		don't do anything (will come up next time)

* Note: it may take a few seconds before prompts, as allitems.xml is a large
file.


TRIAGING
--------

*** IMPORTANT ***
ubuntu-cve is PUBLIC.  All comments should be professional, and there should be
no embargoed items in ubuntu-cve (until they are made public that is).


Adding
------
1. adjust the Candidate field

2. Add the Description from Mitre

3. Set the Priority, if you can at this time.  Should be one of 'very-low',
'low', 'medium', 'high' or 'critical'

4. for each release, adjust PKG to be the source package for the software.
Note that for the kernel, upstream_PKG becomes 'upstream_linux-2.6' and the
releases should be 'dapper_linux-source-2.6.15', 'edgy_linux-source-2.6.17',
'feisty_linux-source-2.6.20', 'gutsy_linux-source-2.6.22', ...)

5. for each release, assign a status of (after the release_<source-package>
line): 'N/A', 'DNE', 'ignored', 'not-affected', '-unlisted-', 'needs triage',
'needed', 'deferred', 'pending', 'released'

6. for each piece of software that is affected by this CVE, add extra
'release_<source-package>' fields.

7. fill in any extra fields as needed (eg notes, references to patches, 
Assigned-to, etc)

8. Check Debian's secure-testing data/embedded-code-copies to see if any
other software is to be included in this CVE


Ignoring
--------
Be sure list why and what piece of software it is.  Eg:
'DNE - PhpNuke'
'NOT FOR US - Cisco IOS


Ubuntu Priorities
-----------------
These are very similar to the Debian priorities, but with some differences.
Priorities can be roughly mapped as:

  very-low	Something that is technically a security problem, but is
		only theoretical in nature, requires a very special
		situation, has almost no install base, or does no real
		damage.  These tend not to get backport from upstreams,
		and will likely not be included in security updates unless
		there is an easy fix and some other issue causes an update.

  low		Something that is a security problem, but is hard to
		exploit due to environment, requires a user-assisted
		attack, a small install base, or does very little damage.
		These tend to be included in security updates only when
		higher priority issues require an update, or if many
		low priority issues have built up.

  medium	Something is a real security problem, and is exploitable
		for many people.  Includes network daemon denial of service 
		attacks, and gaining user privileges. Updates should be made
		soon for this priority of issue.

  high		A real problem, exploitable for many people in a default
		installation.  Includes serious remote denial of services,
		local root privilege escalations, or data loss.

  critical	A world-burning problem, exploitable for nearly all people
		in a default installation.  Includes remote root privilege
		escalations, or massive data loss.


Retiring a CVE
--------------
When a CVE fix is released, must manually update the CVE file in active/
with the appropriate information.  Then 'verify-report.py' (see below) 
and 'bzr mv' it to retired/.


UBUNTU-CVE Commands
-------------------
Useful commands are (all are run from within the active/ directory):

Full listing:
../scripts/ubuntu-table

Full listing, flagging packages in main:
../scripts/ubuntu-table --supported

Show all active CVEs for supported (main) packages:
../scripts/ubuntu-table --supported 2>/dev/null | grep SUPPORTED

Number of active CVEs that are in main:
../scripts/ubuntu-table --supported 2>/dev/null | grep SUPPORTED | wc -l

Show all active CVEs for commercial packages:
../scripts/ubuntu-table --supported 2>/dev/null | grep COMMERCIAL

Show CVEs for a particular source package:
../scripts/pkg_status pkgname
../scripts/pkg_status pkgname | egrep '^CVE' | awk '{print $1}' | xargs ../scripts/cve_status

Show CVEs with undefined priorities (ie untriaged):
../scripts/ubuntu-table --untriaged

Create/edit a new CVE (eg if don't want to wait for check-cves):
../scripts/active_edit -p package -c CVE-XXXX-XXXX

Verify a report (always run this before doing a bzr commit):
../scripts/verify-report.pl CVE-XXXX-XXXX
bzr status | grep active | sed 's/active\///' | xargs ../scripts/verify-report.pl >/dev/null

See the status of specific CVEs:
../scripts/cve_status CVE-2006-4519 CVE-2007-2949 CVE-2007-3741

See the status of specific CVEs without viewing the full entry:
../scripts/cve_status -s CVE-2006-4519 CVE-2007-2949 CVE-2007-3741

See all bugs with priority of medium or higher:
../scripts/ubuntu-table --supported | egrep -v '[[:space:]]+(untriaged|very-low|low)$'

See a listing of packages with number of CVEs attached to them:
../scripts/cve_packages

Show items needing to be retired:
../scripts/ubuntu-table > /dev/null
../scripts/cve_need_retire
../scripts/cve_need_retire -f

Retiring items:
for cve in $(../scripts/ubuntu-table 2>&1 >/dev/null | grep ^retire | cut  -d" " -f2); do bzr mv $cve ../retired; done
bzr mv $(../scripts/cve_need_retire) ../retired/

Reports:
../scripts/report-todo
../scripts/report-todo-numbers


Non-CVE Vulnerabilties
----------------------
If find a non-CVE assigned vulnerability, then:

1. report the bug to Debian
2. in ubuntu-cve, use 00boilterplate and create CVE-NEED-0001
3. if desired, email vendor-sec@lst.de and Cc cve@mitre.org asking for a CVE
4. file a bug in LP (assign to security-team if main, motu-swat if universe

Doing '1' may be enough if its in universe and not high priority, as
it will eventually find its way back to Ubuntu.

Stable Release Actions
----------------------
When a stable release is published, the active CVEs need to be adjusted to
reflect the new stable release.  e.g. when gutsy was published:
  cd active; perl -pi -e 's/^(devel_(.*))/gutsy_$2\n$1/g' CVE-*
The script tools will need to be adjusted as well.  There is usually some
lag time between the new devel archive opening and the stable release
getting published.  This means that "devel" will disappear from ubuntu-table
briefly.
