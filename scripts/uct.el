;;; uct -- Emacs interface to the Ubuntu CVE tracker

;;; Commentary:

;;; Code:
(require 'cve-mode)
(require 'subr-x)

(defgroup uct nil
  "UCT for Emacs"
  :group 'applications)

(defvar uct-cve-regex cve-mode-cve-id-regexp)

(defvar uct-supported-releases '(trusty xenial bionic cosmic devel))

(defvar uct-cve-directories '("active" "retired" "embargoed"))

(defvar uct-directories '("active" "embargoed"))

(defvar uct-filtered-package nil)

(defvar uct-cves nil)

(defconst uct-base-path
  (file-name-directory
   (directory-file-name
    (file-name-directory
     (file-truename
      (expand-file-name
       (or load-file-name buffer-file-name)))))))

(cl-defstruct (cve)
  id
  description
  priority
  package
  status
  file)

(defun uct--flatten (l)
  "Flatten list L."
  (cond ((null l) l)
        ((listp l) (append (uct--flatten (car l)) (uct--flatten (cdr l))))
        (t (list l))))

(defun uct-load-cves-from-file (file)
  "Load all CVEs from FILE and return `cve' objects or nil on error."
  (let (id description priority packages)
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (save-excursion
        (if (re-search-forward (concat "^Candidate: *" uct-cve-regex) nil t)
            (setq id (intern (match-string 1)))
          (error "%s does not appear to be a valid CVE" file)))
      (save-excursion
        (setq description
              (if (re-search-forward "^Description: *" nil t)
                  (let ((start (point))
                        (end (progn
                               (re-search-forward "^[A-Z]")
                               (forward-line -1)
                               (end-of-line)
                               (point))))
                    (replace-regexp-in-string "\n" " "
                     (string-trim (buffer-substring-no-properties start end))))
                "")))
      (save-excursion
        (if (re-search-forward cve-mode-priority-regexp nil t)
            (setq priority (intern (match-string 1)))
          (setq priority 'invalid)))
      (while (re-search-forward cve-mode-releases-regexp nil t)
        (let* ((release (intern (match-string 2)))
               (package (intern (match-string 3)))
               (status (intern (match-string 4)))
               (entry (assoc package packages))
               (statuses (cdr entry)))
          (if entry
              (setf (cdr entry)
                    (add-to-list 'statuses `(,release . ,status)))
            (add-to-list 'packages `(,package . ,statuses)))))
      (mapcar #'(lambda (pkg)
                  (make-cve :id id
                            :description description
                            :priority priority
                            :package (car pkg)
                            :status (cdr pkg)
                            :file file))
              packages))))

(defun uct-find-cves (dir)
  "Return all CVEs found in DIR."
  (let* ((cves nil)
        (i 1)
        (files (directory-files dir t uct-cve-regex))
        (n (length files)))
    (dolist (file files)
      (message "Loading CVEs (%d/%d)" i n)
      (incf i)
      (dolist (cve (uct--flatten (uct-load-cves-from-file file)))
        (push cve cves)))
    cves))

(defface uct-list-face-cve
  '((t :inherit font-lock-function-name-face))
  "Face used on the status of CVEs.")

(defface uct-list-face-priority-critical
  '((t :inherit error))
  "Face used on the status of CVEs.")

(defface uct-list-face-priority-high
  '((t :inherit font-lock-warning-face))
  "Face used on the status of CVEs.")

(defface uct-list-face-priority-medium
  '((t :inherit default))
  "Face used on the status of CVEs.")

(defface uct-list-face-priority-low
  '((t :inherit font-lock-comment-face))
  "Face used on the status of CVEs.")

(defface uct-list-face-priority-negligible
  '((t :inherit font-lock-comment-face))
  "Face used on the status of CVEs.")

(defun uct-list--face-for-priority (priority)
  "Return face for PRIORITY."
  (pcase priority
    (`critical 'uct-list-face-priority-critical)
    (`high 'uct-list-face-priority-high)
    (`medium 'uct-list-face-priority-medium)
    (`low 'uct-list-face-priority-low)
    (`negligible 'uct-list-face-priority-negligible)
    (_ 'font-lock-warning-face)))

(defface uct-list-face-status-dne
  '((t :inherit font-lock-comment-face))
  "Face used on the status of CVEs.")

(defface uct-list-face-status-not-affected
  '((t :inherit font-lock-comment-face))
  "Face used on the status of CVEs.")

(defface uct-list-face-status-needs-triage
  '((t :inherit default))
  "Face used on the status of CVEs.")

(defface uct-list-face-status-needed
  '((t :inherit font-lock-warning-face))
  "Face used on the status of CVEs.")

(defface uct-list-face-status-released
  '((t :inherit font-lock-function-name-face))
  "Face used on the status of CVEs.")

(defun uct-list--face-for-status (status)
  "Return face for STATUS."
  (pcase status
    (`DNE 'uct-list-face-status-dne)
    (`not-affected 'uct-list-face-status-not-affected)
    (`needs-triage 'uct-list-face-status-needs-triage)
    (`needed 'uct-list-face-status-needed)
    (`released 'uct-list-face-status-released)
    (_ 'font-lock-warning-face)))

(defun uct-list-load-entry (&optional button)
  "Load a CVE from the CVE list.
If optional arg BUTTON is non-nil, describe it's associated CVE."
  (interactive)
  (let ((cve (if button (button-get button 'cve)
               (tabulated-list-get-id))))
    (if cve
        (find-file-other-window (cve-file cve))
      (user-error "No CVE here"))))

(defun uct-list--list-entry (cve)
  "Return a CVE entry suitable for `tabulated-list-entries'.
CVE is a `cve' object."
  (let ((face (uct-list--face-for-priority (cve-priority cve)))
        (status (cve-status cve)))
    (list cve
          `[(,(symbol-name (cve-id cve))
             face uct-list-face-cve
             follow-link t
             cve ,cve
             action uct-list-load-entry)
            ,(symbol-name (cve-package cve))
            ,(propertize (symbol-name (cve-priority cve)) 'font-lock-face face)
            ,@(mapcar #'(lambda (release)
                          (let ((status (or (cdr (assoc release status)) '-)))
                            (propertize (symbol-name status)
                                        'font-lock-face (uct-list--face-for-status status))))
                      uct-supported-releases)
            ,(cve-description cve)])))

(defun uct-list-refresh ()
  "Refresh the list of CVEs."
  (interactive)
  (tabulated-list-init-header)
  ;; don't try and mapcar as run out of stack depth - accumulate and
  ;; process
  (let (entries)
    (unless uct-cves
      (message "Loading CVEs...")
      (dolist (dir (mapcar #'(lambda (d) (expand-file-name d uct-base-path))
                           uct-directories))
        (dolist (cve (uct-find-cves dir))
          (push cve uct-cves))))
    (dolist (cve uct-cves)
      (when (or (null uct-filtered-package)
                (eql uct-filtered-package (cve-package cve)))
        (push (uct-list--list-entry cve) entries)))
    (setq tabulated-list-entries entries)))

(defun uct-list--id-predicate (A B)
  "Sort predicate for CVE on ID between A and B."
  (string< (cve-id (car A)) (cve-id (car B))))

(defvar uct-list--priorities '(negligible low medium high critical))

(defun uct-list--priority-predicate (A B)
  "Sort predicate for CVE priority between A and B."
  (< (or (cl-position (cve-priority (car A)) uct-list--priorities) -1)
     (or (cl-position (cve-priority (car B)) uct-list--priorities) -1)))

(defun uct-list--get-packages ()
  "Return the list of packages from the current list of CVEs."
  (let (packages)
    (dolist (cve uct-cves)
      (let ((package (cve-package cve)))
        (unless (member package packages)
          (push package packages))))
    packages))

;; TODO - use package on current line as initial input via
;; (tabulated-list-get-id)
(defun uct-list-filter-by-package (&optional package)
  "Filter the list of CVEs to only those affecting PACKAGE."
  (interactive
   (list (completing-read "Package: " (uct-list--get-packages))))
  (when (stringp package)
    (if (string= package "")
        (setq package nil)
      (setq package (intern package))))
  (setq uct-filtered-package package)
  (tabulated-list-revert))

(defvar uct-list-mode-map
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map tabulated-list-mode-map)
    (define-key map "\C-m" 'uct-list-load-entry)
    (define-key map "r" 'uct-list-refresh)
    (define-key map "p" 'uct-list-filter-by-package)
    map)
  "Local keymap for `uct-list-mode' buffers.")

(define-derived-mode uct-list-mode tabulated-list-mode "CVEs"
  "Major mode for browsing CVEs.
\\<uct-list-mode-map>
\\{uct-list-mode-map}"
  (setq tabulated-list-format `[("CVE" 17 uct-list--id-predicate)
                                ("Package" 25 t)
                                ("Priority" 10 uct-list--priority-predicate)
                                ,@(mapcar #'(lambda (release)
                                              (list (symbol-name release) 15 nil))
                                          uct-supported-releases)
                                ("Description" 0 nil)])
  (setq tabulated-list-sort-key (cons "CVE" nil))
  (add-hook 'tabulated-list-revert-hook #'uct-list-refresh nil t)
  (tabulated-list-init-header))

(with-eval-after-load 'evil
  (evil-define-key 'normal uct-list-mode-map (kbd "r") #'uct-list-refresh)
  (evil-define-key 'normal uct-list-mode-map (kbd "p") #'uct-list-filter-by-package)
  (evil-define-key 'normal uct-list-mode-map (kbd "q") #'quit-window))

(defun uct ()
  "Display list of CVEs."
  (interactive)
  (let ((buffer (get-buffer-create "*UCT*")))
    (with-current-buffer buffer
      (uct-list-mode)
      (uct-list-refresh)
      (tabulated-list-print))
    (display-buffer buffer)))

(provide 'uct)
;;; uct.el ends here
