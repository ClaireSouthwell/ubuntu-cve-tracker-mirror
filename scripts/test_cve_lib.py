#!/usr/bin/env python3

import unittest
import json
import os
import cve_lib

# hack unit test so we can enumerate each item from nvd json as a separate
# test ala https://stackoverflow.com/a/32939
class TestCVSS(unittest.TestCase):
    def test_empty(self):
        with self.assertRaises(ValueError):
            cve_lib.parse_cvss('')

    def test_none(self):
        with self.assertRaises(ValueError):
            cve_lib.parse_cvss(None)


def nvd_recent_test_generator(cvssV3):
    def test(self):
        cvss = cve_lib.parse_cvss(cvssV3["vectorString"])
        self.assertIsNotNone(cvss)
        # there are a few CVEs which have an invalid attackVector -
        # CVE-2012-0334, CVE-2019-10995, CVE-2020-1602, CVE-2020-1605 and
        # CVE-2020-1609 in the current recent json - so work-around this
        # since this is just the wrong string name so is not consequential
        if cvssV3["attackVector"] == "ADJACENT_NETWORK":
            cvssV3["attackVector"] = "ADJACENT"
        self.assertEqual(cvss["baseMetricV3"]["cvssV3"], cvssV3)
    return test

if __name__ == '__main__':
    with open(os.path.join(os.path.dirname(os.path.realpath(__file__)),
                           '..', 'nvdcve-1.1-recent.json')) as fp:
        js = json.load(fp)
        for cve in js["CVE_Items"]:
            if "baseMetricV3" in cve["impact"]:
                cvssV3 = cve["impact"]["baseMetricV3"]["cvssV3"]
                test = nvd_recent_test_generator(cvssV3)
                setattr(TestCVSS, "test_" + cve["cve"]["CVE_data_meta"]["ID"], test)
        unittest.main()
