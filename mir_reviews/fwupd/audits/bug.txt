- Yikes, AppStream appears to allow MD5 and SHA1 hashes for firmware
  checksums:
  http://sources.debian.net/src/appstream-glib/0.5.10-2/libappstream-glib/as-checksum.c/?hl=140#L268

- The fu_util_download_metadata() function uses hardcoded
  /tmp/firmware.xml.gz and /tmp/firmware.xml.gz.asc filenames
- When I replaced
  /etc/pki/fwupd-metadata/GPG-KEY-Linux-Vendor-Firmware-Service with my
  own GPG key I could not find any error messages anywhere

- Why does a firmware update tool build against a color management daemon?
- debian/README.Debian suggests that it doesn't actually do much and is
  still in heavy development as of May 2015. Has this changed?

- fu_keyring_setup() doesn't use gpgme_release() on gpg_set_protocol()
  failure
- fu_main_daemon_update_metadata() checks signature over an entire file
  but uses g_strndup() to copy it in memory; a file may use an embedded
  ASCII NUL to truncate the duplication early. There's probably no
  security issue here but it may be surprising.
- Hardcoded paths:
  - /etc/pki/fwupd-metadata
  - /var/cache/app-info/xmls/fwupd.xml
  - /tmp/firmware.xml.gz
  - /tmp/firmware.xml.gz.asc
- dfu encryption?
  - what problem is it solving? what is the threat model?
  - why xtea?
  - single-pass md5 is a poor KDF

