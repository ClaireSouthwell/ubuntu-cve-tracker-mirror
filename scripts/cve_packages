#!/usr/bin/env python

# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2008 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import os
import re
import sys
import optparse
import cve_lib

import source_map
source_map = source_map.load()
releases = cve_lib.releases

priorities = dict()
for p in ['untriaged'] + cve_lib.priorities:
    priorities.setdefault(p, dict())

packages = dict()
pockets = { 'supported' : dict(),
            'universe' : dict(),
            'partner' : dict() }

points = { 'negligible' : 0,
           'untriaged' : 5,
           'low' : 10,
           'medium' : 50,
           'high' : 100,
           'critical' : 200 }

parser = optparse.OptionParser()
parser.add_option("-S", "--skip-devel", help="Show only those CVEs *not* in the current devel release", action="store_true")
parser.add_option("-D", "--only-devel", help="Show only those CVEs in the current devel release", action="store_true")
parser.add_option("-m", "--only-supported", help="Show only those CVEs that are supported", action="store_true")
parser.add_option("-t", "--totals", help="Display totals", action="store_true")
parser.add_option("-L", "--linux", help="Perform 'linux' package name replacements", action="store_true")
parser.add_option("-p", "--packages", help="Report only on the given packages", action="append", type="string")
parser.add_option("-X", "--exclude", help="Ignore specified packages", action="append", type="string")
parser.add_option("-d", "--debug", help="Report debug information while loading", action="store_true")
(opt, args) = parser.parse_args()

releases = cve_lib.releases
for eol in cve_lib.eol_releases:
    if eol in releases:
        releases.remove(eol)
if opt.skip_devel:
    releases.remove(cve_lib.devel_release)

if opt.only_devel:
    releases = [cve_lib.devel_release]

(cves, uems) = cve_lib.get_cve_list()
(table, priority, cves) = cve_lib.load_all(cves, uems, opt)
for cve in sorted(cves):
    if not table.has_key(cve):
        continue

    for pkg in sorted(table[cve].keys()):
        if opt.exclude and pkg in opt.exclude:
            continue

        supported = False
        partner = False
        universe = False
        found = False
        for r in cve_lib.releases:
            if table[cve][pkg].has_key(r):
                if table[cve][pkg][r] in ['needed','deferred','pending','needs-triage','active']:
                    found = True
                    if cve_lib.is_supported(source_map, pkg, r):
                        supported = True
                    if cve_lib.is_partner(source_map, pkg, r):
                        partner = True
                    if cve_lib.is_universe(source_map, pkg, r):
                        universe = True

        if not found:
            continue

        if opt.only_supported and not supported and not partner:
            continue

        if supported:
            if pockets['supported'].has_key(pkg):
                pockets['supported'][pkg] += 1
            else:
                pockets['supported'][pkg] = 1
        if partner:
            if pockets['partner'].has_key(pkg):
                pockets['partner'][pkg] += 1
            else:
                pockets['partner'][pkg] = 1
        if universe:
            if pockets['universe'].has_key(pkg):
                pockets['universe'][pkg] += 1
            else:
                pockets['universe'][pkg] = 1

        if packages.has_key(pkg):
            packages[pkg] += 1
        else:
            packages[pkg] = 1

        p = priority[cve]['default']
        if priority[cve].has_key(pkg):
            p = priority[cve][pkg]

        if priorities[p].has_key(pkg):
            priorities[p][pkg] += 1
        else:
            priorities[p][pkg] = 1


sys.stdout.write("Weight\tPackage Counts\n")
sys.stdout.write("---------------------------------------------------------------------\n")
for pkg in sorted(packages.keys()):
    score = 0
    for p in ['untriaged'] + cve_lib.priorities:
        if priorities[p].has_key(pkg):
            score += priorities[p][pkg] * points[p]

    if opt.totals:
        sys.stdout.write("%s: %s"%(pkg, packages[pkg]))
    else:
        sys.stdout.write("%s\t%s: %s total" % (str(score), pkg, str(packages[pkg])))
        for p in ['untriaged'] + cve_lib.priorities:
            if priorities[p].has_key(pkg):
                sys.stdout.write(", %s %s" % (str(priorities[p][pkg]), p))
    if pockets['partner'].has_key(pkg):
        sys.stdout.write(" (PARTNER)")
    elif pockets['supported'].has_key(pkg):
        sys.stdout.write(" (SUPPORTED)")
    sys.stdout.write("\n")

