#!/usr/bin/python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2011 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import os, cPickle
from source_map import version_compare

def load_database(db_filename='database.pickle'):
    '''Load usn database'''
    filename = os.path.expanduser(db_filename)
    if not os.path.isfile(filename):
        return {}
    return cPickle.load(open(filename))

def save_database(database, db_filename='database.pickle'):
    '''Save usn database'''
    filename = os.path.expanduser(db_filename)
    cPickle.dump(database, open(filename, 'w'), -1)

def get_reverted(filename='reverted-CVEs.txt'):
    '''Get reverted USNs'''
    reverted = dict()
    if os.path.exists(filename):
        for line in open(filename):
            elements = line.rstrip().split(' ')
            usn = elements.pop(0)
            reverted.setdefault(usn,set())
            for cve in elements:
                reverted[usn].add(cve)

    return reverted

def packages_dict(db, packages, releases=None, opt=object):
    '''Produce a list of packages that refer back to USNs'''
    pkgs = dict()
    for usn in sorted(db, cmp=version_compare):
        # This USN is ancient and lacks any CVE information
        if not db[usn].has_key('cves'):
            if (hasattr(opt, 'debug') and opt.debug):
                print "%s lacks CVEs" % (usn)
            continue

        for rel in db[usn]['releases']:
            # Ignore old USNs
            if not db[usn]['releases'][rel].has_key('sources'):
                continue

            if releases and not rel in releases:
                continue

            # Look at fixed packages
            for pkg in packages:
                if not db[usn]['releases'][rel]['sources'].has_key(pkg):
                    continue

                pkgs.setdefault(pkg, dict())
                version = db[usn]['releases'][rel]['sources'][pkg]['version']
                if pkgs[pkg].has_key(version):
                    raise IndexError, "Saw %s %s twice!" % (pkg, version)
                pkgs[pkg][version] = usn
    return pkgs
