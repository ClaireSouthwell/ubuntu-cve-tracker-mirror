Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==
./src/urf-input.c:186:	udev_enumerate_add_match_subsystem (enumerate, "input");
./src/urf-utils.c:25:	udev_enumerate_add_match_subsystem (enumerate, "dmi");
./src/urf-utils.c:105:	udev_enumerate_add_match_subsystem(enumerate, "rfkill");

== memory_management() ==
./src/urf-session-checker-consolekit.c:243:	inhibitor = g_new0 (UrfInhibitor, 1);
./src/urf-device.c:503:	introspection_xml = g_string_new ("<node>");
./src/urf-session-checker-logind.c:243:	inhibitor = g_new0 (UrfInhibitor, 1);
./src/urf-main.c:189:	config = urf_config_new ();
./src/urf-arbitrator.c:335:	struct fm_task_data *fm_data = g_try_new0 (struct fm_task_data, 1);
./src/urf-config.c:437:	info = g_new0 (ParseInfo, 1);
./src/urf-config.c:638:	options = g_new0 (Options, 1);
./src/urf-config.c:1011:urf_config_new (void)
./src/urf-utils.c:34:	info = g_new0 (DmiInfo, 1);

== files() ==
./src/urf-device-kernel.c:362:	fd = open("/dev/rfkill", O_RDWR | O_NONBLOCK);
./src/urf-arbitrator.c:792:	fd = open("/dev/rfkill", O_RDWR | O_NONBLOCK);
./src/urf-input.c:145:	fd = open(dev_node, O_RDONLY | O_NONBLOCK);
./src/urf-config.c:645:	profile_dir = g_dir_open (URFKILL_PROFILE_DIR, 0, NULL);

== logging() ==
./src/urf-daemon.c:248:	g_debug ("%s", __func__);
./src/urf-daemon.c:258:		g_debug ("%s: success", __func__);
./src/urf-daemon.c:269:		g_dbus_method_invocation_return_error (priv->invocation,
./src/urf-daemon.c:319:		g_debug ("%s: operation already inprogress...", __func__);
./src/urf-daemon.c:331:		g_debug ("%s: block == current state", __func__);
./src/urf-daemon.c:351:		g_dbus_method_invocation_return_error (invocation,
./src/urf-daemon.c:384:	g_debug ("%s", __func__);
./src/urf-daemon.c:399:		g_debug ("%s: success", __func__);
./src/urf-daemon.c:412:		g_dbus_method_invocation_return_error (priv->invocation,
./src/urf-daemon.c:460:		g_debug ("%s: operation already inprogress...", __func__);
./src/urf-daemon.c:472:		g_debug ("%s: block == current state", __func__);
./src/urf-daemon.c:492:		g_dbus_method_invocation_return_error (invocation,
./src/urf-daemon.c:578:		g_debug ("%s: success", __func__);
./src/urf-daemon.c:606:		g_dbus_method_invocation_return_error (priv->invocation,
./src/urf-daemon.c:631:	g_debug ("%s: block: %u", __func__, block);
./src/urf-daemon.c:644:		g_debug ("%s: operation already inprogress...", __func__);
./src/urf-daemon.c:652:		g_debug ("%s: flight_mode == block", __func__);
./src/urf-daemon.c:671:		g_dbus_method_invocation_return_error (invocation,
./src/urf-daemon.c:840:		g_error ("error getting system bus: %s", error->message);
./src/urf-session-checker-consolekit.c:167:	g_debug ("Active Session changed: %s", session_id);
./src/urf-session-checker-consolekit.c:257:	g_debug ("Inhibit: %s for %s", bus_name, reason);
./src/urf-session-checker-consolekit.c:272:	g_debug ("Remove inhibitor: %s", inhibitor->bus_name);
./src/urf-session-checker-consolekit.c:287:		g_debug ("Cookie outdated");
./src/urf-session-checker-consolekit.c:327:		g_debug ("Already added seat: %s", object_path);
./src/urf-session-checker-consolekit.c:332:	g_debug ("Monitor seat: %s", object_path);
./src/urf-session-checker-consolekit.c:352:	g_debug ("Removed seat: %s", object_path);
./src/urf-session-checker-consolekit.c:441:		g_debug ("No Seat exists");
./src/urf-session-checker-consolekit.c:448:		g_debug ("Added seat: %s", seat_name);
./src/urf-session-checker-consolekit.c:476:		g_error ("failed to setup proxy for consolekit: %s", error->message);
./src/urf-session-checker-consolekit.c:491:		g_error ("failed to setup proxy for consolekit: %s", error->message);
./src/urf-device.c:515:		g_error ("error getting system bus: %s", error->message);
./src/urf-device.c:523:	g_debug ("%s: priv->object_path: %s", __func__, priv->object_path);
./src/urf-seat-logind.c:114:		g_error ("failed to setup proxy for logind seat: %s", error->message);
./src/urf-device-kernel.c:132:		g_debug("Emitting state-changed on device %s", priv->name);
./src/urf-device-kernel.c:226:	g_message ("%s: Setting %s to %s",
./src/urf-device-kernel.c:234:			   g_strerror (errno));
./src/urf-device-kernel.c:237:			g_task_return_new_error(task,
./src/urf-session-checker-logind.c:167:	g_debug ("Active Session changed: %s", session_id);
./src/urf-session-checker-logind.c:257:	g_debug ("Inhibit: %s for %s", bus_name, reason);
./src/urf-session-checker-logind.c:272:	g_debug ("Remove inhibitor: %s", inhibitor->bus_name);
./src/urf-session-checker-logind.c:287:		g_debug ("Cookie outdated");
./src/urf-session-checker-logind.c:327:		g_debug ("Already added seat: %s", object_path);
./src/urf-session-checker-logind.c:332:	g_debug ("Monitor seat: %s", object_path);
./src/urf-session-checker-logind.c:352:	g_debug ("Removed seat: %s", object_path);
./src/urf-session-checker-logind.c:371:		g_debug ("got: %s", seat_name);
./src/urf-session-checker-logind.c:375:		g_debug ("got: %s", seat_name);
./src/urf-session-checker-logind.c:444:		g_debug ("No Seat exists");
./src/urf-session-checker-logind.c:451:		g_debug ("Added seat: %s", seat_name);
./src/urf-session-checker-logind.c:479:		g_error ("failed to setup proxy for logind: %s", error->message);
./src/urf-session-checker-logind.c:494:		g_error ("failed to setup proxy for logind: %s", error->message);
./src/urf-device-ofono.c:152:		g_debug( "have no proxy");
./src/urf-device-ofono.c:167:	g_debug ("%s: new name: '%s'", __func__, priv->name);
./src/urf-device-ofono.c:210:		g_debug ("online change successful: %s",
./src/urf-device-ofono.c:230:			g_task_return_new_error(priv->pending_block_task,
./src/urf-device-ofono.c:251:		g_message ("%s: pending callback, not setting WWAN", __func__);
./src/urf-device-ofono.c:253:			g_task_return_new_error (task, URF_DAEMON_ERROR,
./src/urf-device-ofono.c:262:		g_message ("%s: Setting WWAN to %s",
./src/urf-device-ofono.c:314:			g_message ("%s: creating %s", __func__,
./src/urf-device-ofono.c:327:	g_message ("%s: %s powered=%d", __func__, priv->modem_path, powered_new);
./src/urf-device-ofono.c:347:		g_debug ("properties changed for %s: %s",
./src/urf-device-ofono.c:390:		g_debug ("%zd properties for %s", g_variant_n_children (properties),
./src/urf-device-ofono.c:392:		g_debug ("%s", g_variant_print (properties, TRUE));
./src/urf-device-ofono.c:606:	g_debug ("new ofono device: %p for %s", device, object_path);
./src/urf-main.c:63:	g_message ("Shutting down...");
./src/urf-main.c:117:	syslog (syslog_priority, "%s%s", level_string, message);
./src/urf-main.c:216:	g_message ("Starting urfkilld version %s", PACKAGE_VERSION);
./src/urf-arbitrator.c:140:	g_message ("Setting %s devices to %s",
./src/urf-arbitrator.c:163:		g_message ("Setting device %u (%s) to %s",
./src/urf-arbitrator.c:199:		g_message ("%s: killswitch[%s] state: %s block: %u", __func__,
./src/urf-arbitrator.c:217:		g_message ("%s: killswitch[%s] state: %s", __func__,
./src/urf-arbitrator.c:253:	g_debug ("%s index: %d", __func__, i);
./src/urf-arbitrator.c:275:			g_debug ("restoring killswitch - %s", type_to_string (i));
./src/urf-arbitrator.c:283:		g_task_return_new_error (priv->flight_mode_task,
./src/urf-arbitrator.c:293:		g_debug ("%s: pending_block_task %s - SUCCESS; next_idx: %d", __func__,
./src/urf-arbitrator.c:304:			g_message ("%s: flight-mode operation succeeded", __func__);
./src/urf-arbitrator.c:337:		g_message ("%s: out-of-memory", __func__);
./src/urf-arbitrator.c:338:		g_task_return_new_error (priv->flight_mode_task,
./src/urf-arbitrator.c:347:	g_message ("%s: block: %d", __func__, (int) block);
./src/urf-arbitrator.c:358:	g_debug ("%s: handle_flight_mode_killswitch returned FALSE", __func__);
./src/urf-arbitrator.c:362:			g_debug ("%s: no pending_block_task - firing fm_task", __func__);
./src/urf-arbitrator.c:390:	g_debug ("devices %s state %s",
./src/urf-arbitrator.c:418:		g_debug ("killswitch %d is %s", index, state_to_string (state));
./src/urf-arbitrator.c:576:		g_debug ("updating killswitch status %d to soft %d hard %d",
./src/urf-arbitrator.c:621:	g_message ("removing killswitch idx %d %s", index, name);
./src/urf-arbitrator.c:652:	g_message ("adding killswitch type %d idx %d soft %d hard %d",
./src/urf-arbitrator.c:680:	g_debug ("RFKILL event: idx %u type %u (%s) op %u (%s) soft %u hard %u",
./src/urf-arbitrator.c:743:		g_debug ("something else happened");
./src/urf-arbitrator.c:787:		g_message ("Using hybris for WLAN devices");
./src/urf-arbitrator.c:810:					g_debug ("Reading of RFKILL events - EAGAIN");
./src/urf-killswitch.c:96:	g_debug("Emitting PropertiesChanged on killswitch %s", priv->object_path);
./src/urf-killswitch.c:155:	g_debug ("killswitch %s state: %s new_state: %s",
./src/urf-killswitch.c:164:		g_debug("Emitting StateChanged on killswitch %s", priv->object_path);
./src/urf-killswitch.c:191:	g_message("device_changed_cb: %s", urf_device_get_name(device));
./src/urf-killswitch.c:266:			g_debug ("%s: returning new error: %s", __func__, error->message);
./src/urf-killswitch.c:268:			g_task_return_new_error(priv->set_block_task,
./src/urf-killswitch.c:280:		g_message ("%s: all done", __func__);
./src/urf-killswitch.c:283:			g_debug ("%s: firing set_block_task OK", __func__);
./src/urf-killswitch.c:291:		g_message ("%s: Setting device %s to %s",
./src/urf-killswitch.c:327:		g_debug ("Setting device %s to %s",
./src/urf-killswitch.c:339:		g_debug ("%s: no devices for %s", __func__, type_to_string (priv->type));
./src/urf-killswitch.c:342:			g_message ("%s: calling task_return_pointer (no error)", __func__);
./src/urf-killswitch.c:489:		g_error ("error getting system bus: %s", error->message);
./src/urf-input.c:86:	g_debug ("input event condition %x (%s%s%s%s )",
./src/urf-input.c:160:	g_debug ("Watch %s", dev_node);
./src/urf-device-hybris.c:148:			g_task_return_new_error(task,
./src/urf-device-hybris.c:153:		g_message ("hybris_wifi soft blocked set to %d", blocked);
./src/urf-device-hybris.c:331:	g_debug ("new hybris device: %p for index %d", device, priv->index);
./src/urf-config.c:490:		g_message ("No configured profile found");
./src/urf-config.c:826:			g_debug ("Could not get state for device %s: %s", type_to_string (end_type), error->message);
./src/urf-config.c:830:	g_debug ("saved state for device %s: %s", type_to_string (end_type), state ? "blocked" : "unblocked");
./src/urf-config.c:854:		g_debug ("Could not get state for device %s: %s", type_to_string (type), error->message);
./src/urf-config.c:858:	g_debug ("saved state for device %s: %s", type_to_string (type), state ? "blocked" : "unblocked");
./src/urf-config.c:905:	g_debug ("setting state for device %s: %s", type_to_string (type), state > 0 ? "blocked" : "unblocked");
./src/urf-config.c:924:	g_debug ("setting state for device %s: %s", type_to_string (type), block ? "blocked" : "unblocked");
./src/urf-seat-consolekit.c:115:		g_error ("failed to setup proxy for consolekit seat: %s", error->message);
./src/urf-polkit.c:60:		g_dbus_method_invocation_return_error (invocation,
./src/urf-polkit.c:88:		g_dbus_method_invocation_return_error (invocation,
./src/urf-polkit.c:101:		g_dbus_method_invocation_return_error (invocation,
./src/urf-polkit.c:155:		g_error ("failed to get pokit authority: %s", error->message);
./src/urf-ofono-manager.c:119:		g_debug ("%s was already registered", object_path);
./src/urf-ofono-manager.c:123:	g_debug ("Adding modem: %s", object_path);
./src/urf-ofono-manager.c:155:	g_debug ("Remove all modems");
./src/urf-ofono-manager.c:184:		g_debug ("variant %p: %s", value, g_variant_get_type_string (value));
./src/urf-ofono-manager.c:187:		g_debug ("found %zd modems", g_variant_n_children (modems));
./src/urf-ofono-manager.c:191:			g_message ("Modem found: '%s'", modem_path);
./src/urf-ofono-manager.c:214:		g_debug ("ModemAdded signal %s", object_path);
./src/urf-ofono-manager.c:220:		g_debug ("ModemRemoved signal %s", object_path);
./src/urf-ofono-manager.c:262:	g_debug ("oFono appeared on the bus");
./src/urf-ofono-manager.c:284:	g_debug("oFono vanished from the bus");
./liburfkill-glib/urf-device.c:159:		g_set_error (error, 1, 0, "Object path %s invalid", object_path);
./liburfkill-glib/urf-device.c:173:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-device.c:192:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-killswitch.c:133:		g_set_error (error, 1, 0, "Object path %s invalid", object_path);
./liburfkill-glib/urf-killswitch.c:148:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-client.c:202:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-client.c:238:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-client.c:318:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-client.c:373:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-client.c:413:		g_set_error (error, 1, 0, "%s", error_local->message);
./liburfkill-glib/urf-client.c:456:		g_set_error (error, 1, 0, "%s", error_local->message);

== environment() ==
./src/urf-main.c:179:	if (getenv("URFKILL_NO_SYSLOG") == 0) {

== privileged() ==
./src/urf-main.c:239:		if (setgid (user->pw_gid) != 0 || setuid (user->pw_uid) != 0) {
./src/urf-main.c:235:		if (initgroups (username, user->pw_gid) != 0) {
./src/urf-arbitrator.c:800:		ioctl(fd, RFKILL_IOCTL_NOINPUT);
./src/urf-config.c:595:		g_chmod (URFKILL_CONFIGURED_PROFILE,
./src/urf-config.c:881:			g_chmod (URFKILL_PERSISTENCE_FILENAME,

== networking() ==
./src/urf-daemon.c:1006:	g_signal_connect (daemon->priv->arbitrator, "device-added",
./src/urf-daemon.c:1008:	g_signal_connect (daemon->priv->arbitrator, "device-removed",
./src/urf-daemon.c:1010:	g_signal_connect (daemon->priv->arbitrator, "device-changed",
./src/urf-daemon.c:1016:	g_signal_connect (daemon->priv->input, "rf-key-pressed",
./src/urf-session-checker-consolekit.c:314:	g_signal_connect (seat, "active-changed",
./src/urf-session-checker-consolekit.c:502:	g_signal_connect (G_OBJECT (priv->proxy), "g-signal",
./src/urf-session-checker-consolekit.c:504:	g_signal_connect (G_CALLBACK (priv->bus_proxy), "g-signal",
./src/urf-seat-logind.c:130:	g_signal_connect (G_OBJECT (priv->proxy), "g-properties-changed",
./src/urf-device-kernel.c:231:	len = write (priv->fd, &event, sizeof(event));
./src/urf-session-checker-logind.c:314:	g_signal_connect (seat, "active-changed",
./src/urf-session-checker-logind.c:505:	g_signal_connect (G_OBJECT (priv->proxy), "g-signal",
./src/urf-session-checker-logind.c:507:	g_signal_connect (G_CALLBACK (priv->bus_proxy), "g-signal",
./src/urf-device-ofono.c:624:		g_signal_connect (priv->proxy, "g-signal",
./src/urf-arbitrator.c:807:			len = read(fd, &event, sizeof(event));
./src/urf-killswitch.c:210:	g_signal_connect (G_OBJECT (device), "state-changed",
./src/urf-seat-consolekit.c:136:	g_signal_connect (G_OBJECT (priv->proxy), "g-signal",
./src/urf-ofono-manager.c:128:	g_signal_connect (device, "ofono-device-powered",
./src/urf-ofono-manager.c:247:		g_signal_connect (ofono->proxy, "g-signal",
./tests/catch-signal.c:81:	g_signal_connect (client, "device-added", G_CALLBACK (device_added_cb), NULL);
./tests/catch-signal.c:82:	g_signal_connect (client, "device-removed", G_CALLBACK (device_removed_cb), NULL);
./tests/catch-signal.c:83:	g_signal_connect (client, "device-changed", G_CALLBACK (device_changed_cb), NULL);
./tests/catch-signal.c:84:	g_signal_connect (client, "rf-key-pressed", G_CALLBACK (key_pressed_cb), NULL);
./tests/monitor-killswitch.c:80:		g_signal_connect (wlan, "state-changed", G_CALLBACK (state_changed_cb), NULL);
./tests/monitor-killswitch.c:87:		g_signal_connect (bluetooth, "state-changed", G_CALLBACK (state_changed_cb), NULL);
./tests/monitor-killswitch.c:94:		g_signal_connect (wwan, "state-changed", G_CALLBACK (state_changed_cb), NULL);
./tests/test-urfkill-client.c:76:	g_signal_connect (client, "device-added", G_CALLBACK (device_added_cb), NULL);
./tests/test-urfkill-client.c:77:	g_signal_connect (client, "device-removed", G_CALLBACK (device_removed_cb), NULL);
./tests/test-urfkill-client.c:78:	g_signal_connect (client, "device-changed", G_CALLBACK (device_changed_cb), NULL);
./liburfkill-glib/urf-device.c:201:	g_signal_connect (priv->proxy, "g-properties-changed",
./liburfkill-glib/urf-device.c:203:	g_signal_connect (priv->specialized_proxy, "g-properties-changed",
./liburfkill-glib/urf-killswitch.c:158:	g_signal_connect (priv->proxy, "g-properties-changed",
./liburfkill-glib/urf-client.c:802:	g_signal_connect (client->priv->proxy, "g-signal",

== http:// ==

== encryption ==

== sql() ==

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==

== unsafe input mechanisms ==

