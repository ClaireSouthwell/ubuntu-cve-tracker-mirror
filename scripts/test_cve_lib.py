#!/usr/bin/env pytest-3

import datetime
import json
import os
import pytest
import sys
import cve_lib

def pytest_generate_tests(metafunc):
    if "cvss" in metafunc.fixturenames:
        cvss = []
        nvdcves = ['recent'] + \
            [str(year) for year in range(2004, int(datetime.datetime.now().year))]
        for nvdcve in nvdcves:
            try:
                nvdjson = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                       '..', 'nvdcve-1.1-%s.json' % nvdcve)
                with open(nvdjson) as fp:
                    js = json.load(fp)
                    for cve in js["CVE_Items"]:
                        if "baseMetricV3" in cve["impact"]:
                            cvss.append(cve["impact"])
            except FileNotFoundError:
                print("Failed to find %s to generate test cases..." % nvdjson, file=sys.stderr)
        metafunc.parametrize("cvss", cvss)

def test_cvss_empty():
    with pytest.raises(ValueError):
        cve_lib.parse_cvss('')

def test_cvss_none():
    with pytest.raises(ValueError):
        cve_lib.parse_cvss(None)

def test_cvss(cvss):
    # hack around the fact that some cvssV3 entries use the cvssV2
    # ADJACENT_NETWORK attackVector which is wrong...
    if cvss["baseMetricV3"]["cvssV3"]["attackVector"] == "ADJACENT_NETWORK":
       cvss["baseMetricV3"]["cvssV3"]["attackVector"] = "ADJACENT"
    js = cve_lib.parse_cvss(cvss["baseMetricV3"]["cvssV3"]["vectorString"])
    # the existing impact may contain a baseMetricV2 or others so only
    # compare CVSS3
    assert(js["baseMetricV3"] == cvss["baseMetricV3"])
