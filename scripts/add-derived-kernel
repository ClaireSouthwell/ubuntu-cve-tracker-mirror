#!/bin/sh
# Copyright (C) 2011, 2016 Canonical, Ltd.
# Author: Marc Deslauriers <marc.deslauriers@canonical.com>
# Author: Steve Beattie <steve.beattie@canonical.com>
# License: GPLv3

set -e

help() {
    cat <<EOM
Usage: add-derived-kernel -r <release> -d <derived_release> kernel_name

  -r    release (ex: xenial) (REQUIRED)
  -d    derived kernel release (ex: yakkety) (REQUIRED)

kernel_name: suffix of the kernel to be added and trcaked (e.g. "lts-wily")

All arguments are required.

examples:

to create linux-lts-vivid for the trusty release:

  add-derived-kernel -r trusty -d vivid lts-vivid

to create linux-aws for xenial based on the xenial kernel:

  add-derived-kernel -r xenial -d xenial aws

EOM
}

RELEASE=
DERIVED_RELEASE=

while getopts "hr:d:" opt ; do
    case "$opt" in
        r) RELEASE="$OPTARG";;
        d) DERIVED_RELEASE="$OPTARG";;
        h) help ; exit 0;;
        ?) help;;
    esac
done

shift $((OPTIND - 1))
KERNEL="$1"

if [ -z "${RELEASE}" ] || [ -z "${DERIVED_RELEASE}" ] || [ -z "${KERNEL}" ] ; then
    help
    exit 1
fi

chunk=$(mktemp -t add-derived-kernel-XXXXXX)

echo "Updating 00boilerplate.linux..."
echo "" > "$chunk"
grep "^.*_linux:" active/00boilerplate.linux | sed -e "s/_linux:.*/_linux-${KERNEL}: DNE/" >> "$chunk"
sed -i -e "s/^${RELEASE}_linux-${KERNEL}:.*/${RELEASE}_linux-${KERNEL}: needs-triage/" "$chunk"
sed -i -e "s/^Patches_linux-${KERNEL}:.*/Patches_linux-${KERNEL}:/" "$chunk"
sed -i -e "s/^upstream_linux-${KERNEL}:.*/upstream_linux-${KERNEL}: needs-triage/" "$chunk"
cat "$chunk" >> active/00boilerplate.linux

echo "Adding new backport to existing CVEs..."
grep "^${RELEASE}_linux:" active/CVE* | cut -d: -f1 | sort -u | while read cve_file ; do
    cat "$chunk" >> "$cve_file"
done

rm -f "$chunk"

echo "Updating status of existing CVEs..."
for i in $(cd active && grep "^${DERIVED_RELEASE}_linux: " CVE* | cut -d" " -f2 | sort -u | grep -v released); do
	(cd active && grep -l "^${DERIVED_RELEASE}_linux: $i" CVE*) | sort -u | xargs ./scripts/mass-cve-edit -p "linux-${KERNEL}" -r "${RELEASE}" -s "$i"
done

echo "Updating status of released CVEs (ok if empty and prints help)..."
(cd active && grep -l "^${DERIVED_RELEASE}_linux: released" CVE*) | sort -u | xargs  ./scripts/mass-cve-edit -p "linux-${KERNEL}" -r "${RELEASE}" -s not-affected || true

printf "\n\nPlease update cve_lib.py, sis-generate-usn, prepare-kernel-usn.py, and kernel-abi-check in scripts/\n"
echo "Also, before publishing a USN against the new kernel, ensure packages_mirror has been run"
