'''cacheurllib.py - Wrapper around urllib which provides a cache.

(c) 2005 Martin Pitt <martin.pitt@ubuntu.com>
'''

import urllib, StringIO, pickle, atexit

# URL -> string
_cache = {}

def load_cache(file):
    '''Load the cache from a file.
    
    Does not fail on error.'''

    global _cache
    try:
        _cache = pickle.load(open(file))
    except IOError:
        pass

def save_cache(file):
    '''Write the cache into a file.'''

    global _cache
    pickle.dump(_cache, open(file, 'wb'))

def set_cache(file):
    '''Call load_cache to load the cache and register an exit function to write
    back the cache at program exit.'''

    load_cache(file)
    atexit.register(save_cache, file)

def urlopen(url, *args):
    '''Wrapper around urllib.urlopen(), caches URL contents in memory.'''

    global _cache
    if not _cache.has_key(url):
        _cache[url] = urllib.urlopen(url, *args).read()
    return StringIO.StringIO(_cache[url])

if __name__ == '__main__':
    import time, sys, md5

    def checkurl():
        sum = md5.new()
        for l in urlopen('http://people.ubuntu.com/~pitti/ubuntu-cve.new/unfixed.html'):
            sum.update(l)
        print sum.hexdigest()

    set_cache('/tmp/cache_urllib.py_test.cache')
    t0 = time.time()
    checkurl()
    t1 = time.time()
    checkurl()
    t2 = time.time()

    print >> sys.stderr, "First call:", (t1-t0), "second call:", (t2-t1)
