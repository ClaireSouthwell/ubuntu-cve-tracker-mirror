#!/usr/bin/env python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2009 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# ./scripts/report-lifetime.py hardy
# ./scripts/report-lifetime.py hardy | cut -d" " -f2 | sort | uniq -c | sort -n | awk '{print $2 " " $1}' | sort -n > age.data

import os
import re
import sys
import optparse
import cve_lib, usn_lib

import source_map
source_map = source_map.load()
releases = cve_lib.releases
config = cve_lib.read_config()

parser = optparse.OptionParser()
parser.add_option("-S", "--skip-devel", help="Show only those CVEs *not* in the current devel release", action="store_true")
parser.add_option("-D", "--only-devel", help="Show only those CVEs in the current devel release", action="store_true")
parser.add_option("--db", help="Specify the USN database to load", metavar="FILENAME", default=config['usn_db_copy'])
parser.add_option("-m", "--only-supported", help="Show only those CVEs that are supported", action="store_true")
parser.add_option("-t", "--totals", help="Display totals", action="store_true")
parser.add_option("-p", "--packages", help="Report only on the given packages", action="append", type="string")
parser.add_option("-P", "--pkgfamily", help="Perform pkg family renamings (use argument multiple times for 'linux' and/or 'xen')", action="append", default=[])
parser.add_option("-X", "--exclude", help="Ignore specified packages", action="append", type="string")
parser.add_option("-d", "--debug", help="Report debug information while loading", action="store_true")
parser.add_option("--priority", help="Report only CVEs with a matching priority", action="store", metavar="PRIORITY")
parser.add_option("--action", help="Change report style ('list'(default), 'plot'", action="store", metavar="ACTION", default='list')
(opt, args) = parser.parse_args()

if not os.path.exists(opt.db):
    print >>sys.stderr, "Cannot read %s" % (opt.db)
    sys.exit(1)
db = usn_lib.load_database(opt.db)

releases = cve_lib.releases
for eol in cve_lib.eol_releases:
    if eol in releases:
        releases.remove(eol)
if opt.skip_devel:
    releases.remove(cve_lib.devel_release)

if opt.only_devel:
    releases = [cve_lib.devel_release]

# Global CVE info cache
info = dict()

release = None
if len(args)>0:
    release = args[0]
if release and release not in releases:
    raise ValueError, "'%s' must be one of '%s'" % (release, "', '".join(releases))

def fixed_map(priority=None):
    fixed = []
    for usn in sorted(db.keys()):
        if not db[usn].has_key('cves'):
            continue
        for cve in db[usn]['cves']:
            if not cve.startswith('CVE-'):
                continue

            if not release or db[usn]['releases'].has_key(release):
                # Load CVE if it isn't already cached
                if not info.has_key(cve):
                    info.setdefault(cve, cve_lib.load_cve(cve_lib.find_cve(cve)))
                # Skip those without PublicDates for the moment
                if info[cve]['PublicDate'].strip() == "":
                    print >>sys.stderr, "%s: empty PublicDate" % (cve)
                    continue
                # Check priority
                cve_priority = info[cve]['Priority']
                for rel in db[usn]['releases']:
                    if db[usn]['releases'][rel].has_key('sources'):
                        for pkg in db[usn]['releases'][rel]['sources']:
                            if pkg in info[cve]['pkgs'] and info[cve].has_key("Priority_%s" % (pkg)):
                                cve_priority = info[cve]["Priority_%s" % (pkg)]
                if not priority or cve_priority == priority:
                    fixed.append([cve, cve_lib.cve_age(cve, info[cve]['PublicDate'], db[usn]['timestamp']), usn, cve_priority])
    return fixed

if opt.action == 'list':
    fixed = fixed_map(opt.priority)
    for i in range(0, len(fixed)):
        print fixed[i][0], fixed[i][1], fixed[i][2], fixed[i][3]
elif opt.action == 'plot':
    priorities = ['untriaged','negligible','low','medium','high','critical']
    if opt.priority:
        priorities = [opt.priority]
    byage = dict()
    for priority in priorities:
        fixed = fixed_map(priority)
        for items in fixed:
            byage.setdefault(items[1],dict())
            byage[items[1]].setdefault(priority, 0)
            byage[items[1]][priority] += 1
    for age in sorted(byage.keys()):
        print age,
        for priority in priorities:
            if byage[age].has_key(priority):
                print byage[age][priority],
            else:
                print '0',
        print
else:
    raise ValueError, "No such --action '%s'" % (opt.action)

