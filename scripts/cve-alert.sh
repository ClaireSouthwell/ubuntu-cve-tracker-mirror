#!/bin/sh
# Copyright 2011-2017 Canonical, Ltd
# Author: Jamie Strandboge <jamie@canonical.com>
# License: GPLv3
set -e

#
# Configuration
#
alert_threshold=10
alert_high_threshold=0
alert_community_threshold=0
alert_ignore="[[:blank:]]linux:|linux-lts-|linux-hwe|linux-ti-|linux-raspi2|linux-snapdragon|linux-azure|linux-aws|qtwebkit-source|qtwebkit-opensource-src|webkit:|webkitgtk|oxide-qt|PARTNER"
# important universe packages that we'd like to have up to date
alert_community="adobe-flashplugin|chromium-browser|flashplugin-nonfree"

#
# Helpers
#
check_pending_overlay() {
    variant="$1"
    match=
    if [ "$variant" = "ubuntu-core" ]; then
        match="$variant"
    elif [ "$variant" = "ubuntu-touch" ]; then
        match="stable-phone-overlay"
    else
        echo "Invalid variant name '$variant'" >&2
        return 1
    fi

    err=
    for rel in `PYTHONPATH=./scripts python -c 'import cve_lib ; print " ".join(set(cve_lib.all_releases) - set(cve_lib.eol_releases))'` ; do
        if ! echo "$rel" | grep -q "$match" ; then
            continue
        fi

        fn="./`echo \"$rel\" | sed 's#/#-#g'`-supported.txt"
        if [ -n "$UCT" ]; then
            fn="$UCT/$fn"
        fi
        if [ ! -f "$fn" ]; then
            echo "Could not find '$fn'" >&2
            return 1
        fi

        cve_packages_args="-m -a --deferred-days=30 -r $rel --only-pending"
        out=`./scripts/cve_packages $cve_packages_args | grep '^[0-9]' | sort -n`

        if [ -n "$out" ]; then
            if [ -n "$rel" ]; then
                echo "Pending CVEs for '$rel' queued for next OTA update"
            fi
            echo ""
            echo "$out"
            echo ""
            err="yes"
        fi
    done
    if [ "$err" = "yes" ]; then
        return 1
    fi
}

check_output() {
    search=$1
    thresh=$2
    cve_packages_args="-m -a --deferred-days=30 --skip-pending-overlay"

    out=""
    if [ "$search" = "high|critical" ]; then
        # Never ignore anything high or critical in our list, even if only
        # in our devel release
        out=`./scripts/cve_packages $skip_overlays $cve_packages_args | grep '^[0-9]' | egrep "$search" | sort -n`
        if [ -z "$out" ]; then
            return
        fi
    elif [ "$search" = "medium or >5 low" ]; then
	# Show packages with a medium or higher as well as those with 5 or more
        # lows.
        out=`./scripts/cve_packages $skip_overlays $skip_devel $cve_packages_args | egrep -v "($alert_ignore)" | grep '^[0-9]' | egrep "(([1-9]{1,}[0-9]| [5-9]) low | medium)" | sort -n`
        if [ -z "$out" ]; then
            return
        fi
    elif [ "$search" = "heuristics" ]; then
        out=`./scripts/cve_packages $skip_overlays $skip_devel $cve_packages_args | egrep -v "($alert_ignore)" | egrep '^([5-9][0-9]|[1-9]{1,}[0-9]{2,})[[:space:]]' | sort -n`
        if [ -z "$out" ]; then
            return
        fi
    elif [ "$search" = "community" ]; then
        out=`./scripts/cve_packages $skip_overlays $skip_devel -a --deferred-days=30 | egrep "($alert_community)" | egrep '^([5-9][0-9]|[1-9]{1,}[0-9]{2,})[[:space:]]' | sort -n`
        if [ -z "$out" ]; then
            return
        fi
    else
        out=`./scripts/cve_packages $skip_overlays $skip_devel $cve_packages_args | egrep -v "($alert_ignore)" | grep '^[0-9]' | egrep "$search" | sort -n`
        if [ -z "$out" ]; then
            return
        fi
    fi

    total=$(echo "${out}" | wc -l)
    if [ ${total} -gt ${thresh} ]; then
        if [ -n "$release_pending" ]; then
            echo "Pending CVEs for release: $release_pending"
        fi
        echo "WARNING: too many packages with open vulnerabilites! ($total > $thresh for '$search')"
        echo ""
        echo "$out"
        echo ""
        return 1
    fi
}

#
# Main
#
err=""

# These are special alert reports that can be run like so:
# cve-alert.sh ubuntu-core
# cve-alert.sh ubuntu-touch
if [ "$1" = "ubuntu-core" ] || [ "$1" = "ubuntu-touch" ]; then
    check_pending_overlay "$1" || exit 1
    exit 0
fi

skip_devel=
if [ "$1" = "--skip-devel" ] || [ "$1" = "-S" ]; then
    skip_devel="-S"
    shift
fi

skip_overlays=
if [ "$1" = "--skip-overlays" ] || [ "$1" = "-o" ]; then
    skip_overlays="--skip-overlays"
    shift
fi
if [ -n "$1" ]; then
    alert_threshold="$1"
    echo "Overriding alert_threshold to '$alert_threshold'"
    shift
fi

# high and higher
check_output 'high|critical' $alert_high_threshold || err="yes"

# medium or more than 5 low
check_output "medium or >5 low" $alert_threshold || err="yes"

# community
check_output "community" $alert_community_threshold || err="yes"

# pure heuristics
#check_output "heuristics" $alert_threshold || err="yes"

if [ "$err" = "yes" ]; then
    exit 1
fi
