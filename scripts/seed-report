#!/usr/bin/python
# Copyright 2009 Canonical, Ltd
# Author: Kees Cook
# License: GPLv3
# Reports source packages in a given seed.
#
# sudo apt-get install -y germinate
# cd /tmp
# mkdir seeds
# cd seeds
# bzr co lp:~ubuntu-core-dev/ubuntu-seeds/ubuntu.dapper
# mkdir -p germinate-output/ubuntu.dapper
# cd germinate-output/ubuntu.dapper
# germinate -S file:///tmp/seeds/ -s ubuntu.dapper \
#         -m http://archive.ubuntu.com/ubuntu/ \
#         -d dapper,dapper-updates,dapper-security -a i386 \
#         -c main,universe,restricted,multiverse
# /tmp/seed-report --src-exclude xorg \
#         --seed-uri file:///tmp/seeds \
#         --germinate-uri file:///tmp/seeds/germinate-output \
#         supported-server > /tmp/seeds/supported.txt
#
import sys, os
import optparse
import urllib2

default_release = 'dapper'
default_seed_uri = 'http://people.canonical.com/~ubuntu-archive/seeds'
default_germinate_uri = 'http://people.canonical.com/~ubuntu-archive/germinate-output'

parser = optparse.OptionParser('%prog [OPTIONS] seed-wanted [seed-excluded]')
parser.add_option("--binaries", help="Show binary packages instead of source packages", action='store_true')
parser.add_option("--debug", help="Show debugging details", action='store_true')
parser.add_option("--release", help="Which release to examine (default: %s)" % (default_release), action='store', default=default_release)
parser.add_option("--src-exclude", help="Exclude a specific source package from the report", action='store')
parser.add_option("--seed-uri", help="Where to load seed STRUCTURE from (default: %s)" % (default_seed_uri), action='store', metavar="URI", default=default_seed_uri)
parser.add_option("--germinate-uri", help="Where to load germinate output from (default: %s)" % (default_germinate_uri), action='store', metavar="URI", default=default_germinate_uri)
(opt, args) = parser.parse_args()

if len(args)<1:
    parser.print_help()
    sys.exit(1)

wanted = args[0]
try:
    excluded = args[1]
except:
    excluded = None

# Track which seeds we've already fetched
loaded = set()

seeds = set()
structure = dict()

def load_structure(structure, path):
    for line in urllib2.urlopen(os.path.join(path,"STRUCTURE")):
        line = line.strip()
        if line.startswith('include '):
            load_structure(structure, os.path.join(os.path.dirname(path),line.split(' ',1)[1]))
        elif line.startswith('feature '):
            pass
        else:
            try:
                name, values = line.split(':',1)
            except:
                print >>sys.stderr, "Failed to process '%s'" % (line)
                raise
            name = name.strip()
            seeds.add(name)
            structure.setdefault(name, [])
            for item in values.strip().split():
                structure[name].append(item)
                seeds.add(item)

load_structure(structure, '%s/ubuntu.%s' % (opt.seed_uri, opt.release))

def get_germinate(seed_name, depth=0):
    bins = set()
    srcs = set()
    if opt.debug:
        print >>sys.stderr, "%swant '%s'" % ("  " * depth, seed_name)
    for seed in structure[seed_name]:
        if seed in loaded:
            continue
        recursive_bins, recursive_srcs = get_germinate(seed, depth+1)
        bins = bins.union(recursive_bins)
        srcs = srcs.union(recursive_srcs)

        listening = 0
        if opt.debug:
            print >>sys.stderr, "%s reading '%s'" % ("  " * depth, seed)
        for line in urllib2.urlopen('%s/ubuntu.%s/%s' % (opt.germinate_uri, opt.release, seed)):
            if line.startswith('-'):
                if listening:
                    break
                listening = 1
                continue
            if listening:
                bin, src, otherstuff = line.split('|',2)
                bin = bin.strip()
                src = src.strip()

                if opt.src_exclude and src == opt.src_exclude:
                    if opt.debug:
                        print >>sys.stderr, 'excluded src %s (binary %s)' % (src, bin)
                    continue

                bins.add(bin)
                srcs.add(src)
        loaded.add(seed)
    return bins, srcs

wanted_bins = set()
wanted_srcs = set()
for seed in wanted.split(','):
    bins, srcs = get_germinate(seed)
    wanted_bins = wanted_bins.union(bins)
    wanted_srcs = wanted_srcs.union(srcs)
excluded_bins = set()
excluded_srcs = set()
if excluded:
    excluded_bins, excluded_srcs = get_germinate(excluded)


out_bins = wanted_bins.difference(excluded_bins)
out_srcs = wanted_srcs.difference(excluded_srcs)
if opt.binaries:
    for bin in sorted(out_bins):
        print bin
else:
    for src in sorted(out_srcs):
        print src
