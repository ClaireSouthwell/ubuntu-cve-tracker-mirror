#!/usr/bin/env python3

# Author: Eduardo Barretto <eduardo.barretto@canonical.com>
# Copyright (C) 2020 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#

# Generates JSON output that identifies which trusty packages/CVEs require
# USNs.

import cve_lib
import json
import re
import signal
import subprocess

lts_releases = ['trusty/esm']#, 'xenial', 'bionic']
subprojects = ['private-esm']#, 'esm-universe']

def subprocess_setup():
    # Python installs a SIGPIPE handler by default. This is usually not what
    # non-Python subprocesses expect.
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)

def runcmd(command, input = None, stderr = subprocess.STDOUT,
           stdout = subprocess.PIPE, stdin = None, shell = False):
    '''Try to execute given command (array) and return its stdout, or return
    a textual error if it failed.'''

    try:
       sp = subprocess.Popen(command, stdin=stdin, stdout=stdout,
                             stderr=stderr, close_fds=True, shell=shell,
                             preexec_fn=subprocess_setup)
    except OSError as e:
        return [127, str(e)]

    out = sp.communicate(input)[0]
    if out:
        out = out.decode()
    return [sp.returncode,out]

def _compare_versions(v1, comp, v2):
    return runcmd(['/usr/bin/dpkg', '--compare-versions', v1, comp, v2])[0]

def get_esm_released_packages():
    (cves, uems, rcves) = cve_lib.get_cve_list_and_retired()
    esm_packages = dict()
    for cve in cves:
        cve_data = cve_lib.load_cve(cve_lib.find_cve(cve),
                                    subprojects=subprojects)
        for package, releases in cve_data['pkgs'].items():
            for release, status in releases.items():
                if release in lts_releases:
                    if 'released-esm' not in status[0]:
                        continue
#                    if 'esm' not in status[1]:
#                        continue
                    if package not in esm_packages:
                        esm_packages[package] = dict()
                        esm_packages[package]['cves'] = {}
                        esm_packages[package]['usns'] = {}
                        esm_packages[package][release] = status[1]
                    elif _compare_versions(status[1],
                                           'gt',
                                           esm_packages[package][release]) == 0:
                        esm_packages[package][release] = status[1]
                    esm_packages[package]['cves'][cve] = cve_data['Ubuntu-Description']
                    if 'usn.ubuntu.com' in cve_data['References']:
                        usn = re.findall(
                                "(?P<url>https?://usn.ubuntu.com/[^\s]+)",
                                cve_data['References'])
                        esm_packages[package]['usns'][cve] = usn

    return esm_packages

trusty_esm_packages = get_esm_released_packages()

with open('pkgs.txt', 'w') as f:
    for key, value in sorted(trusty_esm_packages.items()):
        f.write(key)
        f.write("\n")


shit = []
with open('pkgs-usn-info-new.json', 'w') as f:
    for key, value in sorted(trusty_esm_packages.items()):
        shit.append({'pkg': key, 'version': value['trusty/esm'],
            'cves': value['cves'], 'usns': value['usns']})
    json.dump(shit, f, indent=4)
