#!/usr/bin/python

# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
# Copyright (C) 2005-2010 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# This script looks for active CVEs that have open packages in main/restricted
# that are no longer supported (e.g. LTS end-of-life).
#
# TODO: handle whole-release EOLing
#
import sys, os, os.path
import optparse, glob

import cve_lib
import source_map

import warnings
warnings.filterwarnings('ignore', 'apt API not stable yet', FutureWarning)
import apt

parser = optparse.OptionParser()
parser.add_option("-u", "--update", dest="update", help="Update CVEs with released package versions", action='store_true')
(opt, args) = parser.parse_args()

pkgs = source_map.load()

cves = glob.glob('active/CVE-*')
if os.path.islink('embargoed'):
    cves += glob.glob('embargoed/CVE-*')
    cves += glob.glob('embargoed/EMB-*')

release = 'dapper'

for filename in cves:
    cve = os.path.basename(filename)
    try:
        data = cve_lib.load_cve(filename)
    except ValueError, e:
        if not cve.startswith('EMB'):
            print >>sys.stderr, e
        continue
    for src in data['pkgs']:
        if data['pkgs'][src].has_key(release) and \
           pkgs[release].has_key(src) and \
           pkgs[release][src]['section'] in ['main','restricted'] and \
           data['pkgs'][src][release][0] in ['needed','needs-triage'] and \
           not cve_lib.is_supported(pkgs,src,release):

                print '%s: %s support-EOL (%s)' % (cve, src, release)

                if opt.update:
                    cve_lib.update_state(filename,src,release,'ignored','support EOL')
