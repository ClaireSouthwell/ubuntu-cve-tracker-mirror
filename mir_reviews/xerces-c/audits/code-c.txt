Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./src/xercesc/validators/datatype/AnyURIDatatypeValidator.cpp:141:            sprintf(tempStr, "%02X", ch);
./src/xercesc/validators/datatype/AnyURIDatatypeValidator.cpp:170:                sprintf(tempStr, "%02X", b);
./src/xercesc/validators/datatype/ListDatatypeValidator.cpp:419:                memcpy(retBuf, oldBuf, retBufSize * sizeof(XMLCh ));
./src/xercesc/validators/schema/NamespaceScope.cpp:274:    memcpy(newMap, toExpand->fMap, oldCap * sizeof(PrefMapElem));
./src/xercesc/validators/schema/NamespaceScope.cpp:292:    memcpy(newStack, fStack, fStackCapacity * sizeof(StackElem*));
./src/xercesc/dom/impl/DOMStringPool.cpp:54:    memcpy(newBuf, fBuffer, fCapacity * sizeof(XMLCh));
./src/xercesc/dom/impl/DOMDeepNodeListPool.c:340:        memcpy(newArray, fIdPtrs, fIdPtrsCount * sizeof(TVal*));
./src/xercesc/internal/XSerializeEngine.cpp:234:        memcpy(fBufCur, toWrite, writeLen);
./src/xercesc/internal/XSerializeEngine.cpp:243:    memcpy(fBufCur, tempWrite, bufAvail);
./src/xercesc/internal/XSerializeEngine.cpp:251:        memcpy(fBufCur, tempWrite, fBufSize);
./src/xercesc/internal/XSerializeEngine.cpp:260:        memcpy(fBufCur, tempWrite, writeRemain);
./src/xercesc/internal/XSerializeEngine.cpp:433:        memcpy(toRead, fBufCur, readLen);
./src/xercesc/internal/XSerializeEngine.cpp:450:    memcpy(tempRead, fBufCur, dataAvail);
./src/xercesc/internal/XSerializeEngine.cpp:458:        memcpy(tempRead, fBufCur, fBufSize);
./src/xercesc/internal/XSerializeEngine.cpp:467:        memcpy(tempRead, fBufCur, readRemain);
./src/xercesc/internal/XSerializeEngine.cpp:622:  memcpy(fBufCur, &t, sizeof(t));
./src/xercesc/internal/XSerializeEngine.cpp:630:  memcpy(fBufCur, &t, sizeof(t));
./src/xercesc/internal/XSerializeEngine.cpp:638:  memcpy(fBufCur, &t, sizeof(t));
./src/xercesc/internal/XSerializeEngine.cpp:646:  memcpy(&t, fBufCur, sizeof(t));
./src/xercesc/internal/XSerializeEngine.cpp:654:  memcpy(&t, fBufCur, sizeof(t));
./src/xercesc/internal/XSerializeEngine.cpp:662:  memcpy(&t, fBufCur, sizeof(t));
./src/xercesc/internal/BinMemOutputStream.cpp:57:        memcpy(&fDataBuf[fIndex], toGo, maxToWrite * sizeof(XMLByte));
./src/xercesc/internal/BinMemOutputStream.cpp:110:    memcpy(newBuf, fDataBuf, fCapacity * sizeof(XMLByte) + 4);
./src/xercesc/internal/ElemStack.cpp:496:    memcpy(newMap, toExpand->fMap, oldCap * sizeof(PrefMapElem));
./src/xercesc/internal/ElemStack.cpp:514:    memcpy(newStack, fStack, fStackCapacity * sizeof(StackElem*));
./src/xercesc/internal/ElemStack.cpp:852:        memcpy(newMap, fMap, fMapCapacity * sizeof(PrefMapElem));
./src/xercesc/internal/ElemStack.cpp:870:    memcpy(newStack, fStack, fStackCapacity * sizeof(StackElem*));
./src/xercesc/internal/XMLScanner.cpp:2273:        memcpy(newArray, fUIntPool, (fUIntPoolRow+1) * sizeof(unsigned int *));
./src/xercesc/framework/LocalFileFormatTarget.cpp:119:        memcpy(&fDataBuf[fIndex], toWrite, count * sizeof(XMLByte));
./src/xercesc/framework/LocalFileFormatTarget.cpp:146:    memcpy(newBuf, fDataBuf, fIndex * sizeof(XMLByte));
./src/xercesc/framework/XMLBuffer.cpp:76:        memcpy(newBuf, fBuffer, fIndex * sizeof(XMLCh));
./src/xercesc/framework/XMLFormatter.cpp:627:       memcpy(ref, fTmpBuf, outBytes + 4);
./src/xercesc/framework/MemBufFormatTarget.cpp:60:      memcpy(&fDataBuf[fIndex], toWrite, count * sizeof(XMLByte));
./src/xercesc/framework/MemBufFormatTarget.cpp:97:    memcpy(newBuf, fDataBuf, fIndex * sizeof(XMLByte));
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:186:        memcpy(newList, fAdvDHList, sizeof(void*) * fAdvDHListSize);
./src/xercesc/parsers/SAXParser.cpp:152:        memcpy(newList, fAdvDHList, sizeof(void*) * fAdvDHListSize);
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:398:        memcpy((void *) &sa.sin_addr,
./src/xercesc/util/NetAccessors/BinHTTPInputStreamCommon.cpp:281:        memcpy(toFill, fBufferPos, len);
./src/xercesc/util/NetAccessors/Curl/CurlURLInputStream.cpp:133:                    memcpy(header.get(), headerStart, length);
./src/xercesc/util/NetAccessors/Curl/CurlURLInputStream.cpp:220:	memcpy(fWritePtr, buffer, consume);
./src/xercesc/util/NetAccessors/Curl/CurlURLInputStream.cpp:236:		memcpy(fBufferHeadPtr, buffer, consume);
./src/xercesc/util/NetAccessors/Curl/CurlURLInputStream.cpp:258:    memcpy(buffer, fPayload, len);
./src/xercesc/util/NetAccessors/Curl/CurlURLInputStream.cpp:359:			memcpy(fWritePtr, fBufferTailPtr, bufCnt);
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:182:        memcpy((void *) &sa.sin_addr,
./src/xercesc/util/StringPool.cpp:103:        memcpy(newMap, fIdMap, sizeof(PoolElem*) * fMapCapacity);
./src/xercesc/util/TransService.cpp:634:            memcpy(newBuf, fString, fBytesWritten);
./src/xercesc/util/TransService.cpp:645:        memcpy(newBuf, fString, fBytesWritten);
./src/xercesc/util/TransService.cpp:726:            memcpy(newBuf, fString, fCharsWritten*sizeof(XMLCh));
./src/xercesc/util/TransService.cpp:737:        memcpy(newBuf, fString, fCharsWritten*sizeof(XMLCh));
./src/xercesc/util/XMLChTranscoder.cpp:67:    memcpy(toFill, srcData, countToDo * sizeof(XMLCh));
./src/xercesc/util/XMLChTranscoder.cpp:101:    memcpy(toFill, srcData, countToDo * sizeof(XMLCh));
./src/xercesc/util/regx/TokenFactory.cpp:199:    //sprintf(msg, "Printing\n");
./src/xercesc/util/regx/XMLRangeFactory.cpp:147:    memcpy(wordRange + baseTblLen + ideoTblLen, digitRange, digitTblLen * sizeof(XMLInt32));
./src/xercesc/util/regx/XMLRangeFactory.cpp:160:    memcpy(nameRange, wordRange, wordRangeLen * sizeof(XMLInt32));
./src/xercesc/util/regx/XMLRangeFactory.cpp:191:    memcpy(initialNameRange, wordRange, initialNameTblLen * sizeof(XMLInt32));
./src/xercesc/util/XMLString.cpp:364:    strcpy(target, src);
./src/xercesc/util/XMLString.cpp:574:    memcpy(ret, toRep, (srcLen+1) * sizeof(char));
./src/xercesc/util/XMLBigDecimal.cpp:75:        memcpy(fRawData, strValue, fRawDataLen * sizeof(XMLCh));
./src/xercesc/util/XMLBigDecimal.cpp:115:    memcpy(fRawData, strValue, valueLen * sizeof(XMLCh));
./src/xercesc/util/XMLBigDecimal.cpp:508:        memcpy(fRawData, rawdataStr, fRawDataLen * sizeof(XMLCh));
./src/xercesc/util/XMLBigDecimal.cpp:511:        memcpy(fIntVal, intvalStr,  intvalStrLen * sizeof(XMLCh));
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:129:    	strcpy(locationBuf, nlsHome);
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:137:            strcpy(locationBuf, nlsHome);
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:145:                strcpy(locationBuf, nlsHome);
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:64:    	strcpy(locationBuf, nlsHome);
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:72:            strcpy(locationBuf, nlsHome);
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:80:                strcpy(locationBuf, nlsHome);
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:89:    strcpy(catuser, locationBuf);
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:96:    strcpy(catdefault, locationBuf);
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:135:    sprintf(msgString, "Could not find message ID %d from message set %d\n", msgToLoad, fMsgSet);
./src/xercesc/util/BinMemInputStream.cpp:52:        memcpy(tmpBuf, initData, capacity);
./src/xercesc/util/BinMemInputStream.cpp:88:    memcpy(toFill, &fBuffer[fCurIndex], actualToRead);
./src/xercesc/util/XMLUTF16Transcoder.cpp:101:            memcpy(toFill, srcData, countToDo * sizeof(UTF16Ch));
./src/xercesc/util/XMLUTF16Transcoder.cpp:173:            memcpy(toFill, srcData, countToDo * sizeof(UTF16Ch));
./src/xercesc/util/Transcoders/MacOSUnicodeConverter/MacOSUnicodeConverter.cpp:796:					std::memcpy(newResult.get(), result.get(), resultCnt);
./src/xercesc/util/Transcoders/MacOSUnicodeConverter/MacOSUnicodeConverter.cpp:800:				std::memcpy(result.get() + resultCnt, tmpBuf, bytesProduced);
./src/xercesc/util/Transcoders/MacOSUnicodeConverter/MacOSUnicodeConverter.cpp:872:					std::memcpy(newResult.get(), result.get(), resultCnt * sizeof(XMLCh));
./src/xercesc/util/Transcoders/MacOSUnicodeConverter/MacOSUnicodeConverter.cpp:876:				std::memcpy(result.get() + resultCnt, tmpBuf, charsProduced * sizeof(XMLCh));
./src/xercesc/util/Transcoders/Iconv/IconvTransService.cpp:408:    memcpy(tmp, ref, size * sizeof(T));
./src/xercesc/util/Transcoders/Iconv/IconvTransService.cpp:483:        memcpy(resultString, localBuffer, dstCursor * sizeof(char));
./src/xercesc/util/Transcoders/Iconv/IconvTransService.cpp:551:        memcpy(resultString, localBuffer, dstCursor * sizeof(XMLCh));
./src/xercesc/util/Transcoders/Win32/Win32TransService.cpp:103:    memcpy( firstBuf, comp1, len * sizeof(XMLCh));
./src/xercesc/util/Transcoders/Win32/Win32TransService.cpp:104:    memcpy( secondBuf, comp2, otherLen * sizeof(XMLCh));
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:218:            memcpy (mbc, &xch, fUChSize);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:315:            memcpy (xml_str, mbs_str, fUChSize * cnt);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:354:            memcpy (mbs_str, xml_str, fUChSize * cnt);
./src/xercesc/util/NameIdPool.c:182:        memcpy(newArray, fIdPtrs, fIdPtrsCount * sizeof(TElem*));
./src/xercesc/util/RefHash3KeysIdPool.c:354:            memcpy(newArray, fIdPtrs, fIdPtrsCount * sizeof(TVal*));
./tests/src/DOM/DOMTest/DTest.cpp:5556:		memcpy(toFill, mSrc + mPos, toRead);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1436:        sprintf(tempchar, "time is %lu\n",XMLPlatformUtils::getCurrentMillis());
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1447:        sprintf(tempchar, "time is %lu\n",XMLPlatformUtils::getCurrentMillis());
./tests/src/XSerializerTest/XSerializerTest.cpp:204:             strcpy(localeStr, &(argV[argInd][8]));
./samples/src/SAXCount/SAXCount.cpp:143:             strcpy(localeStr, &(argV[argInd][8]));
./samples/src/DOMCount/DOMCount.cpp:219:             strcpy(localeStr, &(argV[argInd][8]));
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1662:    sprintf(buffer, "%d-%d-%dT%d:%d:%f", obj->fData.fValue.f_datetime.f_year
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1707:                sprintf( buffer,"%f", obj->fData.fValue.f_decimal.f_dvalue);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1716:                sprintf( buffer,"%f", obj->fData.fValue.f_float);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1725:                sprintf( buffer,"%f", obj->fData.fValue.f_double);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1801:                sprintf( buffer,"%ld", obj->fData.fValue.f_long);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1810:                sprintf( buffer,"%ld", obj->fData.fValue.f_long);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1819:                sprintf( buffer,"%ld", obj->fData.fValue.f_long);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1828:                sprintf( buffer,"%ld", obj->fData.fValue.f_long);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1837:                sprintf( buffer,"%d", obj->fData.fValue.f_int);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1846:                sprintf( buffer,"%d", obj->fData.fValue.f_short);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1855:                sprintf( buffer,"%d", obj->fData.fValue.f_char);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1864:                sprintf( buffer,"%ld", obj->fData.fValue.f_long);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1873:                sprintf( buffer,"%lu", obj->fData.fValue.f_ulong);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1882:                sprintf( buffer,"%u", obj->fData.fValue.f_uint);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1891:                sprintf( buffer,"%u", obj->fData.fValue.f_ushort);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1900:                sprintf( buffer,"%u", obj->fData.fValue.f_uchar);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1909:                sprintf( buffer,"%ld", obj->fData.fValue.f_long);
./samples/src/PSVIWriter/PSVIWriter.cpp:269:					strcpy(fileName, psviOut);
./src/xercesc/validators/datatype/FloatDatatypeValidator.cpp:103:    fMaxInclusive = new (fMemoryManager) XMLFloat(value, fMemoryManager);
./src/xercesc/validators/datatype/FloatDatatypeValidator.cpp:108:    fMaxExclusive = new (fMemoryManager) XMLFloat(value, fMemoryManager);
./src/xercesc/validators/datatype/FloatDatatypeValidator.cpp:113:    fMinInclusive = new (fMemoryManager) XMLFloat(value, fMemoryManager);
./src/xercesc/validators/datatype/FloatDatatypeValidator.cpp:118:    fMinExclusive = new (fMemoryManager) XMLFloat(value, fMemoryManager);
./src/xercesc/validators/datatype/FloatDatatypeValidator.cpp:164:    fEnumeration = new (fMemoryManager) RefVectorOf<XMLNumber>(enumLength, true,  fMemoryManager);
./src/xercesc/validators/datatype/TimeDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/MonthDayDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/DateTimeDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/DateTimeValidator.cpp:266:    fEnumeration = new (fMemoryManager) RefVectorOf<XMLNumber>(enumLength, true, fMemoryManager);
./src/xercesc/validators/datatype/DecimalDatatypeValidator.cpp:316:    fMaxInclusive = new (fMemoryManager) XMLBigDecimal(value, fMemoryManager);
./src/xercesc/validators/datatype/DecimalDatatypeValidator.cpp:321:    fMaxExclusive = new (fMemoryManager) XMLBigDecimal(value, fMemoryManager);
./src/xercesc/validators/datatype/DecimalDatatypeValidator.cpp:326:    fMinInclusive = new (fMemoryManager) XMLBigDecimal(value, fMemoryManager);
./src/xercesc/validators/datatype/DecimalDatatypeValidator.cpp:331:    fMinExclusive = new (fMemoryManager) XMLBigDecimal(value, fMemoryManager);
./src/xercesc/validators/datatype/DecimalDatatypeValidator.cpp:375:    fEnumeration = new (manager) RefVectorOf<XMLNumber>(enumLength, true, manager);
./src/xercesc/validators/datatype/MonthDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/YearMonthDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/DoubleDatatypeValidator.cpp:102:    fMaxInclusive = new (fMemoryManager) XMLDouble(value, fMemoryManager);
./src/xercesc/validators/datatype/DoubleDatatypeValidator.cpp:107:    fMaxExclusive = new (fMemoryManager) XMLDouble(value, fMemoryManager);
./src/xercesc/validators/datatype/DoubleDatatypeValidator.cpp:112:    fMinInclusive = new (fMemoryManager) XMLDouble(value, fMemoryManager);
./src/xercesc/validators/datatype/DoubleDatatypeValidator.cpp:117:    fMinExclusive = new (fMemoryManager) XMLDouble(value, fMemoryManager);
./src/xercesc/validators/datatype/DoubleDatatypeValidator.cpp:164:    fEnumeration = new (manager) RefVectorOf<XMLNumber>(enumLength, true, manager);
./src/xercesc/validators/datatype/DurationDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:133:    DatatypeValidatorFactory *dvFactory = new DatatypeValidatorFactory();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:180:    fBuiltInRegistry = new RefHashTableOf<DatatypeValidator>(29);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:182:    DatatypeValidator *dv = new StringDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:186:    dv = new NOTATIONDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:190:    dv = new AnySimpleTypeDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:194:    dv = new BooleanDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:198:    dv = new DecimalDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:202:    dv = new HexBinaryDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:206:    dv = new Base64BinaryDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:210:    dv = new DoubleDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:214:    dv = new FloatDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:218:    dv = new AnyURIDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:222:    dv = new QNameDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:226:    dv = new DateTimeDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:230:    dv = new DateDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:234:    dv = new TimeDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:238:    dv = new DayDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:242:    dv = new MonthDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:246:    dv = new MonthDayDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:250:    dv = new YearDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:254:    dv = new YearMonthDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:258:    dv = new DurationDatatypeValidator();
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:266:    RefHashTableOf<KVStringPair>* facets = new RefHashTableOf<KVStringPair>(3);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:277:    facets = new RefHashTableOf<KVStringPair>(3);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:286:    dv = new NameDatatypeValidator(getDatatypeValidator(SchemaSymbols::fgDT_TOKEN), 0, 0, 0);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:291:    dv = new NCNameDatatypeValidator(getDatatypeValidator(SchemaSymbols::fgDT_NAME), 0, 0, 0);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:296:    facets = new RefHashTableOf<KVStringPair>(3);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:307:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:315:    facets = new RefHashTableOf<KVStringPair>(3);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:325:    facets = new RefHashTableOf<KVStringPair>(3);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:338:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:348:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:358:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:370:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:382:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:394:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:406:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:416:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:426:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:436:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:446:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:456:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:466:    dv = new IDDatatypeValidator(getDatatypeValidator(SchemaSymbols::fgDT_NCNAME), 0, 0, 0);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:470:    dv = new IDREFDatatypeValidator(getDatatypeValidator(SchemaSymbols::fgDT_NCNAME), 0, 0, 0);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:474:    dv = new ENTITYDatatypeValidator(getDatatypeValidator(SchemaSymbols::fgDT_NCNAME), 0, 0, 0);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:478:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:494:    facets = new RefHashTableOf<KVStringPair>(2);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:535:     fCanRepRegistry  = new RefHashTableOf<XMLCanRepGroup, PtrHasher>(29, true);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:643:        datatypeValidator = new (manager) ListDatatypeValidator(baseValidator, facets, enums, finalSet, manager);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:744:                fUserDefinedRegistry = new (userManager) RefHashTableOf<DatatypeValidator>(29, userManager);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:786:    datatypeValidator = new (manager) UnionDatatypeValidator(validators, finalSet, manager);
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:793:                fUserDefinedRegistry = new (userManager) RefHashTableOf<DatatypeValidator>(29, userManager);
./src/xercesc/validators/datatype/YearDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/DateDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/DayDatatypeValidator.cpp:69:    XMLDateTime *pRetDate = new (manager) XMLDateTime(content, manager);
./src/xercesc/validators/datatype/DatatypeValidator.cpp:327:        fRegex = new (fMemoryManager) RegularExpression(fPattern, SchemaSymbols::fgRegEx_XOption, fMemoryManager);
./src/xercesc/validators/schema/NamespaceScope.cpp:126:        fStack[fStackTop] = new (fMemoryManager) StackElem;
./src/xercesc/validators/schema/SchemaGrammar.cpp:72:    fElemDeclPool = new (fMemoryManager) RefHash3KeysIdPool<SchemaElementDecl>(109, true, 128, fMemoryManager);
./src/xercesc/validators/schema/SchemaGrammar.cpp:77:        // fElemNonDeclPool = new (fMemoryManager) RefHash3KeysIdPool<SchemaElementDecl>(29, true, 128, fMemoryManager);
./src/xercesc/validators/schema/SchemaGrammar.cpp:78:        fGroupElemDeclPool = new (fMemoryManager) RefHash3KeysIdPool<SchemaElementDecl>(109, false, 128, fMemoryManager);
./src/xercesc/validators/schema/SchemaGrammar.cpp:79:        fNotationDeclPool = new (fMemoryManager) NameIdPool<XMLNotationDecl>(109, 128, fMemoryManager);
./src/xercesc/validators/schema/SchemaGrammar.cpp:80:        fValidationContext = new (fMemoryManager) ValidationContextImpl(fMemoryManager);
./src/xercesc/validators/schema/SchemaGrammar.cpp:83:        fGramDesc = new (fMemoryManager) XMLSchemaDescriptionImpl(XMLUni::fgXMLNSURIName, fMemoryManager);
./src/xercesc/validators/schema/SchemaGrammar.cpp:86:        fAnnotations = new (fMemoryManager) RefHashTableOf<XSAnnotation, PtrHasher>
./src/xercesc/validators/schema/SchemaGrammar.cpp:130:        retVal = new (fMemoryManager) SchemaElementDecl
./src/xercesc/validators/schema/SchemaGrammar.cpp:140:            fElemNonDeclPool = new (fMemoryManager) RefHash3KeysIdPool<SchemaElementDecl>(29, true, 128, fMemoryManager);
./src/xercesc/validators/schema/SchemaGrammar.cpp:159:    SchemaElementDecl* retVal = new (fMemoryManager) SchemaElementDecl
./src/xercesc/validators/schema/SchemaGrammar.cpp:171:            fElemNonDeclPool = new (fMemoryManager) RefHash3KeysIdPool<SchemaElementDecl>(29, true, 128, fMemoryManager);
./src/xercesc/validators/schema/XSDDOMParser.cpp:56:    fURIs = new (manager) ValueVectorOf<unsigned int>(16, manager);
./src/xercesc/validators/schema/XSDDOMParser.cpp:307:                fDocument->fNodeIDMap = new (fDocument) DOMNodeIDMap(500, fDocument);
./src/xercesc/validators/schema/identity/ValueStoreCache.cpp:80:    fGlobalICMap = new (fMemoryManager) RefHashTableOf<ValueStore, PtrHasher>
./src/xercesc/validators/schema/identity/ValueStoreCache.cpp:127:    fValueStores = new (fMemoryManager) RefVectorOf<ValueStore>(8, false, fMemoryManager);
./src/xercesc/validators/schema/identity/ValueStoreCache.cpp:128:    fGlobalICMap = new (fMemoryManager) RefHashTableOf<ValueStore, PtrHasher>
./src/xercesc/validators/schema/identity/ValueStoreCache.cpp:134:    fIC2ValueStoreMap = new (fMemoryManager) RefHash2KeysTableOf<ValueStore, PtrHasher>
./src/xercesc/validators/schema/identity/ValueStoreCache.cpp:140:    fGlobalMapStack = new (fMemoryManager) RefStackOf<RefHashTableOf<ValueStore, PtrHasher> >(8, true, fMemoryManager);
./src/xercesc/validators/schema/identity/ValueStoreCache.cpp:155:            valueStore = new (fMemoryManager) ValueStore(ic, fScanner, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:163:    fNodeTest = new (other.fNodeTest->getName()->getMemoryManager()) XercesNodeTest(*(other.fNodeTest));
./src/xercesc/validators/schema/identity/XercesXPath.cpp:398:    RefVectorOf<XercesStep>*          stepsVector = new (fMemoryManager) RefVectorOf<XercesStep>(16, true, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:402:        fLocationPaths = new (fMemoryManager) RefVectorOf<XercesLocationPath>(8, true, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:426:                    XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(XercesNodeTest::NodeType_NODE, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:427:                    XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_SELF, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:430:                XercesLocationPath* newPath = new (fMemoryManager) XercesLocationPath(stepsVector);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:443:                stepsVector = new (fMemoryManager) RefVectorOf<XercesStep>(16, true, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:474:                        XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(XercesNodeTest::NodeType_WILDCARD, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:475:                        XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_ATTRIBUTE, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:503:                            XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(prefix, uri, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:504:                            XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_ATTRIBUTE, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:515:                        XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(&aQName);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:516:                        XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_ATTRIBUTE, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:544:                XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(XercesNodeTest::NodeType_WILDCARD, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:545:                XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_CHILD, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:575:                    XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(prefix, uri, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:576:                    XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_CHILD, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:586:                XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(&aQName);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:587:                XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_CHILD, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:595:                XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(XercesNodeTest::NodeType_NODE, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:596:                XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_SELF, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:618:                        nodeTest = new (fMemoryManager) XercesNodeTest(XercesNodeTest::NodeType_NODE, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:619:                        step = new (fMemoryManager) XercesStep(XercesStep::AxisType_DESCENDANT, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:671:        XercesNodeTest* nodeTest = new (fMemoryManager) XercesNodeTest(XercesNodeTest::NodeType_NODE, fMemoryManager);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:672:        XercesStep* step = new (fMemoryManager) XercesStep(XercesStep::AxisType_SELF, nodeTest);
./src/xercesc/validators/schema/identity/XercesXPath.cpp:675:    XercesLocationPath* newPath = new (fMemoryManager) XercesLocationPath(stepsVector);
./src/xercesc/validators/schema/identity/IdentityConstraintHandler.cpp:54:        fMatcherStack    = new (fMemoryManager) XPathMatcherStack(fMemoryManager);
./src/xercesc/validators/schema/identity/IdentityConstraintHandler.cpp:55:        fValueStoreCache = new (fMemoryManager) ValueStoreCache(fMemoryManager);
./src/xercesc/validators/schema/identity/IdentityConstraintHandler.cpp:56:        fFieldActivator  = new (fMemoryManager) FieldActivator(fValueStoreCache, fMatcherStack, fMemoryManager);
./src/xercesc/validators/schema/identity/FieldActivator.cpp:43:    fMayMatch = new (manager) ValueHashTableOf<bool, PtrHasher>(29, manager);
./src/xercesc/validators/schema/identity/FieldActivator.cpp:53:    fMayMatch = new (fMemoryManager) ValueHashTableOf<bool, PtrHasher>(29, fMemoryManager);
./src/xercesc/validators/schema/identity/XPathMatcherStack.cpp:44:        fContextStack = new (manager) ValueStackOf<int>(8, manager);
./src/xercesc/validators/schema/identity/XPathMatcherStack.cpp:45:        fMatchers = new (manager) RefVectorOf<XPathMatcher>(8, true, manager);
./src/xercesc/validators/schema/identity/XPathMatcher.cpp:113:            fStepIndexes = new (fMemoryManager) RefVectorOf<ValueStackOf<XMLSize_t> >(fLocationPathSize, true, fMemoryManager);
./src/xercesc/validators/schema/identity/ValueStore.cpp:196:            fValueTuples = new (fMemoryManager) RefHashTableOf<FieldValueMap, ICValueHasher>(107, true, ICValueHasher(fMemoryManager), fMemoryManager);
./src/xercesc/validators/schema/identity/ValueStore.cpp:199:        FieldValueMap* pICItem = new (fMemoryManager) FieldValueMap(fValues);
./src/xercesc/validators/schema/identity/ValueStore.cpp:218:                fValueTuples = new (fMemoryManager) RefHashTableOf<FieldValueMap, ICValueHasher>(107, true, ICValueHasher(fMemoryManager), fMemoryManager);
./src/xercesc/validators/schema/identity/ValueStore.cpp:221:            FieldValueMap* pICItem = new (fMemoryManager) FieldValueMap(valueMap);
./src/xercesc/validators/schema/identity/FieldValueMap.cpp:58:                fFields = new (fMemoryManager) ValueVectorOf<IC_Field*>(*(other.fFields));
./src/xercesc/validators/schema/identity/FieldValueMap.cpp:59:                fValidators = new (fMemoryManager) ValueVectorOf<DatatypeValidator*>(*(other.fValidators));
./src/xercesc/validators/schema/identity/FieldValueMap.cpp:60:                fValues = new (fMemoryManager) RefArrayVectorOf<XMLCh>(other.fFields->curCapacity(), true, fMemoryManager);
./src/xercesc/validators/schema/SchemaValidator.cpp:71:    fTypeStack = new (fMemoryManager) ValueStackOf<ComplexTypeInfo*>(8, fMemoryManager);
./src/xercesc/validators/schema/SchemaValidator.cpp:196:                        fNotationBuf = new (fMemoryManager) XMLBuffer(1023, fMemoryManager);
./src/xercesc/validators/schema/GeneralAttributeCheck.cpp:97:    fAttMap = new ValueHashTableOf<unsigned short>(A_Count);
./src/xercesc/validators/schema/GeneralAttributeCheck.cpp:134:    fFacetsMap = new ValueHashTableOf<unsigned short>(13);
./src/xercesc/validators/schema/SchemaInfo.cpp:65:    fImportingInfoList = new (fMemoryManager) RefVectorOf<SchemaInfo>(4, false, fMemoryManager);
./src/xercesc/validators/schema/SchemaInfo.cpp:76:    fNonXSAttList = new (fMemoryManager) ValueVectorOf<DOMNode*>(2, fMemoryManager);
./src/xercesc/validators/schema/SchemaInfo.cpp:77:    fValidationContext = new (fMemoryManager) ValidationContextImpl(fMemoryManager);
./src/xercesc/validators/schema/SchemaInfo.cpp:78:    fNamespaceScope = new (fMemoryManager) NamespaceScope(currNamespaceScope, fMemoryManager);
./src/xercesc/validators/schema/SchemaInfo.cpp:167:        compList= new (fMemoryManager) RefHashTableOf<DOMElement>(17, false, fMemoryManager);
./src/xercesc/validators/schema/SchemaAttDef.cpp:68:    fAttName = new (manager) QName(prefix, localPart, uriId, manager);
./src/xercesc/validators/schema/SchemaAttDef.cpp:87:    fAttName = new (manager) QName(prefix, localPart, uriId, manager);
./src/xercesc/validators/schema/SchemaAttDef.cpp:103:    fAttName = new (getMemoryManager()) QName(otherName->getPrefix(),
./src/xercesc/validators/schema/SchemaAttDef.cpp:108:        fNamespaceList = new (getMemoryManager()) ValueVectorOf<unsigned int>(*(other->fNamespaceList));
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:55:  ComplexTypeInfo::fAnyType = new ComplexTypeInfo();
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:57:  ContentSpecNode* term = new ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:71:  ContentSpecNode* particle = new ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:78:  SchemaAttDef* attWildCard = new SchemaAttDef
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:141:    fAttDefs = new (fMemoryManager) RefHash2KeysTableOf<SchemaAttDef>(29, true, fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:142:    fAttList = new (fMemoryManager) SchemaAttDefList(fAttDefs,fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:323:    ContentSpecNode* aSpecNode = new (fMemoryManager) ContentSpecNode(*fContentSpec);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:347:        cmRet = new (fMemoryManager) MixedContentModel(false, aSpecNode, false, fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:388:                cmRet = new (fMemoryManager) AllContentModel(aSpecNode, true, fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:393:                    cmRet = new (fMemoryManager) AllContentModel(aSpecNode->getFirst(), true, fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:402:            cmRet = new (fMemoryManager) SimpleContentModel
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:422:                cmRet = new (fMemoryManager) SimpleContentModel
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:443:                cmRet = new (fMemoryManager) SimpleContentModel
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:453:                cmRet = new (fMemoryManager) AllContentModel(aSpecNode->getFirst(), false, fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:457:            cmRet = new (fMemoryManager) AllContentModel(aSpecNode, false, fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:465:            cmRet = new (fMemoryManager) DFAContentModel(false, aSpecNode, isMixed, fMemoryManager);
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:569:        retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:580:        retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:591:        retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:608:        retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:621:            retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:631:            retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:644:        retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:655:            retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:670:            ContentSpecNode* optional = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:683:                retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:698:                retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:709:                    retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:725:                ContentSpecNode* optional = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:735:                retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:747:                    retNode = new (fMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/XercesGroupInfo.cpp:46:    fElements = new (manager) RefVectorOf<SchemaElementDecl>(4, false, manager);
./src/xercesc/validators/schema/XercesGroupInfo.cpp:61:    fElements = new (manager) RefVectorOf<SchemaElementDecl>(4, false, manager);
./src/xercesc/validators/schema/TraverseSchema.cpp:322:            fComplexTypeRegistry = new (fGrammarPoolMemoryManager) RefHashTableOf<ComplexTypeInfo>(29, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:330:            fGroupRegistry = new (fGrammarPoolMemoryManager) RefHashTableOf<XercesGroupInfo>(13, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:338:            fAttGroupRegistry = new (fGrammarPoolMemoryManager) RefHashTableOf<XercesAttGroupInfo>(13, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:346:            fAttributeDeclRegistry = new (fGrammarPoolMemoryManager) RefHashTableOf<XMLAttDef>(29, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:354:            fValidSubstitutionGroups = new (fGrammarPoolMemoryManager) RefHash2KeysTableOf<ElemVector>(29, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:378:    SchemaInfo* currInfo = new (fMemoryManager) SchemaInfo(0, 0, 0, fTargetNSURI,
./src/xercesc/validators/schema/TraverseSchema.cpp:537:            theAnnotation = new (fGrammarPoolMemoryManager) XSAnnotation(fBuffer.getRawBuffer(), fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:541:            theAnnotation = new (fGrammarPoolMemoryManager) XSAnnotation(contents, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:635:        fParser = new (fGrammarPoolMemoryManager) XSDDOMParser(0, fGrammarPoolMemoryManager, 0);
./src/xercesc/validators/schema/TraverseSchema.cpp:687:            fSchemaInfo = new (fMemoryManager) SchemaInfo(0, 0, 0, fTargetNSURI,
./src/xercesc/validators/schema/TraverseSchema.cpp:849:        fParser = new (fGrammarPoolMemoryManager) XSDDOMParser(0, fGrammarPoolMemoryManager, 0);
./src/xercesc/validators/schema/TraverseSchema.cpp:899:                fSchemaGrammar = new (fGrammarPoolMemoryManager) SchemaGrammar(fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:982:        fRedefineComponents = new (fMemoryManager) RefHash2KeysTableOf<XMLCh>(13, (bool) false, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:1416:        typeInfo = new (fGrammarPoolMemoryManager) ComplexTypeInfo(fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:1428:            XSDLocator* aLocator = new (fGrammarPoolMemoryManager) XSDLocator();
./src/xercesc/validators/schema/TraverseSchema.cpp:1703:        XSDLocator* aLocator = new (fGrammarPoolMemoryManager) XSDLocator();
./src/xercesc/validators/schema/TraverseSchema.cpp:1902:            SchemaAttDef* attGroupWildCard =  new (fGrammarPoolMemoryManager)
./src/xercesc/validators/schema/TraverseSchema.cpp:2013:        retSpecNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/TraverseSchema.cpp:2028:        retSpecNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/TraverseSchema.cpp:2096:                ContentSpecNode* newNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/TraverseSchema.cpp:2199:            ContentSpecNode* newNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/TraverseSchema.cpp:2217:        ContentSpecNode* newNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/TraverseSchema.cpp:2572:    SchemaAttDef* attDef = new (fGrammarPoolMemoryManager) SchemaAttDef
./src/xercesc/validators/schema/TraverseSchema.cpp:2973:    XMLNotationDecl* decl = new (fGrammarPoolMemoryManager) XMLNotationDecl
./src/xercesc/validators/schema/TraverseSchema.cpp:3426:                            KVStringPair* kv = new (fGrammarPoolMemoryManager) KVStringPair(facetStr, attValue, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:3446:            KVStringPair* kv = new (fGrammarPoolMemoryManager) KVStringPair(SchemaSymbols::fgELT_PATTERN, pattern.getRawBuffer(), pattern.getLen(), fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:3514:    RefVectorOf<DatatypeValidator>* validators = new (fGrammarPoolMemoryManager) RefVectorOf<DatatypeValidator>(4, false, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:3904:                        facets = new (fGrammarPoolMemoryManager) RefHashTableOf<KVStringPair>(29, true, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:3910:                            enums = new (fGrammarPoolMemoryManager) RefArrayVectorOf<XMLCh>(8, true, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:4311:    SchemaAttDef* attDef = new (fGrammarPoolMemoryManager) SchemaAttDef(XMLUni::fgZeroLenString,
./src/xercesc/validators/schema/TraverseSchema.cpp:4358:        fIdentityConstraintNames = new (fMemoryManager) RefHash2KeysTableOf<IdentityConstraint>(29, (bool) false, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:4365:    IC_Key* icKey = new (fGrammarPoolMemoryManager) IC_Key(name, elemDecl->getBaseName(), fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:4418:        fIdentityConstraintNames = new (fGrammarPoolMemoryManager) RefHash2KeysTableOf<IdentityConstraint>(29, (bool) false, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:4426:    IC_Unique* icUnique = new (fGrammarPoolMemoryManager) IC_Unique(name, elemDecl->getBaseName(), fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:4507:    IC_KeyRef* icKeyRef = new (fGrammarPoolMemoryManager) IC_KeyRef(name, elemDecl->getBaseName(), icKey, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:4603:        XercesXPath* sXPath = new (fGrammarPoolMemoryManager) XercesXPath(xpathExpr, fStringPool, fSchemaInfo->getNamespaceScope(), fEmptyNamespaceURI, true, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:4604:        IC_Selector* icSelector = new (fGrammarPoolMemoryManager) IC_Selector(sXPath, ic);
./src/xercesc/validators/schema/TraverseSchema.cpp:4659:                XercesXPath* fieldXPath = new (fGrammarPoolMemoryManager) XercesXPath
./src/xercesc/validators/schema/TraverseSchema.cpp:4668:                IC_Field* icField = new (fGrammarPoolMemoryManager) IC_Field(fieldXPath, ic);
./src/xercesc/validators/schema/TraverseSchema.cpp:5946:    SchemaAttDef* attDef = new (fGrammarPoolMemoryManager) SchemaAttDef(attQName->getPrefix(),
./src/xercesc/validators/schema/TraverseSchema.cpp:6364:        ContentSpecNode* anySpecNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/TraverseSchema.cpp:6417:            ContentSpecNode* pcdataNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/schema/TraverseSchema.cpp:6733:                    completeWildCard = new (fGrammarPoolMemoryManager) SchemaAttDef(attGroupWildCard);
./src/xercesc/validators/schema/TraverseSchema.cpp:6763:            baseAttWildCard = new (fGrammarPoolMemoryManager) SchemaAttDef(XMLUni::fgZeroLenString,
./src/xercesc/validators/schema/TraverseSchema.cpp:6800:            SchemaAttDef* newWildCard = new (fGrammarPoolMemoryManager) SchemaAttDef(baseAttWildCard);
./src/xercesc/validators/schema/TraverseSchema.cpp:6847:                SchemaAttDef* newAttDef = new (fGrammarPoolMemoryManager) SchemaAttDef(attName->getPrefix(),
./src/xercesc/validators/schema/TraverseSchema.cpp:6921:                srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/validators/schema/TraverseSchema.cpp:6934:             srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:7060:            validSubsElements = new (fGrammarPoolMemoryManager) ValueVectorOf<SchemaElementDecl*>(*validSubsElements);
./src/xercesc/validators/schema/TraverseSchema.cpp:7123:            validSubs = new (fGrammarPoolMemoryManager) ValueVectorOf<SchemaElementDecl*>(*validSubs);
./src/xercesc/validators/schema/TraverseSchema.cpp:7553:            SchemaAttDef* clonedAttDef = new (fGrammarPoolMemoryManager) SchemaAttDef(attDef);
./src/xercesc/validators/schema/TraverseSchema.cpp:8188:        fParser = new (fGrammarPoolMemoryManager) XSDDOMParser(0,fGrammarPoolMemoryManager, 0);
./src/xercesc/validators/schema/TraverseSchema.cpp:8732:    fCurrentTypeNameStack = new (fMemoryManager) ValueVectorOf<unsigned int>(8, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8733:    fCurrentGroupStack = new (fMemoryManager) ValueVectorOf<unsigned int>(8, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8741:        fGlobalDeclarations[i] = new (fMemoryManager) ValueVectorOf<unsigned int>(8, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8743:    fNonXSAttList = new (fMemoryManager) ValueVectorOf<DOMNode*>(4, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8744:    fNotationRegistry = new (fMemoryManager) RefHash2KeysTableOf<XMLCh>(13, (bool) false, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8745:    fPreprocessedNodes = new (fMemoryManager) RefHashTableOf<SchemaInfo, PtrHasher>
./src/xercesc/validators/schema/TraverseSchema.cpp:8751:    fLocator = new (fMemoryManager) XSDLocator();
./src/xercesc/validators/schema/TraverseSchema.cpp:8752:    fDeclStack = new (fMemoryManager) ValueVectorOf<const DOMElement*>(16, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8847:                icNodes = new (fGrammarPoolMemoryManager) ValueVectorOf<DOMElement*>(8, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8861:            fIC_ElementsNS = new (fMemoryManager) RefHashTableOf<ElemVector>(13, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8862:            fIC_NodeListNS = new (fMemoryManager) RefHashTableOf<ValueVectorOf<DOMElement*>, PtrHasher>(29, true, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:8867:            fIC_Elements = new (fMemoryManager) ValueVectorOf<SchemaElementDecl*>(8, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:9012:                            subsElements = new (fGrammarPoolMemoryManager) ValueVectorOf<SchemaElementDecl*>(*subsElements);
./src/xercesc/validators/schema/TraverseSchema.cpp:9025:                    subsElements = new (fGrammarPoolMemoryManager) ValueVectorOf<SchemaElementDecl*>(8, fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:9105:    ValueHashTableOf<unsigned int>* listOfURIs = new (fMemoryManager) ValueHashTableOf<unsigned int>(29, fMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:9203:    XSAnnotation* annot = new (fGrammarPoolMemoryManager) XSAnnotation(fBuffer.getRawBuffer(), fGrammarPoolMemoryManager);
./src/xercesc/validators/schema/TraverseSchema.cpp:9258:    SchemaGrammar  *grammar = new (memMgr) SchemaGrammar(memMgr);
./src/xercesc/validators/schema/TraverseSchema.cpp:9269:    SchemaElementDecl* annotElemDecl = new (memMgr) SchemaElementDecl
./src/xercesc/validators/schema/TraverseSchema.cpp:9278:    ComplexTypeInfo* complexType = new (memMgr) ComplexTypeInfo(memMgr);
./src/xercesc/validators/schema/TraverseSchema.cpp:9300:    SchemaElementDecl* appInfoElemDecl = new (memMgr) SchemaElementDecl
./src/xercesc/validators/schema/TraverseSchema.cpp:9320:    SchemaElementDecl* docElemDecl = new (memMgr) SchemaElementDecl
./src/xercesc/validators/schema/TraverseSchema.cpp:9340:    ContentSpecNode* left  = new (memMgr) ContentSpecNode(appInfoElemDecl, memMgr);
./src/xercesc/validators/schema/TraverseSchema.cpp:9341:    ContentSpecNode* right = new (memMgr) ContentSpecNode(docElemDecl, memMgr);
./src/xercesc/validators/schema/TraverseSchema.cpp:9342:    ContentSpecNode* root  = new (memMgr) ContentSpecNode(ContentSpecNode::ModelGroupChoice
./src/xercesc/validators/schema/TraverseSchema.cpp:9353:    MemBufInputSource* memBufIS = new (memMgr) MemBufInputSource
./src/xercesc/validators/schema/TraverseSchema.cpp:9365:    XSAXMLScanner *scanner = new (memMgr) XSAXMLScanner
./src/xercesc/validators/schema/XMLSchemaDescriptionImpl.cpp:50:    fLocationHints =  new (memMgr) RefArrayVectorOf<XMLCh>(4, true, memMgr);
./src/xercesc/validators/schema/XMLSchemaDescriptionImpl.cpp:135:    fTriggeringComponent = new (trigComponent->getMemoryManager()) QName(*trigComponent); 
./src/xercesc/validators/schema/XMLSchemaDescriptionImpl.cpp:146:    fEnclosingElementName = new (encElement->getMemoryManager()) QName(*encElement); 
./src/xercesc/validators/schema/SchemaAttDefList.cpp:44:    fEnum = new (getMemoryManager()) RefHash2KeysTableOfEnumerator<SchemaAttDef>(listToUse, false, getMemoryManager());
./src/xercesc/validators/schema/SchemaAttDefList.cpp:175:            fEnum = new (getMemoryManager()) RefHash2KeysTableOfEnumerator<SchemaAttDef>(fList, false, getMemoryManager());
./src/xercesc/validators/common/DFAContentModel.cpp:629:        fFollowList[index] = new (fMemoryManager) CMStateSet(fLeafCount, fMemoryManager);
./src/xercesc/validators/common/DFAContentModel.cpp:658:    CMLeaf* nodeEOC = new (fMemoryManager) CMLeaf
./src/xercesc/validators/common/DFAContentModel.cpp:672:    fHeadNode = new (fMemoryManager) CMBinaryOp
./src/xercesc/validators/common/DFAContentModel.cpp:682:    fLeafList[counter] = new (fMemoryManager) CMLeaf
./src/xercesc/validators/common/DFAContentModel.cpp:734:        fElemMap[outIndex] = new (fMemoryManager) QName(fMemoryManager);
./src/xercesc/validators/common/DFAContentModel.cpp:738:                fLeafNameTypeVector = new (fMemoryManager) ContentLeafNameTypeVector(fMemoryManager);
./src/xercesc/validators/common/DFAContentModel.cpp:777:                elemOccurenceMap[fElemMapSize] = new (fMemoryManager) Occurence(((CMRepeatingLeaf*)leaf)->getMinOccurs(), ((CMRepeatingLeaf*)leaf)->getMaxOccurs(), fElemMapSize);
./src/xercesc/validators/common/DFAContentModel.cpp:894:    CMStateSet* setT = new (fMemoryManager) CMStateSet(fHeadNode->getFirstPos());
./src/xercesc/validators/common/DFAContentModel.cpp:979:                newSet = new (fMemoryManager) CMStateSet
./src/xercesc/validators/common/DFAContentModel.cpp:1224:                        fCountingStates[i] = new (fMemoryManager) Occurence(old->minOccurs, old->maxOccurs, old->elemIndex);
./src/xercesc/validators/common/DFAContentModel.cpp:1332:        retNode = new (fMemoryManager) CMAny
./src/xercesc/validators/common/DFAContentModel.cpp:1340:        fLeafList[curIndex] = new (fMemoryManager) CMLeaf
./src/xercesc/validators/common/DFAContentModel.cpp:1365:        retNode = new (fMemoryManager) CMLeaf
./src/xercesc/validators/common/DFAContentModel.cpp:1372:        fLeafList[curIndex] = new (fMemoryManager) CMLeaf
./src/xercesc/validators/common/DFAContentModel.cpp:1390:        retNode = new (fMemoryManager) CMRepeatingLeaf
./src/xercesc/validators/common/DFAContentModel.cpp:1399:        fLeafList[curIndex] = new (fMemoryManager) CMRepeatingLeaf
./src/xercesc/validators/common/DFAContentModel.cpp:1452:                retNode = new (fMemoryManager) CMBinaryOp
./src/xercesc/validators/common/DFAContentModel.cpp:1495:            retNode = new (fMemoryManager) CMBinaryOp
./src/xercesc/validators/common/DFAContentModel.cpp:1532:            retNode = new (fMemoryManager) CMUnaryOp
./src/xercesc/validators/common/MixedContentModel.cpp:83:        fChildren[index] = new (fMemoryManager) QName(*children.elementAt(index));
./src/xercesc/validators/common/AllContentModel.cpp:85:        fChildren[index] = new (fMemoryManager) QName(*(children.elementAt(index)));
./src/xercesc/validators/common/GrammarResolver.cpp:50:    fGrammarBucket = new (manager) RefHashTableOf<Grammar>(29, true,  manager);
./src/xercesc/validators/common/GrammarResolver.cpp:55:    fGrammarFromPool = new (manager) RefHashTableOf<Grammar>(29, false,  manager);
./src/xercesc/validators/common/GrammarResolver.cpp:64:        fGrammarPool = new (manager) XMLGrammarPoolImpl(manager);     
./src/xercesc/validators/common/GrammarResolver.cpp:70:    fGrammarsToAddToXSModel = new (manager) ValueVectorOf<SchemaGrammar*> (29, manager);
./src/xercesc/validators/common/GrammarResolver.cpp:106:            fDataTypeReg = new (fMemoryManager) DatatypeValidatorFactory(fMemoryManager);
./src/xercesc/validators/common/GrammarResolver.cpp:392:                    fXSModel = new (fMemoryManager) XSModel(fGrammarPoolXSModel, this, fMemoryManager);
./src/xercesc/validators/common/GrammarResolver.cpp:407:                    xsModel = new (fMemoryManager) XSModel(fXSModel, this, fMemoryManager);                   
./src/xercesc/validators/common/GrammarResolver.cpp:412:                    fXSModel = new (fMemoryManager) XSModel(fGrammarPoolXSModel, this, fMemoryManager);
./src/xercesc/validators/common/GrammarResolver.cpp:426:            fXSModel = new (fMemoryManager) XSModel(0, this, fMemoryManager);    
./src/xercesc/validators/common/GrammarResolver.cpp:433:        xsModel = new (fMemoryManager) XSModel(fXSModel, this, fMemoryManager);
./src/xercesc/validators/common/GrammarResolver.cpp:440:        fXSModel = new (fMemoryManager) XSModel(0, this, fMemoryManager);
./src/xercesc/validators/common/ContentSpecNode.cpp:56:        fElement = new (fMemoryManager) QName(*tempElement);
./src/xercesc/validators/common/ContentSpecNode.cpp:60:        fFirst = new (fMemoryManager) ContentSpecNode(*tmp);
./src/xercesc/validators/common/ContentSpecNode.cpp:64:        fSecond = new (fMemoryManager) ContentSpecNode(*tmp);
./src/xercesc/validators/DTD/DTDGrammar.cpp:43:    DTDGrammar::fDefaultEntities = new NameIdPool<DTDEntityDecl>(11, 12);
./src/xercesc/validators/DTD/DTDGrammar.cpp:88:    fElemDeclPool = new (fMemoryManager) NameIdPool<DTDElementDecl>(109, 128, fMemoryManager);
./src/xercesc/validators/DTD/DTDGrammar.cpp:91:    //fElemNonDeclPool = new (fMemoryManager) NameIdPool<DTDElementDecl>(29, 128, fMemoryManager);
./src/xercesc/validators/DTD/DTDGrammar.cpp:92:    fEntityDeclPool = new (fMemoryManager) NameIdPool<DTDEntityDecl>(109, 128, fMemoryManager);
./src/xercesc/validators/DTD/DTDGrammar.cpp:93:    fNotationDeclPool = new (fMemoryManager) NameIdPool<XMLNotationDecl>(109, 128, fMemoryManager);
./src/xercesc/validators/DTD/DTDGrammar.cpp:96:    fGramDesc = new (fMemoryManager) XMLDTDDescriptionImpl(XMLUni::fgDTDEntityString, fMemoryManager);
./src/xercesc/validators/DTD/DTDGrammar.cpp:127:        retVal = new (fMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDGrammar.cpp:135:            fElemNonDeclPool = new (fMemoryManager) NameIdPool<DTDElementDecl>(29, 128, fMemoryManager);
./src/xercesc/validators/DTD/DTDGrammar.cpp:154:    DTDElementDecl* retVal = new (fMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDGrammar.cpp:164:            fElemNonDeclPool = new (fMemoryManager) NameIdPool<DTDElementDecl>(29, 128, fMemoryManager);
./src/xercesc/validators/DTD/DTDValidator.cpp:312:                    find = new (getScanner()->getMemoryManager()) XMLRefInfo
./src/xercesc/validators/DTD/DTDAttDefList.cpp:43:    fEnum = new (getMemoryManager()) RefHashTableOfEnumerator<DTDAttDef>(listToUse, false, manager);
./src/xercesc/validators/DTD/DTDAttDefList.cpp:161:             fEnum = new (getMemoryManager()) RefHashTableOfEnumerator<DTDAttDef>(fList, false, getMemoryManager());
./src/xercesc/validators/DTD/DTDElementDecl.cpp:107:        ((DTDElementDecl*)this)->fAttList = new (getMemoryManager()) DTDAttDefList(fAttDefs,getMemoryManager());
./src/xercesc/validators/DTD/DTDElementDecl.cpp:211:        ((DTDElementDecl*)this)->fAttList = new (getMemoryManager()) DTDAttDefList(fAttDefs,getMemoryManager());
./src/xercesc/validators/DTD/DTDElementDecl.cpp:253:        cmRet = new (getMemoryManager()) MixedContentModel(true, this->getContentSpec(), false, getMemoryManager());
./src/xercesc/validators/DTD/DTDElementDecl.cpp:366:    ((DTDElementDecl*)this)->fAttDefs = new (getMemoryManager()) RefHashTableOf<DTDAttDef>(29, true, getMemoryManager());
./src/xercesc/validators/DTD/DTDScanner.cpp:123:    fPEntityDeclPool = new (fMemoryManager) NameIdPool<DTDEntityDecl>(109, 128, fMemoryManager);
./src/xercesc/validators/DTD/DTDScanner.cpp:431:            fDumAttDef = new (fMemoryManager) DTDAttDef(fMemoryManager);
./src/xercesc/validators/DTD/DTDScanner.cpp:443:        decl = new (fGrammarPoolMemoryManager) DTDAttDef
./src/xercesc/validators/DTD/DTDScanner.cpp:626:        elemDecl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDScanner.cpp:1061:            arrNestedDecl=new (fMemoryManager) ValueStackOf<XMLSize_t>(5, fMemoryManager);
./src/xercesc/validators/DTD/DTDScanner.cpp:1083:        decl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDScanner.cpp:1094:    curNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:1154:            headNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:1168:            headNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:1262:                        ContentSpecNode* newCur = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:1297:                            decl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDScanner.cpp:1309:                        ContentSpecNode* tmpLeaf = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:1327:                        ContentSpecNode* newCur = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:1682:                fDumElemDecl = new (fMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDScanner.cpp:1699:        decl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDScanner.cpp:1829:            fDumEntityDecl = new (fMemoryManager) DTDEntityDecl(fMemoryManager);
./src/xercesc/validators/DTD/DTDScanner.cpp:1836:        entityDecl = new (fGrammarPoolMemoryManager) DTDEntityDecl(bbName.getRawBuffer(), false, fGrammarPoolMemoryManager);
./src/xercesc/validators/DTD/DTDScanner.cpp:3228:    ContentSpecNode* curNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:3316:                    headNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:3354:                decl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/validators/DTD/DTDScanner.cpp:3377:                curNode = new (fGrammarPoolMemoryManager) ContentSpecNode
./src/xercesc/validators/DTD/DTDScanner.cpp:3500:        decl = new (fGrammarPoolMemoryManager) XMLNotationDecl
./src/xercesc/dom/impl/XSDElementNSImpl.cpp:57:    DOMNode* newNode = new (fParent.fOwnerDocument) XSDElementNSImpl(*this, deep);
./src/xercesc/dom/impl/DOMCharacterDataImpl.cpp:40:        fDataBuf = new (fDoc) DOMBuffer(fDoc, len+15);
./src/xercesc/dom/impl/DOMCharacterDataImpl.cpp:52:        fDataBuf = new (fDoc) DOMBuffer(fDoc, len+15);
./src/xercesc/dom/impl/DOMCharacterDataImpl.cpp:64:        fDataBuf = new (fDoc) DOMBuffer(fDoc, len+15);
./src/xercesc/dom/impl/DOMDocumentFragmentImpl.cpp:54:    DOMNode* newNode = new (castToNodeImpl(this)->getOwnerDocument(), DOMMemoryManager::DOCUMENT_FRAGMENT_OBJECT) DOMDocumentFragmentImpl(*this, deep);
./src/xercesc/dom/impl/DOMAttrMapImpl.cpp:72:                fNodes = new (doc) DOMNodeVector(doc, size);
./src/xercesc/dom/impl/DOMAttrMapImpl.cpp:90:	DOMAttrMapImpl *newmap = new (castToNodeImpl(ownerNode_p)->getOwnerDocument()) DOMAttrMapImpl(ownerNode_p);
./src/xercesc/dom/impl/DOMAttrMapImpl.cpp:187:            fNodes=new ((DOMDocumentImpl*)doc) DOMNodeVector(doc);
./src/xercesc/dom/impl/DOMAttrMapImpl.cpp:263:            fNodes=new ((DOMDocumentImpl*)doc) DOMNodeVector(doc);
./src/xercesc/dom/impl/DOMAttrMapImpl.cpp:490:    fNodes = new (doc) DOMNodeVector(doc, n);
./src/xercesc/dom/impl/DOMProcessingInstructionImpl.cpp:64:    DOMNode* newNode = new (getOwnerDocument(), DOMMemoryManager::PROCESSING_INSTRUCTION_OBJECT) DOMProcessingInstructionImpl(*this, deep);
./src/xercesc/dom/impl/DOMXPathResultImpl.cpp:30:    fSnapshot = new (fMemoryManager) RefVectorOf<DOMNode>(13, false, fMemoryManager);
./src/xercesc/dom/impl/DOMCDATASectionImpl.cpp:66:    DOMNode* newNode = new (this->getOwnerDocument(), DOMMemoryManager::CDATA_SECTION_OBJECT) DOMCDATASectionImpl(*this, deep);
./src/xercesc/dom/impl/DOMNodeVector.cpp:77:        //DOMNode **newData = new (doc) DOMNode *[newAllocatedSize];
./src/xercesc/dom/impl/DOMTextImpl.cpp:74:    DOMNode* newNode = new (getOwnerDocument(), DOMMemoryManager::TEXT_OBJECT) DOMTextImpl(*this, deep);
./src/xercesc/dom/impl/DOMNodeImpl.cpp:67:    gEmptyNodeList = new DOMNodeListImpl(0);
./src/xercesc/dom/impl/DOMElementNSImpl.cpp:94:    DOMNode* newNode = new (fParent.fOwnerDocument, DOMMemoryManager::ELEMENT_NS_OBJECT) DOMElementNSImpl(*this, deep);
./src/xercesc/dom/impl/DOMImplementationImpl.cpp:77:    gDomimp = new DOMImplementationImpl;
./src/xercesc/dom/impl/DOMImplementationImpl.cpp:156:    DOMDocumentTypeImpl* docType = new DOMDocumentTypeImpl(0, qualifiedName, publicId, systemId, true);
./src/xercesc/dom/impl/DOMImplementationImpl.cpp:284:    DOMImplementationListImpl* list = new DOMImplementationListImpl;
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:283:    fNamespaceStack=new (fMemoryManager) RefVectorOf< RefHashTableOf<XMLCh> >(1, true, fMemoryManager);
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:300:    fSupportedParameters=new (fMemoryManager) DOMStringListImpl(12, fMemoryManager);
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:422:        pTarget=new LocalFileFormatTarget(szSystemId, fMemoryManager);
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:497:        fFormatter = new (fMemoryManager) XMLFormatter( fEncodingUsed
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:825:                            namespaceMap=new (fMemoryManager) RefHashTableOf<XMLCh>(12, false, fMemoryManager);
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:882:                                namespaceMap=new (fMemoryManager) RefHashTableOf<XMLCh>(12, false, fMemoryManager);
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:903:                                        namespaceMap=new (fMemoryManager) RefHashTableOf<XMLCh>(12, false, fMemoryManager);
./src/xercesc/dom/impl/DOMDeepNodeListPool.c:303:        newBucket = new DOMDeepNodeListPoolTableBucketElem<TVal>
./src/xercesc/dom/impl/DOMDeepNodeListPool.c:313:        newBucket = new (fMemoryManager) DOMDeepNodeListPoolTableBucketElem<TVal>
./src/xercesc/dom/impl/DOMImplementationRegistry.cpp:44:    gDOMImplSrcVectorMutex = new XMLMutex(XMLPlatformUtils::fgMemoryManager);
./src/xercesc/dom/impl/DOMImplementationRegistry.cpp:45:    gDOMImplSrcVector = new RefVectorOf<DOMImplementationSource>(3, false);
./src/xercesc/dom/impl/DOMImplementationRegistry.cpp:85:    DOMImplementationListImpl* list = new DOMImplementationListImpl;
./src/xercesc/dom/impl/DOMNormalizer.cpp:69:    fNSScope = new (fMemoryManager) InScopeNamespaces(fMemoryManager);
./src/xercesc/dom/impl/DOMNormalizer.cpp:350:    fScopes = new (manager) RefVectorOf<Scope>(10, true, manager);
./src/xercesc/dom/impl/DOMNormalizer.cpp:371:    Scope *s = new (manager) Scope(lastScopeWithBindings);
./src/xercesc/dom/impl/DOMNormalizer.cpp:411:        fPrefixHash = new (manager) RefHashTableOf<XMLCh>(10, (bool) false, manager);
./src/xercesc/dom/impl/DOMNormalizer.cpp:412:        fUriHash = new (manager) RefHashTableOf<XMLCh>(10, (bool) false, manager);
./src/xercesc/dom/impl/DOMElementImpl.cpp:52:        fDefaultAttributes = new (docImpl) DOMAttrMapImpl(this);
./src/xercesc/dom/impl/DOMElementImpl.cpp:53:        fAttributes = new (docImpl) DOMAttrMapImpl(this);
./src/xercesc/dom/impl/DOMElementImpl.cpp:56:      fAttributes = new (docImpl) DOMAttrMapImpl(this, fDefaultAttributes);
./src/xercesc/dom/impl/DOMElementImpl.cpp:87:        fDefaultAttributes = new (fParent.fOwnerDocument) DOMAttrMapImpl(this);
./src/xercesc/dom/impl/DOMElementImpl.cpp:91:            fAttributes = new (fParent.fOwnerDocument) DOMAttrMapImpl(this);
./src/xercesc/dom/impl/DOMElementImpl.cpp:94:            fAttributes = new (fParent.fOwnerDocument) DOMAttrMapImpl(this, fDefaultAttributes);
./src/xercesc/dom/impl/DOMElementImpl.cpp:108:    DOMNode* newNode = new (fParent.fOwnerDocument, DOMMemoryManager::ELEMENT_OBJECT) DOMElementImpl(*this, deep);
./src/xercesc/dom/impl/DOMElementImpl.cpp:435:        fDefaultAttributes = new (tmpdoc) DOMAttrMapImpl(this, defAttrs);
./src/xercesc/dom/impl/DOMNodeIDMap.cpp:56:    //fTable = new (fDoc) DOMAttr*[fSize];
./src/xercesc/dom/impl/DOMNodeIDMap.cpp:207:    //fTable = new (fDoc) DOMAttr *[fSize];
./src/xercesc/dom/impl/DOMConfigurationImpl.cpp:33:    fSupportedParameters=new (fMemoryManager) DOMStringListImpl(17, fMemoryManager);
./src/xercesc/dom/impl/DOMNamedNodeMapImpl.cpp:54:    DOMNamedNodeMapImpl *newmap = new (doc) DOMNamedNodeMapImpl(ownerNod);
./src/xercesc/dom/impl/DOMNamedNodeMapImpl.cpp:59:            newmap->fBuckets[index] = new (doc) DOMNodeVector(doc, size);
./src/xercesc/dom/impl/DOMNamedNodeMapImpl.cpp:178:        fBuckets[hash] = new (doc) DOMNodeVector(doc, 3);
./src/xercesc/dom/impl/DOMAttrImpl.cpp:70:    DOMNode* newNode = new (fParent.fOwnerDocument, DOMDocumentImpl::ATTR_OBJECT) DOMAttrImpl(*this, deep);
./src/xercesc/dom/impl/DOMXPathExpressionImpl.cpp:71:    fStringPool = new (fMemoryManager) XMLStringPool(109, fMemoryManager);
./src/xercesc/dom/impl/DOMXPathExpressionImpl.cpp:87:        fParsedExpression = new (fMemoryManager) XercesXPath(fExpression, fStringPool, &wrappedResolver, 0, true, fMemoryManager);
./src/xercesc/dom/impl/DOMXPathExpressionImpl.cpp:131:      r=new (fMemoryManager) DOMXPathResultImpl(type, fMemoryManager);
./src/xercesc/dom/impl/DOMCommentImpl.cpp:58:    DOMNode* newNode = new (getOwnerDocument(), DOMMemoryManager::COMMENT_OBJECT) DOMCommentImpl(*this, deep);
./src/xercesc/dom/impl/DOMEntityReferenceImpl.cpp:113:    DOMNode* newNode = new (fParent.fOwnerDocument, DOMMemoryManager::ENTITY_REFERENCE_OBJECT) DOMEntityReferenceImpl(*this, deep);
./src/xercesc/dom/impl/DOMNotationImpl.cpp:55:    DOMNode* newNode = new (getOwnerDocument(), DOMMemoryManager::NOTATION_OBJECT) DOMNotationImpl(*this, deep);
./src/xercesc/dom/impl/DOMStringListImpl.cpp:29:    fList=new (manager) RefVectorOf<XMLCh>(nInitialSize, false, manager);
./src/xercesc/dom/impl/DOMEntityImpl.cpp:75:    DOMNode* newNode = new (fParent.fOwnerDocument, DOMMemoryManager::ENTITY_OBJECT) DOMEntityImpl(*this, deep);
./src/xercesc/dom/impl/DOMXPathNSResolverImpl.cpp:31:    fNamespaceBindings = new (fManager) RefHashTableOf<KVStringPair>(7, true, fManager);
./src/xercesc/dom/impl/DOMXPathNSResolverImpl.cpp:98:    KVStringPair* pair = new (fManager) KVStringPair(prefix, uri, fManager);
./src/xercesc/dom/impl/DOMAttrNSImpl.cpp:92:    DOMNode* newNode = new (fParent.fOwnerDocument, DOMMemoryManager::ATTR_NS_OBJECT) DOMAttrNSImpl(*this, deep);
./src/xercesc/dom/impl/DOMImplementationListImpl.cpp:29:    fList=new RefVectorOf<DOMImplementation>(3, false);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:243:    DOMDocumentImpl *newdoc = new (fMemoryManager) DOMDocumentImpl(fDOMImplementation, fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:419:    DOMNodeIteratorImpl* nodeIterator = new (this) DOMNodeIteratorImpl(this, root, whatToShow, filter, entityReferenceExpansion);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:422:        //fNodeIterators = new (this) NodeIterators(1, false);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:423:        fNodeIterators = new (fMemoryManager) NodeIterators(1, false, fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:674:    DOMRangeImpl* range = new (this) DOMRangeImpl(this, fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:677:        //fRanges = new (this) Ranges(1, false);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:678:        fRanges = new (fMemoryManager) Ranges(1, false, fMemoryManager); // XMemory
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:914:        fNodeListPool = new (this) DOMDeepNodeListPool<DOMDeepNodeListImpl>(109, false);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:932:        fNodeListPool = new (this) DOMDeepNodeListPool<DOMDeepNodeListImpl>(109, false);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1050:        fNormalizer = new (fMemoryManager) DOMNormalizer(fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1057:        ((DOMDocumentImpl*)this)->fDOMConfiguration = new ((DOMDocumentImpl*)this) DOMConfigurationImpl(fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1081:                    clonedTypeInfo=new (this) DOMTypeInfoImpl(this, sourcePSVI);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1087:                        clonedTypeInfo=new (this) DOMTypeInfoImpl(typeInfo->getTypeNamespace(), typeInfo->getTypeName());
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1109:                                 fNodeIDMap = new (this) DOMNodeIDMap(500, this);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1130:                clonedTypeInfo=new (this) DOMTypeInfoImpl(this, sourcePSVI);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1136:                    clonedTypeInfo=new (this) DOMTypeInfoImpl(typeInfo->getTypeNamespace(), typeInfo->getTypeName());
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1287:        fUserDataTable = new (fMemoryManager) RefHash2KeysTableOf<DOMUserDataRecord, PtrHasher>
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1443:        fRecycleNodePtr = new (fMemoryManager) RefArrayOf<DOMNodePtr> (15, fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1446:        fRecycleNodePtr->operator[](type) = new (fMemoryManager) RefStackOf<DOMNode> (15, false, fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:1454:        fRecycleBufferPtr = new (fMemoryManager) RefStackOf<DOMBuffer> (15, false, fMemoryManager);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:44:    sDocumentMutex = new XMLMutex(XMLPlatformUtils::fgMemoryManager);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:78:        fEntities = new (ownerDoc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:79:        fNotations= new (ownerDoc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:80:        fElements = new (ownerDoc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:87:        fEntities = new (doc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:88:        fNotations= new (doc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:89:        fElements = new (doc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:153:        fEntities = new (ownerDoc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:154:        fNotations= new (ownerDoc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:155:        fElements = new (ownerDoc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:164:        fEntities = new (doc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:165:        fNotations= new (doc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:166:        fElements = new (doc) DOMNamedNodeMapImpl(this);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:211:        newNode = new (doc, DOMMemoryManager::DOCUMENT_TYPE_OBJECT) DOMDocumentTypeImpl(*this, false, deep);
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:215:        newNode = new (sDocument, DOMMemoryManager::DOCUMENT_TYPE_OBJECT) DOMDocumentTypeImpl(*this, false, deep);
./src/xercesc/internal/XSAXMLScanner.cpp:326:                elemDecl = new (fMemoryManager) SchemaElementDecl
./src/xercesc/internal/ValidationContextImpl.cpp:56:    fIdRefList = new (fMemoryManager) RefHashTableOf<XMLRefInfo>(109, fMemoryManager);
./src/xercesc/internal/ValidationContextImpl.cpp:102:        idEntry = new (fMemoryManager) XMLRefInfo(content, false, false, fMemoryManager);
./src/xercesc/internal/ValidationContextImpl.cpp:122:        idEntry = new (fMemoryManager) XMLRefInfo(content, false, false, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:648:                curPair = new (fMemoryManager) KVStringPair
./src/xercesc/internal/SGXMLScanner.cpp:1299:            elemDecl = new (fMemoryManager) SchemaElementDecl
./src/xercesc/internal/SGXMLScanner.cpp:1412:            elemDecl = new (fMemoryManager) SchemaElementDecl
./src/xercesc/internal/SGXMLScanner.cpp:1955:    fRawAttrList = new (fMemoryManager) RefVectorOf<KVStringPair>(32, true, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1962:    fSchemaValidator = new (fMemoryManager) SchemaValidator(0, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1966:    fICHandler = new (fMemoryManager) IdentityConstraintHandler(this, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1970:    fEntityTable = new (fMemoryManager) ValueHashTableOf<XMLCh>(11, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1976:    fElemNonDeclPool = new (fMemoryManager) RefHash3KeysIdPool<SchemaElementDecl>(29, true, 128, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1977:    fAttDefRegistry = new (fMemoryManager) RefHashTableOf<unsigned int, PtrHasher>
./src/xercesc/internal/SGXMLScanner.cpp:1981:    fUndeclaredAttrRegistry = new (fMemoryManager) Hash2KeysSetOf<StringHasher>(7, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1982:    fPSVIAttrList = new (fMemoryManager) PSVIAttributeList(fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1984:    fSchemaInfoList = new (fMemoryManager) RefHash2KeysTableOf<SchemaInfo>(29, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:1985:    fCachedSchemaInfoList = new (fMemoryManager) RefHash2KeysTableOf<SchemaInfo>(29, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:2643:            curAttr = new (fMemoryManager) XMLAttr
./src/xercesc/internal/SGXMLScanner.cpp:2746:                        curAtt = new (fMemoryManager) XMLAttr(fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:3069:        fSchemaGrammar = new (fGrammarPoolMemoryManager) SchemaGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:3132:        fPSVIElement = new (fMemoryManager) PSVIElement(fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:3136:        fErrorStack = new (fMemoryManager) ValueStackOf<bool>(8, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:3661:                    srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/SGXMLScanner.cpp:3676:                srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:3771:                      schemaGrammar = new (fGrammarPoolMemoryManager) SchemaGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:3896:                srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/SGXMLScanner.cpp:3910:            srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/SGXMLScanner.cpp:3986:                schemaGrammar = new (fGrammarPoolMemoryManager) SchemaGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/ElemStack.cpp:61:    fNamespaceMap = new (fMemoryManager) ValueVectorOf<PrefMapElem*>(16, fMemoryManager);
./src/xercesc/internal/ElemStack.cpp:106:        fStack[fStackTop] = new (fMemoryManager) StackElem;
./src/xercesc/internal/ElemStack.cpp:143:        fStack[fStackTop] = new (fMemoryManager) StackElem;
./src/xercesc/internal/ElemStack.cpp:267:        fGlobalNamespaces = new (fMemoryManager) StackElem;
./src/xercesc/internal/ElemStack.cpp:601:        fStack[fStackTop] = new (fMemoryManager) StackElem;
./src/xercesc/internal/ElemStack.cpp:633:        fStack[fStackTop] = new (fMemoryManager) StackElem;
./src/xercesc/internal/IGXMLScanner.cpp:522:    fRawAttrList = new (fMemoryManager) RefVectorOf<KVStringPair>(32, true, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:529:    fDTDValidator = new (fMemoryManager) DTDValidator();
./src/xercesc/internal/IGXMLScanner.cpp:531:    fSchemaValidator = new (fMemoryManager) SchemaValidator(0, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:535:    fICHandler = new (fMemoryManager) IdentityConstraintHandler(this, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:538:    fLocationPairs = new (fMemoryManager) ValueVectorOf<XMLCh*>(8, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:540:    fDTDElemNonDeclPool = new (fMemoryManager) NameIdPool<DTDElementDecl>(29, 128, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:541:    fSchemaElemNonDeclPool = new (fMemoryManager) RefHash3KeysIdPool<SchemaElementDecl>(29, true, 128, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:542:    fAttDefRegistry = new (fMemoryManager) RefHashTableOf<unsigned int, PtrHasher>
./src/xercesc/internal/IGXMLScanner.cpp:546:    fUndeclaredAttrRegistry = new (fMemoryManager) Hash2KeysSetOf<StringHasher>(7, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:547:    fPSVIAttrList = new (fMemoryManager) PSVIAttributeList(fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:549:    fSchemaInfoList = new (fMemoryManager) RefHash2KeysTableOf<SchemaInfo>(29, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:550:    fCachedSchemaInfoList = new (fMemoryManager) RefHash2KeysTableOf<SchemaInfo>(29, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:731:                curPair = new (fMemoryManager) KVStringPair
./src/xercesc/internal/IGXMLScanner.cpp:1285:    DTDElementDecl* rootDecl = new (rootDeclMgr) DTDElementDecl
./src/xercesc/internal/IGXMLScanner.cpp:1532:            DTDEntityDecl* declDTD = new (fMemoryManager) DTDEntityDecl(gDTDStr, false, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:1594:        elemDecl = new (fMemoryManager) DTDElementDecl
./src/xercesc/internal/IGXMLScanner.cpp:1773:                curAtt = new (fMemoryManager) XMLAttr
./src/xercesc/internal/IGXMLScanner.cpp:2019:                        curAtt = new (fMemoryManager) XMLAttr
./src/xercesc/internal/IGXMLScanner.cpp:2386:            elemDecl = new (fMemoryManager) DTDElementDecl(
./src/xercesc/internal/IGXMLScanner.cpp:2392:            elemDecl = new (fMemoryManager) SchemaElementDecl(
./src/xercesc/internal/IGXMLScanner.cpp:3038:        fDTDGrammar = new (fGrammarPoolMemoryManager) DTDGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:3095:    DTDEntityDecl* declDTD = new (fMemoryManager) DTDEntityDecl(gDTDStr, false, fMemoryManager);
./src/xercesc/internal/IGXMLScanner.cpp:3111:        DTDElementDecl* rootDecl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/internal/IGXMLScanner2.cpp:730:            curAttr = new (fMemoryManager) XMLAttr
./src/xercesc/internal/IGXMLScanner2.cpp:846:                        curAtt = new (fMemoryManager) XMLAttr(fMemoryManager);
./src/xercesc/internal/IGXMLScanner2.cpp:1175:        fDTDGrammar = new (fGrammarPoolMemoryManager) DTDGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/IGXMLScanner2.cpp:1250:        fPSVIElement = new (fMemoryManager) PSVIElement(fMemoryManager);
./src/xercesc/internal/IGXMLScanner2.cpp:1254:        fErrorStack = new (fMemoryManager) ValueStackOf<bool>(8, fMemoryManager);
./src/xercesc/internal/IGXMLScanner2.cpp:1839:                    srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/IGXMLScanner2.cpp:1853:                srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/IGXMLScanner2.cpp:1960:                      schemaGrammar = new (fGrammarPoolMemoryManager) SchemaGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/IGXMLScanner2.cpp:2095:                srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/IGXMLScanner2.cpp:2109:            srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/IGXMLScanner2.cpp:2193:                schemaGrammar = new (fGrammarPoolMemoryManager) SchemaGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/XTemplateSerializer.cpp:232:       KeySet* keySet = new (MM) KeySet((XMLCh*) e.nextElementKey(), 0, 0, MM); \
./src/xercesc/internal/XTemplateSerializer.cpp:244:       KeySet* keySet = new (MM) KeySet(strKey, intKey, 0, MM);  \
./src/xercesc/internal/XTemplateSerializer.cpp:287:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:337:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:397:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:470:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:526:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:579:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:632:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:685:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:738:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:792:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:845:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:898:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:991:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1069:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1152:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1228:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1325:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1407:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1489:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1578:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1681:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1803:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:1911:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2008:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2123:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2194:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2209:            DTDElementDecl*  data = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2246:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2261:            DTDEntityDecl*  data = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2299:            *objToLoad = new (serEng.getMemoryManager())
./src/xercesc/internal/XTemplateSerializer.cpp:2314:            XMLNotationDecl*  data = new (serEng.getMemoryManager())
./src/xercesc/internal/WFXMLScanner.cpp:424:    fEntityTable = new (fMemoryManager) ValueHashTableOf<XMLCh>(11, fMemoryManager);
./src/xercesc/internal/WFXMLScanner.cpp:425:    fAttrNameHashList = new (fMemoryManager)ValueVectorOf<XMLSize_t>(16, fMemoryManager);
./src/xercesc/internal/WFXMLScanner.cpp:426:    fAttrNSList = new (fMemoryManager) ValueVectorOf<XMLAttr*>(8, fMemoryManager);
./src/xercesc/internal/WFXMLScanner.cpp:427:    fElements = new (fMemoryManager) RefVectorOf<XMLElementDecl>(32, true, fMemoryManager);
./src/xercesc/internal/WFXMLScanner.cpp:428:    fElementLookup = new (fMemoryManager) RefHashTableOf<XMLElementDecl>(109, false, fMemoryManager);
./src/xercesc/internal/WFXMLScanner.cpp:775:            elemDecl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/internal/WFXMLScanner.cpp:949:                curAtt = new (fMemoryManager) XMLAttr
./src/xercesc/internal/WFXMLScanner.cpp:1104:            elemDecl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/internal/WFXMLScanner.cpp:1278:                curAtt = new (fMemoryManager) XMLAttr
./src/xercesc/internal/XSObjectFactory.cpp:68:    fDeleteVector = new (manager) RefVectorOf<XSObject>(20, true, manager);
./src/xercesc/internal/XSObjectFactory.cpp:69:    fXercesToXSMap = new (manager) RefHashTableOf<XSObject, PtrHasher> (
./src/xercesc/internal/XSObjectFactory.cpp:94:        XSParticleList* particleList = new (fMemoryManager) RefVectorOf<XSParticle> (4, true, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:100:            modelGroup = new (fMemoryManager) XSModelGroup(XSModelGroup::COMPOSITOR_ALL, particleList, annot, xsModel, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:106:                modelGroup = new (fMemoryManager) XSModelGroup(XSModelGroup::COMPOSITOR_CHOICE, particleList, annot, xsModel, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:108:                modelGroup = new (fMemoryManager) XSModelGroup(XSModelGroup::COMPOSITOR_SEQUENCE, particleList, annot, xsModel, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:115:        XSParticle* groupParticle = new (fMemoryManager) XSParticle
./src/xercesc/internal/XSObjectFactory.cpp:210:            XSParticle* particle = new (fMemoryManager) XSParticle
./src/xercesc/internal/XSObjectFactory.cpp:236:        XSParticle* particle = new (fMemoryManager) XSParticle
./src/xercesc/internal/XSObjectFactory.cpp:283:        xsObj = new (fMemoryManager) XSAttributeDeclaration
./src/xercesc/internal/XSObjectFactory.cpp:325:                memberTypes = new (fMemoryManager) RefVectorOf<XSSimpleTypeDefinition>(size, false, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:383:        xsObj = new (fMemoryManager) XSSimpleTypeDefinition
./src/xercesc/internal/XSObjectFactory.cpp:436:            icMap = new (fMemoryManager) XSNamedMap<XSIDCDefinition>
./src/xercesc/internal/XSObjectFactory.cpp:470:        xsObj = new (fMemoryManager) XSElementDeclaration
./src/xercesc/internal/XSObjectFactory.cpp:528:            xsAttList = new (fMemoryManager) RefVectorOf<XSAttributeUse>(attCount, false, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:550:        xsObj = new (fMemoryManager) XSComplexTypeDefinition
./src/xercesc/internal/XSObjectFactory.cpp:620:            stringList = new (fMemoryManager) RefArrayVectorOf<XMLCh>(
./src/xercesc/internal/XSObjectFactory.cpp:637:        xsObj= new (fMemoryManager) XSIDCDefinition
./src/xercesc/internal/XSObjectFactory.cpp:658:        xsObj = new (fMemoryManager) XSNotationDeclaration
./src/xercesc/internal/XSObjectFactory.cpp:675:    XSAttributeUse* attrUse = new (fMemoryManager) XSAttributeUse(xsAttDecl, xsModel, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:689:    XSWildcard* xsWildcard = new (fMemoryManager) XSWildcard
./src/xercesc/internal/XSObjectFactory.cpp:705:    XSWildcard* xsWildcard = new (fMemoryManager) XSWildcard
./src/xercesc/internal/XSObjectFactory.cpp:724:    XSModelGroupDefinition* xsObj = new (fMemoryManager) XSModelGroupDefinition
./src/xercesc/internal/XSObjectFactory.cpp:758:        xsAttList = new (fMemoryManager) RefVectorOf<XSAttributeUse>(attCount, false, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:781:    XSAttributeGroupDefinition* xsObj = new (fMemoryManager) XSAttributeGroupDefinition
./src/xercesc/internal/XSObjectFactory.cpp:837:    XSFacetList* xsFacetList = new (fMemoryManager) RefVectorOf<XSFacet>(4, false, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:840:        xsMultiFacetList = new (fMemoryManager) RefVectorOf<XSMultiValueFacet>(2, false, fMemoryManager);
./src/xercesc/internal/XSObjectFactory.cpp:852:        XSMultiValueFacet* mvFacet = new (fMemoryManager) XSMultiValueFacet(
./src/xercesc/internal/XSObjectFactory.cpp:925:                patternList = new (fMemoryManager) RefArrayVectorOf<XMLCh>(
./src/xercesc/internal/XSObjectFactory.cpp:938:                XSMultiValueFacet* mvFacet = new (fMemoryManager) XSMultiValueFacet(
./src/xercesc/internal/XSObjectFactory.cpp:954:            XSFacet* xsFacet = new (fMemoryManager) XSFacet(
./src/xercesc/internal/XSObjectFactory.cpp:968:        XSFacet* xsFacet = new (fMemoryManager) XSFacet(
./src/xercesc/internal/XMLScanner.cpp:62:    sScannerMutex = new XMLMutex(XMLPlatformUtils::fgMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:319:                    srcToUse = new (fMemoryManager) LocalFileInputSource(systemId, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:347:                srcToUse = new (fMemoryManager) URLInputSource(tmpURL, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:353:                srcToUse = new (fMemoryManager) LocalFileInputSource(systemId, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:432:                    srcToUse = new (fMemoryManager) LocalFileInputSource(systemId, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:460:                srcToUse = new (fMemoryManager) URLInputSource(tmpURL, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:465:                srcToUse = new (fMemoryManager) LocalFileInputSource(systemId,  fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:696:    fAttrList = new (fMemoryManager) RefVectorOf<XMLAttr>(32, true, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:700:    fValidationContext = new (fMemoryManager) ValidationContextImpl(fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:705:    //fGrammarResolver = new GrammarResolver();
./src/xercesc/internal/XMLScanner.cpp:1690:                        srcToUse = new (fMemoryManager) LocalFileInputSource(systemId, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:1718:                    srcToUse = new (fMemoryManager) URLInputSource(tmpURL, fMemoryManager);
./src/xercesc/internal/XMLScanner.cpp:1724:                    srcToUse = new (fMemoryManager) LocalFileInputSource(systemId, fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:805:    DTDElementDecl* rootDecl = new (rootDeclMgr) DTDElementDecl
./src/xercesc/internal/DGXMLScanner.cpp:1052:            DTDEntityDecl* declDTD = new (fMemoryManager) DTDEntityDecl(gDTDStr, false, fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:1119:        elemDecl = new (fMemoryManager) DTDElementDecl
./src/xercesc/internal/DGXMLScanner.cpp:1334:                curAtt = new (fMemoryManager) XMLAttr(fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:1567:        elemDecl = new (fMemoryManager) DTDElementDecl
./src/xercesc/internal/DGXMLScanner.cpp:1782:                curAtt = new (fMemoryManager) XMLAttr(fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:2079:    fDTDGrammar = new (fGrammarPoolMemoryManager) DTDGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:2131:    DTDEntityDecl* declDTD = new (fMemoryManager) DTDEntityDecl(gDTDStr, false, fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:2147:        DTDElementDecl* rootDecl = new (fGrammarPoolMemoryManager) DTDElementDecl
./src/xercesc/internal/DGXMLScanner.cpp:2195:    fAttrNSList = new (fMemoryManager) ValueVectorOf<XMLAttr*>(8, fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:2198:    fDTDValidator = new (fMemoryManager) DTDValidator();
./src/xercesc/internal/DGXMLScanner.cpp:2200:    fDTDElemNonDeclPool = new (fMemoryManager) NameIdPool<DTDElementDecl>(29, 128, fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:2201:    fAttDefRegistry = new (fMemoryManager) RefHashTableOf<unsigned int, PtrHasher>
./src/xercesc/internal/DGXMLScanner.cpp:2205:    fUndeclaredAttrRegistry = new (fMemoryManager) Hash2KeysSetOf<StringHasher>(7, fMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:2318:                            curAtt = new (fMemoryManager) XMLAttr
./src/xercesc/internal/DGXMLScanner.cpp:2330:                            curAtt = new (fMemoryManager) XMLAttr
./src/xercesc/internal/DGXMLScanner.cpp:2411:    fDTDGrammar = new (fGrammarPoolMemoryManager) DTDGrammar(fGrammarPoolMemoryManager);
./src/xercesc/internal/DGXMLScanner.cpp:2742:                srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/DGXMLScanner.cpp:2756:            srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/ReaderMgr.cpp:402:            retVal = new (fMemoryManager) XMLReader
./src/xercesc/internal/ReaderMgr.cpp:420:            retVal = new (fMemoryManager) XMLReader
./src/xercesc/internal/ReaderMgr.cpp:530:                srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/ReaderMgr.cpp:538:                srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/ReaderMgr.cpp:557:                srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/ReaderMgr.cpp:571:            srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/ReaderMgr.cpp:678:                srcToFill = new (fMemoryManager) LocalFileInputSource
./src/xercesc/internal/ReaderMgr.cpp:692:            srcToFill = new (fMemoryManager) URLInputSource(urlTmp, fMemoryManager);
./src/xercesc/internal/ReaderMgr.cpp:745:    BinMemInputStream* newStream = new (fMemoryManager) BinMemInputStream
./src/xercesc/internal/ReaderMgr.cpp:756:    XMLReader* retVal = new (fMemoryManager) XMLReader
./src/xercesc/internal/ReaderMgr.cpp:905:        fReaderStack = new (fMemoryManager) RefStackOf<XMLReader>(16, true, fMemoryManager);
./src/xercesc/internal/ReaderMgr.cpp:909:        fEntityStack = new (fMemoryManager) RefStackOf<XMLEntityDecl>(16, false, fMemoryManager);
./src/xercesc/framework/XMLBufferMgr.cpp:72:            fBufList[index] = new (fMemoryManager) XMLBuffer(1023, fMemoryManager);
./src/xercesc/framework/XMLElementDecl.cpp:67:        fElementName = new (fMemoryManager) QName(prefix, localPart, uriId, fMemoryManager);
./src/xercesc/framework/XMLElementDecl.cpp:77:        fElementName = new (fMemoryManager) QName(rawName, uriId, fMemoryManager);
./src/xercesc/framework/XMLElementDecl.cpp:86:        fElementName = new (fMemoryManager) QName(*elementName);
./src/xercesc/framework/LocalFileInputSource.cpp:162:    BinFileInputStream* retStrm = new (getMemoryManager()) BinFileInputStream(getSystemId(), getMemoryManager());
./src/xercesc/framework/XMLAttr.cpp:44:    fAttName = new (fMemoryManager) QName(fMemoryManager);
./src/xercesc/framework/XMLAttr.cpp:74:        fAttName = new (fMemoryManager) QName(attrPrefix, attrName, uriId, fMemoryManager);
./src/xercesc/framework/XMLAttr.cpp:109:        fAttName = new (fMemoryManager) QName(rawName, uriId, fMemoryManager);
./src/xercesc/framework/StdInInputSource.cpp:38:    BinFileInputStream* retStream = new (getMemoryManager()) BinFileInputStream
./src/xercesc/framework/psvi/XSIDCDefinition.cpp:49:        fXSAnnotationList = new (manager) RefVectorOf<XSAnnotation>(1, false, manager);
./src/xercesc/framework/psvi/XSModel.cpp:57:    fObjFactory = new (fMemoryManager) XSObjectFactory(manager);
./src/xercesc/framework/psvi/XSModel.cpp:70:                fComponentMap[i] = new (fMemoryManager) XSNamedMap<XSObject>
./src/xercesc/framework/psvi/XSModel.cpp:91:        fIdVector[i] = new (fMemoryManager) RefVectorOf<XSObject>(30, false, fMemoryManager);
./src/xercesc/framework/psvi/XSModel.cpp:94:    fNamespaceStringList        = new (manager) RefArrayVectorOf <XMLCh>(10, true, manager);
./src/xercesc/framework/psvi/XSModel.cpp:95:    fXSNamespaceItemList        = new (manager) RefVectorOf <XSNamespaceItem>(10, true, manager);
./src/xercesc/framework/psvi/XSModel.cpp:96:    fXSAnnotationList           = new (manager) RefVectorOf <XSAnnotation> (10, false, manager);
./src/xercesc/framework/psvi/XSModel.cpp:97:    fHashNamespace              = new (manager) RefHashTableOf<XSNamespaceItem> (11, false, manager);
./src/xercesc/framework/psvi/XSModel.cpp:115:        namespaceItem = new (manager) XSNamespaceItem(this, &sGrammar, manager);
./src/xercesc/framework/psvi/XSModel.cpp:122:    namespaceItem = new (manager) XSNamespaceItem
./src/xercesc/framework/psvi/XSModel.cpp:166:    fObjFactory = new (manager) XSObjectFactory(manager);
./src/xercesc/framework/psvi/XSModel.cpp:180:                fComponentMap[i] = new (fMemoryManager) XSNamedMap<XSObject>
./src/xercesc/framework/psvi/XSModel.cpp:201:        fIdVector[i] = new (fMemoryManager) RefVectorOf<XSObject>(30, false, fMemoryManager);
./src/xercesc/framework/psvi/XSModel.cpp:204:    fNamespaceStringList        = new (manager) RefArrayVectorOf <XMLCh>(10, true, manager);
./src/xercesc/framework/psvi/XSModel.cpp:205:    fXSNamespaceItemList        = new (manager) RefVectorOf <XSNamespaceItem>(10, false, manager);
./src/xercesc/framework/psvi/XSModel.cpp:206:    fDeleteNamespace            = new (manager) RefVectorOf <XSNamespaceItem>(10, true, manager);
./src/xercesc/framework/psvi/XSModel.cpp:207:    fXSAnnotationList           = new (manager) RefVectorOf <XSAnnotation> (10, false, manager);
./src/xercesc/framework/psvi/XSModel.cpp:208:    fHashNamespace              = new (manager) RefHashTableOf<XSNamespaceItem> (11, false, manager);
./src/xercesc/framework/psvi/XSModel.cpp:276:        XSNamespaceItem* namespaceItem = new (manager) XSNamespaceItem(this, lGrammar, manager);
./src/xercesc/framework/psvi/XSModel.cpp:288:        XSNamespaceItem* namespaceItem = new (manager) XSNamespaceItem
./src/xercesc/framework/psvi/XSAnnotation.cpp:68:    XercesDOMParser *parser = new (fMemoryManager) XercesDOMParser(0, fMemoryManager);
./src/xercesc/framework/psvi/XSAnnotation.cpp:76:    MemBufInputSource* memBufIS = new (fMemoryManager) MemBufInputSource
./src/xercesc/framework/psvi/XSAnnotation.cpp:111:    MemBufInputSource* memBufIS = new (fMemoryManager) MemBufInputSource
./src/xercesc/framework/psvi/XSMultiValueFacet.cpp:44:        fXSAnnotationList = new (manager) RefVectorOf<XSAnnotation>(1, false, manager);
./src/xercesc/framework/psvi/XSNamedMap.c:48:    fVector = new (manager) RefVectorOf<TVal> (maxElems, false, manager);
./src/xercesc/framework/psvi/XSNamedMap.c:49:    fHash = new (manager) RefHash2KeysTableOf<TVal> (modulus, adoptElems, manager);
./src/xercesc/framework/psvi/XSWildcard.cpp:48:        fNsConstraintList = new (manager) RefArrayVectorOf<XMLCh>(1, true, manager);
./src/xercesc/framework/psvi/XSWildcard.cpp:64:                fNsConstraintList = new (manager) RefArrayVectorOf<XMLCh>(nsListSize, true, manager);
./src/xercesc/framework/psvi/XSWildcard.cpp:129:        fNsConstraintList = new (manager) RefArrayVectorOf<XMLCh>(4, true, manager);
./src/xercesc/framework/psvi/XSWildcard.cpp:145:        fNsConstraintList = new (manager) RefArrayVectorOf<XMLCh>(1, true, manager);
./src/xercesc/framework/psvi/XSValue.cpp:150:    sXSValueRegEx = new RegularExpression(
./src/xercesc/framework/psvi/XSValue.cpp:177:    fDataTypeRegistry  = new ValueHashTableOf<XSValue::DataType>(43);
./src/xercesc/framework/psvi/XSValue.cpp:1196:            XSValue* retVal = new (manager) XSValue(dt_decimal, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1207:            XSValue* retVal = new (manager) XSValue(dt_float, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1240:            XSValue* retVal = new (manager) XSValue(dt_double, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1297:            XSValue* retVal = new (manager) XSValue(datatype, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1429:        XSValue* retVal = new (manager) XSValue(datatype, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1471:                XSValue* retVal = new (manager) XSValue(dt_boolean, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1478:                XSValue* retVal = new (manager) XSValue(dt_boolean, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1503:                XSValue* retVal = new (manager) XSValue(dt_hexBinary, manager);
./src/xercesc/framework/psvi/XSValue.cpp:1520:                XSValue* retVal = new (manager) XSValue(dt_base64Binary, manager);
./src/xercesc/framework/psvi/XSNamespaceItem.cpp:53:                fComponentMap[i] = new (fMemoryManager) XSNamedMap<XSObject>
./src/xercesc/framework/psvi/XSNamespaceItem.cpp:61:                fHashMap[i] = new (fMemoryManager) RefHashTableOf<XSObject>
./src/xercesc/framework/psvi/XSNamespaceItem.cpp:83:    fXSAnnotationList = new (manager) RefVectorOf <XSAnnotation> (5, false, manager);
./src/xercesc/framework/psvi/XSNamespaceItem.cpp:106:                fComponentMap[i] = new (fMemoryManager) XSNamedMap<XSObject>
./src/xercesc/framework/psvi/XSNamespaceItem.cpp:114:                fHashMap[i] = new (fMemoryManager) RefHashTableOf<XSObject>
./src/xercesc/framework/psvi/XSNamespaceItem.cpp:136:    fXSAnnotationList = new (manager) RefVectorOf <XSAnnotation> (5, false, manager);
./src/xercesc/framework/psvi/XSSimpleTypeDefinition.cpp:91:        fXSAnnotationList = new (manager) RefVectorOf<XSAnnotation>(3, false, manager);
./src/xercesc/framework/psvi/PSVIAttributeList.cpp:33:    fAttrList= new (fMemoryManager) RefVectorOf<PSVIAttributeStorage> (10, true, fMemoryManager);
./src/xercesc/framework/psvi/XSComplexTypeDefinition.cpp:82:        fXSAnnotationList = new (manager) RefVectorOf<XSAnnotation>(1, false, manager);
./src/xercesc/framework/XMLGrammarPoolImpl.cpp:43:    fXSModel = new (getMemoryManager()) XSModel(this, getMemoryManager());
./src/xercesc/framework/XMLGrammarPoolImpl.cpp:69:    fGrammarRegistry = new (memMgr) RefHashTableOf<Grammar>(29, true, memMgr);
./src/xercesc/framework/XMLGrammarPoolImpl.cpp:70:    fStringPool = new (memMgr) XMLStringPool(109, memMgr);
./src/xercesc/framework/XMLGrammarPoolImpl.cpp:154:            fSynchronizedStringPool = new (memMgr) XMLSynchronizedStringPool(fStringPool, 109, memMgr);
./src/xercesc/parsers/DOMLSParserImpl.cpp:97:    fSupportedParameters=new (fMemoryManager) DOMStringListImpl(48, manager);
./src/xercesc/parsers/DOMLSParserImpl.cpp:1208:                fFilterDelayedTextNodes=new (fMemoryManager) ValueHashTableOf<bool, PtrHasher>(7, fMemoryManager);
./src/xercesc/parsers/DOMLSParserImpl.cpp:1368:                                                            fFilterAction=new (fMemoryManager) ValueHashTableOf<DOMLSParserFilter::FilterAction, PtrHasher>(7, fMemoryManager);
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:50:    SAX2XMLReaderImpl* pImpl=new (manager) SAX2XMLReaderImpl(manager, gramPool);
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:127:    fGrammarResolver = new (fMemoryManager) GrammarResolver(fGrammarPool, fMemoryManager);
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:148:    fPrefixesStorage = new (fMemoryManager) XMLStringPool(109, fMemoryManager) ;
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:149:    fPrefixes        = new (fMemoryManager) ValueStackOf<unsigned int> (30, fMemoryManager) ;
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:150:    fTempAttrVec     = new (fMemoryManager) RefVectorOf<XMLAttr>  (10, false, fMemoryManager) ;
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:151:    fPrefixCounts    = new (fMemoryManager) ValueStackOf<XMLSize_t>(10, fMemoryManager) ;
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:152:    fTempQName       = new (fMemoryManager) XMLBuffer(32, fMemoryManager);
./src/xercesc/parsers/AbstractDOMParser.cpp:139:    fGrammarResolver = new (fMemoryManager) GrammarResolver(fGrammarPool, fMemoryManager);
./src/xercesc/parsers/AbstractDOMParser.cpp:179:            fDocumentVector  = new (fMemoryManager) RefVectorOf<DOMDocumentImpl>(10, true, fMemoryManager) ;
./src/xercesc/parsers/AbstractDOMParser.cpp:685:        DOMTypeInfoImpl* typeInfo=new (getDocument()) DOMTypeInfoImpl();
./src/xercesc/parsers/AbstractDOMParser.cpp:744:                DOMTypeInfoImpl* typeInfo=new (getDocument()) DOMTypeInfoImpl();
./src/xercesc/parsers/AbstractDOMParser.cpp:1078:                fDocument->fNodeIDMap = new (fDocument) DOMNodeIDMap(500, fDocument);
./src/xercesc/parsers/SAXParser.cpp:108:    fGrammarResolver = new (fMemoryManager) GrammarResolver(fGrammarPool, fMemoryManager);
./src/xercesc/util/MutexManagers/PosixMutexMgr.cpp:57:    PosixMutexWrap* mutex = new (manager) PosixMutexWrap;
./src/xercesc/util/NetAccessors/MacOSURLAccessCF/MacOSURLAccessCF.cpp:57:	BinInputStream* result = new (urlSource.getMemoryManager()) URLAccessCFBinInputStream(urlSource);
./src/xercesc/util/EncodingValidator.cpp:35:    EncodingValidator::fInstance = new EncodingValidator();
./src/xercesc/util/EncodingValidator.cpp:76:    fEncodingRegistry = new ValueHashTableOf<bool>(109);
./src/xercesc/util/StringPool.cpp:44:    fHashTable = new (fMemoryManager) RefHashTableOf<PoolElem>(modulus, false, fMemoryManager);
./src/xercesc/util/StringPool.cpp:181:    fHashTable = new (fMemoryManager) RefHashTableOf<PoolElem>(109, false, fMemoryManager);
./src/xercesc/util/TransService.cpp:60:    XMLTransService::gMappings = new RefHashTableOf<ENameMap>(103);
./src/xercesc/util/TransService.cpp:61:    XMLTransService::gMappingsRecognizer = new RefVectorOf<ENameMap>(
./src/xercesc/util/regx/TokenFactory.cpp:65:    Token* tmpTok = new (fMemoryManager) Token(tkType, fMemoryManager);
./src/xercesc/util/regx/TokenFactory.cpp:80:    ParenToken* tmpTok = new (fMemoryManager) ParenToken(Token::T_PAREN, token, noGroups, fMemoryManager);
./src/xercesc/util/regx/TokenFactory.cpp:99:    ConcatToken* tmpTok = new (fMemoryManager) ConcatToken(token1, token2, fMemoryManager);
./src/xercesc/util/regx/TokenFactory.cpp:135:    StringToken* tmpTok = new (fMemoryManager) StringToken(Token::T_BACKREFERENCE, 0, noRefs, fMemoryManager);
./src/xercesc/util/regx/TokenFactory.cpp:143:    StringToken* tmpTok = new (fMemoryManager) StringToken(Token::T_STRING, literal, 0, fMemoryManager);
./src/xercesc/util/regx/RegularExpression.cpp:143:        fMatch=new (fMemoryManager) Match(*src->fMatch);
./src/xercesc/util/regx/RegularExpression.cpp:170:                fMatch=new (other.fMemoryManager) Match(*other.fMatch);
./src/xercesc/util/regx/RegularExpression.cpp:436:    fTokenFactory = new (fMemoryManager) TokenFactory(fMemoryManager);
./src/xercesc/util/regx/RegularExpression.cpp:534:        lMatch = new (manager) Match(manager);
./src/xercesc/util/regx/RegularExpression.cpp:724:    RefVectorOf<Match> *subEx = new (manager) RefVectorOf<Match>(10, true, manager);
./src/xercesc/util/regx/RegularExpression.cpp:729:    RefArrayVectorOf<XMLCh> *tokens = new (manager) RefArrayVectorOf<XMLCh>(16, true, manager);
./src/xercesc/util/regx/RegularExpression.cpp:757:    context.fMatch = new (manager) Match(manager);
./src/xercesc/util/regx/RegularExpression.cpp:770:            context.fMatch = new (manager) Match(*(context.fMatch));
./src/xercesc/util/regx/RegularExpression.cpp:834:    RefVectorOf<Match> *subEx = new (manager) RefVectorOf<Match>(10, true, manager);
./src/xercesc/util/regx/RegularExpression.cpp:1002:        opStack=new ValueStackOf<RE_RuntimeContext>(16, context->fMemoryManager);
./src/xercesc/util/regx/RegularExpression.cpp:1556:        fBMPattern = new (fMemoryManager) BMPattern(fFixedString, 256,
./src/xercesc/util/regx/RegularExpression.cpp:1579:            fBMPattern = new (fMemoryManager) BMPattern(fFixedString, 256,
./src/xercesc/util/regx/RangeTokenMap.cpp:45:    RangeTokenMap::fInstance = new RangeTokenMap(
./src/xercesc/util/regx/RangeTokenMap.cpp:91:        fTokenRegistry = new (manager) RefHashTableOf<RangeTokenElemMap>(109, manager);
./src/xercesc/util/regx/RangeTokenMap.cpp:92:        fRangeMap = new (manager) RefHashTableOf<RangeFactory>(29, manager);
./src/xercesc/util/regx/RangeTokenMap.cpp:93:        fCategories = new (manager) XMLStringPool(109, manager);
./src/xercesc/util/regx/RangeTokenMap.cpp:94:        fTokenFactory = new (manager) TokenFactory(manager);
./src/xercesc/util/regx/RangeTokenMap.cpp:223:    RangeFactory* rangeFact = new XMLRangeFactory();
./src/xercesc/util/regx/RangeTokenMap.cpp:228:    rangeFact = new ASCIIRangeFactory();
./src/xercesc/util/regx/RangeTokenMap.cpp:233:    rangeFact = new UnicodeRangeFactory();
./src/xercesc/util/regx/RangeTokenMap.cpp:238:    rangeFact = new BlockRangeFactory();
./src/xercesc/util/regx/OpFactory.cpp:38:    fOpVector = new (fMemoryManager) RefVectorOf<Op>(16, true, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:52:    Op* tmpOp = new (fMemoryManager) Op(Op::O_DOT, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:59:    CharOp* tmpOp = new (fMemoryManager) CharOp(Op::O_CHAR, data, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:67:    CharOp* tmpOp = new (fMemoryManager) CharOp(Op::O_ANCHOR, data, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:75:    CharOp* tmpOp = new (fMemoryManager) CharOp(Op::O_CAPTURE, number, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:84:    UnionOp* tmpOp = new (fMemoryManager) UnionOp(Op::O_UNION, size, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:92:    ModifierOp* tmpOp = new (fMemoryManager) ModifierOp(Op::O_CLOSURE, id, -1, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:100:    ChildOp* tmpOp = new (fMemoryManager) ChildOp(Op::O_NONGREEDYCLOSURE, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:108:    ChildOp* tmpOp = new (fMemoryManager)  ChildOp(nonGreedy ? Op::O_NONGREEDYQUESTION :
./src/xercesc/util/regx/OpFactory.cpp:117:    RangeOp* tmpOp = new (fMemoryManager)  RangeOp(Op::O_RANGE, token, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:125:    CharOp* tmpOp = new (fMemoryManager) CharOp(Op::O_BACKREFERENCE, refNo, fMemoryManager);
./src/xercesc/util/regx/OpFactory.cpp:133:    StringOp* tmpOp = new (fMemoryManager) StringOp(Op::O_STRING, literal, fMemoryManager);
./src/xercesc/util/regx/UnionToken.cpp:63:        fChildren = new (tokFactory->getMemoryManager()) RefVectorOf<Token>(INITIALSIZE, false, tokFactory->getMemoryManager());
./src/xercesc/util/regx/RegxParser.cpp:391:        fReferences = new (fMemoryManager) RefVectorOf<ReferencePosition>(8, true, fMemoryManager);
./src/xercesc/util/XMLString.cpp:1377:        pszRet = new XMLCh[uriLen + stringLen(pszName) + 3];
./src/xercesc/util/XMLString.cpp:1592:    RefArrayVectorOf<XMLCh>* tokenStack = new (manager) RefArrayVectorOf<XMLCh>(16, true, manager);
./src/xercesc/util/XMLStringTokenizer.cpp:59:            fTokens = new (fMemoryManager) RefArrayVectorOf<XMLCh>(4, true, fMemoryManager);
./src/xercesc/util/XMLStringTokenizer.cpp:86:            fTokens = new (fMemoryManager) RefArrayVectorOf<XMLCh>(4, true, fMemoryManager);
./src/xercesc/util/XMLURL.cpp:656:            BinFileInputStream* retStrm = new (fMemoryManager) BinFileInputStream(realPath, fMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:200:            fgMemoryManager = new MemoryManagerImpl();
./src/xercesc/util/PlatformUtils.cpp:210:        fgDefaultPanicHandler = new DefaultPanicHandler();
./src/xercesc/util/PlatformUtils.cpp:253:    gSyncMutex = new XMLMutex(fgMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:256:    fgAtomicMutex = new XMLMutex(fgMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:420:		na = new CurlNetAccessor();
./src/xercesc/util/PlatformUtils.cpp:422:		na = new SocketNetAccessor();
./src/xercesc/util/PlatformUtils.cpp:424:		na = new MacOSURLAccessCF();
./src/xercesc/util/PlatformUtils.cpp:426:		na = new WinSockNetAccessor();
./src/xercesc/util/PlatformUtils.cpp:445:		ms = new ICUMsgLoader(msgDomain);
./src/xercesc/util/PlatformUtils.cpp:447:		ms = new MsgCatalogLoader(msgDomain);
./src/xercesc/util/PlatformUtils.cpp:449:		ms = new Win32MsgLoader(msgDomain);
./src/xercesc/util/PlatformUtils.cpp:451:		ms = new InMemMsgLoader(msgDomain);
./src/xercesc/util/PlatformUtils.cpp:481:		tc = new ICUTransService(fgMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:483:		tc = new IconvGNUTransService(fgMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:485:		tc = new IconvTransService(fgMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:487:		tc = new MacOSUnicodeConverter(fgMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:489:		tc = new Win32TransService(fgMemoryManager);
./src/xercesc/util/PlatformUtils.cpp:507:		mgr = new (memmgr) PosixFileMgr;
./src/xercesc/util/PlatformUtils.cpp:509:		mgr = new (memmgr) WindowsFileMgr;
./src/xercesc/util/PlatformUtils.cpp:728:		mgr = new (memmgr) NoThreadMutexMgr;
./src/xercesc/util/PlatformUtils.cpp:730:		mgr = new (memmgr) PosixMutexMgr;
./src/xercesc/util/PlatformUtils.cpp:732:		mgr = new (memmgr) WindowsMutexMgr;
./src/xercesc/util/Transcoders/MacOSUnicodeConverter/MacOSUnicodeConverter.cpp:277:            result = new (manager) MacOSLCPTranscoder(xmlTrans, manager);
./src/xercesc/util/Transcoders/MacOSUnicodeConverter/MacOSUnicodeConverter.cpp:448:		result = new (manager) MacOSTranscoder(encodingName, textToUnicode, unicodeToText, blockSize, manager);
./src/xercesc/util/Transcoders/Win32/Win32TransService.cpp:308:    fCPMap = new RefHashTableOf<CPMapEntry>(109);
./src/xercesc/util/Transcoders/Win32/Win32TransService.cpp:421:                CPMapEntry* newEntry = new (fManager) CPMapEntry(nameBuf, IEId, fManager);
./src/xercesc/util/Transcoders/Win32/Win32TransService.cpp:505:                            CPMapEntry* newEntry = new (fManager) CPMapEntry(uniName, aliasedEntry->getIEEncoding(), fManager);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:612:    newTranscoder = new (manager) IconvGNUTranscoder (encodingName,
./src/xercesc/util/RefHash3KeysIdPool.c:332:        newBucket = new RefHash3KeysTableBucketElem<TVal>(key1, key2, key3, valueToAdopt, fBucketList[hashVal]);
./tools/NLS/Xlat/Xlat_MsgCatalog.cpp:144:    XMLCh *tmpBuf = new XMLCh[bufSize + 1];
./tools/NLS/Xlat/Xlat_MsgCatalog.cpp:171:    tmpBuf = new XMLCh[bufSize + 1];
./tools/NLS/Xlat/Xlat.cpp:372:    XMLCh** newArgV = new XMLCh*[argC];
./tools/NLS/Xlat/Xlat.cpp:408:        XMLCh *tmpFileBuf = new XMLCh [bufSize + 1];
./tools/NLS/Xlat/Xlat.cpp:452:                    formatter = new CppSrcFormatter;
./tools/NLS/Xlat/Xlat.cpp:456:                    formatter = new Win32RCFormatter;
./tools/NLS/Xlat/Xlat.cpp:460:                    formatter = new MsgCatFormatter;
./tools/NLS/Xlat/Xlat.cpp:464:                    formatter = new ICUResBundFormatter;
./tools/NLS/Xlat/Xlat.cpp:591:                tmpFileBuf = new XMLCh [bufSize + 1];
./tests/src/MemHandlerTest/MemoryMonitor.cpp:156:    MemoryMonitor *staticMemMonitor = new MemoryMonitor();
./tests/src/MemHandlerTest/MemoryMonitor.cpp:263:    MemoryMonitor *domBuilderMemMonitor = new MemoryMonitor();
./tests/src/MemHandlerTest/MemoryMonitor.cpp:271:    MemoryMonitor *sax2MemMonitor = new MemoryMonitor();
./tests/src/MemHandlerTest/MemoryMonitor.cpp:277:    MemoryMonitor *sax1MemMonitor = new MemoryMonitor();
./tests/src/MemHandlerTest/MemoryMonitor.cpp:278:    SAXParser *saxParser = new (sax1MemMonitor) SAXParser(0, sax1MemMonitor);
./tests/src/ThreadTest/ThreadTest.cpp:437:            fXercesDOMParser = new XercesDOMParser(0, XMLPlatformUtils::fgMemoryManager, gp);
./tests/src/ThreadTest/ThreadTest.cpp:442:            fXercesDOMParser = new XercesDOMParser;
./tests/src/ThreadTest/ThreadTest.cpp:467:            fSAXParser = new SAXParser(0, XMLPlatformUtils::fgMemoryManager, gp);
./tests/src/ThreadTest/ThreadTest.cpp:472:            fSAXParser = new SAXParser();
./tests/src/ThreadTest/ThreadTest.cpp:479:        fSAXHandler = new ThreadParser::SAXHandler();
./tests/src/ThreadTest/ThreadTest.cpp:517:        fSAX2Handler = new ThreadParser::SAX2Handler();
./tests/src/ThreadTest/ThreadTest.cpp:549:        mbis = new  MemBufInputSource((const XMLByte *) fInfo->fileContent,
./tests/src/ThreadTest/ThreadTest.cpp:788:            XMLFormatTarget   *myFormTarget  = new StdOutFormatTarget();
./tests/src/ThreadTest/ThreadTest.cpp:1023:            fInfo->fileContent = new char[fInfo->fileSize + 1];
./tests/src/ThreadTest/ThreadTest.cpp:1085:                thParser = new ThreadParser;
./tests/src/ThreadTest/ThreadTest.cpp:1190:        gpMemMgr = new MemoryManagerImpl();
./tests/src/ThreadTest/ThreadTest.cpp:1191:        gp = new XMLGrammarPoolImpl(gpMemMgr);
./tests/src/ThreadTest/ThreadTest.cpp:1216:        ThreadParser *mainParser = new ThreadParser;
./tests/src/ThreadTest/ThreadTest.cpp:1261:    gThreadInfo = new ThreadInfo[gRunInfo.numThreads];
./tests/src/XSValueTest/XSValueTest.cpp:3430:    act_v_ran_v_1.fValue.f_byteVal = new XMLByte[2];
./tests/src/XSValueTest/XSValueTest.cpp:3433:    act_v_ran_v_2.fValue.f_byteVal = new XMLByte[2];
./tests/src/XSValueTest/XSValueTest.cpp:3551:    act_v_ran_v_1.fValue.f_byteVal = new XMLByte[9];
./tests/src/XSValueTest/XSValueTest.cpp:3561:    act_v_ran_v_2.fValue.f_byteVal = new XMLByte[9];
./tests/src/XSTSHarness/XSTSHarness.cpp:318:    XMLCh* uri = new XMLCh[XMLString::stringLen(xmlFile) + 9];
./tests/src/XSTSHarness/XSTSHarness.cpp:324:        handler=new XMLHarnessHandlers(uri);
./tests/src/XSTSHarness/XSTSHarness.cpp:329:        handler=new XSTSHarnessHandlers(uri);
./tests/src/InitTermTest/InitTermTest.cpp:183:    XercesDOMParser* parser = new XercesDOMParser;
./tests/src/InitTermTest/InitTermTest.cpp:197:    SAXParser* parser = new SAXParser;
./tests/src/DOM/DOMTest/DTest.cpp:958:        XercesDOMParser *parser = new XercesDOMParser;
./tests/src/DOM/DOMTest/DTest.cpp:4643:        XMLCh *docBaseURIRoot = new XMLCh [ XMLString::stringLen(docBaseURI) ];
./tests/src/DOM/DOMTest/DTest.cpp:4646:        XMLCh *base_foobar = new XMLCh [ XMLString::stringLen(docBaseURIRoot) + 8];
./tests/src/DOM/DOMTest/DTest.cpp:4651:        XMLCh *base_foobarbar = new XMLCh [ XMLString::stringLen(docBaseURIRoot) + 12];
./tests/src/DOM/DOMTest/DTest.cpp:4656:        XMLCh *base_foocarbar = new XMLCh [ XMLString::stringLen(docBaseURIRoot) + 12];
./tests/src/DOM/DOMTest/DTest.cpp:5396:    char* hugeString=new char[HUGE_STRING+1];
./tests/src/DOM/Normalizer/Normalizer.cpp:213:    myFormTarget = new StdOutFormatTarget();
./tests/src/DOM/Normalizer/Normalizer.cpp:224:    Normalizer *normalizer = new Normalizer();
./tests/src/DOM/Normalizer/Normalizer.cpp:227:    bool *tmpTrue = new bool(true);
./tests/src/DOM/Normalizer/Normalizer.cpp:228:    bool *tmpFalse = new bool(false);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:837:        ti.parser = new XercesDOMParser;
./tests/src/DOM/TypeInfo/TypeInfo.cpp:870:        ti.parser = new XercesDOMParser;
./tests/src/DOM/TypeInfo/TypeInfo.cpp:905:        ti.parser = new XercesDOMParser;
./tests/src/DOM/TypeInfo/TypeInfo.cpp:929:        ti.parser = new XercesDOMParser;
./tests/src/DOM/TypeInfo/TypeInfo.cpp:952:        ti.parser = new XercesDOMParser;
./tests/src/DOM/Traversal/Traversal.cpp:255:            MyFilter* filter = new MyFilter(0);
./tests/src/DOM/Traversal/Traversal.cpp:313:            MyFilter* filter = new MyFilter(DOMNode::ELEMENT_NODE);
./tests/src/DOM/Traversal/Traversal.cpp:358:            MyFilter* filter = new MyFilter(DOMNode::TEXT_NODE);
./tests/src/DOM/Traversal/Traversal.cpp:383:            MyFilter* filter = new MyFilter(DOMNode::CDATA_SECTION_NODE);
./tests/src/DOM/Traversal/Traversal.cpp:405:            MyFilter* filter = new MyFilter(DOMNode::PROCESSING_INSTRUCTION_NODE);
./tests/src/DOM/Traversal/Traversal.cpp:426:            MyFilter* filter = new MyFilter(DOMNode::COMMENT_NODE);
./tests/src/XSerializerTest/XSerializerTest.cpp:317:        handler = new XSerializerHandlers();
./tests/src/XSerializerTest/XSerializerTest.cpp:319:    BinOutputStream* myOut = new BinMemOutputStream(BufSize);
./tests/src/XSerializerTest/XSerializerTest.cpp:325:    BinInputStream*  myIn  = new BinMemInputStream(
./tests/src/XSerializerTest/XSerializerTest.cpp:341:    MemoryManager*  theMemMgr   = new MemoryManagerImpl();
./tests/src/XSerializerTest/XSerializerTest.cpp:342:    XMLGrammarPool* theGramPool = new XMLGrammarPoolImpl(theMemMgr);
./tests/src/XSerializerTest/XSerializerTest.cpp:393:    MemoryManager*  theMemMgr   = new MemoryManagerImpl();
./tests/src/XSerializerTest/XSerializerTest.cpp:394:    XMLGrammarPool* theGramPool = new XMLGrammarPoolImpl(theMemMgr);
./tests/src/EncodingTest/EncodingTest.cpp:124:        parser = new XercesDOMParser;
./samples/src/PParse/PParse.cpp:204:    SAXParser* parser = new SAXParser;
./samples/src/XInclude/XInclude.cpp:154:			XMLFormatTarget *myFormTarget = new LocalFileFormatTarget(outputFileName);
./samples/src/MemParse/MemParse.cpp:197:    SAXParser* parser = new SAXParser;
./samples/src/MemParse/MemParse.cpp:221:    MemBufInputSource* memBufIS = new MemBufInputSource
./samples/src/StdInParse/StdInParse.cpp:155:    SAXParser* parser = new SAXParser;
./samples/src/SAXPrint/SAXPrint.cpp:216:    SAXParser* parser = new SAXParser;
./samples/src/SCMPrint/SCMPrint.cpp:272:        grammarPool = new XMLGrammarPoolImpl(XMLPlatformUtils::fgMemoryManager);
./samples/src/DOMPrint/DOMPrint.cpp:380:    XercesDOMParser *parser = new XercesDOMParser;
./samples/src/DOMPrint/DOMPrint.cpp:388:    DOMTreeErrorReporter *errReporter = new DOMTreeErrorReporter();
./samples/src/DOMPrint/DOMPrint.cpp:459:                myFilter = new DOMPrintFilter(DOMNodeFilter::SHOW_ELEMENT   |
./samples/src/DOMPrint/DOMPrint.cpp:466:            DOMErrorHandler *myErrorHandler = new DOMPrintErrorHandler();
./samples/src/DOMPrint/DOMPrint.cpp:492:                myFormTarget=new LocalFileFormatTarget(goutputfile);
./samples/src/DOMPrint/DOMPrint.cpp:494:                myFormTarget=new StdOutFormatTarget();
./samples/src/SAXCount/SAXCount.cpp:191:    SAXParser* parser = new SAXParser;
./samples/src/Redirect/Redirect.cpp:97:    SAXParser* parser = new SAXParser;
./samples/src/EnumVal/EnumVal.cpp:156:    DTDValidator* valToUse = new DTDValidator;
./samples/src/EnumVal/EnumVal.cpp:157:    SAXParser* parser = new SAXParser(valToUse);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:105:	fAttrList = new StringList(8, false);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:106:	fTempResult = new XMLCh[51];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:116:	fIdMap = new RefHashTableOf<XMLCh>(101, false);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:117:	fDefinedIds = new RefVectorOf<XSObject>(25, false);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:118:	fIdNames = new RefArrayVectorOf<XMLCh>(25, true);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:119:	fObjectLocations = new RefArrayVectorOf<XMLCh>(25, true);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:121:	fPrefixMap = new RefHashTableOf<XMLCh>(5, false);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:122:	fNamespaces = new RefArrayVectorOf<XMLCh>(5, false);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:124:	fNSAttributes = new ValueVectorOf<XMLSize_t>(15);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:125:	fElementChildren = new ValueStackOf<bool>(20);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:128:	fAttributesInfo = new RefVectorOf<AttrInfo>(8, true);
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:298:	XMLCh* temp1 = new XMLCh[10];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:299:	XMLCh* temp2 = new XMLCh[10];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:311:	XMLCh* temp1 = new XMLCh[10];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:312:	XMLCh* temp2 = new XMLCh[10];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:325:	XMLCh* temp1 = new XMLCh[10];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:326:	XMLCh* temp2 = new XMLCh[10];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1585:	XMLCh* result = new XMLCh[100];
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:1623:	XMLCh* objLoc = new XMLCh[9];
./samples/src/PSVIWriter/PSVIWriter.cpp:180:    SAX2XMLReaderImpl* parser = new SAX2XMLReaderImpl();
./samples/src/PSVIWriter/PSVIWriter.cpp:194:	    	psviTarget = new StdOutFormatTarget();
./samples/src/PSVIWriter/PSVIWriter.cpp:196:	    	psviTarget = new LocalFileFormatTarget(psviOut);
./samples/src/PSVIWriter/PSVIWriter.cpp:198:		psviFormatter = new XMLFormatter(encodingName, psviTarget, XMLFormatter::NoEscapes, unRepFlags);
./samples/src/PSVIWriter/PSVIWriter.cpp:202:    	errorTarget = new StdOutFormatTarget();
./samples/src/PSVIWriter/PSVIWriter.cpp:204:    	errorTarget = new LocalFileFormatTarget(errorOut);
./samples/src/PSVIWriter/PSVIWriter.cpp:206:	errorFormatter = new XMLFormatter(encodingName, errorTarget, XMLFormatter::NoEscapes, unRepFlags);
./samples/src/PSVIWriter/PSVIWriter.cpp:214:   		handler = new PSVIWriterHandlers(0, errorFormatter);
./samples/src/PSVIWriter/PSVIWriter.cpp:216:   		handler = new PSVIWriterHandlers(psviFormatter, errorFormatter);
./samples/src/PSVIWriter/PSVIWriter.cpp:218:    PSVIAdvancedHandler* advancedHandler = new PSVIAdvancedHandler(handler);
./samples/src/PSVIWriter/PSVIWriter.cpp:264:			    		psviTarget = new StdOutFormatTarget();
./samples/src/PSVIWriter/PSVIWriter.cpp:265:						psviFormatter = new XMLFormatter(encodingName, psviTarget, XMLFormatter::NoEscapes, unRepFlags);
./samples/src/PSVIWriter/PSVIWriter.cpp:279:			    	psviTarget = new LocalFileFormatTarget(fileName);
./samples/src/PSVIWriter/PSVIWriter.cpp:280:					psviFormatter = new XMLFormatter(encodingName, psviTarget, XMLFormatter::NoEscapes, unRepFlags);
./samples/src/SAX2Print/SAX2Print.cpp:235:        filter=new SAX2SortAttributesFilter(reader);
./samples/src/SAX2Print/SAX2FilterHandlers.cpp:165:        Attr* pClone=new Attr;

== files() ==
./src/xercesc/validators/schema/GeneralAttributeCheck.cpp:418:    FILE* outFl = fopen("ea_table.out", "wt+");
./src/xercesc/util/XMLChar.cpp:8956:    FILE* outFl = fopen("table.out", "wt+");
./src/xercesc/util/XMLChar.cpp:9055:    FILE* outFl = fopen("table1_1.out", "wt+");
./src/xercesc/util/regx/TokenFactory.cpp:200:    FILE* outFl = fopen("table.out", "wt+");
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:168:    fLocaleBundle = ures_open(locationBuf, XMLMsgLoader::getLocale(), &err);
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:180:            fLocaleBundle = ures_open(BUNDLE_NAME, XMLMsgLoader::getLocale(), &err);
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:103:    if ( ((fCatalogHandle=catopen(catuser, 0)) == (nl_catd)-1) &&
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:104:         ((fCatalogHandle=catopen(catdefault, 0)) == (nl_catd)-1)   )
./src/xercesc/util/Transcoders/ICU/ICUTransService.cpp:298:    UConverter* converter = ucnv_open(NULL, &uerr);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:450:        iconv_t    cd_to = iconv_open(fLocalCP, eptr->fSchema);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:453:        iconv_t    cd_from = iconv_open(eptr->fSchema, fLocalCP);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:472:            iconv_t    cd_to = iconv_open(fLocalCP, eptr->fSchema);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:475:            iconv_t    cd_from = iconv_open(eptr->fSchema, fLocalCP);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:601:    cd_from = iconv_open (fUnicodeCP, encLocal);
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:606:    cd_to = iconv_open (encLocal, fUnicodeCP);
./src/xercesc/util/FileManagers/PosixFileMgr.cpp:68:    FileHandle result = (FileHandle)fopen(path , perms);
./src/xercesc/util/FileManagers/PosixFileMgr.cpp:76:    return (FileHandle)fdopen(dup(0), "rb");
./tools/NLS/Xlat/Xlat_ICUResourceBundle.cpp:175:    fOutFl = fopen(tmpStr, "wt");
./tools/NLS/Xlat/Xlat_MsgCatalog.cpp:156:    fOutFl = fopen(tmpStr, "wt");
./tools/NLS/Xlat/Xlat_MsgCatalog.cpp:178:    fOutHpp = fopen(tmpStr, "wt");
./tools/NLS/Xlat/Xlat_Win32RC.cpp:187:    fOutFl = fopen(tmpStr, "wt");
./tools/NLS/Xlat/Xlat.cpp:596:                FILE* outHeader = fopen(tmpFileBufCh, "wt+");
./tools/NLS/Xlat/Xlat_CppSrc.cpp:207:    fOutFl = fopen(tmpStr, "wt");
./tools/ICUData/ICUData.cpp:497:    gInFile = fopen(argV[1], "rt");
./tools/ICUData/ICUData.cpp:505:    gOutFile = fopen(argV[2], "wt+");
./tools/IANACharset/IANACharset.cpp:153:    gOutFile = _wfopen(tmpBuf, L"wt");
./tests/src/MemHandlerTest/MemoryMonitor.cpp:327:        fin.open(argV[argInd]);
./tests/src/ThreadTest/ThreadTest.cpp:1014:            fileF = fopen( fInfo->fileName, "rb" );
./tests/src/XSerializerTest/XSerializerTest.cpp:253:        fin.open(argV[argInd]);
./samples/src/SCMPrint/SCMPrint.cpp:293:            fin.open(argV[argInd]);
./samples/src/SAXCount/SAXCount.cpp:218:        fin.open(argV[argInd]);
./samples/src/DOMCount/DOMCount.cpp:305:        fin.open(argV[argInd]);
./samples/src/PSVIWriter/PSVIWriter.cpp:238:        fin.open(argV[argInd]);
./samples/src/SAX2Count/SAX2Count.cpp:253:        fin.open(argV[argInd]);

== logging() ==
./src/xercesc/validators/schema/XSDDOMParser.cpp:498:void XSDDOMParser::error(const   unsigned int                code
./src/xercesc/validators/schema/XSDDOMParser.cpp:511:        fUserErrorReporter->error(code, msgDomain, errType, errorText,
./src/xercesc/validators/schema/XSDErrorReporter.cpp:104:        fErrorReporter->error(toEmit, msgDomain, errType, errText, aLocator->getSystemId(),
./src/xercesc/validators/schema/XSDErrorReporter.cpp:147:        fErrorReporter->error(toEmit, msgDomain, errType, errText, aLocator->getSystemId(),
./src/xercesc/validators/schema/XSDErrorReporter.cpp:170:        fErrorReporter->error(toEmit, XMLUni::fgExceptDomain, errType, errText, aLocator->getSystemId(),
./src/xercesc/validators/schema/TraverseSchema.cpp:9239:            fErrorReporter->error(errCode, errDomain, type, errorText, fSystemId, publicId, fLine+lineNum-1, lineNum==1?fColumn+colNum:colNum);
./src/xercesc/dom/DOMException.cpp:44:,msg(0)
./src/xercesc/dom/DOMException.cpp:76:,msg(0)
./src/xercesc/dom/impl/DOMNormalizer.cpp:199:                error(XMLErrs::NSDeclInvalid, ele);
./src/xercesc/dom/impl/DOMNormalizer.cpp:227:            error(XMLErrs::DOMLevel1Node, ele);
./src/xercesc/dom/impl/DOMNormalizer.cpp:267:                error(XMLErrs::DOMLevel1Node, at);
./src/xercesc/dom/impl/DOMNormalizer.cpp:469:void DOMNormalizer::error(const XMLErrs::Codes code, const DOMNode *node) const
./src/xercesc/xinclude/XIncludeUtils.cpp:764:        fErrorReporter->error(errorType
./src/xercesc/parsers/DOMLSParserImpl.cpp:967:void DOMLSParserImpl::error( const   unsigned int                code
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:1216:void SAX2XMLReaderImpl::error(  const   unsigned int
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:1248:        fErrorHandler->error(toThrow);
./src/xercesc/parsers/XercesDOMParser.cpp:179:void XercesDOMParser::error( const   unsigned int
./src/xercesc/parsers/XercesDOMParser.cpp:214:        fErrorHandler->error(toThrow);
./src/xercesc/parsers/SAXParser.cpp:1185:void SAXParser::error(  const   unsigned int
./src/xercesc/parsers/SAXParser.cpp:1217:        fErrorHandler->error(toThrow);
./src/xercesc/parsers/SAX2XMLFilterImpl.cpp:398:void SAX2XMLFilterImpl::error(const SAXParseException& exc)
./src/xercesc/parsers/SAX2XMLFilterImpl.cpp:401:        fErrorHandler->error(exc);
./src/xercesc/util/FileManagers/PosixFileMgr.cpp:158:        if (ferror((FILE*)f))
./src/xercesc/util/FileManagers/PosixFileMgr.cpp:176:        if (ferror((FILE*)f))
./tools/NLS/Xlat/Xlat.cpp:880:void XlatErrHandler::error(const SAXParseException& toCatch)
./tools/IANACharset/IANACharset.cpp:370:void IANACharsetErrHandler::error(const SAXParseException& toCatch)
./tests/src/MemHandlerTest/MemoryMonitor.cpp:124:    void error(const SAXParseException &exc )
./tests/src/ThreadTest/ThreadTest.cpp:369:    void error(const SAXParseException& exc)       {
./tests/src/XSValueTest/XSValueTest.cpp:6707:        StrX msg(toCatch.getMessage());
./tests/src/XSTSHarness/XSTSHarness.cpp:76:void BaseHarnessHandlers::error(const SAXParseException& e)
./tests/src/XSTSHarness/XSTSHarness.cpp:138:void BaseErrorHandler::error(const SAXParseException& exc)
./tests/src/InitTermTest/InitTermTest.cpp:403:void InitTermTestErrorHandler::error(const SAXParseException& e)
./tests/src/XSerializerTest/XSerializerHandlers.cpp:84:void XSerializerHandlers::error(const SAXParseException& e)
./tests/src/EncodingTest/EncodingTest.cpp:63:    void error(const SAXParseException& e);
./tests/src/EncodingTest/EncodingTest.cpp:69:void ParseErrorHandler::error(const SAXParseException& e)
./samples/src/PParse/PParseHandlers.cpp:84:void PParseHandlers::error(const SAXParseException& e)
./samples/src/MemParse/MemParseHandlers.cpp:86:void MemParseHandlers::error(const SAXParseException& e)
./samples/src/StdInParse/StdInParseHandlers.cpp:90:void StdInParseHandlers::error(const SAXParseException& e)
./samples/src/SAXPrint/SAXPrintHandlers.cpp:114:void SAXPrintHandlers::error(const SAXParseException& e)
./samples/src/SCMPrint/SCMPrint.cpp:124:    void error(const SAXParseException& exc);
./samples/src/SCMPrint/SCMPrint.cpp:145:void SCMPrintHandler::error(const SAXParseException& e)
./samples/src/DOMPrint/DOMTreeErrorReporter.cpp:43:void DOMTreeErrorReporter::error(const SAXParseException& toCatch)
./samples/src/SAXCount/SAXCountHandlers.cpp:84:void SAXCountHandlers::error(const SAXParseException& e)
./samples/src/Redirect/RedirectHandlers.cpp:112:void RedirectHandlers::error(const SAXParseException& e)
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:297:void PSVIWriterHandlers::error(const SAXParseException& e) {
./samples/src/SAX2Print/SAX2PrintHandlers.cpp:116:void SAX2PrintHandlers::error(const SAXParseException& e)
./samples/src/SAX2Count/SAX2CountHandlers.cpp:85:void SAX2CountHandlers::error(const SAXParseException& e)

== environment() ==
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:134:        nlsHome = getenv("XERCESC_NLS_HOME");
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:142:            nlsHome = getenv("XERCESCROOT");
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:69:        nlsHome = getenv("XERCESC_NLS_HOME");
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:77:            nlsHome = getenv("XERCESCROOT");
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:421:      fLocalCP = getenv ("LC_ALL");
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:423:        fLocalCP = getenv ("LC_CTYPE");
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:425:          fLocalCP = getenv ("LANG");

== privileged() ==

== networking() ==
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:341:        hints.ai_family = PF_UNSPEC;
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:342:        hints.ai_socktype = SOCK_STREAM;
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:390:                        sizeof(unsigned long), AF_INET)) == NULL)
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:404:        fSocketHandle = wrap_socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:133:        hints.ai_family = PF_UNSPEC;
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:134:        hints.ai_socktype = SOCK_STREAM;
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:174:                        sizeof(unsigned long), AF_INET)) == NULL)
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:188:        fSocket = socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:243:// along its way going back to write(). So far we don't come up with a
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:409:bool DOMLSSerializerImpl::write(const DOMNode* nodeToWrite,
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:557:    return write(nodeToWrite, &output);
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:578:        retVal = write(nodeToWrite, &output);
./src/xercesc/internal/XSerializeEngine.cpp:154:void XSerializeEngine::write(XSerializable* const objectToWrite)
./src/xercesc/internal/XSerializeEngine.cpp:174:		write(protoType);
./src/xercesc/internal/XSerializeEngine.cpp:185:void XSerializeEngine::write(XProtoType* const protoType)
./src/xercesc/internal/XSerializeEngine.cpp:210:void XSerializeEngine::write(const XMLCh* const toWrite
./src/xercesc/internal/XSerializeEngine.cpp:213:    write((XMLByte*)toWrite, (sizeof(XMLCh)/sizeof(XMLByte)) * writeLen);
./src/xercesc/internal/XSerializeEngine.cpp:217:void XSerializeEngine::write(const XMLByte* const toWrite
./src/xercesc/internal/XSerializeEngine.cpp:294:        write(toWrite, strLen);
./src/xercesc/internal/XSerializeEngine.cpp:315:        write(toWrite, strLen);
./src/xercesc/internal/XSerializeEngine.cpp:327:XSerializable* XSerializeEngine::read(XProtoType* const protoType)
./src/xercesc/internal/XSerializeEngine.cpp:335:    if (! read(protoType, &objectTag))
./src/xercesc/internal/XSerializeEngine.cpp:360:bool XSerializeEngine::read(XProtoType*            const    protoType
./src/xercesc/internal/XSerializeEngine.cpp:410:void XSerializeEngine::read(XMLCh* const toRead
./src/xercesc/internal/XSerializeEngine.cpp:413:    read((XMLByte*)toRead, (sizeof(XMLCh)/sizeof(XMLByte))*readLen);
./src/xercesc/internal/XSerializeEngine.cpp:416:void XSerializeEngine::read(XMLByte* const toRead
./src/xercesc/internal/XSerializeEngine.cpp:519:    read(toRead, dataLen);
./src/xercesc/internal/XSerializeEngine.cpp:553:    read(toRead, dataLen);
./src/xercesc/internal/XProtoType.cpp:41:	serEng.write(fClassName, strLen * sizeof(XMLByte));
./src/xercesc/internal/XProtoType.cpp:81:    serEng.read(className, classNameLen*sizeof(XMLByte));
./src/xercesc/framework/StdOutFormatTarget.cpp:44:    XMLSize_t written=fwrite(toWrite, sizeof(XMLByte), count, stdout);
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:84:static SOCKET wrap_socket(int af,int type,int protocol)
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:89:static int wrap_connect(SOCKET s,const struct sockaddr* name,int namelen)
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:109:static int wrap_closesocket(SOCKET socket)
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:159:            wrap_closesocket(*fData);
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:354:            fSocketHandle = wrap_socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol);
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:358:            if (wrap_connect(fSocketHandle, ai->ai_addr, (int)ai->ai_addrlen) == SOCKET_ERROR)
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:404:        fSocketHandle = wrap_socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:413:        if (wrap_connect(fSocketHandle, (struct sockaddr *) &sa, sizeof(sa)) == SOCKET_ERROR)
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:471:    wrap_closesocket(fSocketHandle);
./src/xercesc/util/NetAccessors/Curl/CurlURLInputStream.cpp:273:    for (CURLMsg* msg = NULL; (msg = curl_multi_info_read(fMulti, &msgsInQueue)) != NULL; )
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:146:            fSocket = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol);
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:150:            if (connect(fSocket, ai->ai_addr, ai->ai_addrlen) < 0)
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:188:        fSocket = socket(hostEntPtr->h_addrtype, SOCK_STREAM, 0);
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:196:        if(connect(fSocket, (struct sockaddr *) &sa, sizeof(sa)) < 0)
./src/xercesc/util/FileManagers/PosixFileMgr.cpp:156:        bytesRead = fread((void*)buffer, 1, byteCount, (FILE*)f);
./src/xercesc/util/FileManagers/PosixFileMgr.cpp:174:        XMLSize_t bytesWritten = fwrite(buffer, sizeof(XMLByte), byteCount, (FILE*)f);
./tests/src/ThreadTest/ThreadTest.cpp:73:    static void startThread(ThreadFunc, void *param);
./tests/src/ThreadTest/ThreadTest.cpp:89:void ThreadFuncs::startThread(ThreadFunc func, void *param)
./tests/src/ThreadTest/ThreadTest.cpp:130:    static void startThread(ThreadFunc, void *param);
./tests/src/ThreadTest/ThreadTest.cpp:133:void ThreadFuncs::startThread(ThreadFunc func, void *param)
./tests/src/ThreadTest/ThreadTest.cpp:138:    tHandle = CreateThread(0,          // Security Attributes,
./tests/src/ThreadTest/ThreadTest.cpp:791:            theSerializer->write(doc,theOutput);
./tests/src/ThreadTest/ThreadTest.cpp:1024:            t = fread(fInfo->fileContent, 1, fInfo->fileSize, fileF);
./tests/src/ThreadTest/ThreadTest.cpp:1267:        ThreadFuncs::startThread(threadMain, &gThreadInfo[threadNum]);
./tests/src/DOM/DOMTest/DTest.cpp:2791:            theSerializer->write(document, theOutputDesc);
./tests/src/DOM/Normalizer/Normalizer.cpp:216:    theSerializer->write(node,theOutput);
./tests/src/NetAccessorTest/NetAccessorTest.cpp:81:			XERCES_STD_QUALIFIER cout.write((char*)buffer, bytesRead);
./samples/src/XInclude/XInclude.cpp:156:			writer->write(doc, theOutputDesc);
./samples/src/SAXPrint/SAXPrintHandlers.cpp:106:    XERCES_STD_QUALIFIER cout.write((char *) toWrite, (int) count);
./samples/src/DOMPrint/DOMPrint.cpp:24://  the specified input file. It then invokes DOMLSSerializer::write() to
./samples/src/DOMPrint/DOMPrint.cpp:501:            // do the serialization through DOMLSSerializer::write();
./samples/src/DOMPrint/DOMPrint.cpp:521:                      theSerializer->write(result->getNodeValue(), theOutputDesc);
./samples/src/DOMPrint/DOMPrint.cpp:544:                theSerializer->write(doc, theOutputDesc);
./samples/src/SAX2Print/SAX2PrintHandlers.cpp:108:    XERCES_STD_QUALIFIER cout.write((char *) toWrite, (int) count);

== http:// ==
./src/stricmp.h:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/towupper.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/sax2/sax2Dummy.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/FloatDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/AbstractNumericValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/AnySimpleTypeDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/StringDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/NOTATIONDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/TimeDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/MonthDayDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DateTimeDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/IDREFDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/UnionDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/AnyURIDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/IDDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DateTimeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/HexBinaryDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/AbstractStringValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DecimalDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/MonthDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/YearMonthDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/BooleanDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/QNameDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DoubleDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DurationDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/ENTITYDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/AbstractNumericFacetValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DatatypeValidatorFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/YearDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/ListDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/Base64BinaryDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DateDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/NCNameDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/NameDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DayDatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/DatatypeValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/datatype/XMLCanRepGroup.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/NamespaceScope.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SchemaGrammar.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XUtil.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XSDDOMParser.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XSDDOMParser.cpp:331:                // to be bound to "http://www.w3.org/2000/xmlns/"
./src/xercesc/validators/schema/identity/IC_KeyRef.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/ValueStoreCache.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/IdentityConstraint.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/XPathSymbols.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/IC_Field.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/XercesXPath.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/IdentityConstraintHandler.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/FieldActivator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/IC_Key.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/IC_Unique.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/XPathMatcherStack.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/XPathMatcher.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/ValueStore.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/IC_Selector.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/identity/FieldValueMap.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SchemaValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/GeneralAttributeCheck.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SchemaInfo.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SchemaAttDef.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SubstitutionGroupComparator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/ComplexTypeInfo.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XercesElementWildcard.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SchemaSymbols.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XercesGroupInfo.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XSDErrorReporter.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/TraverseSchema.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/TraverseSchema.cpp:3007:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:5097:            // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:5368:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:5446:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:5512:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:5584:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:5843:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:6503:            // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:7199:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/TraverseSchema.cpp:7298:        // http://www.w3.org/TR/xmlschema-1/#src-resolve
./src/xercesc/validators/schema/XSDLocator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XMLSchemaDescriptionImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SchemaElementDecl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/XercesAttGroupInfo.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/schema/SchemaAttDefList.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/DFAContentModel.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/Grammar.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/CMAny.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/MixedContentModel.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/ContentLeafNameTypeVector.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/AllContentModel.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/GrammarResolver.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/CMBinaryOp.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/CMUnaryOp.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/SimpleContentModel.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/common/ContentSpecNode.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/DTDGrammar.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/DTDValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/DTDAttDefList.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/DTDElementDecl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/DTDScanner.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/DTDEntityDecl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/XMLDTDDescriptionImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/validators/DTD/DTDAttDef.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/DOMXPathException.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/DOMRangeException.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/DOMException.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/DOMLSException.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/XSDElementNSImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMCharacterDataImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMDeepNodeListImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMDocumentFragmentImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMAttrMapImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMProcessingInstructionImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNodeIteratorImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMXPathResultImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMCDATASectionImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMStringPool.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMParentNode.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMLSInputImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNodeVector.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMTextImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNodeListImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNodeImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNodeImpl.cpp:773: *   Excerpt from http://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030226/core.html#Node3-textContent
./src/xercesc/dom/impl/DOMLSOutputImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMElementNSImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMImplementationImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMErrorImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:89:    true,  true,  // http://apache.org/xml/features/dom/byte-order-mark
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:91:    true,  true   // http://apache.org/xml/features/pretty-print/space-first-level-elements
./src/xercesc/dom/impl/DOMDeepNodeListPool.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMImplementationRegistry.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNormalizer.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMElementImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNodeIDMap.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMConfigurationImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMLocatorImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNamedNodeMapImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMAttrImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMXPathExpressionImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMTypeInfoImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMCommentImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMEntityReferenceImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMNotationImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMStringListImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMRangeImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMEntityImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMChildNode.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMXPathNSResolverImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMAttrNSImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMTreeWalkerImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMImplementationListImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMDocumentImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/dom/impl/DOMDocumentTypeImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/xinclude/XIncludeDOMDocumentProcessor.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/xinclude/XIncludeUtils.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/xinclude/XIncludeUtils.cpp:213:         *  - http://www.w3.org/TR/xinclude/#include-location */
./src/xercesc/xinclude/XIncludeUtils.cpp:264:            /* baseURI fixups - see http://www.w3.org/TR/xinclude/#base for details. */
./src/xercesc/xinclude/XIncludeUtils.cpp:486:        /* baseURI fixups - see http://www.w3.org/TR/xinclude/#base for details. */
./src/xercesc/xinclude/XIncludeUtils.cpp:825:    /* http://www.w3.org/2001/XInclude */
./src/xercesc/xinclude/XIncludeLocation.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XSAXMLScanner.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/ValidationContextImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XSerializeEngine.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XProtoType.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/BinFileOutputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/SGXMLScanner.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/BinMemOutputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/ElemStack.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/IGXMLScanner.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/IGXMLScanner2.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/VecAttributesImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XTemplateSerializer.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/WFXMLScanner.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XMLReader.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/VecAttrListImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/MemoryManagerImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XSObjectFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XMLScanner.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/DGXMLScanner.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/ReaderMgr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/internal/XMLScannerResolver.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/sax/SAXParseException.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/sax/Dummy.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/sax/SAXException.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/sax/InputSource.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/LocalFileFormatTarget.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLAttDefList.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLAttDef.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLBufferMgr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLElementDecl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/LocalFileInputSource.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/URLInputSource.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLDTDDescription.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/StdOutFormatTarget.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/BinOutputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLContentModel.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLAttr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLRefInfo.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLGrammarDescription.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/StdInInputSource.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLBuffer.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSFacet.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSNotationDeclaration.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSModelGroup.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSIDCDefinition.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/PSVIAttribute.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSParticle.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSModel.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/PSVIItem.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSAnnotation.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSMultiValueFacet.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSAttributeUse.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSAttributeGroupDefinition.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSElementDeclaration.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSNamedMap.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSObject.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSWildcard.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSValue.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSAttributeDeclaration.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSNamespaceItem.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSSimpleTypeDefinition.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSTypeDefinition.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/PSVIAttributeList.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSComplexTypeDefinition.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/XSModelGroupDefinition.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/psvi/PSVIElement.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLFormatter.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/Wrapper4DOMLSInput.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLSchemaDescription.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLRecognizer.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLGrammarPoolImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/MemBufFormatTarget.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/Wrapper4InputSource.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/MemBufInputSource.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLNotationDecl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/framework/XMLEntityDecl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/parsers/DOMLSParserImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/parsers/SAX2XMLReaderImpl.cpp:142:    // SAX2 default is for namespaces (feature http://xml.org/sax/features/namespaces) to be on
./src/xercesc/parsers/XercesDOMParser.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/parsers/AbstractDOMParser.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/parsers/AbstractDOMParser.cpp:1126:                    // to be bound to "http://www.w3.org/2000/xmlns/"
./src/xercesc/parsers/AbstractDOMParser.cpp:1488:                    // to be bound to "http://www.w3.org/2000/xmlns/"
./src/xercesc/parsers/SAXParser.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/parsers/SAX2XMLFilterImpl.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/KeyValuePair.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/CountedPointer.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XML88591Transcoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLWin1252Transcoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/MutexManagers/PosixMutexMgr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/MutexManagers/WindowsMutexMgr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/MutexManagers/NoThreadMutexMgr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/ValueStackOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLException.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/MacOSURLAccessCF/URLAccessCFBinInputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/MacOSURLAccessCF/MacOSURLAccessCF.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/WinSock/BinHTTPURLInputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/WinSock/WinSockNetAccessor.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/BinHTTPInputStreamCommon.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/Curl/CurlNetAccessor.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/Curl/CurlURLInputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/Socket/SocketNetAccessor.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NetAccessors/Socket/UnixHTTPURLInputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/KVStringPair.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLEBCDICTranscoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/RefArrayVectorOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/FlagJanitor.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/EncodingValidator.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/StringPool.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/TransService.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Base64.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLChar.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/TransENameMap.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/RefArrayOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLChTranscoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/TokenFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/ParenToken.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/ParserForXMLSchema.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/BlockRangeFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/RegularExpression.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/Token.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/CharToken.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/ASCIIRangeFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/BMPattern.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/Match.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/UnicodeRangeFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/XMLRangeFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/ConcatToken.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/StringToken.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/RegxUtil.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/XMLUniCharacter.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/ClosureToken.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/RangeToken.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/Op.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/RangeTokenMap.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/OpFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/UnionToken.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/RegxParser.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/regx/RangeFactory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/BitSet.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/LogicalPath.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/ValueHashTableOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLAbstractDoubleFloat.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/RefVectorOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/PSVIUni.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/PSVIUni.cpp:934:const XMLCh PSVIUni::fgNamespaceInfoset[] = { //http://www.w3.org/2001/05/XMLInfoset
./src/xercesc/util/PSVIUni.cpp:944:const XMLCh PSVIUni::fgNamespaceInstance[] = { //http://www.w3.org/2001/XMLSchema-instance
./src/xercesc/util/PSVIUni.cpp:954:const XMLCh PSVIUni::fgNamespacePsvi[] = { //http://apache.org/xml/2001/PSVInfosetExtension
./src/xercesc/util/PSVIUni.cpp:966:const XMLCh PSVIUni::fgNamespaceXmlSchema[] = { //http://www.w3.org/2001/XMLSchema
./src/xercesc/util/Hash2KeysSetOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLString.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLDouble.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XML256TableTranscoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLStringTokenizer.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLInitializer.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLURL.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLDateTime.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLUCS4Transcoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLBigDecimal.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLUni.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLUni.cpp:957:// SAX2 Core: http://xml.org/sax/features/validation
./src/xercesc/util/XMLUni.cpp:969:// SAX2 Core: http://xml.org/sax/features/namespaces
./src/xercesc/util/XMLUni.cpp:981://SAX2 Core: http://xml.org/sax/features/namespace-prefixes
./src/xercesc/util/XMLUni.cpp:994://Xerces: http://apache.org/xml/features/validation/dynamic
./src/xercesc/util/XMLUni.cpp:1007://Xerces: http://apache.org/xml/features/validation/schema
./src/xercesc/util/XMLUni.cpp:1020://Xerces: http://apache.org/xml/features/validation/schema-full-checking
./src/xercesc/util/XMLUni.cpp:1035://Xerces: http://apache.org/xml/features/validating/load-schema
./src/xercesc/util/XMLUni.cpp:1050://Xerces: http://apache.org/xml/features/validation/identity-constraint-checking
./src/xercesc/util/XMLUni.cpp:1067://Xerces: http://apache.org/xml/features/nonvalidating/load-external-dtd
./src/xercesc/util/XMLUni.cpp:1083://Xerces: http://apache.org/xml/features/continue-after-fatal-error
./src/xercesc/util/XMLUni.cpp:1097://Xerces: http://apache.org/xml/features/validation-error-as-fatal
./src/xercesc/util/XMLUni.cpp:1111://Xerces: http://apache.org/xml/features/calculate-src-ofs
./src/xercesc/util/XMLUni.cpp:1124://Xerces: http://apache.org/xml/features/standard-uri-conformant
./src/xercesc/util/XMLUni.cpp:1138://Xerces: http://apache.org/xml/features/dom-has-psvi-info
./src/xercesc/util/XMLUni.cpp:1151://Xerces: http://apache.org/xml/features/generate-synthetic-annotations
./src/xercesc/util/XMLUni.cpp:1166://Xerces: http://apache.org/xml/features/validate-annotations
./src/xercesc/util/XMLUni.cpp:1181://Xerces: http://apache.org/xml/properties/schema/external-schemaLocation
./src/xercesc/util/XMLUni.cpp:1197://Xerces: http://apache.org/xml/properties/security-manager
./src/xercesc/util/XMLUni.cpp:1212://Xerces: http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation
./src/xercesc/util/XMLUni.cpp:1230://Xerces: http://apache.org/xml/properties/scannerName
./src/xercesc/util/XMLUni.cpp:1244://Xerces: http://apache.org/xml/properties/parser-use-DOMDocument-from-Implementation
./src/xercesc/util/XMLUni.cpp:1260://Xerces: http://apache.org/xml/properties/entity-resolver
./src/xercesc/util/XMLUni.cpp:1273://Xerces: http://apache.org/xml/features/dom/user-adopts-DOMDocument
./src/xercesc/util/XMLUni.cpp:1288://Xerces: http://apache.org/xml/features/validation/cache-grammarFromParse
./src/xercesc/util/XMLUni.cpp:1304://Xerces: http://apache.org/xml/features/validation/use-cachedGrammarInParse
./src/xercesc/util/XMLUni.cpp:1320://Xerces: http://apache.org/xml/features/validation/ignoreCachedDTD
./src/xercesc/util/XMLUni.cpp:1335://Xerces: http://apache.org/xml/features/schema/ignore-annotations
./src/xercesc/util/XMLUni.cpp:1350://Xerces: http://apache.org/xml/features/disable-default-entity-resolution
./src/xercesc/util/XMLUni.cpp:1366://Xerces: http://apache.org/xml/features/validation/schema/skip-dtd-validation
./src/xercesc/util/XMLUni.cpp:1383://Xerces: http://apache.org/xml/features/validation/schema/handle-multiple-imports
./src/xercesc/util/XMLUni.cpp:1401://Xerces: http://apache.org/xml/properties/low-water-mark
./src/xercesc/util/XMLUni.cpp:1667://Xerces: http://apache.org/xml/features/dom/byte-order-mark
./src/xercesc/util/XMLUni.cpp:1689://Xerces: http://apache.org/xml/features/pretty-print/space-first-level-elements
./src/xercesc/util/XMLUni.cpp:1847:// http://www.w3.org/2001/05/xmlschema-errata#Errata2
./src/xercesc/util/QName.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/SynchronizedStringPool.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLFloat.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLNumber.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/MsgLoaders/InMemory/InMemMsgLoader.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/MsgLoaders/ICU/ICUMsgLoader.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/MsgLoaders/Win32/Win32MsgLoader.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/RefHashTableOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/BinMemInputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/PlatformUtils.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLUTF16Transcoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLASCIITranscoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/BinFileInputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/HexBin.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/RefStackOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Janitor.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Transcoders/MacOSUnicodeConverter/MacOSUnicodeConverter.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Transcoders/Iconv/IconvTransService.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Transcoders/ICU/ICUTransService.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Transcoders/Win32/Win32TransService.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Transcoders/IconvGNU/IconvGNUTransService.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLIBM1140Transcoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/ValueArrayOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/RefHash2KeysTableOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/PanicHandler.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLMsgLoader.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLMsgLoader.cpp:61:     *           refer to phttp://oss.software.ibm.com/icu/userguide/locale.html
./src/xercesc/util/XMLUTF8Transcoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLUTF8Transcoder.cpp:186:         * http://www.unicode.org/reports/tr27/
./src/xercesc/util/BinInputStream.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/DefaultPanicHandler.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/ValueVectorOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/Mutexes.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLIBM1047Transcoder.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/KeyRefPair.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLBigInteger.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/FileManagers/PosixFileMgr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/FileManagers/WindowsFileMgr.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLUri.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/XMLUri.cpp:532:        // see <http://www.ics.uci.edu/~fielding/url/test1.html> which
./src/xercesc/util/XMemory.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/NameIdPool.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/HeaderDummy.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/BaseRefVectorOf.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/xercesc/util/RefHash3KeysIdPool.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/strnicmp.h:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/stricmp.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/strnicmp.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/towlower.c:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/towlower.h:9: *      http://www.apache.org/licenses/LICENSE-2.0
./src/towupper.h:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tools/NLS/Xlat/Xlat_ICUResourceBundle.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tools/NLS/Xlat/Xlat_MsgCatalog.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tools/NLS/Xlat/Xlat_Win32RC.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tools/NLS/Xlat/Xlat.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tools/NLS/Xlat/Xlat_CppSrc.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tools/ICUData/ICUData.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tools/IANACharset/IANACharset.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/MemHandlerTest/MemoryMonitor.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/ThreadTest/ThreadTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/XSValueTest/XSValueTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/XSValueTest/XSValueTest.cpp:5073:    const char v_1[]="  http://www.schemaTest.org/IBMd3_2_17v01  \n";
./tests/src/XSValueTest/XSValueTest.cpp:5305:    const char v_1[]="   http://www.ibm.com/test:notation1  \n";
./tests/src/XSTSHarness/XMLHarnessHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/XSTSHarness/XSTSHarnessHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/XSTSHarness/XSTSHarness.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/XSTSHarness/XSTSHarness.cpp:58:            "http://www.w3.org/XML/2004/xml-schema-test-suite/xmlschema2006-11-06/xsts-2007-06-20.tar.gz\n"
./tests/src/XSTSHarness/XSTSHarness.cpp:62:            "http://www.w3.org/XML/Test/xmlts20080827.zip\n"
./tests/src/XSTSHarness/XSTSHarness.cpp:159:                                    "<xs:schema targetNamespace='http://www.w3.org/XML/1998/namespace' "
./tests/src/XSTSHarness/XSTSHarness.cpp:160:                                    "  xmlns:xs='http://www.w3.org/2001/XMLSchema' "
./tests/src/InitTermTest/InitTermTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/InitTermTest/InitTermTest.cpp:213:    XMLCh* doNamespaceFeature = XMLString::transcode("http://xml.org/sax/features/namespaces");
./tests/src/InitTermTest/InitTermTest.cpp:216:    XMLCh* doSchemaFeature = XMLString::transcode("http://apache.org/xml/features/validation/schema");
./tests/src/InitTermTest/InitTermTest.cpp:219:    XMLCh* handleMultipleImportsFeature = XMLString::transcode("http://apache.org/xml/features/validation/schema/handle-multiple-imports");
./tests/src/InitTermTest/InitTermTest.cpp:222:    XMLCh* fullSchemaCheckFeature = XMLString::transcode("http://apache.org/xml/features/validation/schema-full-checking");
./tests/src/DOM/DOMTest/DTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/DOM/DOMTest/DTest.cpp:480:    XMLString::transcode("http://www.w3.org/2000/xmlns/", tempStr, 3999);
./tests/src/DOM/DOMTest/DTest.cpp:1263:    XMLString::transcode("http://nsa", tempStr4, 3999);
./tests/src/DOM/DOMTest/DTest.cpp:1284:    XMLString::transcode("http://nsb", tempStr, 3999);
./tests/src/DOM/DOMTest/DTest.cpp:1469:    XMLString::transcode("http://nsa", tempStr4, 3999);
./tests/src/DOM/DOMTest/DTest.cpp:3180:    XMLString::transcode("http://nsa", tempStr4, 3999);
./tests/src/DOM/DOMTest/DTest.cpp:3203:    XMLString::transcode("http://nsb", tempStr, 3999);
./tests/src/DOM/DOMTest/DTest.cpp:3424:    XMLString::transcode("http://nsa", tempStr4, 3999);
./tests/src/DOM/DOMTest/DTest.cpp:4665:        XMLCh *http_carcar = XMLString::transcode("http://www.example.com/car/car");
./tests/src/DOM/DOMTest/DTest.cpp:4666:        XMLCh *http_barfoo = XMLString::transcode("http://www.example.com/bar/foo/");
./tests/src/DOM/DOMTest/DTest.cpp:4667:        XMLCh *http_barfoofoobar = XMLString::transcode("http://www.example.com/bar/foo/foo/bar");
./tests/src/DOM/DOMTest/DTest.h:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/DOM/Normalizer/Normalizer.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/DOM/Normalizer/Normalizer.cpp:230:    DOMElement* docFirstElement = doc->createElementNS(X("http://www.test.com"),X("docEle"));
./tests/src/DOM/Normalizer/Normalizer.cpp:232:    DOMElement* docFirstElementChild = doc->createElementNS(X("http://www.test2.com"),X("docEleChild"));
./tests/src/DOM/Normalizer/Normalizer.cpp:247:    DOMElement* docFirstElementChildChild = doc->createElementNS(X("http://www.test2.com"),X("docEleChildChild"));
./tests/src/DOM/Normalizer/Normalizer.cpp:262:        docFirstElement->setAttributeNS(XMLUni::fgXMLNSURIName, buf.getRawBuffer(), X("http://www.test2.com"));
./tests/src/DOM/Normalizer/Normalizer.cpp:270:    docFirstElementChildChild = doc->createElementNS(X("http://www.test3.com"),X("docEleChildChild2"));
./tests/src/DOM/Normalizer/Normalizer.cpp:272:    docFirstElementChildChild = doc->createElementNS(X("http://www.test4.com"),X("po4:docEleChildChild3"));
./tests/src/DOM/Normalizer/Normalizer.cpp:274:    docFirstElementChildChild = doc->createElementNS(X("http://www.test4.com"),X("po4:docEleChildChild4"));
./tests/src/DOM/Normalizer/Normalizer.cpp:287:    docFirstElementChildChild = doc->createElementNS(X("http://www.test4.com"),X("docEleChildChild5"));
./tests/src/DOM/Normalizer/Normalizer.cpp:303:    docFirstElement->setAttributeNS(X("http://testattr.com"), X("attr1"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:304:    docFirstElement->setAttributeNS(X("http://testattr.com"), X("attr2"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:305:    docFirstElement->setAttributeNS(X("http://testattr2.com"), X("attr3"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:306:    docFirstElement->setAttributeNS(X("http://www.test.com"), X("attr4"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:307:    docFirstElement->setAttributeNS(X("http://testattr2.com"), X("po:attr5"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:308:    docFirstElement->setAttributeNS(X("http://testattr2.com"), X("poFake:attr6"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:309:    docFirstElement->setAttributeNS(X("http://testattr3.com"), X("po3:attr7"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:315:    docFirstElementChildChild->setAttributeNS(X("http://testattr.com"), X("attr1"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:316:    docFirstElementChildChild->setAttributeNS(X("http://testattr.com"), X("attr2"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:317:    docFirstElementChildChild->setAttributeNS(X("http://testattr2.com"), X("attr3"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:318:    docFirstElementChildChild->setAttributeNS(X("http://www.test.com"), X("attr4"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:319:    docFirstElementChildChild->setAttributeNS(X("http://testattr2.com"), X("po:attr5"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:320:    docFirstElementChildChild->setAttributeNS(X("http://testattr2.com"), X("poFake:attr6"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:321:    docFirstElementChildChild->setAttributeNS(X("http://testattr3.com"), X("po3:attr7"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:322:    docFirstElementChildChild->setAttributeNS(X("http://testattr4.com"), X("po4:attr8"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:326:    docFirstElementChildChild->setAttributeNS(X("http://testclash.com"), X("NS1:attr9"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:327:    docFirstElementChildChild->setAttributeNS(XMLUni::fgXMLNSURIName, X("xmlns:NS1"), X("http://testclash.com"));
./tests/src/DOM/Normalizer/Normalizer.cpp:330:    docFirstElementChildChild->setAttributeNS(X("http://testattr5.com"), X("po:attr10"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:338:    docFirstElementChildChild = doc->createElementNS(X("http://www.uri1.com"),X("docEleChildChild6"));
./tests/src/DOM/Normalizer/Normalizer.cpp:340:    docFirstElementChildChild->setAttributeNS(XMLUni::fgXMLNSURIName, X("xmlns:uri1"), X("http://www.uri1.com"));
./tests/src/DOM/Normalizer/Normalizer.cpp:341:    docFirstElementChildChild->setAttributeNS(XMLUni::fgXMLNSURIName, X("xmlns:uri1b"), X("http://www.uri1.com"));
./tests/src/DOM/Normalizer/Normalizer.cpp:342:    docFirstElementChildChild->setAttributeNS(X("http://www.uri1.com"), X("uri1:attr1"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:343:    docFirstElementChildChild->setAttributeNS(X("http://www.uri1.com"), X("uri1b:attr2"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:349:    DOMElement *docFirstElementChildChildChild = doc->createElementNS(X("http://www.uri1.com"),X("docEleChildChildChild"));
./tests/src/DOM/Normalizer/Normalizer.cpp:351:    docFirstElementChildChild->setAttributeNS(XMLUni::fgXMLNSURIName, X("xmlns:nearerThanPo"), X("http://www.test.com"));
./tests/src/DOM/Normalizer/Normalizer.cpp:352:    docFirstElementChildChildChild->setAttributeNS(X("http://testattr.com"), X("attr2"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:353:    docFirstElementChildChildChild->setAttributeNS(X("http://www.test.com"), X("attr1"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:363:    DOMElement *noNamespaceChild = doc->createElementNS(X("http://testclash.com"),X("testing1.1Stuff"));
./tests/src/DOM/Normalizer/Normalizer.cpp:368:    noNamespaceChild = doc->createElementNS(X("http://testclash.com"),X("NS1:testing1.1Stuff"));
./tests/src/DOM/Normalizer/Normalizer.cpp:371:    noNamespaceChild->setAttributeNS(X("http://www.someRandomUri.com"), X("attr"), X("value"));
./tests/src/DOM/Normalizer/Normalizer.cpp:393:    //    noNamespaceChild->setAttributeNS(X("http://www.someRandomUri.com"), X("xmlns"), X("value"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/DOM/TypeInfo/TypeInfo.cpp:311:    testAttr = testEle->getAttributeNodeNS(X("http://www.w3.org/2000/xmlns/"), X("prefix"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:314:    testAttr = testEle->getAttributeNodeNS(X("http://www.w3.org/2001/XMLSchema-instance"), X("noNamespaceSchemaLocation"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:611:    testAttr = testEle->getAttributeNodeNS(X("http://www.w3.org/1999/xhtml"), X("attr2"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:631:    testAttr = testEle->getAttributeNodeNS(X("http://www.secondSchema"), X("attr1"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:634:    testAttr = testEle->getAttributeNodeNS(X("http://www.secondSchema"), X("attr2"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:637:    testAttr = testEle->getAttributeNodeNS(X("http://www.secondSchema"), X("attr3"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:640:    testAttr = testEle->getAttributeNodeNS(X("http://www.secondSchema"), X("attr4"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:658:    testAttr = testEle->getAttributeNodeNS(X("http://www.secondSchema"), X("attr5"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:665:    testAttr = testEle->getAttributeNodeNS(X("http://www.secondSchema"), X("attr5"));
./tests/src/DOM/TypeInfo/TypeInfo.cpp:745:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("CDATA"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:748:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("ENUMERATION"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:751:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("ID"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:754:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("IDREF"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:757:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("IDREFS"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:760:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("NMTOKEN"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:763:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("NMTOKEN"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:766:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("NMTOKEN"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:769:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("NMTOKENS"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:772:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("ENTITY"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:775:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("ENTITIES"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:778:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("NOTATION"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:781:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("CDATA"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/TypeInfo/TypeInfo.cpp:784:    DOMTYPEINFOTEST(testAttr->getSchemaTypeInfo(), X("CDATA"), X("http://www.w3.org/TR/REC-xml"), __LINE__);
./tests/src/DOM/RangeTest/RangeTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:755:        DOMDocumentType* dt = impl->createDocumentType(X("foo:docName"), X("pubId"), X("http://sysId"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:764:        TASSERT(!XMLString::compareString(dt->getSystemId(), X("http://sysId")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:779:        dt = impl->createDocumentType(X("docName"), X("pubId"), X("http://sysId"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:788:        TASSERT(!XMLString::compareString(dt->getSystemId(), X("http://sysId")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:793:        EXCEPTION_TEST(impl->createDocumentType(X("<docName"), X("pubId"), X("http://sysId")), DOMException::INVALID_CHARACTER_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:795:        EXCEPTION_TEST(impl->createDocumentType(X(":docName"), X("pubId"), X("http://sysId")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:797:        EXCEPTION_TEST(impl->createDocumentType(X("docName:"), X("pubId"), X("http://sysId")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:799:        EXCEPTION_TEST(impl->createDocumentType(X("doc::Name"), X("pubId"), X("http://sysId")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:801:        EXCEPTION_TEST(impl->createDocumentType(X("doc:N:ame"), X("pubId"), X("http://sysId")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:831:        DOMDocumentType* dt = impl->createDocumentType(X("foo:docName"), X("pubId"), X("http://sysId"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:833:        DOMDocument* doc = impl->createDocument(X("http://document.namespace"), X("foo:docName"), dt);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:852:        TASSERT(!XMLString::compareString(el->getNamespaceURI(), X("http://document.namespace")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:906:        DOMDocumentType* dt = impl->createDocumentType(X("foo:docName"), X("pubId"), X("http://sysId"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:909:        DOMDocument* doc = impl->createDocument(X("http://document.namespace"), X("foo:docName"), dt);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:915:        DOMElement* ela = doc->createElementNS(X("http://nsa"), X("a:ela"));  // prefix and URI
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:918:        TASSERT(!XMLString::compareString(ela->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:923:        DOMElement* elb = doc->createElementNS(X("http://nsb"), X("elb"));    //  URI, no prefix.
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:926:        TASSERT(!XMLString::compareString(elb->getNamespaceURI(), X("http://nsb")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:944:        EXCEPTION_TEST(doc->createElementNS(X("http://nsa"), X("<a")), DOMException::INVALID_CHARACTER_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:946:        EXCEPTION_TEST(doc->createElementNS(X("http://nsa"), X(":a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:948:        EXCEPTION_TEST(doc->createElementNS(X("http://nsa"), X("a:")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:950:        EXCEPTION_TEST(doc->createElementNS(X("http://nsa"), X("a::a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:952:        EXCEPTION_TEST(doc->createElementNS(X("http://nsa"), X("a:a:a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:954:        // xml:a must have namespaceURI == "http://www.w3.org/XML/1998/namespace"
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:955:        TASSERT(!XMLString::compareString(doc->createElementNS(X("http://www.w3.org/XML/1998/namespace"), X("xml:a"))->getNamespaceURI(), X("http://www.w3.org/XML/1998/namespace")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:956:        EXCEPTION_TEST(doc->createElementNS(X("http://nsa"), X("xml:a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:961:        TASSERT(!XMLString::compareString(doc->createElementNS(X("http://nsa"), X("xmlns"))->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:963:        TASSERT(!XMLString::compareString(doc->createElementNS(X("http://www.w3.org/XML/1998/namespace"), X("xmlns"))->getNamespaceURI(), X("http://www.w3.org/XML/1998/namespace")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:969:        TASSERT(!XMLString::compareString(doc->createElementNS(X("http://nsa"), X("xmlns:a"))->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:970:        TASSERT(!XMLString::compareString(doc->createElementNS(X("http://www.w3.org/XML/1998/namespace"), X("xmlns:a"))->getNamespaceURI(), X("http://www.w3.org/XML/1998/namespace")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:975:        TASSERT(!XMLString::compareString(doc->createElementNS(X("http://nsa"), X("foo:a"))->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:980:        DOMElement* elem = doc->createElementNS(X("http://nsa"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:983:        TASSERT(!XMLString::compareString(elem->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:988:        elem = doc->createElementNS(X("http://nsa"), X("a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:992:        TASSERT(!XMLString::compareString(elem->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:998:        elem = doc->createElementNS(X("http://www.w3.org/XML/1998/namespace"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1000:        elem = doc->createElementNS(X("http://nsa"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1035:        DOMDocumentType* dt = impl->createDocumentType(X("foo:docName"), X("pubId"), X("http://sysId"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1037:        DOMDocument* doc = impl->createDocument(X("http://document.namespace"), X("foo:docName"), dt);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1046:        DOMAttr* attra = doc->createAttributeNS(X("http://nsa"), X("a:attra"));       // prefix and URI
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1048:        TASSERT(!XMLString::compareString(attra->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1056:        DOMAttr* attrb = doc->createAttributeNS(X("http://nsb"), X("attrb"));         //  URI, no prefix.
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1058:        TASSERT(!XMLString::compareString(attrb->getNamespaceURI(), X("http://nsb")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1075:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X("<a")), DOMException::INVALID_CHARACTER_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1077:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X(":a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1079:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X("a:")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1081:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X("a::a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1083:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X("a:a:a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1085:        // xml:a must have namespaceURI == "http://www.w3.org/XML/1998/namespace"
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1086:        TASSERT(!XMLString::compareString(doc->createAttributeNS(X("http://www.w3.org/XML/1998/namespace"), X("xml:a"))->getNamespaceURI(), X("http://www.w3.org/XML/1998/namespace")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1087:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X("xml:a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1091:        //unlike Element, xmlns must have namespaceURI == "http://www.w3.org/2000/xmlns/"
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1092:        TASSERT(!XMLString::compareString(doc->createAttributeNS(X("http://www.w3.org/2000/xmlns/"), X("xmlns"))->getNamespaceURI(), X("http://www.w3.org/2000/xmlns/")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1093:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X("xmlns")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1094:        EXCEPTION_TEST(doc->createAttributeNS(X("http://www.w3.org/XML/1998/namespace"), X("xmlns")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1098:        //unlike Element, xmlns:a must have namespaceURI == "http://www.w3.org/2000/xmlns/"
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1099:        TASSERT(!XMLString::compareString(doc->createAttributeNS(X("http://www.w3.org/2000/xmlns/"), X("xmlns:a"))->getNamespaceURI(), X("http://www.w3.org/2000/xmlns/")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1100:        EXCEPTION_TEST(doc->createAttributeNS(X("http://nsa"), X("xmlns:a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1101:        EXCEPTION_TEST(doc->createAttributeNS(X("http://www.w3.org/XML/1998/namespace"), X("xmlns:a")), DOMException::NAMESPACE_ERR);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1106:        TASSERT(!XMLString::compareString(doc->createAttributeNS(X("http://nsa"), X("foo:a"))->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1111:        DOMAttr* attr = doc->createAttributeNS(X("http://nsa"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1115:        TASSERT(!XMLString::compareString(attr->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1120:        attr = doc->createAttributeNS(X("http://nsa"), X("a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1124:        TASSERT(!XMLString::compareString(attr->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1131:        attr = doc->createAttributeNS(X("http://www.w3.org/XML/1998/namespace"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1133:        attr = doc->createAttributeNS(X("http://nsa"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1136:        attr = doc->createAttributeNS(X("http://www.w3.org/2000/xmlns/"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1139:        attr = doc->createAttributeNS(X("http://nsa"), X("foo:a"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1142:        attr = doc->createAttributeNS(X("http://www.w3.org/2000/xmlns/"), X("xmlns"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1173:        DOMDocumentType* dt = impl->createDocumentType(X("foo:docName"), X("pubId"), X("http://sysId"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1175:        DOMDocument* doc = impl->createDocument(X("http://document.namespace"), X("foo:docName"), dt);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1183:        DOMElement* ela = doc->createElementNS(X("http://nsa"), X("a:ela"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1186:        DOMElement* elb = doc->createElementNS(X("http://nsb"), X("elb"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1192:        DOMElement* eld = doc->createElementNS(X("http://nsa"), X("d:ela"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1195:        DOMElement* ele = doc->createElementNS(X("http://nse"), X("elb"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1230:        nl = doc->getElementsByTagNameNS(X("http://nsa"), X("ela"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1238:        nl = doc->getElementsByTagNameNS(X("http://nsb"), X("elb"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1247:        nl = doc->getElementsByTagNameNS(X("http://nsa"), X("*"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1262:        nl = doc->getElementsByTagNameNS(X("http://nsa"), X("d:ela"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1301:        DOMDocumentType* dt = impl->createDocumentType(X("foo:docName"), X("pubId"), X("http://sysId"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1303:        DOMDocument* doc = impl->createDocument(X("http://document.namespace"), X("foo:docName"), dt);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1310:        DOMAttr* attra = doc->createAttributeNS(X("http://nsa"), X("a:attra"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1319:        TASSERT(!XMLString::compareString(attra->getNamespaceURI(), X("http://nsa")));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1334:        DOMAttr* attrb = doc->createAttributeNS(X("http://nsb"), X("attrb"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1345:        DOMAttr* attrd = doc->createAttributeNS(X("http://nsa"), X("d:attra"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1351:        DOMAttr* attre = doc->createAttributeNS(X("http://nse"), X("attrb"));
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1361:        TASSERT(nnm->getNamedItemNS(X("http://nsa"), X("attra")) == attrd);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1362:        TASSERT(nnm->getNamedItemNS(X("http://nsb"), X("attrb")) == attrb);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1364:        TASSERT(nnm->getNamedItemNS(X("http://nsa"), X("attrb")) == 0);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1366:        TASSERT(nnm->getNamedItemNS(X("http://nse"), X("attrb")) == attre);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1378:        TASSERT(rootEl->hasAttributeNS(X("http://nsa"), X("attra")) == true);
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:1379:        TASSERT(rootEl->hasAttributeNS(X("http://nsa"), X("wrong")) == false);
./tests/src/DOM/Traversal/Traversal.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/NetAccessorTest/NetAccessorTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/XSerializerTest/XSerializerTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/XSerializerTest/XSerializerHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./tests/src/EncodingTest/EncodingTest.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/PParse/PParseHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/PParse/PParse.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/XInclude/XInclude.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/MemParse/MemParseHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/MemParse/MemParse.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/StdInParse/StdInParseHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/StdInParse/StdInParse.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAXPrint/SAXPrint.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAXPrint/SAXPrintHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SEnumVal/SEnumVal.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SCMPrint/SCMPrint.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/DOMPrint/DOMPrintErrorHandler.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/DOMPrint/DOMPrint.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/DOMPrint/DOMPrintFilter.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/DOMPrint/DOMTreeErrorReporter.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAXCount/SAXCount.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAXCount/SAXCountHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/Redirect/RedirectHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/Redirect/Redirect.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/EnumVal/EnumVal.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/DOMCount/DOMCount.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/PSVIWriter/PSVIWriterHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/PSVIWriter/PSVIWriter.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAX2Print/SAX2PrintHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAX2Print/SAX2Print.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAX2Print/SAX2FilterHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAX2Count/SAX2CountHandlers.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/SAX2Count/SAX2Count.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0
./samples/src/CreateDOMDocument/CreateDOMDocument.cpp:9: *      http://www.apache.org/licenses/LICENSE-2.0

== encryption ==

== sql() ==
./src/xercesc/util/NetAccessors/BinHTTPInputStreamCommon.cpp:80:    TranscodeToStr query(urlSource.getQuery(), trans, fMemoryManager);

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./src/xercesc/validators/datatype/AbstractStringValidator.cpp:213:        // TODO
./src/xercesc/validators/schema/GeneralAttributeCheck.cpp:93:    // TODO - add remaining valdiators
./src/xercesc/dom/impl/DOMImplementationImpl.cpp:232:    // TODO: schemaType
./src/xercesc/dom/impl/DOMLSSerializerImpl.cpp:419:            //TODO: report error "missing target"
./src/xercesc/dom/impl/DOMTypeInfoImpl.cpp:122:    // TODO: need a pointer to the Grammar object
./src/xercesc/xinclude/XIncludeUtils.cpp:740:    /* TODO - look these up somehow? */
./src/xercesc/xinclude/XIncludeUtils.cpp:750:        /* TODO - investigate whether this is complete */
./src/xercesc/xinclude/XIncludeUtils.cpp:780:/* TODO - declared in this file for convenience, prob ought to be moved out to
./src/xercesc/framework/XMLFormatter.cpp:43://  gXXXRef
./src/xercesc/framework/XMLRecognizer.cpp:56://  gXXXPre
./src/xercesc/framework/XMLRecognizer.cpp:57://  gXXXPreLen
./src/xercesc/parsers/DOMLSParserImpl.cpp:206:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:210:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:260:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:264:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:301:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:305:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:309:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:334:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:338:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:448:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:453:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:482:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:487:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:492:        // TODO
./src/xercesc/parsers/DOMLSParserImpl.cpp:953:    // TODO whenever we add support for DOM Mutation Events:
./src/xercesc/util/NetAccessors/MacOSURLAccessCF/URLAccessCFBinInputStream.cpp:175:    // TODO
./src/xercesc/util/regx/RangeToken.cpp:75:    // TODO(dbertoni) This is a temporary hack until we can change the ABI.
./src/xercesc/util/regx/RangeToken.cpp:296:        // TODO(dbertoni) This is a temporary hack until we can change the ABI.
./src/xercesc/util/XMLURL.cpp:63://  gXXXString
./src/xercesc/util/PlatformUtils.cpp:702:	// *** TODO: additional platform support?
./src/xercesc/util/Janitor.c:139:	//	TODO: Add appropriate exception
./src/xercesc/util/FileManagers/WindowsFileMgr.cpp:273:        // TODO: find a better exception
./src/xercesc/util/XMLUri.cpp:387:    // therefore need NOT to go through various setXXX() methods
./tools/ICUData/ICUData.cpp:237:    //      <UXXXX>     \xXX
./tests/src/XSTSHarness/XSTSHarness.cpp:263:        // TODO: add option to generate the XML summarizing the result
./tests/src/DOM/DOMMemTest/DOMMemTest.cpp:134:    //                  document createXXX methods.
./samples/src/SAXPrint/SAXPrint.cpp:84:             "    -x=XXX      Use a particular encoding for output (LATIN1*).\n"
./samples/src/DOMPrint/DOMPrint.cpp:165:            "    -wenc=XXX   Use a particular encoding for output. Default is\n"
./samples/src/PSVIWriter/PSVIWriter.cpp:56:			"    -x=XXX      Use a particular encoding for output (UTF8*).\n"
./samples/src/SAX2Print/SAX2Print.cpp:78:             "    -x=XXX      Use a particular encoding for output (LATIN1*).\n"

== unsafe input mechanisms ==
./src/xercesc/util/MsgLoaders/MsgCatalog/MsgCatalogLoader.cpp:136:    char* catMessage = catgets( fCatalogHandle, fMsgSet, (int)msgToLoad, msgString);

