#!/bin/bash
#
# This will generate markdown for the specified USN and update the USN website
# git tree so that a new instance of the website is automatically deployed with
# the new USN content.
#
# Copyright 2018, Canonical, Ltd.
# Author: Tyler Hicks <tyhicks@canonical.com>
# License: GPLv3
set -e
export LANG=C

. "$HOME"/.ubuntu-cve-tracker.conf
template="$usn_tool"/templates/webpage-markdown.txt
database="$usn_db_copy"
action=
orig_branch=
branch=
usn_tool_repo="lp:usn-tool"
FILES_TO_CLEANUP=()

# $0: program name
usage() {
	echo "Usage: $0 <ACTION> [OPTION] <USN>..."
	echo "Update the USN website git tree with markdown for the specified <USN>."
	echo "Specify <USN> with only the number portion of the ID, such as 2165-1."
	echo ""
	echo "Valid actions:"
	echo "  -a              Add <USN> to the USN site"
	echo "  -r              Remove <USN> from the USN site"
	echo "  -u              Update <USN> information the USN site"
	echo ""
	echo "Valid options:"
	echo "  -d [DATABASE]   Use DATABASE as the USN db to consult for information on <USN>"
	echo "  -h              Print usage information"
}

perr() {
	echo "ERROR: $1" 1>&2
}

# $1: USN database
# $2: The USN number
is_usn_in_db() {
	if ! "$usn_tool"/usn.py --db "$1" --show "$2" >/dev/null 2>&1; then
		return 1
	fi

	return 0
}

# $1: git tree path
is_usn_tool_tree_updated() {
	local TREE_REV="$(cd "$1" && git log --format=%H -1)"
	local REMOTE_REV="$(git ls-remote  $(cd $1 && git remote get-url origin) HEAD | awk '{ print $1; }')"
	if ! [ "${TREE_REV}" == "${REMOTE_REV}" ] ; then
		return 1
	fi

	return 0
}

# $1: USN database
# $2: The USN number
get_srcnames_from_db() {
	"$usn_tool"/usn.py --db "$1" --show-sources "$2" | sort | tr '\n' ' '
}

# push to the API provided by the web team for https://ubuntu.com/security/notices
# $1: The action string (add, update, or remove)
# $2: USN database
# $3: The USN number
push_to_website_api() {
	local action="$1"
	local database="$2"
	local usn="$3"
	TMP_YAML=$(mktemp -u)
	TMP_PICKLE=$(mktemp -u)
	TMP_JSON=$(mktemp -u)

	FILES_TO_CLEANUP+=($TMP_YAML)
	FILES_TO_CLEANUP+=($TMP_PICKLE)
	FILES_TO_CLEANUP+=($TMP_JSON)

	# export the single USN from the pickle to a yaml file
	if ! "$usn_tool"/usn.py --db "$database" --export "$usn" >"$TMP_YAML" ; then
		perr "Failed to export $usn from pickle to yaml"
		exit 1
	fi

	# import the single USN from the yaml into a new pickle file
	if ! "$usn_tool"/usn.py --db "$TMP_PICKLE" --import < "$TMP_YAML" ; then
		perr "Failed to create temporary pickle from $usn yaml"
		exit 1
	fi

	# convert the single USN pickle to a single USN json file
	if ! "$UCT"/scripts/convert-pickle.py --input-file "$TMP_PICKLE" --output-file "$TMP_JSON" --prefix "USN-" ; then
		perr "Failed to convert $usn pickle to json"
		exit 1
	fi

	# post the single USN json file to the website API
	if ! "$UCT"/scripts/publish-usn-to-website-api.py --action "$action" --json "$TMP_JSON" --stop --no-upsert; then
		perr "Failed to publish $usn pickle to website API"
		exit 1
	fi

}

# $1: The action string (add, update, or remove)
# $2: USN database
# $3: The template to use (can be an empty string when using the remove action)
# $4: The USN number
# $5: Target path of the markdown file
handle_usn() {
	local action="$1"
	local database="$2"
	local template="$3"
	local usn="$4"
	local markdown="$5"
	local srcnames

	if [ "$action" = add ]; then
		if [ -f "$markdown" ]; then
			perr "markdown for USN-$usn already exists"
			exit 1
		elif ! is_usn_in_db "$database" "$usn"; then
			perr "Ensure that USN-$usn is in $database and try again"
			exit 1
		fi

		srcnames=$(get_srcnames_from_db  "$database" "$usn")
		"$usn_tool"/usn.py --db "$database" --template "$template" "$usn" > "$markdown"
		git add -N "$markdown"
		git commit -qsm "Add USN-$usn ${srcnames}" "$markdown"
	elif [ "$action" = remove ]; then
		if [ ! -f "$markdown" ]; then
			perr "markdown for USN-$usn doesn't exist"
			exit 1
		elif is_usn_in_db "$database" "$usn"; then
			perr "USN-$usn is still in $database"
			exit 1
		fi

		git rm -q "$markdown"
		git commit -qsm "Remove USN-$usn" "$markdown"
	elif [ "$action" = update ]; then
		if [ ! -f "$markdown" ]; then
			perr "markdown for USN-$usn doesn't exist"
			exit 1
		elif ! is_usn_in_db "$database" "$usn"; then
			perr "Ensure that USN-$usn is in $database and try again"
			exit 1
		fi

		srcnames=$(get_srcnames_from_db  "$database" "$usn")
		"$usn_tool"/usn.py --db "$database" --template "$template" "$usn" > "$markdown"
		git commit -qsm "Update USN-$usn $srcnames" "$markdown"
	fi
}

cleanup() {
	if [ -n "$orig_branch" ]; then
		git checkout -q "$orig_branch"
		orig_branch=
	fi

	if [ -n "$branch" ]; then
		git branch -qD "$branch"
		branch=
	fi

	for file in "${FILES_TO_CLEANUP[@]}"; do
		if test -f "$file"; then
			rm $file
		fi
	done
}

while getopts "ad:hru" opt ; do
	case "$opt" in
		a) action=add;;
		d) database="$(realpath "$OPTARG")";;
		h) usage; exit 0;;
		r) action=remove;;
		u) action=update;;
		?) usage 1>&2; exit 1;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$action" ]; then
	usage 1>&2
	exit 1
fi

if [ $# -lt 1 ]; then
	usage 1>&2
	exit 1
fi
usns="$@"

trap cleanup EXIT
if ! (cd "$usn_tool" && test -d .git) ; then
	perr "The directory ($usn_tool) is not a git tree"
	perr "Please clone from ${usn_tool_repo} and update $HOME/.ubuntu-cve-tracker.conf"
	exit 1
fi
if ! is_usn_tool_tree_updated "$usn_tool"; then
	perr "The usn-tool git tree ($usn_tool) is out of sync"
	exit 1
fi

if ! python3 -c "import macaroonbakery" >/dev/null 2>&1 ; then
	perr "Missing dependency for publishing to USN API"
	perr "Please make sure you have python3 and pip install macaroonbakery"
	exit 1
fi

cd "$usn_website"
git fetch -q origin
if [ -n "$(git status --porcelain)" ]; then
	perr "USN website git tree ($usn_website) is unclean:"
	git status -s 1>&2
	exit 1
fi

# https://git-blame.blogspot.com/2013/06/checking-current-branch-programatically.html
if ! orig_branch=$(git symbolic-ref --short -q HEAD); then
	orig_branch=
	perr "Unable to return to current checkout of USN website git tree ($usn_website)"
	perr "Save any work, checkout a regular branch such as master, and try again"
	exit 1
fi

# The cleanup function will delete $branch so we should only set the variable
# once we're certain the branch has been created
b="USN-publication"
git checkout -qb "$b" origin/master
branch="$b"

for usn in $usns; do
	markdown="$usn_website"/content/"$usn".md
	handle_usn "$action" "$database" "$template" "$usn" "$markdown"
	push_to_website_api "$action" "$database" "$usn"
done

git push -q origin "$branch":master
git fetch -q origin
# The cleanup function will handle restoring the git tree state 

echo "Success! Please monitor the website deployment status here:"
echo
echo "  https://jenkins.canonical.com/webteam/job/usn.ubuntu.com-production/"
echo
echo "Once the deployment is complete, verify the USN page(s):"
echo
for usn in $usns; do
	echo "  https://usn.ubuntu.com/$usn/"
done
