Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==
./src/fu-util.c:985:		devices = g_udev_client_query_by_subsystem (gudev_client,
./src/fu-provider-udev.c:267:		devices = g_udev_client_query_by_subsystem (priv->gudev_client,
./src/fu-pending.c:86:	rc = sqlite3_exec (priv->db, "SELECT * FROM pending LIMIT 1",
./src/fu-pending.c:101:		rc = sqlite3_exec (priv->db, statement, NULL, NULL, &error_msg);
./src/fu-pending.c:114:	rc = sqlite3_exec (priv->db,
./src/fu-pending.c:121:		sqlite3_exec (priv->db, statement, NULL, NULL, NULL);
./src/fu-pending.c:123:		sqlite3_exec (priv->db, statement, NULL, NULL, NULL);
./src/fu-pending.c:125:		sqlite3_exec (priv->db, statement, NULL, NULL, NULL);
./src/fu-pending.c:129:	rc = sqlite3_exec (priv->db,
./src/fu-pending.c:137:		sqlite3_exec (priv->db, statement, NULL, NULL, NULL);
./src/fu-pending.c:181:	rc = sqlite3_exec (priv->db, statement, NULL, NULL, &error_msg);
./src/fu-pending.c:223:	rc = sqlite3_exec (priv->db, statement, NULL, NULL, &error_msg);
./src/fu-pending.c:332:	rc = sqlite3_exec (priv->db,
./src/fu-pending.c:384:	rc = sqlite3_exec (priv->db,
./src/fu-pending.c:454:	rc = sqlite3_exec (priv->db, statement, NULL, NULL, &error_msg);
./src/fu-pending.c:501:	rc = sqlite3_exec (priv->db, statement, NULL, NULL, &error_msg);

== memory_management() ==
./src/fu-self-test.c:224:	pending = fu_pending_new ();
./src/fu-self-test.c:358:	pending = fu_pending_new ();
./src/fu-self-test.c:447:	keyring = fu_keyring_new ();
./src/fu-util.c:111:		item = g_new0 (FuUtilItem, 1);
./src/fu-util.c:140:	string = g_string_new ("");
./src/fu-util.c:758:	pending = fu_pending_new ();
./src/fu-util.c:1524:	priv = g_new0 (FuUtilPrivate, 1);
./src/fu-keyring.c:280:	sig_v1 = g_string_new ("");
./src/fu-keyring.c:463:fu_keyring_new (void)
./src/fu-provider-chug.c:500:		item = g_new0 (FuProviderChugItem, 1);
./src/fu-provider-chug.c:664:fu_provider_chug_new (void)
./src/fu-main.c:284:	kr = fu_keyring_new ();
./src/fu-main.c:418:	GString *str = g_string_new ("");
./src/fu-main.c:702:			item = g_new0 (FuDeviceItem, 1);
./src/fu-main.c:821:	kr = fu_keyring_new ();
./src/fu-main.c:1315:		helper = g_new0 (FuMainAuthHelper, 1);
./src/fu-main.c:1722:	item = g_new0 (FuDeviceItem, 1);
./src/fu-main.c:1835:	priv = g_new0 (FuMainPrivate, 1);
./src/fu-main.c:1839:	priv->pending = fu_pending_new ();
./src/fu-main.c:1876:	fu_main_add_provider (priv, fu_provider_chug_new ());
./src/fu-rom.c:161:	str = g_string_new ("");
./src/fu-rom.c:479:	hdr = g_new0 (FuRomPciHeader, 1);
./src/fu-rom.c:495:	memcpy (&hdr->reserved, &buffer[6], 18);
./src/fu-rom.c:665:	buffer = g_malloc (buffer_sz);
./src/fu-rom.c:727:				hdr = g_new0 (FuRomPciHeader, 1);
./src/fu-pending.c:554:fu_pending_new (void)
./src/fu-provider.c:129:	pending = fu_pending_new ();
./src/fu-provider.c:227:	pending = fu_pending_new ();
./src/fu-provider.c:282:	pending = fu_pending_new ();
./src/fu-provider.c:324:	pending = fu_pending_new ();
./src/fu-provider-usb.c:182:		helper = g_new0 (FuProviderUsbHelper, 1);
./libdfu/dfu-image.c:267:		memcpy (priv->name, name, sz);
./libdfu/dfu-image.c:290:	str = g_string_new ("");
./libdfu/dfu-image.c:370:		memcpy (priv->name, im->target_name, 255);
./libdfu/dfu-image.c:424:	buf = g_malloc0 (length_total + sizeof (DfuSeImagePrefix));
./libdfu/dfu-image.c:426:	memcpy (im->sig, "Target", 6);
./libdfu/dfu-image.c:430:		memcpy (im->target_name, priv->name, 255);
./libdfu/dfu-image.c:441:		memcpy (buf + offset, data, length);
./libdfu/dfu-target.c:153:	str = g_string_new ("");
./libdfu/dfu-target.c:724:	memcpy (buf + 1, &address, 4);
./libdfu/dfu-target.c:771:	memcpy (buf + 1, &address, 4);
./libdfu/dfu-target.c:869:	memcpy (buf + 1, &address, 4);
./libdfu/dfu-target.c:893:	buf = g_new0 (guint8, transfer_size);
./libdfu/dfu-target.c:1043:	buffer = g_malloc0 (total_size);
./libdfu/dfu-target.c:1048:		memcpy (buffer + offset, chunk_data, chunk_size);
./libdfu/dfu-sector.c:222:	str = g_string_new ("");
./libdfu/dfu-tool.c:126:		item = g_new0 (FuUtilItem, 1);
./libdfu/dfu-tool.c:155:	string = g_string_new ("");
./libdfu/dfu-tool.c:1255:			memcpy (buf, key + i*8, 8);
./libdfu/dfu-tool.c:2025:	g_autoptr(DfuToolPrivate) priv = g_new0 (DfuToolPrivate, 1);
./libdfu/dfu-firmware.c:478:	memcpy (buffer, data + pos, 2);
./libdfu/dfu-firmware.c:490:	memcpy (buffer, data + pos, 4);
./libdfu/dfu-firmware.c:534:	string = g_string_new ("");
./libdfu/dfu-firmware.c:710:	str = g_string_new ("");
./libdfu/dfu-firmware.c:839:	buf = g_malloc0 (sizeof (DfuSePrefix) + image_size_total);
./libdfu/dfu-firmware.c:843:	memcpy (prefix->sig, "DfuSe", 5);
./libdfu/dfu-firmware.c:854:		memcpy (buf + offset, data, length);
./libdfu/dfu-firmware.c:1237:		memcpy(mdbuf + idx, key, key_len);
./libdfu/dfu-firmware.c:1242:		memcpy(mdbuf + idx, value, value_len);
./libdfu/dfu-firmware.c:1272:	buf = g_malloc0 (length_bin + length_md + 0x10);
./libdfu/dfu-firmware.c:1273:	memcpy (buf + 0, data_bin, length_bin);
./libdfu/dfu-firmware.c:1276:	memcpy (buf + length_bin, data_md, length_md);
./libdfu/dfu-firmware.c:1285:	memcpy(ftr->sig, "UFD", 3);
./libdfu/dfu-firmware.c:1456:	str = g_string_new ("");
./libdfu/dfu-element.c:202:	str = g_string_new ("");
./libdfu/dfu-element.c:249:	buf = g_malloc0 (target_size);
./libdfu/dfu-element.c:251:	memcpy (buf, data, length);
./libdfu/dfu-element.c:341:	buf = g_malloc0 (length + sizeof (DfuSeElementPrefix));
./libdfu/dfu-element.c:346:	memcpy (buf + sizeof (DfuSeElementPrefix), data, length);
./libdfu/dfu-self-test.c:585:	str = g_string_new ("");
./libdfu/dfu-device.c:1520:	helper = g_new0 (DfuDeviceReplugHelper, 1);
./libdfu/dfu-device.c:2023:	str = g_string_new ("");
./libdfu/dfu-context.c:281:	item = g_new0 (DfuContextItem, 1);

== files() ==
./src/fu-self-test.c:134:	dir = g_dir_open (path, 0, NULL);
./src/fu-util.c:479:	fd = open (filename, O_RDONLY);
./src/fu-util.c:635:	fd = open (values[0], O_RDONLY);
./src/fu-util.c:1046:	fd = open (data_fn, O_RDONLY);
./src/fu-util.c:1055:	fd_sig = open (sig_fn, O_RDONLY);
./src/fu-keyring.c:168:	dir = g_dir_open (dirname, 0, error);
./src/fu-provider-dfu.c:148:	if (!dfu_device_open (device, DFU_DEVICE_OPEN_FLAG_NONE, NULL, &error)) {
./src/fu-provider-dfu.c:257:	if (!dfu_device_open (device, DFU_DEVICE_OPEN_FLAG_NONE,
./src/fu-provider-dfu.c:328:	if (!dfu_device_open (device, DFU_DEVICE_OPEN_FLAG_NONE,
./src/fu-provider-chug.c:140:fu_provider_chug_open (FuProviderChugItem *item, GError **error)
./src/fu-provider-chug.c:143:	if (!ch_device_open (item->usb_device, &error_local)) {
./src/fu-provider-chug.c:170:	if (!g_usb_device_open (item->usb_device, &error)) {
./src/fu-provider-chug.c:192:	if (!ch_device_open (item->usb_device, &error)) {
./src/fu-provider-chug.c:247:	if (!fu_provider_chug_open (item, error))
./src/fu-provider-chug.c:324:		if (!fu_provider_chug_open (item, error))
./src/fu-provider-chug.c:350:	if (!fu_provider_chug_open (item, error))
./src/fu-provider-chug.c:411:	if (!fu_provider_chug_open (item, error))
./src/fu-pending.c:74:	rc = sqlite3_open (filename, &priv->db);
./src/fu-provider-usb.c:88:	if (!g_usb_device_open (device, &error)) {
./libdfu/dfu-tool.c:831:	if (!dfu_device_open (device,
./libdfu/dfu-tool.c:979:	if (!dfu_device_open (device,
./libdfu/dfu-tool.c:1089:	if (!dfu_device_open (device,
./libdfu/dfu-tool.c:1153:	if (!dfu_device_open (device,
./libdfu/dfu-tool.c:1665:	if (!dfu_device_open (device,
./libdfu/dfu-tool.c:1808:	if (!dfu_device_open (device,
./libdfu/dfu-tool.c:1933:		if (!dfu_device_open (device,
./libdfu/dfu-tool.c:1995:	if (!dfu_device_open (device, DFU_DEVICE_OPEN_FLAG_NONE,
./libdfu/dfu-self-test.c:438:	ret = dfu_device_open (device, DFU_DEVICE_OPEN_FLAG_NONE, NULL, &error);
./libdfu/dfu-self-test.c:478:		ret = dfu_device_open (device2, DFU_DEVICE_OPEN_FLAG_NONE, NULL, &error);
./libdfu/dfu-self-test.c:511:	ret = dfu_device_open (device, DFU_DEVICE_OPEN_FLAG_NONE, NULL, &error);
./libdfu/dfu-device.c:1224:dfu_device_open (DfuDevice *device, DfuDeviceOpenFlags flags,
./libdfu/dfu-device.c:1245:	if (!g_usb_device_open (priv->dev, &error_local)) {
./libdfu/dfu-device.c:1422:		if (!dfu_device_open (device, DFU_DEVICE_OPEN_FLAG_NONE,

== logging() ==
./src/fu-debug.c:190:	g_debug ("Verbose debugging %s (on console %i)",
./src/fu-self-test.c:113:		g_assert_no_error (error);
./src/fu-self-test.c:202:	g_assert_no_error (error);
./src/fu-self-test.c:214:	g_assert_no_error (error);
./src/fu-self-test.c:219:	g_assert_no_error (error);
./src/fu-self-test.c:226:	g_assert_no_error (error);
./src/fu-self-test.c:239:	g_assert_no_error (error);
./src/fu-self-test.c:245:	g_assert_no_error (error);
./src/fu-self-test.c:255:	g_assert_no_error (error);
./src/fu-self-test.c:262:	g_assert_no_error (error);
./src/fu-self-test.c:267:	g_assert_error (error, FWUPD_ERROR, FWUPD_ERROR_NOTHING_TO_DO);
./src/fu-self-test.c:271:	g_clear_error (&error);
./src/fu-self-test.c:307:	g_assert_no_error (error);
./src/fu-self-test.c:327:	g_assert_no_error (error);
./src/fu-self-test.c:332:	g_assert_no_error (error);
./src/fu-self-test.c:376:	g_assert_no_error (error);
./src/fu-self-test.c:387:	g_assert_no_error (error);
./src/fu-self-test.c:389:	ret = fu_pending_set_error_msg (pending, device, "word", &error);
./src/fu-self-test.c:390:	g_assert_no_error (error);
./src/fu-self-test.c:396:	g_assert_no_error (error);
./src/fu-self-test.c:409:	g_assert_error (error, FWUPD_ERROR, FWUPD_ERROR_NOT_FOUND);
./src/fu-self-test.c:411:	g_clear_error (&error);
./src/fu-self-test.c:417:	g_assert_no_error (error);
./src/fu-self-test.c:423:	g_assert_error (error, FWUPD_ERROR, FWUPD_ERROR_NOT_FOUND);
./src/fu-self-test.c:425:	g_clear_error (&error);
./src/fu-self-test.c:450:	g_assert_no_error (error);
./src/fu-self-test.c:456:	g_assert_no_error (error);
./src/fu-self-test.c:462:	g_assert_error (error, FWUPD_ERROR, FWUPD_ERROR_SIGNATURE_INVALID);
./src/fu-self-test.c:464:	g_clear_error (&error);
./src/fu-util.c:277:		g_propagate_error (error, priv->error);
./src/fu-util.c:315:		g_dbus_error_strip_remote_error (priv->error);
./src/fu-util.c:316:		g_propagate_error (error, priv->error);
./src/fu-util.c:481:		g_set_error (error,
./src/fu-util.c:515:		g_dbus_error_strip_remote_error (priv->error);
./src/fu-util.c:516:		g_propagate_error (error, priv->error);
./src/fu-util.c:519:	if (g_dbus_message_to_gerror (priv->message, error)) {
./src/fu-util.c:520:		g_dbus_error_strip_remote_error (*error);
./src/fu-util.c:544:		g_propagate_error (error, error_local);
./src/fu-util.c:637:		g_set_error (error,
./src/fu-util.c:669:		g_dbus_error_strip_remote_error (*error);
./src/fu-util.c:672:	if (g_dbus_message_to_gerror (message, error)) {
./src/fu-util.c:673:		g_dbus_error_strip_remote_error (*error);
./src/fu-util.c:729:		g_debug ("No %s, exiting", FU_OFFLINE_TRIGGER_FILENAME);
./src/fu-util.c:733:		g_debug ("Another framework set up the trigger, exiting");
./src/fu-util.c:848:		g_dbus_error_strip_remote_error (priv->error);
./src/fu-util.c:849:		g_propagate_error (error, priv->error);
./src/fu-util.c:1048:		g_set_error (error,
./src/fu-util.c:1057:		g_set_error (error,
./src/fu-util.c:1092:		g_dbus_error_strip_remote_error (priv->error);
./src/fu-util.c:1093:		g_propagate_error (error, priv->error);
./src/fu-util.c:1096:	if (g_dbus_message_to_gerror (priv->message, error)) {
./src/fu-util.c:1097:		g_dbus_error_strip_remote_error (*error);
./src/fu-util.c:1136:	g_debug ("downloading %s to %s:", uri, fn);
./src/fu-util.c:1138:	status_code = soup_session_send_message (session, msg);
./src/fu-util.c:1140:		g_set_error (error,
./src/fu-util.c:1154:			g_set_error (error,
./src/fu-util.c:1168:		g_set_error (error,
./src/fu-util.c:1195:		g_prefix_error (error, "Failed to load %s: ", config_fn);
./src/fu-util.c:1260:		g_dbus_error_strip_remote_error (priv->error);
./src/fu-util.c:1261:		g_propagate_error (error, priv->error);
./src/fu-util.c:1284:		g_dbus_error_strip_remote_error (priv->error);
./src/fu-util.c:1285:		g_propagate_error (error, priv->error);
./src/fu-keyring.c:63:		g_set_error (error,
./src/fu-keyring.c:67:			     gpgme_strerror (rc));
./src/fu-keyring.c:74:		g_set_error (error,
./src/fu-keyring.c:78:			     gpgme_strerror (rc));
./src/fu-keyring.c:85:		g_set_error (error,
./src/fu-keyring.c:89:			     gpgme_strerror (rc));
./src/fu-keyring.c:119:	g_debug ("Adding public key %s", filename);
./src/fu-keyring.c:123:		g_set_error (error,
./src/fu-keyring.c:127:			     filename, gpgme_strerror (rc));
./src/fu-keyring.c:133:		g_set_error (error,
./src/fu-keyring.c:137:			     filename, gpgme_strerror (rc));
./src/fu-keyring.c:144:		g_debug ("importing key %s [%i] %s",
./src/fu-keyring.c:145:			 s->fpr, s->status, gpgme_strerror (s->result));
./src/fu-keyring.c:199:		g_set_error (error,
./src/fu-keyring.c:206:		g_set_error (error,
./src/fu-keyring.c:213:		g_set_error (error,
./src/fu-keyring.c:220:		g_set_error (error,
./src/fu-keyring.c:227:		g_set_error (error,
./src/fu-keyring.c:271:		g_set_error (error,
./src/fu-keyring.c:275:			     filename, gpgme_strerror (rc));
./src/fu-keyring.c:291:		g_set_error (error,
./src/fu-keyring.c:295:			     signature, gpgme_strerror (rc));
./src/fu-keyring.c:303:		g_set_error (error,
./src/fu-keyring.c:307:			     filename, gpgme_strerror (rc));
./src/fu-keyring.c:368:		g_set_error (error,
./src/fu-keyring.c:372:			     gpgme_strerror (rc));
./src/fu-keyring.c:380:		g_set_error (error,
./src/fu-keyring.c:384:			      gpgme_strerror (rc));
./src/fu-keyring.c:392:		g_set_error (error,
./src/fu-keyring.c:396:			     gpgme_strerror (rc));
./src/fu-provider-dfu.c:71:		g_debug ("Ignoring DFU device not in runtime: %s", platform_id);
./src/fu-provider-dfu.c:93:	g_debug ("using %s for %s", guid, vid_pid);
./src/fu-provider-dfu.c:158:		g_debug ("Failed to close %s: %s", platform_id, error->message);
./src/fu-provider-dfu.c:248:		g_set_error (error,
./src/fu-provider-dfu.c:259:		g_set_error (error,
./src/fu-provider-dfu.c:319:		g_set_error (error,
./src/fu-provider-dfu.c:330:		g_set_error (error,
./src/fu-provider-dfu.c:341:	g_debug ("uploading from device->host");
./src/fu-provider-chug.c:144:		g_set_error (error,
./src/fu-provider-chug.c:171:		g_debug ("Failed to open, polling: %s", error->message);
./src/fu-provider-chug.c:183:			g_debug ("obtained fwver using extension '%s'", tmp);
./src/fu-provider-chug.c:193:		g_debug ("Failed to claim interface, polling: %s", error->message);
./src/fu-provider-chug.c:208:	g_debug ("obtained fwver using API '%s'", version);
./src/fu-provider-chug.c:213:	g_clear_error (&error);
./src/fu-provider-chug.c:215:		g_debug ("Failed to close: %s", error->message);
./src/fu-provider-chug.c:238:		g_set_error (error,
./src/fu-provider-chug.c:251:	g_debug ("ColorHug: Verifying firmware");
./src/fu-provider-chug.c:258:		g_set_error (error,
./src/fu-provider-chug.c:273:		g_debug ("Failed to close: %s", error_local->message);
./src/fu-provider-chug.c:297:		g_set_error (error,
./src/fu-provider-chug.c:313:		g_set_error (error,
./src/fu-provider-chug.c:323:		g_debug ("ColorHug: Switching to bootloader mode");
./src/fu-provider-chug.c:331:			g_set_error (error,
./src/fu-provider-chug.c:344:		g_debug ("ColorHug: Waiting for bootloader");
./src/fu-provider-chug.c:354:	g_debug ("ColorHug: Writing firmware");
./src/fu-provider-chug.c:362:		g_set_error (error,
./src/fu-provider-chug.c:372:	g_debug ("ColorHug: Veifying firmware");
./src/fu-provider-chug.c:380:		g_set_error (error,
./src/fu-provider-chug.c:390:	g_debug ("ColorHug: Booting new firmware");
./src/fu-provider-chug.c:396:		g_set_error (error,
./src/fu-provider-chug.c:415:	g_debug ("ColorHug: Setting flash success");
./src/fu-provider-chug.c:420:		g_set_error (error,
./src/fu-provider-chug.c:431:		g_set_error (error,
./src/fu-provider-chug.c:441:	g_debug ("ColorHug: Getting new firmware version");
./src/fu-provider-chug.c:446:		g_debug ("ColorHug: DONE!");
./src/fu-provider-chug.c:459:	g_debug ("attempt to open %s",
./src/fu-provider-uefi.c:81:		g_set_error (error,
./src/fu-provider-uefi.c:110:		g_set_error (error,
./src/fu-provider-uefi.c:183:		g_set_error (error,
./src/fu-provider-uefi.c:233:	g_debug ("Performing UEFI capsule update");
./src/fu-provider-uefi.c:240:		g_set_error (error,
./src/fu-provider-uefi.c:244:			     strerror (rc));
./src/fu-main.c:146:	g_debug ("Emitting PropertyChanged('Status'='%s')",
./src/fu-main.c:259:		g_debug ("firmware archive contained no GPG signature");
./src/fu-main.c:276:		g_set_error (error,
./src/fu-main.c:294:	g_debug ("marking payload as trusted");
./src/fu-main.c:340:		g_set_error (error,
./src/fu-main.c:377:		g_dbus_method_invocation_return_error (helper->invocation,
./src/fu-main.c:388:		g_dbus_method_invocation_return_error (helper->invocation,
./src/fu-main.c:398:		g_dbus_method_invocation_return_gerror (helper->invocation, error);
./src/fu-main.c:525:			g_set_error (error,
./src/fu-main.c:541:			g_set_error (error,
./src/fu-main.c:582:		g_set_error (error,
./src/fu-main.c:593:		g_set_error (error,
./src/fu-main.c:602:		g_set_error (error,
./src/fu-main.c:610:		g_set_error (error,
./src/fu-main.c:671:			g_set_error (error,
./src/fu-main.c:697:				g_set_error (error,
./src/fu-main.c:796:		g_debug ("using GZip decompressor for data");
./src/fu-main.c:803:		g_debug ("using no decompressor for data");
./src/fu-main.c:806:		g_set_error (error,
./src/fu-main.c:869:		g_debug ("no devices in store");
./src/fu-main.c:871:		g_debug ("devices now in store:");
./src/fu-main.c:874:			g_debug ("%i\t%s\t%s", i + 1,
./src/fu-main.c:933:			g_debug ("%s has no firmware update metadata",
./src/fu-main.c:940:			g_debug ("%s has no firmware updates",
./src/fu-main.c:1024:		g_debug ("Called %s()", method_name);
./src/fu-main.c:1030:				g_prefix_error (&error, "No detected devices: ");
./src/fu-main.c:1032:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1044:		g_debug ("Called %s()", method_name);
./src/fu-main.c:1047:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1055:				g_prefix_error (&error, "No devices can be updated: ");
./src/fu-main.c:1057:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1072:		g_debug ("Called %s(%s)", method_name, id);
./src/fu-main.c:1077:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1083:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1099:		g_debug ("Called %s(%s)", method_name, id);
./src/fu-main.c:1104:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1110:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1128:		message = g_dbus_method_invocation_get_message (invocation);
./src/fu-main.c:1131:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1139:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1144:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1148:			g_prefix_error (&error, "failed to update metadata: ");
./src/fu-main.c:1149:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1169:		g_debug ("Called %s(%s)", method_name, id);
./src/fu-main.c:1172:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1183:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1192:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1203:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1214:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1223:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1257:		g_debug ("Called %s(%s,%i)", method_name, id, fd_handle);
./src/fu-main.c:1261:				g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1273:			g_debug ("got option %s", prop_key);
./src/fu-main.c:1287:		message = g_dbus_method_invocation_get_message (invocation);
./src/fu-main.c:1290:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1298:			g_dbus_method_invocation_return_gerror (invocation,
./src/fu-main.c:1309:			g_dbus_method_invocation_return_gerror (invocation,
./src/fu-main.c:1325:			g_dbus_method_invocation_return_gerror (helper->invocation,
./src/fu-main.c:1335:				g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1379:		g_debug ("Called %s(%i)", method_name, fd_handle);
./src/fu-main.c:1382:		message = g_dbus_method_invocation_get_message (invocation);
./src/fu-main.c:1385:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1393:			g_dbus_method_invocation_return_gerror (invocation,
./src/fu-main.c:1404:			g_dbus_method_invocation_return_gerror (invocation,
./src/fu-main.c:1412:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1419:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1453:			g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1463:			g_dbus_method_invocation_return_gerror (invocation, error);
./src/fu-main.c:1536:	g_dbus_method_invocation_return_error (invocation,
./src/fu-main.c:1561:	g_set_error (error,
./src/fu-main.c:1651:	g_debug ("FuMain: acquired name: %s", name);
./src/fu-main.c:1663:	g_debug ("FuMain: lost name: %s", name);
./src/fu-main.c:1714:		g_debug ("already added %s by %s, ignoring same device from %s",
./src/fu-main.c:1742:		g_debug ("no device to remove %s", fu_device_get_id (device));
./src/fu-main.c:1749:		g_debug ("ignoring duplicate removal from %s",
./src/fu-main.c:1860:	g_debug ("Loading fallback values from %s", config_file);
./src/fu-provider-udev.c:126:	g_debug ("adding udev device: %s", g_udev_device_get_sysfs_path (device));
./src/fu-provider-udev.c:132:		g_debug ("ignoring duplicate %s", id);
./src/fu-provider-udev.c:177:			g_debug ("Fixing GUID %s->%s", guid, guid_new);
./src/fu-provider-rpi.c:120:		g_set_error (error,
./src/fu-provider-rpi.c:153:		g_set_error (error,
./src/fu-provider-rpi.c:221:		g_set_error (error,
./src/fu-provider-rpi.c:236:			g_set_error (error,
./src/fu-provider-rpi.c:251:			g_set_error (error,
./src/fu-rom.c:194:	g_debug ("    ISBN header: %s", hdr_str);
./src/fu-rom.c:204:		g_debug ("     ISBN segment @%02x: %s", off, segment_str);
./src/fu-rom.c:219:			g_debug ("%s(%i)", tmp, h.data_len);
./src/fu-rom.c:224:			g_debug ("%s(%i)", tmp, h.data_len);
./src/fu-rom.c:277:	g_debug ("PCI Header");
./src/fu-rom.c:278:	g_debug (" RomOffset: 0x%04x", hdr->rom_offset);
./src/fu-rom.c:279:	g_debug (" RomSize:   0x%04x", hdr->rom_len);
./src/fu-rom.c:280:	g_debug (" EntryPnt:  0x%06x", hdr->entry_point);
./src/fu-rom.c:282:	g_debug (" Reserved:  %s", reserved_str);
./src/fu-rom.c:283:	g_debug (" CpiPtr:    0x%04x", hdr->cpi_ptr);
./src/fu-rom.c:287:	g_debug ("  PCI Data");
./src/fu-rom.c:288:	g_debug ("   VendorID:  0x%04x", hdr->vendor_id);
./src/fu-rom.c:289:	g_debug ("   DeviceID:  0x%04x", hdr->device_id);
./src/fu-rom.c:290:	g_debug ("   DevList:   0x%04x", hdr->device_list_ptr);
./src/fu-rom.c:291:	g_debug ("   DataLen:   0x%04x", hdr->data_len);
./src/fu-rom.c:292:	g_debug ("   DataRev:   0x%04x", hdr->data_rev);
./src/fu-rom.c:295:		g_debug ("   ImageLen:  0x%04x [%s]", hdr->image_len, data_str);
./src/fu-rom.c:298:		g_debug ("   ImageLen:  0x%04x [%s...]", hdr->image_len, data_str);
./src/fu-rom.c:300:	g_debug ("   RevLevel:  0x%04x", hdr->revision_level);
./src/fu-rom.c:301:	g_debug ("   CodeType:  0x%02x [%s]", hdr->code_type,
./src/fu-rom.c:303:	g_debug ("   LastImg:   0x%02x [%s]", hdr->last_image,
./src/fu-rom.c:305:	g_debug ("   MaxRunLen: 0x%04x", hdr->max_runtime_len);
./src/fu-rom.c:306:	g_debug ("   ConfigHdr: 0x%04x", hdr->config_header_ptr);
./src/fu-rom.c:307:	g_debug ("   ClpPtr:    0x%04x", hdr->dmtf_clp_ptr);
./src/fu-rom.c:321:			g_debug ("   ChkSum:    0x%02x [valid]",
./src/fu-rom.c:324:			g_debug ("   ChkSum:    0x%02x [failed, got 0x%02x]",
./src/fu-rom.c:329:		g_debug ("   ChkSum:    0x?? [unknown]");
./src/fu-rom.c:347:		g_debug ("dumping ROM #%i at 0x%04x [0x%02x] to %s",
./src/fu-rom.c:373:		g_debug ("no serial numbers likely");
./src/fu-rom.c:379:		g_debug ("looking for PPID at 0x%04x", hdr->rom_offset);
./src/fu-rom.c:385:			g_debug ("cleared %i chars @ 0x%04lx", len, tmp - &hdr->rom_data[hdr->data_len]);
./src/fu-rom.c:406:		g_debug ("No PCI DATA @ 0x%04x", hdr->rom_offset);
./src/fu-rom.c:410:		g_debug ("Invalid PCI DATA @ 0x%04x", hdr->rom_offset);
./src/fu-rom.c:416:		g_debug ("No available PCI DATA @ 0x%04x : 0x%04x > 0x%04x",
./src/fu-rom.c:427:			g_debug ("-- using NVIDIA DATA quirk");
./src/fu-rom.c:429:			g_debug ("Not PCI DATA: %02x%02x%02x%02x [%c%c%c%c]",
./src/fu-rom.c:469:			g_debug ("-- using NVIDIA ROM quirk");
./src/fu-rom.c:473:			g_debug ("Not PCI ROM %s", sig_str);
./src/fu-rom.c:484:		g_debug ("fixing up last image size");
./src/fu-rom.c:499:	g_debug ("looking for PCI DATA @ 0x%04x", hdr->cpi_ptr);
./src/fu-rom.c:671:		g_set_error (error,
./src/fu-rom.c:688:		g_debug ("ROM returned 0x%04x bytes, adding 0x%04x...",
./src/fu-rom.c:703:	g_debug ("ROM buffer filled %" G_GSSIZE_FORMAT "kb/%" G_GSSIZE_FORMAT "kb",
./src/fu-rom.c:713:		g_debug ("looking for PCI ROM @ 0x%04x", hdr_sz + jump);
./src/fu-rom.c:726:				g_debug ("found junk data, adding fake");
./src/fu-rom.c:738:				g_debug ("ignoring padding");
./src/fu-rom.c:761:		g_set_error (error,
./src/fu-rom.c:828:	g_debug ("using %s for %s", priv->guid, id);
./src/fu-pending.c:73:	g_debug ("FuPending: trying to open database '%s'", filename);
./src/fu-pending.c:76:		g_set_error (error,
./src/fu-pending.c:80:			     filename, sqlite3_errmsg (priv->db));
./src/fu-pending.c:89:		g_debug ("FuPending: creating table to repair: %s", error_msg);
./src/fu-pending.c:103:			g_set_error (error,
./src/fu-pending.c:118:		g_debug ("FuPending: altering table to repair: %s", error_msg);
./src/fu-pending.c:133:		g_debug ("FuPending: altering table to repair: %s", error_msg);
./src/fu-pending.c:163:	g_debug ("FuPending: add device %s", fu_device_get_id (device));
./src/fu-pending.c:183:		g_set_error (error,
./src/fu-pending.c:217:	g_debug ("FuPending: remove device %s", fu_device_get_id (device));
./src/fu-pending.c:225:		g_set_error (error,
./src/fu-pending.c:256:	g_debug ("FuPending: got sql result %s", argv[0]);
./src/fu-pending.c:327:	g_debug ("FuPending: get device");
./src/fu-pending.c:338:		g_set_error (error,
./src/fu-pending.c:381:	g_debug ("FuPending: get devices");
./src/fu-pending.c:390:		g_set_error (error,
./src/fu-pending.c:446:	g_debug ("FuPending: set state of %s to %s",
./src/fu-pending.c:456:		g_set_error (error,
./src/fu-pending.c:474:fu_pending_set_error_msg (FuPending *pending,
./src/fu-pending.c:493:	g_debug ("FuPending: add comment to %s: %s",
./src/fu-pending.c:503:		g_set_error (error,
./src/fu-provider.c:64:		g_set_error (error,
./src/fu-provider.c:88:		g_set_error (error,
./src/fu-provider.c:93:			     "/var/lib", strerror (errno));
./src/fu-provider.c:132:		g_set_error (error,
./src/fu-provider.c:162:	g_debug ("schedule %s to be installed to %s on next boot",
./src/fu-provider.c:232:			fu_pending_set_error_msg (pending, device,
./src/fu-provider.c:235:		g_propagate_error (error, error_update);
./src/fu-provider.c:253:				g_set_error (error,
./src/fu-provider.c:287:		g_set_error (error,
./src/fu-provider.c:329:		g_set_error (error,
./src/fu-provider.c:341:		g_set_error (error,
./src/fu-provider.c:374:	g_debug ("emit added from %s: %s",
./src/fu-provider.c:389:	g_debug ("emit removed from %s: %s",
./src/fu-provider-usb.c:83:		g_debug ("ignoring duplicate %s", platform_id);
./src/fu-provider-usb.c:89:		g_debug ("Failed to open: %s", error->message);
./src/fu-provider-usb.c:105:		g_debug ("no product string descriptor");
./src/fu-provider-usb.c:141:		g_debug ("Failed to close: %s", error->message);
./src/fu-provider-usb.c:181:		g_debug ("waiting a small time for other providers");
./libdfu/dfu-image.c:347:		g_set_error (error,
./libdfu/dfu-target.c:213:		g_set_error (error,
./libdfu/dfu-target.c:223:		g_set_error (error,
./libdfu/dfu-target.c:234:		g_set_error (error,
./libdfu/dfu-target.c:257:		g_set_error (error,
./libdfu/dfu-target.c:294:		g_set_error (error,
./libdfu/dfu-target.c:346:		g_debug ("RAM descripton, so parsing");
./libdfu/dfu-target.c:366:	g_debug ("DfuSe nice alt-name: %s", g_strchomp (zones[0] + 1));
./libdfu/dfu-target.c:400:	g_debug ("%s", str_debug);
./libdfu/dfu-target.c:463:dfu_target_status_to_error_msg (DfuStatus status)
./libdfu/dfu-target.c:523:			g_set_error (error,
./libdfu/dfu-target.c:530:			g_set_error (error,
./libdfu/dfu-target.c:542:			     dfu_target_status_to_error_msg (status));
./libdfu/dfu-target.c:574:			g_set_error (error,
./libdfu/dfu-target.c:638:		g_debug ("no UM0424 sector descripton in %s", priv->alt_name);
./libdfu/dfu-target.c:672:		g_set_error (error,
./libdfu/dfu-target.c:908:		g_set_error (error,
./libdfu/dfu-target.c:967:				g_set_error (error,
./libdfu/dfu-target.c:975:				g_set_error (error,
./libdfu/dfu-target.c:985:				g_debug ("setting DfuSe address to 0x%04x", (guint) offset);
./libdfu/dfu-target.c:1009:		g_debug ("got #%04x chunk of size %" G_GSIZE_FORMAT,
./libdfu/dfu-target.c:1031:			g_set_error (error,
./libdfu/dfu-target.c:1128:		g_debug ("starting upload from 0x%08x (0x%04x)",
./libdfu/dfu-target.c:1155:		g_debug ("booting to runtime");
./libdfu/dfu-target.c:1251:				g_set_error (error,
./libdfu/dfu-target.c:1259:				g_set_error (error,
./libdfu/dfu-target.c:1270:				g_debug ("erasing DfuSe address at 0x%04x", (guint) offset);
./libdfu/dfu-target.c:1283:				g_debug ("setting DfuSe address to 0x%04x", (guint) offset);
./libdfu/dfu-target.c:1302:		g_debug ("writing #%04x chunk of size %" G_GSIZE_FORMAT,
./libdfu/dfu-target.c:1342:			g_set_error (error,
./libdfu/dfu-target.c:1417:		g_debug ("downloading element at 0x%04x",
./libdfu/dfu-target.c:1437:		g_debug ("booting to runtime to set auto-boot");
./libdfu/dfu-tool.c:312:		g_set_error (error,
./libdfu/dfu-tool.c:361:		g_set_error (error,
./libdfu/dfu-tool.c:409:		g_set_error (error,
./libdfu/dfu-tool.c:455:		g_set_error (error,
./libdfu/dfu-tool.c:505:		g_set_error (error,
./libdfu/dfu-tool.c:515:		g_set_error (error,
./libdfu/dfu-tool.c:524:		g_set_error (error,
./libdfu/dfu-tool.c:571:		g_set_error (error,
./libdfu/dfu-tool.c:581:		g_set_error (error,
./libdfu/dfu-tool.c:643:			g_set_error (error,
./libdfu/dfu-tool.c:654:			g_set_error (error,
./libdfu/dfu-tool.c:665:			g_set_error (error,
./libdfu/dfu-tool.c:688:					g_set_error (error,
./libdfu/dfu-tool.c:768:		g_set_error (error,
./libdfu/dfu-tool.c:783:			g_set_error (error,
./libdfu/dfu-tool.c:793:			g_set_error (error,
./libdfu/dfu-tool.c:811:	g_debug ("DFU: %s", str_debug);
./libdfu/dfu-tool.c:873:			g_debug ("ignore last state transition %s",
./libdfu/dfu-tool.c:897:		g_debug ("ignoring %s", dfu_state_to_string (state));
./libdfu/dfu-tool.c:915:		g_debug ("resetting progress bar");
./libdfu/dfu-tool.c:996:		g_debug ("detaching");
./libdfu/dfu-tool.c:1018:			g_set_error (error,
./libdfu/dfu-tool.c:1054:	g_debug ("DFU: %s", str_debug);
./libdfu/dfu-tool.c:1127:	g_debug ("DFU: %s", str_debug);
./libdfu/dfu-tool.c:1239:		g_set_error (error,
./libdfu/dfu-tool.c:1258:				g_set_error (error,
./libdfu/dfu-tool.c:1276:	g_debug ("using XTEA key %04x%04x%04x%04x",
./libdfu/dfu-tool.c:1443:		g_set_error (error,
./libdfu/dfu-tool.c:1453:	g_debug ("wrote %s", values[1]);
./libdfu/dfu-tool.c:1525:		g_set_error (error,
./libdfu/dfu-tool.c:1535:	g_debug ("wrote %s", values[1]);
./libdfu/dfu-tool.c:1682:		g_debug ("detaching");
./libdfu/dfu-tool.c:1695:	g_debug ("DFU: %s", str_debug);
./libdfu/dfu-tool.c:1705:			g_set_error (error,
./libdfu/dfu-tool.c:1726:				g_set_error (error,
./libdfu/dfu-tool.c:1735:				g_set_error (error,
./libdfu/dfu-tool.c:1816:	g_debug ("DFU: %s", str_debug);
./libdfu/dfu-tool.c:2010:	g_debug ("Handling SIGINT");
./libdfu/dfu-firmware.c:539:			g_set_error (error,
./libdfu/dfu-firmware.c:549:			g_set_error (error,
./libdfu/dfu-firmware.c:565:			g_set_error (error,
./libdfu/dfu-firmware.c:595:					g_debug ("base address %04x", addr_low);
./libdfu/dfu-firmware.c:607:						g_debug ("filling address 0x%04x",
./libdfu/dfu-firmware.c:617:				g_debug ("writing address 0x%04x", addr32);
./libdfu/dfu-firmware.c:625:			g_error ("set base address %x", addr_high);
./libdfu/dfu-firmware.c:630:			g_set_error (error,
./libdfu/dfu-firmware.c:777:		g_set_error (error,
./libdfu/dfu-firmware.c:787:		g_set_error (error,
./libdfu/dfu-firmware.c:837:	g_debug ("image_size_total: %i", image_size_total);
./libdfu/dfu-firmware.c:905:			g_set_error (error,
./libdfu/dfu-firmware.c:925:			g_set_error (error,
./libdfu/dfu-firmware.c:1007:			g_set_error (error,
./libdfu/dfu-firmware.c:1021:			g_set_error (error,
./libdfu/dfu-firmware.c:1038:		g_set_error (error,
./libdfu/dfu-firmware.c:1143:	g_debug ("adding metadata %s=%s", key, value);
./libdfu/dfu-firmware.c:1160:	g_debug ("removing metadata %s", key);
./libdfu/dfu-firmware.c:1185:		g_set_error (error,
./libdfu/dfu-firmware.c:1207:			g_set_error (error,
./libdfu/dfu-firmware.c:1217:			g_set_error (error,
./libdfu/dfu-firmware.c:1227:			g_set_error (error,
./libdfu/dfu-firmware.c:1245:	g_debug ("metadata table was %i/%i bytes", idx, (guint) sizeof(mdbuf));
./libdfu/dfu-firmware.c:1324:		g_set_error (error,
./libdfu/dfu-firmware.c:1340:			g_set_error (error,
./libdfu/dfu-firmware.c:1358:			g_set_error (error,
./libdfu/dfu-firmware.c:1383:	g_set_error (error,
./libdfu/dfu-element.c:290:		g_set_error (error,
./libdfu/dfu-element.c:301:		g_set_error (error,
./libdfu/dfu-self-test.c:99:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:147:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:167:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:207:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:213:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:229:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:240:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:243:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:267:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:278:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:281:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:310:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:318:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:321:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:353:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:358:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:366:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:374:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:393:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:412:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:421:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:434:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:439:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:444:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:449:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:469:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:479:		g_assert_no_error (error);
./libdfu/dfu-self-test.c:482:		g_assert_no_error (error);
./libdfu/dfu-self-test.c:487:		g_assert_no_error (error);
./libdfu/dfu-self-test.c:492:		g_assert_no_error (error);
./libdfu/dfu-self-test.c:512:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:531:		g_assert_no_error (error);
./libdfu/dfu-self-test.c:537:		g_assert_error (error,
./libdfu/dfu-self-test.c:541:		g_clear_error (&error);
./libdfu/dfu-self-test.c:546:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:550:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:561:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:566:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:609:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:617:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:625:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:634:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:647:	g_assert_no_error (error);
./libdfu/dfu-self-test.c:672:	g_assert_no_error (error);
./libdfu/dfu-device.c:280:		g_debug ("ignoring quirked DFU version");
./libdfu/dfu-device.c:284:			g_debug ("basic DFU, no DfuSe support");
./libdfu/dfu-device.c:287:			g_debug ("DfuSe support");
./libdfu/dfu-device.c:393:			g_debug ("no DFU runtime, so faking device");
./libdfu/dfu-device.c:714:	g_set_error (error,
./libdfu/dfu-device.c:754:	g_set_error (error,
./libdfu/dfu-device.c:922:		g_set_error (error,
./libdfu/dfu-device.c:950:		g_set_error (error,
./libdfu/dfu-device.c:958:		g_set_error (error,
./libdfu/dfu-device.c:975:	g_debug ("refreshed status=%s and state=%s",
./libdfu/dfu-device.c:1008:		g_set_error (error,
./libdfu/dfu-device.c:1017:		g_set_error (error,
./libdfu/dfu-device.c:1050:		g_set_error (error,
./libdfu/dfu-device.c:1060:		g_debug ("doing device reset as host will not self-reset");
./libdfu/dfu-device.c:1090:		g_set_error (error,
./libdfu/dfu-device.c:1120:		g_set_error (error,
./libdfu/dfu-device.c:1154:		g_set_error (error,
./libdfu/dfu-device.c:1184:		g_set_error (error,
./libdfu/dfu-device.c:1236:		g_set_error (error,
./libdfu/dfu-device.c:1249:			g_debug ("device already open, ignoring");
./libdfu/dfu-device.c:1255:			g_set_error (error,
./libdfu/dfu-device.c:1261:		g_set_error (error,
./libdfu/dfu-device.c:1276:			g_set_error (error,
./libdfu/dfu-device.c:1305:			g_debug ("aborting transfer %s", dfu_status_to_string (priv->status));
./libdfu/dfu-device.c:1310:			g_debug ("clearing error %s", dfu_status_to_string (priv->status));
./libdfu/dfu-device.c:1342:		g_set_error (error,
./libdfu/dfu-device.c:1355:			g_debug ("device not open, so ignoring error for close");
./libdfu/dfu-device.c:1385:		g_debug ("invalidating backing GUsbDevice");
./libdfu/dfu-device.c:1421:		g_debug ("automatically reopening device");
./libdfu/dfu-device.c:1462:		g_debug ("device changed GUsbDevice %p->%p",
./libdfu/dfu-device.c:1475:		g_debug ("gave up waiting for device replug");
./libdfu/dfu-device.c:1492:	g_debug ("waiting for device replug for %ims -- state is %s",
./libdfu/dfu-device.c:1531:		g_propagate_error (error, error_tmp);
./libdfu/dfu-device.c:1559:		g_set_error (error,
./libdfu/dfu-device.c:1568:		g_set_error (error,
./libdfu/dfu-device.c:1603:		g_set_error (error,
./libdfu/dfu-device.c:1620:		g_debug ("doing dummy upload to work around m-stack quirk");
./libdfu/dfu-device.c:1674:		g_set_error (error,
./libdfu/dfu-device.c:1691:			g_set_error (error,
./libdfu/dfu-device.c:1697:		g_debug ("detaching");
./libdfu/dfu-device.c:1734:		g_debug ("switching to DefuSe automatically");
./libdfu/dfu-device.c:1749:		g_debug ("booting to runtime");
./libdfu/dfu-device.c:1791:		g_set_error (error,
./libdfu/dfu-device.c:1802:			g_set_error (error,
./libdfu/dfu-device.c:1811:			g_set_error (error,
./libdfu/dfu-device.c:1823:		g_set_error (error,
./libdfu/dfu-device.c:1836:		g_set_error (error,
./libdfu/dfu-device.c:1848:			g_set_error (error,
./libdfu/dfu-device.c:1856:		g_debug ("detaching");
./libdfu/dfu-device.c:1896:		g_debug ("downloading to target: %s", alt_name);
./libdfu/dfu-device.c:1904:				g_set_error (error,
./libdfu/dfu-device.c:1914:				g_set_error (error,
./libdfu/dfu-device.c:1951:		g_debug ("booting to runtime to set auto-boot");
./libdfu/dfu-device.c:1996:		g_prefix_error (error, "read protection is active: ");
./libdfu/dfu-device.c:1999:		g_prefix_error (error, "[%s,%s]: ",
./libdfu/dfu-context.c:201:	g_debug ("%s was removed", device_id);
./libdfu/dfu-context.c:218:	g_debug ("%s did not come back as a DFU capable device", device_id);
./libdfu/dfu-context.c:231:	g_debug ("%s state now: %s", device_id, dfu_state_to_string (state));
./libdfu/dfu-context.c:256:			g_debug ("cancelling the remove timeout");
./libdfu/dfu-context.c:269:		g_debug ("device %s came back", device_id);
./libdfu/dfu-context.c:276:		g_debug ("device was not DFU capable");
./libdfu/dfu-context.c:290:	g_debug ("device %s was added", device_id);
./libdfu/dfu-context.c:496:				g_set_error (error,
./libdfu/dfu-context.c:508:		g_set_error (error,
./libdfu/dfu-context.c:550:	g_set_error (error,
./libfwupd/fwupd-error.c:41:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:44:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:47:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:50:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:53:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:56:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:59:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:62:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:65:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:68:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:71:		g_dbus_error_register_error (quark,
./libfwupd/fwupd-error.c:74:		g_dbus_error_register_error (quark,

== environment() ==
./src/fu-debug.c:43:	if (g_getenv ("VERBOSE") != NULL)
./src/fu-util.c:1624:		g_setenv ("FWUPD_VERBOSE", "1", FALSE);
./src/fu-provider-rpi.c:339:	tmp = g_getenv ("FWUPD_RPI_FW_DIR");
./libdfu/dfu-tool.c:2194:		g_setenv ("G_MESSAGES_DEBUG", "all", FALSE);
./libdfu/dfu-self-test.c:686:	g_setenv ("G_MESSAGES_DEBUG", "all", FALSE);

== privileged() ==

== networking() ==
./src/fu-self-test.c:195:	g_signal_connect (provider, "device-added",
./src/fu-self-test.c:198:	g_signal_connect (provider, "status-changed",
./src/fu-self-test.c:300:	g_signal_connect (provider, "device-added",
./src/fu-self-test.c:303:	g_signal_connect (provider, "status-changed",
./src/fu-util.c:1660:	g_signal_connect (priv->proxy, "g-properties-changed",
./src/fu-provider-dfu.c:266:	g_signal_connect (device, "state-changed",
./src/fu-provider-dfu.c:337:	g_signal_connect (device, "state-changed",
./src/fu-provider-dfu.c:395:	g_signal_connect (priv->context, "device-added",
./src/fu-provider-dfu.c:398:	g_signal_connect (priv->context, "device-removed",
./src/fu-provider-dfu.c:401:	g_signal_connect (priv->context, "device-changed",
./src/fu-provider-chug.c:118:fu_provider_chug_wait_for_connect (FuProviderChugItem *item, GError **error)
./src/fu-provider-chug.c:345:		if (!fu_provider_chug_wait_for_connect (item, error))
./src/fu-provider-chug.c:409:	if (!fu_provider_chug_wait_for_connect (item, error))
./src/fu-provider-chug.c:636:	g_signal_connect (priv->usb_ctx, "device-added",
./src/fu-provider-chug.c:639:	g_signal_connect (priv->usb_ctx, "device-removed",
./src/fu-main.c:1776:	g_signal_connect (provider, "device-added",
./src/fu-main.c:1779:	g_signal_connect (provider, "device-removed",
./src/fu-main.c:1782:	g_signal_connect (provider, "status-changed",
./src/fu-main.c:1842:	g_signal_connect (priv->store, "changed",
./src/fu-provider-udev.c:307:	g_signal_connect (priv->gudev_client, "uevent",
./src/fu-rom.c:643:	priv->stream = G_INPUT_STREAM (g_file_read (file, cancellable, &error_local));
./src/fu-rom.c:659:		if (g_output_stream_write (G_OUTPUT_STREAM (output_stream), "1", 1,
./src/fu-rom.c:666:	sz = g_input_stream_read (priv->stream, buffer, buffer_sz,
./src/fu-rom.c:681:		sz_chunk = g_input_stream_read (priv->stream,
./src/fu-provider-usb.c:250:	g_signal_connect (priv->usb_ctx, "device-added",
./src/fu-provider-usb.c:253:	g_signal_connect (priv->usb_ctx, "device-removed",
./libdfu/dfu-tool.c:989:	g_signal_connect (device, "state-changed",
./libdfu/dfu-tool.c:991:	g_signal_connect (device, "percentage-changed",
./libdfu/dfu-tool.c:1066:dfu_tool_read (DfuToolPrivate *priv, gchar **values, GError **error)
./libdfu/dfu-tool.c:1106:	g_signal_connect (device, "state-changed",
./libdfu/dfu-tool.c:1108:	g_signal_connect (device, "percentage-changed",
./libdfu/dfu-tool.c:1567:	g_signal_connect (dfu_context, "device-added",
./libdfu/dfu-tool.c:1569:	g_signal_connect (dfu_context, "device-removed",
./libdfu/dfu-tool.c:1571:	g_signal_connect (dfu_context, "device-changed",
./libdfu/dfu-tool.c:1573:	g_signal_connect (priv->cancellable, "cancelled",
./libdfu/dfu-tool.c:1675:	g_signal_connect (device, "state-changed",
./libdfu/dfu-tool.c:1677:	g_signal_connect (device, "percentage-changed",
./libdfu/dfu-tool.c:1778:dfu_tool_write (DfuToolPrivate *priv, gchar **values, GError **error)
./libdfu/dfu-tool.c:1836:	g_signal_connect (device, "state-changed",
./libdfu/dfu-tool.c:1838:	g_signal_connect (device, "percentage-changed",
./libdfu/dfu-firmware.c:1386:		     "invalid format for write (0x%04x)",
./libdfu/dfu-device.c:1717:		id = g_signal_connect (target, "percentage-changed",
./libdfu/dfu-device.c:1723:		g_signal_handler_disconnect (target, id);
./libdfu/dfu-device.c:1927:		id = g_signal_connect (target_tmp, "percentage-changed",
./libdfu/dfu-device.c:1934:		g_signal_handler_disconnect (target_tmp, id);
./libdfu/dfu-context.c:88:		g_signal_handler_disconnect (item->device,
./libdfu/dfu-context.c:285:		g_signal_connect (item->device, "state-changed",
./libdfu/dfu-context.c:331:	g_signal_connect (priv->usb_ctx, "device-added",
./libdfu/dfu-context.c:333:	g_signal_connect (priv->usb_ctx, "device-removed",

== http:// ==
./src/fu-util.c:1407:		/* TRANSLATORS: section header for firmware remote http:// */
./src/fu-rom.c:35:/* data from http://resources.infosecinstitute.com/pci-expansion-rom/ */

== encryption ==

== sql() ==

== tmp() ==
./src/fu-self-test.c:320:	g_unlink ("/tmp/rpiboot/start.elf");
./src/fu-self-test.c:323:	fu_provider_rpi_set_fw_dir (FU_PROVIDER_RPI (provider), "/tmp/rpiboot");
./src/fu-self-test.c:337:	g_assert (g_file_test ("/tmp/rpiboot/start.elf", G_FILE_TEST_EXISTS));
./src/fu-self-test.c:338:	g_assert (g_file_test ("/tmp/rpiboot/overlays/test.dtb", G_FILE_TEST_EXISTS));
./src/fu-self-test.c:475:	g_assert_cmpint (g_mkdir_with_parents ("/tmp/fwupd-self-test/var/lib/fwupd", 0755), ==, 0);
./src/fu-util.c:1189:	const gchar *data_fn = "/tmp/firmware.xml.gz";
./libdfu/dfu-self-test.c:284://	g_file_set_contents ("/tmp/1.bin",

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./src/fu-self-test.c:408:	device = fu_pending_get_device (pending, "XXXXXXXXXXXXX", &error);
./src/fu-provider-uefi.c:72:		/* FIXME: also match hardware_instance too */
./src/fu-provider-uefi.c:221:	guint64 hardware_instance = 0;	/* FIXME */
./src/fu-provider-uefi.c:310:		guint64 hardware_instance = 0;	/* FIXME */
./src/fu-main.c:707:			/* FIXME: just a boolean on FuDeviceItem? */
./src/fu-provider.c:120:	gchar tmpname[] = {"XXXXXX.cap"};
./libdfu/dfu-target.c:1485:	// FIXME: parse?
./libdfu/dfu-device.c:1631:		//FIXME
./libdfu/dfu-device.c:1645:	/* FIXME: divide by number of targets? */

== unsafe input mechanisms ==
./libdfu/dfu-tool.c:1970:		dfu_targets = dfu_device_get_targets (device);
./libdfu/dfu-self-test.c:429:	targets = dfu_device_get_targets (device);
./libdfu/dfu-device.c:355:dfu_device_add_targets (DfuDevice *device)
./libdfu/dfu-device.c:657:	if (!dfu_device_add_targets (device)) {
./libdfu/dfu-device.c:675:dfu_device_get_targets (DfuDevice *device)
./libdfu/dfu-device.c:1411:	if (!dfu_device_add_targets (device)) {

