'''This module provides an interface to Launchpad Malone.

(C) 2006 Canonical Ltd.
Author: Martin Pitt <martin.pitt@canonical.com>
'''

import xml.sax, xml.sax.handler, re, sys, urllib

class __PlaintextSAXHandler(xml.sax.handler.ContentHandler):
    def __init__(self):
	self.plaintext = ''

    def characters(self, content):
	s = content.encode("UTF-8")
	self.plaintext += content.encode("UTF-8")

def get_cve_report(distro):
    '''Parse the given distribution's CVE report and return a mapping

      bug number -> ([list of CVEs], package -> status)

      E. g. result[1234] == (['CVE-2006-1234', 'CVE-2006-2345'], 
         {'firefox': 'Fix released', 'Ubuntu': 'Unconfirmed'})
    '''

    r = urllib.urlopen('https://launchpad.net/distros/%s/+cve' % distro).read()

    # create plaintext from report
    handler = __PlaintextSAXHandler()
    xml.sax.parseString (r, handler)

    # parse plaintext and generate map
    map = {}
    currbug = None
    currpkg = None
    bug_re = re.compile('^bug\s*#(\d+):', re.I)
    cve_re = re.compile('^(CVE-\d+-\d+)$')
    pkg_re = re.compile('^([\w._+-]+)(?:\s*\(\w+\))?$', re.I)
    status_re = re.compile('^([\w ]+)(?:, assigned to|\(unassigned| by)', re.I)
    for l in handler.plaintext.splitlines():
	l = l.strip()
	if not l:
	    continue

	# bug line
	m = bug_re.match(l)
	if m:
	    currbug = int(m.group(1))
	    #print 'bug line', l, '->', currbug
	    continue

	# CVE line
	m = cve_re.match(l)
	if m:
	    assert currbug
	    map.setdefault(currbug, ([], {}))[0].append(m.group(1))
	    #print 'CVE line', l, '->', map[currbug]
	    continue

	# status line
	m = status_re.match(l)
	if m:
	    assert currpkg
	    map.setdefault(currbug, ([], {}))[1][currpkg] = m.group(1)
	    #print 'status line', l, '->', map[currbug]
	    currpkg = None
	    continue

	# package line
	m = pkg_re.match(l)
	if m and currbug:
	    currpkg = m.group(1)
	    #print 'package line:', l, '->', currpkg
	    continue

	#print 'Unknown line:', l

    return map

result = get_cve_report('ubuntu')
for k, v in result.iteritems():
    print k, v
