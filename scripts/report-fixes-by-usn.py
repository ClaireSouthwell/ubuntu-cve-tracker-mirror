#!/usr/bin/python
# Author: Kees Cook <kees@ubuntu.com>
# Copyright (C) 2008 Canonical Ltd.
#
# Reports which CVEs were fixed for a given release and source package
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Fetch the USN database first. Override location with --database
#  wget http://people.canonical.com/~ubuntu-security/usn/database.pickle
#
import cPickle, sys, os, os.path, optparse, textwrap, re
import usn_lib, cve_lib
from source_map import version_compare

parser = optparse.OptionParser()
#parser.add_option("-v", "--verbose", dest="verbose", help="Report logic while processing USNs", action='store_true')
parser.add_option("-D", "--database", help="Specify location of USN data (default '%default')", default="database.pickle")
parser.add_option("-R", "--reverted", help="Specify location of reverted CVE list (default '%default')", default="meta_lists/reverted-CVEs.txt")
parser.add_option("-p", "--priority", dest="priority", help="Comma separated list of priorities to report (default: all)", action='store')
parser.add_option("-L", "--description", dest="description", help="Description regex to report", action='store')
parser.add_option("-d", "--debug", dest="debug", help="Report additional debugging while processing USNs", action='store_true')
parser.add_option("-s", "--summary", dest="summary", help="Provide a summary including USN, CVEs and packages count", action='store_true')
parser.add_option("--since", type=float, help="Report only USNs with timestamp after this (in seconds from UTC)",
                      default=0)
parser.add_option("--before", type=float, help="Report only USNs with timestamp before this (in seconds from UTC)",
                      default=sys.float_info.max)
(opt, args) = parser.parse_args()

reverted = usn_lib.get_reverted(opt.reverted)
db       = usn_lib.load_database(opt.database)

report_priorities = opt.priority
if report_priorities:
    report_priorities = opt.priority.split(',')

# Report CVEs fixed _after_ the "after" version, up to and including "last"
# i.e. (after,last]
src = None
after = None
last = None
try:
    release = args.pop(0)
    if len(args)>0:
        src     = args.pop(0)
        after   = args.pop(0)
        last    = args.pop(0)
        if (opt.debug):
            print "Searching for %s in %s version (%s, %s]" % (src, release, after, last)
    else:
        if (opt.debug):
            print "Searching in %s" % (release)
except:
    print >>sys.stderr, 'Usage: %s [OPTIONS] RELEASE [SOURCE_PKG ABOVE_VER THIS_OR_LOWER_VER]' % (sys.argv[0])
    sys.exit(1)

unique_cves = set()
usns = []
for usn in sorted(db, cmp=version_compare):
    # This USN is ancient and lacks any CVE information
    if not db[usn].has_key('cves'):
        if (opt.debug):
            print "%s lacks CVEs" % (usn)
        continue
    # This USN did not include any updates for the requested release
    if not db[usn]['releases'].has_key(release):
        if (opt.debug):
            print "%s lacks release for %s" % (usn, release)
        continue
    # This USN is ancient and lacks source package information
    if not db[usn]['releases'][release].has_key('sources'):
        if (opt.debug):
            print "%s lacks source packages for %s" % (usn, release)
        continue
    # This USN did not include updates for the requested package
    if src and not db[usn]['releases'][release]['sources'].has_key(src):
        if (opt.debug):
            print "%s lacks update for %s (%s)" % (usn, src, ", ".join(db[usn]['releases'][release]['sources'].keys()))
        continue

    usn_timestamp = db[usn]['timestamp']
    if usn_timestamp > opt.before:
        if opt.debug:
            print
            "Discarding USN in result as its timestamp is grater than --before %s (%f > %f)" % (
            usn, usn_timestamp, opt.before)
        continue
    if usn_timestamp < opt.since:
        if opt.debug:
            print
            "Discarding USN in result as its timestamp is less than --since  %s (%f < %f)" % (usn, usn_timestamp, since)
        continue

    usns.append(usn)

    version = None
    if src:
        version = db[usn]['releases'][release]['sources'][src]['version']
    if not src or  (version_compare(version, after)>0 and \
                    version_compare(version, last)<=0):
        report = 'USN-%s' % (usn)
        if version:
            report += ' (%s)' % (version)
        else:
            report += ' (%s)' % (", ".join(["%s %s" % (x, db[usn]['releases'][release]['sources'][x]['version']) for x in db[usn]['releases'][release]['sources']]))
        cves = []

        for cve in sorted(db[usn]['cves']):
            info = None
            if cve.startswith("CVE-") and usn in usns:
                unique_cves.add(cve)
            if report_priorities or opt.description:
                # Skip non-CVEs and missing CVEs.
                try:
                    filename = cve_lib.find_cve(cve)
                    info = cve_lib.load_cve(filename)
                except:
                    continue
            if report_priorities:
                specificity, cve_priority = cve_lib.contextual_priority(info, src, release)
                # Skip CVEs that we aren't interested in.
                if not cve_priority in report_priorities:
                    continue
                cve = "%s (%s)" % (cve, cve_priority)
            if opt.description:
                text = info.get('Ubuntu-Description', info['Description']).strip()
                # Skip CVEs that do not match the description we're interested in.
                if not re.search(opt.description, text):
                    continue
                text = textwrap.fill(text, 60)
                cve += "\n\t\t%s" % ("\n\t\t".join(text.splitlines()))
            cves.append(cve)
        if len(cves) > 0:
            if not opt.summary:
                print report
                print "\t%s" % ("\n\t".join(cves))

if opt.summary:
    print "Total USNs published for %s: %d " % (release, len(usns))
    print "Total CVEs fixed for %s: %d " % (release, len(unique_cves))
