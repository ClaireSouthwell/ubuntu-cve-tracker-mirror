#!/usr/bin/env python

# This script takes a naive approach to searching for possible security syncs
# from Debian. This is useful for identifying candidates for a
# security-fake-sync when debian has not released a DSA/DLA, and thus the
# debian2ubuntu tool does not identify the sync.

import cve_lib
import re
import subprocess
import sys

## Some Setup
release_version_regex = re.compile(r"(.*?): (.*?),.*$")
build_suffix_regex = re.compile(r"build(\d+\.?)+$")
releases = cve_lib.all_releases

for eol in cve_lib.eol_releases:
    if eol in releases:
        releases.remove(eol)
##########################################################################################################################################

## Load/prep CVE data
(cves, uems) = cve_lib.get_cve_list()

(table, priority, cves, namemap, cveinfo) = cve_lib.load_table(cves, uems)

pkgs = dict()
for cve in table.keys():
    for pkg in table[cve].keys():
        pkgs[pkg] = True
##########################################################################################################################################


## Search for possible syncs
for pkg in sorted(pkgs.keys()): # check each package for which there is a CVE
    umt_search_result = subprocess.check_output(['umt', 'search', pkg]) # Use `umt search` to get Ubuntu and Debian released versions of the package

    ubuntu_releases = dict()
    debian_releases = dict()
    empty_line_count = 0;
    # Parse output of `umt search line by line
    for line in umt_search_result.splitlines():
        if not line.strip():
            empty_line_count = empty_line_count+1
            continue;
        # Parse Ubuntu release/version pairs
        if empty_line_count == 2:
            matches = release_version_regex.search(line);
            ubuntu_releases[matches.group(1)] = matches.group(2)
        # Parse Debian release/version pairs
        elif empty_line_count == 4:
            matches = release_version_regex.search(line);
            debian_releases[matches.group(1)] = matches.group(2)

    pkg_printed = False
    # Find potential syncs
    for dr in debian_releases:
        for ur in ubuntu_releases:
            ubuntu_modified_version = build_suffix_regex.sub("", ubuntu_releases[ur]);
            if ubuntu_modified_version != ubuntu_releases[ur]:
                print "changed %s to %s" % (ubuntu_releases[ur], ubuntu_modified_version)
            if debian_releases[dr].startswith(ubuntu_modified_version) and len(debian_releases[dr]) > len(ubuntu_modified_version):
                if re.search(r"\+deb\d+u\d+", debian_releases[dr]):
                    if not pkg_printed:
                        print pkg
                        pkg_printed = True
                    print "\tPossible sync for package %s. Sync %s: %s with %s: %s" %(pkg, ur, ubuntu_releases[ur], dr, debian_releases[dr])
                    print "\t\t $UST/build-tools/security-fake-sync -v %s -r %s %s" % (debian_releases[dr], ur, pkg)
##########################################################################################################################################
