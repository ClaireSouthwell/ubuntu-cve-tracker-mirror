Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==
./scope/click/download-manager.cpp:66:                                                  << "/bin/sh" << "-c" <<
./scope/tests/integration/webclient_integration.cpp:93:    app.exec();
./scope/tests/integration/webclient_integration.cpp:109:    app.exec();
./scope/tests/integration/webclient_integration.cpp:125:    app.exec();
./scope/tests/download_manager_tool/download_manager_tool.cpp:121:    return a.exec();
./scope/tests/click_interface_tool/click_interface_tool.cpp:67:    return a.exec();
./scope/click/qtbridge.cpp:148:    detail::coreApplicationInstance()->exec();

== memory_management() ==
./scope/tests/download_manager_tool/download_manager_tool.cpp:45:    _dm = new click::DownloadManager(QSharedPointer<click::network::AccessManager>(new click::network::AccessManager()),
./scope/click/qtbridge.cpp:97:    app = new QCoreApplication(argc, argv);
./scope/click/qtbridge.cpp:112:    static TaskHandler* instance = new TaskHandler(coreApplicationInstance());
./scope/click/qtbridge.cpp:172:    detail::TaskEvent* te = new detail::TaskEvent(task);
./scope/click/download-manager.cpp:343:        auto cb = new Callback{callback};
./scope/click/webclient.cpp:161:    auto sc = new click::utils::SmartConnect(reply.data());
./scope/click/scope.cpp:103:    auto activation = new ScopeActivation();

== files() ==

== logging() ==
./scope/click/qtbridge.cpp:136:        throw std::runtime_error(
./scope/click/qtbridge.cpp:169:        throw std::runtime_error("Qt world has not been built before calling this function.");
./scope/click/webclient.h:87:    void error(QString description);
./scope/click/package.cpp:125:        throw std::runtime_error(reader.getFormattedErrorMessages());
./scope/click/package.cpp:140:            throw std::runtime_error(reader.getFormattedErrorMessages());
./scope/click/download-manager.cpp:178:        QString error = download->error()->errorString();
./scope/click/download-manager.cpp:208:    QObject::connect(impl->reply.data(), SIGNAL(error(QNetworkReply::NetworkError)),
./scope/click/download-manager.cpp:224:        QString msg("Invalid HTTP response.");
./scope/click/webclient.cpp:179:    emit error(message);
./libclickscope/click/network_access_manager.h:74:    void error(QNetworkReply::NetworkError);
./libclickscope/click/configuration.cpp:84:        throw std::runtime_error("Architecture detection failed.");

== environment() ==
./scope/click/index.cpp:164:    const char *env_url = getenv(SEARCH_BASE_URL_ENVVAR.c_str());
./scope/click/interface.cpp:100:    return getenv(ENV_SHOW_DESKTOP_APPS) != nullptr;
./scope/click/reviews.cpp:177:    const char *env_url = getenv(REVIEWS_BASE_URL_ENVVAR.c_str());
./libclickscope/click/configuration.cpp:109:    const char* language = getenv(LANGUAGE_ENVVAR);

== privileged() ==

== networking() ==
./scope/tests/integration/webclient_integration.cpp:47:        QObject::connect(
./scope/tests/integration/webclient_integration.cpp:86:    QObject::connect(
./scope/tests/download_manager_tool/download_manager_tool.cpp:59:    QObject::connect(_dm, &click::DownloadManager::clickTokenFetched,
./scope/tests/download_manager_tool/download_manager_tool.cpp:61:    QObject::connect(_dm, &click::DownloadManager::clickTokenFetchError,
./scope/tests/download_manager_tool/download_manager_tool.cpp:68:    QObject::connect(_dm, &click::DownloadManager::downloadStarted,
./scope/tests/download_manager_tool/download_manager_tool.cpp:70:    QObject::connect(_dm, &click::DownloadManager::downloadError,
./scope/tests/download_manager_tool/download_manager_tool.cpp:84:    QObject::connect(&tool, SIGNAL(finished()), &a, SLOT(quit()));
./scope/tests/download_manager_tool/download_manager_tool.cpp:88:        QObject::connect(&timer, &QTimer::timeout, [&]() {
./scope/tests/download_manager_tool/download_manager_tool.cpp:94:        QObject::connect(&timer, &QTimer::timeout, [&]() {
./scope/tests/click_interface_tool/click_interface_tool.cpp:52:    QObject::connect(&timer, &QTimer::timeout, [&]() {
./scope/click/index.cpp:64:    QObject::connect(process.data(),
./scope/click/index.cpp:74:    QObject::connect(process.data(),
./scope/click/index.cpp:121:    QObject::connect(response.data(), &click::web::Response::finished, [=](QString reply) {
./scope/click/index.cpp:132:    QObject::connect(response.data(), &click::web::Response::error, [=](QString /*description*/) {
./scope/click/index.cpp:148:    QObject::connect(response.data(), &click::web::Response::finished, [=](const QByteArray reply) {
./scope/click/index.cpp:154:    QObject::connect(response.data(), &click::web::Response::error, [=](QString /*description*/) {
./scope/click/qtbridge.cpp:134:    QThread::currentThread();
./scope/click/qtbridge.cpp:142:    detail::task_handler()->moveToThread(
./scope/click/qtbridge.cpp:143:                detail::coreApplicationInstance()->thread());
./scope/click/ubuntuone_credentials.cpp:38:    connect(ssoService.data(), &u1::SSOService::credentialsFound,
./scope/click/ubuntuone_credentials.cpp:40:    connect(ssoService.data(), &u1::SSOService::credentialsNotFound,
./scope/click/ubuntuone_credentials.cpp:42:    connect(ssoService.data(), &u1::SSOService::credentialsDeleted,
./scope/click/download-manager.cpp:109:    QMetaObject::Connection c = connect(impl->credentialsService.data(),
./scope/click/download-manager.cpp:116:    c = connect(impl->credentialsService.data(), &click::CredentialsService::credentialsNotFound,
./scope/click/download-manager.cpp:124:    c = connect(impl->systemDownloadManager.data(), SIGNAL(downloadCreated(Download*)),
./scope/click/download-manager.cpp:142:    QObject::connect(this, SIGNAL(clickTokenFetched(QString)),
./scope/click/download-manager.cpp:145:    QObject::connect(this, SIGNAL(clickTokenFetchError(QString)),
./scope/click/download-manager.cpp:208:    QObject::connect(impl->reply.data(), SIGNAL(error(QNetworkReply::NetworkError)),
./scope/click/download-manager.cpp:210:    QObject::connect(impl->reply.data(), SIGNAL(finished()),
./scope/click/download-manager.cpp:345:        QObject::connect(&dm, &click::DownloadManager::downloadStarted,
./scope/click/download-manager.cpp:348:        QObject::connect(&dm, &click::DownloadManager::credentialsNotFound,
./scope/click/download-manager.cpp:351:        QObject::connect(&dm, &click::DownloadManager::downloadError,
./scope/click/webclient.cpp:120:        sc.connect(impl->sso.data(), &click::CredentialsService::credentialsFound,
./scope/click/webclient.cpp:129:        sc.connect(impl->sso.data(), &click::CredentialsService::credentialsNotFound,
./scope/click/webclient.cpp:162:    sc->connect(this->reply.data(), &click::network::Reply::finished,
./scope/click/webclient.cpp:164:    sc->connect(this->reply.data(), &click::network::Reply::error,
./scope/click/interface.cpp:391:    QObject::connect(process.data(),
./scope/click/interface.cpp:400:    QObject::connect(process.data(),
./scope/click/reviews.cpp:114:    QObject::connect(response.data(), &click::web::Response::finished,
./scope/click/reviews.cpp:120:    QObject::connect(response.data(), &click::web::Response::error,
./scope/click/reviews.cpp:159:         headers, Json::FastWriter().write(root), click::web::CallParams());
./scope/click/reviews.cpp:161:    QObject::connect(response.data(), &click::web::Response::finished,
./scope/click/reviews.cpp:166:    QObject::connect(response.data(), &click::web::Response::error,
./libclickscope/click/smartconnect.h:54:    void connect(SenderType* sender,
./libclickscope/click/smartconnect.h:58:        connections.append(QObject::connect(sender, signal, slot));
./libclickscope/click/smartconnect.h:59:        connections.append(QObject::connect(sender, signal, this, &SmartConnect::disconnectAll));
./libclickscope/click/smartconnect.cpp:48:        QObject::disconnect(c);
./libclickscope/click/network_access_manager.cpp:34:    connect(this->reply.data(),
./libclickscope/click/network_access_manager.cpp:40:    connect(this->reply.data(),

== http:// ==
./scope/tests/fake_json.h:65:                    "icon_url": "http://software-center.ubuntu.com/site_media/appmedia/2012/09/SPAZ.png",
./scope/tests/fake_json.h:68:                            "href": "http://search.apps.ubuntu.com/api/v1/package/org.example.awesomelauncher"
./scope/tests/fake_json.h:85:            "icon_url": "http://software-center.ubuntu.com/site_media/appmedia/2012/09/SPAZ.png",
./scope/tests/fake_json.h:88:                    "href": "http://search.apps.ubuntu.com/api/v1/package/org.example.awesomelauncher"
./scope/tests/fake_json.h:97:            "icon_url": "http://assets.ubuntu.com/sites/ubuntu/504/u/img/ubuntu/features/icon-find-more-apps-64x64.png",
./scope/tests/fake_json.h:100:                    "href": "http://search.apps.ubuntu.com/api/v1/package/org.example.fantasticapp"
./scope/tests/fake_json.h:109:            "icon_url": "http://assets.ubuntu.com/sites/ubuntu/504/u/img/ubuntu/features/icon-photos-and-videos-64x64.png",
./scope/tests/fake_json.h:112:                    "href": "http://search.apps.ubuntu.com/api/v1/package/org.example.awesomewidget"
./scope/tests/fake_json.h:124:        "icon_url": "http://developer.staging.ubuntu.com/site_media/appmedia/2013/07/weather-icone-6797-64.png",
./scope/tests/fake_json.h:140:        "support_url": "http://beuno.com.ar",
./scope/tests/fake_json.h:146:            "64": "http://developer.staging.ubuntu.com/site_media/appmedia/2013/07/weather-icone-6797-64.png"

== encryption ==
./scope/tests/fake_json.h:127:        "download_url": "https://public.apps.staging.ubuntu.com/download/ar.com.beuno/wheather-touch/ar.com.beuno.wheather-touch-0.2",
./scope/tests/mock_webclient.h:79:    // Mocking default arguments: https://groups.google.com/forum/#!topic/googlemock/XrabW20vV7o
./scope/tests/download_manager_tool/download_manager_tool.cpp:110:                            << "download_manager_tool https://public.apps.ubuntu.com/download/<<rest of click package dl url>>\n" 
./scope/click/download-manager.cpp:294:    // TODO, unimplemented. see https://bugs.launchpad.net/ubuntu-download-manager/+bug/1277814
./scope/click/reviews.h:44:const std::string REVIEWS_BASE_URL = "https://reviews.ubuntu.com";
./scope/click/index.h:48:const std::string SEARCH_BASE_URL = "https://search.apps.ubuntu.com/";

== sql() ==
./scope/click/index.cpp:71:                             QProcess::execute(DBUSSEND_COMMAND);
./scope/click/index.cpp:91:std::string Index::build_index_query(const std::string& query)
./scope/click/index.cpp:116:    const std::string built_query(build_index_query(query));
./scope/click/index.h:67:    virtual std::string build_index_query(const std::string& query);
./scope/click/query.cpp:121:        : query(query),

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./scope/click/package.cpp:55:            // TODO: keywords should be a list of strings
./scope/click/package.cpp:61:            // TODO: more_screenshots_urls should be a list of strings
./scope/click/package.cpp:63:            // TODO: binary_filesize should be a int/long
./scope/click/preview.h:212:// TODO: this is only necessary to perform uninstall.
./scope/click/download-manager.cpp:294:    // TODO, unimplemented. see https://bugs.launchpad.net/ubuntu-download-manager/+bug/1277814
./scope/click/download-manager.cpp:314:        // TODO(tvoss): Remove as soon as a donwload finished signal is available.
./scope/click/webclient.cpp:131:                       // TODO: Need to handle and propagate error conditons.
./scope/click/webclient.cpp:134:        // TODO: Need to handle error signal once in CredentialsService.
./scope/click/preview.cpp:149:// TODO: error handling - once get_details provides errors, we can
./scope/click/preview.cpp:274:                        scopes::Variant(click::Preview::Actions::CLOSE_PREVIEW), // TODO see bug LP: #1289434
./scope/click/preview.cpp:462:                                                                  // TODO: Need to handle errors properly.
./scope/click/preview.cpp:610:       {"id", scopes::Variant(click::Preview::Actions::CLOSE_PREVIEW)}, // TODO: see bug LP: #1289434
./scope/click/preview.cpp:674:// TODO: this class should be removed once uninstall() is handled elsewhere.
./scope/click/interface.cpp:284:            // FIXME: "primary app" for a package is not defined, we just
./scope/click/interface.cpp:314:        // FIXME: "primary app" for a package is not defined, we just

== unsafe input mechanisms ==
./scope/click/preview.h:107:    virtual scopes::PreviewWidgetList headerWidgets(const PackageDetails &details);
./scope/click/preview.h:108:    virtual scopes::PreviewWidgetList descriptionWidgets(const PackageDetails &details);
./scope/click/preview.h:109:    virtual scopes::PreviewWidgetList reviewsWidgets(const click::ReviewList &reviewlist);
./scope/click/preview.h:110:    virtual scopes::PreviewWidgetList downloadErrorWidgets();
./scope/click/preview.h:111:    virtual scopes::PreviewWidgetList loginErrorWidgets();
./scope/click/preview.h:112:    virtual scopes::PreviewWidgetList errorWidgets(const scopes::Variant& title,
./scope/click/preview.h:185:    virtual scopes::PreviewWidgetList purchasingWidgets(const PackageDetails &);
./scope/click/preview.h:209:    virtual scopes::PreviewWidgetList uninstalledActionButtonWidgets(const PackageDetails &details);
./scope/click/preview.cpp:195:scopes::PreviewWidgetList PreviewStrategy::headerWidgets(const click::PackageDetails& details)
./scope/click/preview.cpp:233:scopes::PreviewWidgetList PreviewStrategy::descriptionWidgets(const click::PackageDetails& details)
./scope/click/preview.cpp:248:scopes::PreviewWidgetList PreviewStrategy::reviewsWidgets(const click::ReviewList& reviewlist)
./scope/click/preview.cpp:270:scopes::PreviewWidgetList PreviewStrategy::downloadErrorWidgets()
./scope/click/preview.cpp:272:    return errorWidgets(scopes::Variant(_("Download Error")),
./scope/click/preview.cpp:278:scopes::PreviewWidgetList PreviewStrategy::loginErrorWidgets()
./scope/click/preview.cpp:280:    return errorWidgets(scopes::Variant(_("Login Error")),
./scope/click/preview.cpp:287:scopes::PreviewWidgetList PreviewStrategy::errorWidgets(const scopes::Variant& title,
./scope/click/preview.cpp:331:    // NOTE: no details used by downloadErrorWidgets(), so no need to
./scope/click/preview.cpp:333:    reply->push(downloadErrorWidgets());
./scope/click/preview.cpp:361:                  reply->push(loginErrorWidgets());
./scope/click/preview.cpp:365:                  reply->push(downloadErrorWidgets());
./scope/click/preview.cpp:370:                          reply->push(headerWidgets(details));
./scope/click/preview.cpp:372:                          reply->push(descriptionWidgets(details));
./scope/click/preview.cpp:377:                              reply->push(reviewsWidgets(reviewlist));
./scope/click/preview.cpp:471:                reply->push(headerWidgets(details));
./scope/click/preview.cpp:473:                reply->push(descriptionWidgets(details));
./scope/click/preview.cpp:486:                    reply->push(reviewsWidgets(reviewlist));
./scope/click/preview.cpp:567:            reply->push(purchasingWidgets(details));
./scope/click/preview.cpp:575:scopes::PreviewWidgetList PurchasingPreview::purchasingWidgets(const PackageDetails &/*details*/)
./scope/click/preview.cpp:640:            reply->push(headerWidgets(details));
./scope/click/preview.cpp:641:            reply->push(uninstalledActionButtonWidgets(details));
./scope/click/preview.cpp:642:            reply->push(descriptionWidgets(details));
./scope/click/preview.cpp:647:                reply->push(reviewsWidgets(reviewlist));
./scope/click/preview.cpp:655:scopes::PreviewWidgetList UninstalledPreview::uninstalledActionButtonWidgets(const PackageDetails &details)

