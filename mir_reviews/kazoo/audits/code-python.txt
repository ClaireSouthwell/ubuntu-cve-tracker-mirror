Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==
./run_failure.py:6:    return os.system('bin/nosetests -s -d -v %s' % arg)
./kazoo/testing/common.py:144:        self.process = subprocess.Popen(
./sw/virtualenv.py:579:        call_subprocess(cmd, show_stdout=False,
./sw/virtualenv.py:666:        call_subprocess(cmd, show_stdout=False,
./sw/virtualenv.py:919:            popen = subprocess.Popen([interpreter, file] + sys.argv[1:], env=env)
./sw/virtualenv.py:968:def call_subprocess(cmd, show_stdout=True,
./sw/virtualenv.py:1000:        proc = subprocess.Popen(
./sw/virtualenv.py:1127:            p = subprocess.Popen(multiarch_exec, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
./sw/virtualenv.py:1456:                call_subprocess(
./sw/virtualenv.py:1497:        proc = subprocess.Popen(cmd,
./sw/virtualenv.py:1754:            logger.debug('Skipping system (non-environment) directory %s' % path)

== memory_management() ==
(unsupported type 'python')

== files() ==
./setup.py:9:with open(os.path.join(here, 'README.rst')) as f:
./setup.py:11:with open(os.path.join(here, 'CHANGES.rst')) as f:
./kazoo/testing/common.py:107:        with open(config_path, "w") as config:
./kazoo/testing/common.py:122:            with open(config_path, "a") as config:
./kazoo/testing/common.py:130:        with open(os.path.join(data_path, "myid"), "w") as myid_file:
./kazoo/testing/common.py:133:        with open(log4j_path, "w") as log4j:
./kazoo/testing/common.py:210:        with open(os.path.join(self.working_path, "data", "myid"), "w") as fh:
./sw/virtualenv.py:445:        f = open(dest, 'wb')
./sw/virtualenv.py:450:        f = open(dest, 'rb')
./sw/virtualenv.py:458:            f = open(dest, 'wb')
./sw/virtualenv.py:1699:        f = open(filename, 'rb')
./sw/virtualenv.py:1723:        f = open(filename, 'wb')
./sw/virtualenv.py:1772:    f = open(filename)
./sw/virtualenv.py:1789:    f = open(filename, 'w')
./sw/virtualenv.py:1794:    f = open(filename)
./sw/virtualenv.py:1802:    f = open(filename, 'w')
./sw/virtualenv.py:1887:    f = codecs.open(filename, 'r', encoding='utf-8')
./sw/virtualenv.py:2556:    do_file(open(path, 'r+b'))

== logging() ==
./kazoo/tests/test_connection.py:153:            raise struct.error()
./kazoo/tests/test_election.py:66:    def _check_thread_error(self):
./kazoo/tests/test_election.py:111:        self._check_thread_error()
./kazoo/tests/test_election.py:130:        self._check_thread_error()
./kazoo/tests/test_election.py:135:        self._check_thread_error()
./kazoo/client.py:230:                    warnings.warn('Passing retry configuration param %s to the'
./kazoo/client.py:374:            self.logger.debug("Skipping state change")
./kazoo/client.py:478:            warnings.warn("No chroot path exists, the chroot path "
./kazoo/client.py:1325:        self.client.logger.debug('Added %r to %r', request, self)
./kazoo/protocol/connection.py:108:            log.debug("Pinging server for r/w: %s:%s", host, port)
./kazoo/protocol/connection.py:244:                self.logger.info('Received error(xid=%s) %r', xid, callback_exception)
./kazoo/protocol/connection.py:261:            self.logger.debug('Read response %s', obj)
./kazoo/protocol/connection.py:313:            self.logger.warn('Received unknown event %r', watch.type)
./kazoo/protocol/connection.py:344:            self.logger.info('Received error(xid=%s) %r', xid, callback_exception)
./kazoo/protocol/connection.py:377:            self.logger.debug('Read close response')
./kazoo/protocol/connection.py:386:            self.logger.debug('Received Ping')
./kazoo/protocol/connection.py:389:            self.logger.debug('Received AUTH')
./kazoo/protocol/connection.py:401:            self.logger.debug('Reading for header %r', header)
./kazoo/protocol/connection.py:456:        self.logger.debug('ZK loop started')
./kazoo/protocol/connection.py:473:            self.logger.debug('Connection stopped')
./kazoo/protocol/connection.py:501:            self.logger.debug("Found r/w server to use, %s:%s", host, port)
./kazoo/protocol/connection.py:568:        self.logger.debug('    Using session_id: %r session_passwd: %s',
./kazoo/protocol/connection.py:597:        self.logger.debug('Session created, session_id: %r session_passwd: %s\n'
./kazoo/testing/common.py:37:def debug(sig, frame):
./kazoo/recipe/watchers.py:98:            warnings.warn('Passing additional arguments to DataWatch is'
./sw/virtualenv.py:281:    def debug(self, msg, *args, **kw):
./sw/virtualenv.py:287:    def warn(self, msg, *args, **kw):
./sw/virtualenv.py:289:    def error(self, msg, *args, **kw):
./sw/virtualenv.py:419:        logger.warn('Cannot find file %s (bad symlink)', src)
./sw/virtualenv.py:422:        logger.debug('File %s already exists', dest)
./sw/virtualenv.py:912:            logger.warn('Already using interpreter %s' % interpreter)
./sw/virtualenv.py:950:        logger.warn('PYTHONHOME is set.  You *must* activate the virtualenv before using it')
./sw/virtualenv.py:989:    logger.debug("Running command %s" % cmd_desc)
./sw/virtualenv.py:1044:            logger.warn(
./sw/virtualenv.py:1211:        logger.warn('Path not in prefix %r %r', prefix_path, prefix)
./sw/virtualenv.py:1283:        logger.debug('No include dir %s' % stdinc_dir)
./sw/virtualenv.py:1414:            logger.warn('Not overwriting existing %s script %s (you must use %s)'
./sw/virtualenv.py:1423:            logger.debug('MacOSX Python framework detected')
./sw/virtualenv.py:1432:            logger.debug('EPD framework detected')
./sw/virtualenv.py:1453:            logger.warn("Could not call mach_o_change: %s. "
./sw/virtualenv.py:1627:        logger.debug('This system uses lib64; symlinking lib64 to lib')
./sw/virtualenv.py:1710:            logger.warn('Script %s is an empty file' % filename)
./sw/virtualenv.py:1714:                logger.debug('Cannot make script %s relative' % filename)
./sw/virtualenv.py:1718:                logger.warn('Script %s cannot be made relative (it\'s not a normal script that starts with %s)'
./sw/virtualenv.py:1754:            logger.debug('Skipping system (non-environment) directory %s' % path)
./sw/virtualenv.py:1760:                    logger.warn('Cannot write .pth file %s, skipping' % filename)
./sw/virtualenv.py:1765:                    logger.warn('Cannot write .egg-link file %s, skipping' % filename)
./sw/virtualenv.py:1783:                logger.debug('Rewriting path %s as %s (in %s)' % (line, new_value, filename))
./sw/virtualenv.py:1798:        logger.debug('Link in %s already relative' % filename)

== environment() ==
./sw/virtualenv.py:1331:          os.unsetenv('__PYVENV_LAUNCHER__')

== privileged() ==
./kazoo/tests/test_client.py:72:    def test_chroot(self):
./kazoo/tests/test_client.py:931:    def test_unchroot(self):
./kazoo/tests/test_client.py:934:        self.assertEquals(client.unchroot('/a/b'), '/b')
./kazoo/tests/test_client.py:935:        self.assertEquals(client.unchroot('/b/c'), '/b/c')
./kazoo/client.py:606:    def unchroot(self, path):
./kazoo/client.py:763:                return self.unchroot(result.get())
./kazoo/protocol/serialization.py:345:    def unchroot(client, response):
./kazoo/protocol/serialization.py:349:                resp.append(client.unchroot(result))
./kazoo/protocol/connection.py:317:        path = client.unchroot(path)
./kazoo/protocol/connection.py:364:                    response = Transaction.unchroot(client, response)
./sw/virtualenv.py:475:        os.chmod(fn, newmode)

== networking() ==
./kazoo/handlers/utils.py:33:    type_ = module.SOCK_STREAM
./kazoo/handlers/utils.py:34:    if hasattr(module, 'SOCK_CLOEXEC'):  # pragma: nocover
./kazoo/handlers/utils.py:36:        type_ |= module.SOCK_CLOEXEC
./kazoo/handlers/utils.py:37:    sock = module.socket(module.AF_INET, type_)
./setup.py:10:    README = f.read()
./setup.py:12:    CHANGES = f.read()
./kazoo/interfaces.py:54:    def socket(self):
./kazoo/tests/test_connection.py:44:        os.write(self.client._connection._write_pipe, b'\0')
./kazoo/tests/test_connection.py:238:        os.write(write_pipe, b'\0')
./kazoo/tests/test_connection.py:284:        def listen(state):
./kazoo/tests/test_barrier.py:59:        t1 = threading.Thread(target=make_barrier_one)
./kazoo/tests/test_barrier.py:61:        t2 = threading.Thread(target=make_barrier_two)
./kazoo/tests/test_barrier.py:109:        t1 = threading.Thread(target=make_barrier_one)
./kazoo/tests/test_barrier.py:111:        t2 = threading.Thread(target=make_barrier_two)
./kazoo/tests/test_threading_handler.py:102:        th = threading.Thread(target=wait_for_val)
./kazoo/tests/test_threading_handler.py:143:        th = threading.Thread(target=wait_for_val)
./kazoo/tests/test_threading_handler.py:169:        th = threading.Thread(target=wait_for_val)
./kazoo/tests/test_threading_handler.py:190:        th = threading.Thread(target=wait_for_val)
./kazoo/tests/test_threading_handler.py:212:        th = threading.Thread(target=wait_for_val)
./kazoo/tests/test_threading_handler.py:232:        th = threading.Thread(target=wait_for_val)
./kazoo/tests/test_election.py:36:        thread = threading.Thread(target=self._election_thread,
./kazoo/tests/test_election.py:42:    def _election_thread(self, contender_id, election):
./kazoo/tests/test_lock.py:47:        thread = threading.Thread(target=self._thread_lock_acquire_til_event,
./kazoo/tests/test_lock.py:81:            t = threading.Thread(target=self._thread_lock_acquire_til_event,
./kazoo/tests/test_lock.py:128:        thread = threading.Thread(target=self._thread_lock_acquire_til_event,
./kazoo/tests/test_lock.py:148:        thread1 = threading.Thread(target=self._thread_lock_acquire_til_event,
./kazoo/tests/test_lock.py:164:        thread1 = threading.Thread(target=self._thread_lock_acquire_til_event,
./kazoo/tests/test_lock.py:178:        thread2 = threading.Thread(target=self._thread_lock_acquire_til_event,
./kazoo/tests/test_lock.py:222:        def _thread(lock, event, timeout):
./kazoo/tests/test_lock.py:230:        t = threading.Thread(target=_thread, args=(lock1, e, timeout * 3))
./kazoo/tests/test_lock.py:283:        thread = threading.Thread(target=sema_one, args=())
./kazoo/tests/test_lock.py:334:        thread = threading.Thread(target=sema_one, args=())
./kazoo/tests/test_lock.py:358:        thread = threading.Thread(target=sema_one, args=())
./kazoo/tests/test_lock.py:395:        thread = threading.Thread(target=sema_one, args=())
./kazoo/tests/test_lock.py:408:        thread = threading.Thread(target=expire, args=())
./kazoo/tests/test_lock.py:463:        def _thread(sem, event, timeout):
./kazoo/tests/test_lock.py:471:        t = threading.Thread(target=_thread, args=(sem1, e, timeout * 3))
./kazoo/client.py:455:            os.write(write_pipe, b'\0')
./kazoo/client.py:525:        os.write(self._connection._write_pipe, b'\0')
./kazoo/protocol/connection.py:206:        b = self._read(4, timeout)
./kazoo/protocol/connection.py:208:        b = self._read(length, timeout)
./kazoo/protocol/connection.py:212:    def _read(self, length, timeout):
./kazoo/protocol/connection.py:248:        msg = self._read(4, timeout)
./kazoo/protocol/connection.py:250:        msg = self._read(length, timeout)
./kazoo/protocol/connection.py:277:        self._write(int_struct.pack(len(b)) + b, timeout)
./kazoo/protocol/connection.py:279:    def _write(self, msg, timeout):
./kazoo/protocol/connection.py:380:    def _read_socket(self, read_timeout):
./kazoo/protocol/connection.py:417:                os.read(self._read_pipe, 1)
./kazoo/protocol/connection.py:433:            os.read(self._read_pipe, 1)
./kazoo/protocol/connection.py:440:        os.read(self._read_pipe, 1)
./kazoo/protocol/connection.py:509:            read_timeout, connect_timeout = self._connect(host, port)
./kazoo/protocol/connection.py:528:                    response = self._read_socket(read_timeout)
./kazoo/protocol/connection.py:564:    def _connect(self, host, port):
./kazoo/testing/common.py:50:def listen():
./kazoo/testing/common.py:53:listen()
./kazoo/testing/common.py:108:            config.write("""
./kazoo/testing/common.py:123:                config.write("""
./kazoo/testing/common.py:131:            myid_file.write(str(self.server_info.server_id))
./kazoo/testing/common.py:134:            log4j.write("""
./kazoo/testing/common.py:211:            fh.write(str(self.server_info.server_id))
./kazoo/testing/common.py:267:        # required for a client to successfully connect (2s vs. 4s without
./kazoo/handlers/gevent.py:115:    def socket(self, *args, **kwargs):
./kazoo/handlers/gevent.py:116:        return create_tcp_socket(socket)
./kazoo/handlers/utils.py:30:def create_tcp_socket(module):
./kazoo/handlers/utils.py:37:    sock = module.socket(module.AF_INET, type_)
./kazoo/handlers/threading.py:201:        t = threading.Thread(target=thread_worker)
./kazoo/handlers/threading.py:247:    def socket(self):
./kazoo/handlers/threading.py:248:        return create_tcp_socket(socket)
./kazoo/handlers/threading.py:270:        t = threading.Thread(target=func, args=args, kwargs=kwargs)
./sw/virtualenv.py:305:                    sys.stdout.write('\n')
./sw/virtualenv.py:314:                    consumer.write(rendered+'\n')
./sw/virtualenv.py:323:            sys.stdout.write(msg)
./sw/virtualenv.py:336:                sys.stdout.write('...' + self.in_progress + msg + '\n')
./sw/virtualenv.py:339:                sys.stdout.write(msg + '\n')
./sw/virtualenv.py:348:            sys.stdout.write('.')
./sw/virtualenv.py:446:        f.write(content.encode('utf-8'))
./sw/virtualenv.py:451:        c = f.read()
./sw/virtualenv.py:459:            f.write(content.encode('utf-8'))
./sw/virtualenv.py:520:        os.write(fd, bootstrap_script)
./sw/virtualenv.py:712:        self.config.read(self.files)
./sw/virtualenv.py:1494:        'getattr(out, "buffer", out).write(sys.prefix.encode("utf-8"))']
./sw/virtualenv.py:1702:                lines = f.read().decode('utf-8').splitlines()
./sw/virtualenv.py:1724:        f.write('\n'.join(script).encode('utf-8'))
./sw/virtualenv.py:1790:    f.write('\n'.join(lines) + '\n')
./sw/virtualenv.py:1803:    f.write(new_link)
./sw/virtualenv.py:1888:    content = f.read()
./sw/virtualenv.py:2472:    def write(self, bytes):
./sw/virtualenv.py:2477:        self._fileobj.write(bytes)
./sw/virtualenv.py:2480:    def read(self, size=maxint):
./sw/virtualenv.py:2486:        bytes = self._fileobj.read(size)
./sw/virtualenv.py:2496:    res = struct.unpack(endian + 'L' * num, file.read(num * 4))
./sw/virtualenv.py:2526:                load = file.read(cmdsize - name_offset).decode()
./sw/virtualenv.py:2531:                    file.write(value.encode() + '\0'.encode())

== http:// ==
./kazoo/testing/common.py:20:#  along with txzookeeper.  If not, see <http://www.gnu.org/licenses/>.
./sw/virtualenv.py:1087:    # prefix arg is broken: http://bugs.python.org/issue3386
./sw/virtualenv.py:1291:            # not http://bugs.python.org/issue3386 but a close cousin
./sw/virtualenv.py:1427:            # See http://groups.google.com/group/python-virtualenv/

== encryption ==
./setup.py:62:    url="https://kazoo.readthedocs.org",
./sw/virtualenv.py:1329:        # https://github.com/pypa/virtualenv/issues/322

== sql() ==

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==
./sw/virtualenv.py:536:        if os.environ.get('PYTHONPATH'):
./sw/virtualenv.py:537:            env['PYTHONPATH'] = egg_path + os.path.pathsep + os.environ['PYTHONPATH']
./sw/virtualenv.py:539:            env['PYTHONPATH'] = egg_path
./sw/virtualenv.py:544:        # in this case, we want to be sure that PYTHONPATH is unset (not
./sw/virtualenv.py:547:        remove_from_env.append('PYTHONPATH')
./sw/virtualenv.py:949:    if 'PYTHONHOME' in os.environ:
./sw/virtualenv.py:950:        logger.warn('PYTHONHOME is set.  You *must* activate the virtualenv before using it')
./sw/virtualenv.py:951:        del os.environ['PYTHONHOME']

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./kazoo/protocol/connection.py:395:                # XXX TODO: Should we fail out? Or handle auth failure
./sw/virtualenv.py:1086:    # XXX: We'd use distutils.sysconfig.get_python_inc/lib but its
./sw/virtualenv.py:1224:        ## FIXME: why not delete it?
./sw/virtualenv.py:1318:        # XXX: registry should always exist after Jython 2.5rc1
./sw/virtualenv.py:1352:        ## FIXME: could I just hard link?
./sw/virtualenv.py:1536:    ## FIXME: really this should be calculated earlier
./sw/virtualenv.py:1591:    ## FIXME: maybe this prefix setting should only be put in place if
./sw/virtualenv.py:1594:    ## FIXME: this is breaking things, removing for now:
./sw/virtualenv.py:1678:    ## FIXME: need to fix up distutils.cfg
./sw/virtualenv.py:2562:## TODO:

== unsafe input mechanisms ==
(unsupported type 'python')

