#!/usr/bin/python

# Copyright (C) 2005-2015 Canonical Ltd.
# Authors: Kees Cook <kees@ubuntu.com>
#          Jamie Strandboge <jamie@ubuntu.com>
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import os, apt_pkg, sys, subprocess, cve_lib
try:
    from configobj import ConfigObj
except:
    # Dapper lacks this class, so reimplement it quickly
    class ConfigObj(dict):
        def __init__(self, filepath):
            for line in file(filepath).readlines():
                line = line.strip()
                if line.startswith('#') or len(line)==0:
                    continue
                name, stuff = line.strip().split('=',1)
                self[name] = eval(stuff)

        def __attr__(self, name):
            return self.stuff[name]

apt_pkg.init_system();

def version_compare(one,two):
    return apt_pkg.version_compare(one,two)

def _find_sources():
    config = ConfigObj(os.path.expanduser("~/.ubuntu-cve-tracker.conf"))
    if config.has_key('packages_mirror') and config.has_key('partner_mirror'):
        cve_lib.check_mirror_timestamp(config)
        return _find_from_mirror(config['packages_mirror'],
                                 config['partner_mirror'],
                                 'sources')
    else:
        return _find_sources_from_apt()

def _find_packages():
    config = ConfigObj(os.path.expanduser("~/.ubuntu-cve-tracker.conf"))
    if config.has_key('packages_mirror') and config.has_key('partner_mirror'):
        cve_lib.check_mirror_timestamp(config)
        return _find_from_mirror(config['packages_mirror'],
                                 config['partner_mirror'],
                                 'packages')
    else:
        raise Exception("TODO: implement _find_packages_from_apt()")
        # return _find_packages_from_apt()

def load_debian(basedir, data_type='sources'):
    if data_type not in ['sources', 'packages']:
        raise ValueError("'data_type' should be either 'sources' or 'packages'")

    debian_sources = dict()
    for section in ['main','contrib','non-free']:
        rel = 'testing'
        if data_type == 'sources':
            load_sources_collection( (os.path.join(basedir,'dists', rel, section, 'source', 'Sources.gz'), rel, '', section), debian_sources )
    return debian_sources

def _find_from_mirror(ubuntu, canonical, data_type, arch='amd64'):
    if data_type not in ['sources', 'packages']:
        raise ValueError("'data_type' should be either 'sources' or 'packages'")

    collection = []
    errors = False
    missing = ""

    for rel in cve_lib.releases:
        if rel in cve_lib.eol_releases:
            continue
        # free
        for pocket in ['','-updates','-security']:
            for section in ['main','restricted','universe','multiverse']:
                if data_type == 'sources':
                    fn = os.path.join(ubuntu, 'dists', rel + pocket, section,
                                      'source', 'Sources')
                else:
                    fn = os.path.join(ubuntu, 'dists', rel + pocket, section,
                                      'binary-%s' % arch, 'Packages')

                if not os.path.exists(fn):
                    fn += '.gz'
                    if not os.path.exists(fn):
                        missing += " %s\n" % (fn)
                        errors = True
                        continue
                name = pocket
                if name.startswith('-'):
        	        name = name[1:]
                else:
                    name = ''
                collection += [(fn, rel, name, section)]
        # partner
        pocket = ''
        section = 'partner'

        if data_type == 'sources':
            fn = os.path.join(canonical, 'dists', rel + pocket, section,
                              'source', 'Sources')
        else:
            fn = os.path.join(canonical, 'dists', rel + pocket, section,
                              'binary-%s' % arch, 'Packages')

        if not os.path.exists(fn):
            fn += '.gz'
            if not os.path.exists(fn):
                # Only warn about missing partner for devel release
                if rel == cve_lib.devel_release:
                    prefreeze = os.path.join(canonical, 'dists', '%s-series' % rel[0])
                    if not os.path.isdir(prefreeze):
                        print >>sys.stderr, "WARNING: missing partner mirror element: %s" % (fn)
                    #else:
                    #    print >>sys.stderr, "WARNING: found prefreeze element: %s" % (prefreeze)
                else:
                    missing += " %s\n" % (fn)
                    errors = True
                continue
        collection += [(fn, rel, '', section)]

    if errors:
        raise NameError, "Missing mirror elements:\n" + missing

    return collection


def _find_sources_from_apt():
  collection = []

  saw = dict()
  lists = '/var/lib/apt/lists'
  for f in os.listdir(lists):
    if not f.endswith('_source_Sources') and not '-commercial_main_binary-' in f:
        continue
    parts = f.split('_')
    parts.pop() # _Sources
    parts.pop() # _source
    section = parts.pop() # _main
    release_real = parts.pop() # _dapper
    saw.setdefault(release_real,True)
    tmp = release_real.split('-')
    release = tmp[0]
    if len(tmp) > 1:
    	pocket = tmp[1]
    else:
        pocket = ''
    collection += [(os.path.join(lists,f), release, pocket, section)]

  # Validate all the sources are available
  errors = False
  missing = ""
  for rel in cve_lib.releases:
    if rel in cve_lib.eol_releases:
        continue
    for pocket in ['','-updates','-security']:
        if not saw.has_key(rel+pocket):
            missing += " deb-src http://archive.ubuntu.com/ubuntu %s%s main restricted universe multiverse\n" % (rel,pocket)
            errors = True
    for pocket in ['-commercial']:
        if rel < 'gutsy' and not saw.has_key(rel+pocket):
            missing += " deb http://archive.canonical.com/ubuntu %s%s main\n" % (rel,pocket)
            errors = True
  if errors:
    raise NameError, "Missing /etc/apt/sources.list lines:\n%s" % (missing)

  return collection

# release -> pkg -> dict( 'section', 'pocket', 'version' )
def load(data_type='sources'):
    if data_type not in ['sources', 'packages']:
        raise ValueError("'data_type' should be either 'sources' or 'packages'")

    map = dict()
    if data_type == 'sources':
        for item in _find_sources():
            load_sources_collection(item, map)
    else:
        for item in _find_packages():
            load_packages_collection(item, map)
    return map

def _get_apt_tags(tagfile):
    tags = None
    if tagfile.endswith('.gz'):
        tags = subprocess.Popen(['/bin/gunzip','-c',tagfile], stdout=subprocess.PIPE).stdout
    elif tagfile.endswith('.bz2'):
        tags = subprocess.Popen(['/bin/bunzip2','-c',tagfile], stdout=subprocess.PIPE).stdout
    else:
        tags = file(tagfile)

    return tags

def load_sources_collection(item, map):
    tagfile, release, pocket, section = item

    parser = apt_pkg.TagFile(_get_apt_tags(tagfile))
    while parser.step():
        pkg = parser.section['Package']
        map.setdefault(release,dict()).setdefault(pkg, {'section': 'unset', 'version': '~', 'pocket': 'unset' })
        map[release][pkg]['section'] = section
        if not pocket:
            map[release][pkg]['release_version'] = parser.section['Version']
        if apt_pkg.version_compare(parser.section['Version'],map[release][pkg]['version'])>0:
            map[release][pkg]['pocket'] = pocket
            map[release][pkg]['version'] = parser.section['Version']
            map[release][pkg]['binaries'] = parser.section['Binary'].split(', ')

    return map

def load_packages_collection(item, map):
    tagfile, release, pocket, section = item

    parser = apt_pkg.TagFile(_get_apt_tags(tagfile))
    while parser.step():
        pkg = parser.section['Package']
        map.setdefault(release,dict()).setdefault(pkg, {'section': 'unset', 'version': '~', 'pocket': 'unset' })
        map[release][pkg]['section'] = section
        if not pocket:
            map[release][pkg]['release_version'] = parser.section['Version']
        if apt_pkg.version_compare(parser.section['Version'],map[release][pkg]['version'])>0:
            map[release][pkg]['pocket'] = pocket
            map[release][pkg]['version'] = parser.section['Version']

            if parser.section.has_key('Source'):
                map[release][pkg]['source'] = parser.section['Source'].split()[0]
            else:
                map[release][pkg]['source'] = parser.section['Package']

            if parser.section.has_key('Built-Using'):
                map[release][pkg]['built-using'] = parser.section['Built-Using'].split(', ')

    return map

def load_built_using_collection(pmap, releases=None, component=None):
    built_using = dict()

    for rel in pmap.keys():
        if releases is not None and rel not in releases:
            continue

        for pkg in pmap[rel]:
            if 'built-using' in pmap[rel][pkg]:
                # Built-Using for a binary in the Packages file lists the
                # originating source package of the embedded binary
                section = pmap[rel][pkg]['section']
                if component is not None and section != component:
                    continue

                pocket = rel
                if pmap[rel][pkg]['pocket'] != '':
                    pocket += "-%s" % pmap[rel][pkg]['pocket']

                for (s, c, v) in map(lambda x: x.split(' ', 3),
                                     pmap[rel][pkg]['built-using']):
                    v = v.rstrip(')')
                    if s not in built_using:
                        built_using[s] = dict()
                    if v not in built_using[s]:
                        built_using[s][v] = dict()
                    if section not in built_using[s][v]:
                        built_using[s][v][section] = dict()
                    if pocket not in built_using[s][v][section]:
                        built_using[s][v][section][pocket] = []
                    if pkg not in built_using[s][v][section][pocket]:
                        built_using[s][v][section][pocket].append(
                            (pkg, pmap[rel][pkg]['version']))

    return built_using

def madison(source, pkg, releases=None):
    answer = dict()
    if not releases:
        releases = cve_lib.releases
    for rel in releases:
        if rel in cve_lib.eol_releases:
            continue
        if source[rel].has_key(pkg):
            name = rel
            if source[rel][pkg]['pocket'] != '':
                name += '-%s' % (source[rel][pkg]['pocket'])
            name += '/%s' % (source[rel][pkg]['section'])
            answer.setdefault(name, dict())
            answer[name].setdefault(pkg, source[rel][pkg]['version'])
    return answer
