Candidate: CVE-2014-4608
PublicDate: 2014-06-27
References:
 http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4608
 blog.securitymouse.com/2014/06/raising-lazarus-20-year-old-bug-that.html
 fastcompression.blogspot.ca/2014/06/debunking-lz4-20-years-old-bug-myth.html
Description:
 All versions of the Linux kernel (3x/2x) with LZO support (lib/lzo) that
 set the HAVE_EFFICIENT_UNALIGNED_ACCESS configuration option. Currently,
 this seems to include PowerPC and i386.
 
 Vulnerability Tested:
 	- Via btrfs
 	- Stand alone
 
 Functions Affected:
 	lib/lzo/lzo1x_decompress_safe.c:lzo1x_decompress_safe
 
 Criticality Reasoning
 ---------------------
 While some variants of this LZO algorithm flaw result in Remote Code
 Execution (RCE), it is unlikely that the Linux kernel variant can. This is
 due to the fact that control of the memory region that is overwritten can
 not be controlled in a fashion that will result in the overwrite of objects
 critical to the flow of execution.
 
 However, it may be possible to overwrite "business logic" data in certain
 circumstances, by corrupting adjacent objects in memory. Linux's guard pages
 should mitigate this, however.
 
 Because RCE is impractical, Object Over Write (OOM) is only practical in
 constrained scenarios (read: impractical), and DoS is practical, the
 criticality level of this issue should be defined as Moderate.
 
 Furthermore, a Moderate definition is needed because of the use of LZO in
 btrfs, and the potential use of LZO in networking, opening up the potential
 for remote instrumentation of this vulnerability. It is notable that SuSE
 recently reported that they will start using btrfs by default later this
 year.
 
 Lastly, only certain platforms are affected, decreasing impact.
 
 Vulnerability Description
 -------------------------
 An integer overflow can occur when processing any variant of a "literal run"
 in the lzo1x_decompress_safe function. Each of these three locations is
 subject to an integer overflow when processing zero bytes. The following code
 depicts how the size of the literal array is generated:
                        if (likely(state == 0)) {
                                if (unlikely(t == 0)) {
                                        while (unlikely(*ip == 0)) {
                                                t += 255;
                                                ip++;
                                                NEED_IP(1);
                                        }
                                        t += 15 + *ip++;
                                }
                                t += 3;
 
 As long as a zero byte (0x00) is encountered, the variable 't' will be
 incremented by 255. Using approximately sixteen megabytes of zeros, 't' will
 accumulate to a maximum unsigned integer value on a 32bit architecture. In
 combination with the following code, the value of 't' will overflow:
 copy_literal_run:
 #if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
                                if (likely(HAVE_IP(t + 15) &&
 HAVE_OP(t + 15))) {
                                        const unsigned char *ie = ip + t;
                                        unsigned char *oe = op + t;
                                        do {
                                                COPY8(op, ip);
                                                op += 8;
                                                ip += 8;
                                                COPY8(op, ip);
                                                op += 8;
                                                ip += 8;
                                        } while (ip < ie);
                                        ip = ie;
                                        op = oe;
 
 The HAVE_OP() check will always pass in this case, because the size check
 within the macro will evaluate based on the overflown integer, not the value
 of 't'.
 
 This exposes the code that copies literals to memory corruption. An
 interesting side effect of the vulnerable code shown above is that the
 value of 'op' can point to a region of memory just before the start of 'out'.
 
 It should be noted that the following code unintentionally saves all other
 architectures from exposure:
 #endif
                                {
                                        NEED_OP(t);
                                        NEED_IP(t + 3);
                                        do {
                                                *op++ = *ip++;
                                        } while (--t > 0);
                                }
 
 NEED_OP() correctly tests the value of 't' here, disallowing the potential
 for overflow.
 
 It should be noted that if 't' is a 64bit integer, the overflow is still
 possible, but impractical. An overflow would require so much input data that
 an attack would obviously be infeasible even on modern computers.
Ubuntu-Description:
Notes:
 jdstrand> android kernels (goldfish, grouper, maguro, mako and manta) are not
  supported on the Ubuntu Touch 13.10 preview kernels
 jdstrand> android kernels (flo, goldfish, grouper, maguro, mako and manta) are
  not supported on the Ubuntu Touch 14.04 preview kernels
Bugs:
 https://launchpad.net/bugs/1335313
Priority: medium
Discovered-by: Don Bailey, Ludvig Strigeus
Assigned-to: 

Patches_linux:
 break-fix: 64c70b1cf43de158282bc1675918d503e5b15cc1 206a81c18401c0cde6e579164f752c4b147324ce
upstream_linux: released (3.16~rc3)
lucid_linux: pending (2.6.32-63.126)
precise_linux: pending (3.2.0-66.99)
saucy_linux: pending (3.11.0-25.43)
trusty_linux: pending (3.13.0-31.55)
devel_linux: pending (3.16.0-1.3)

Patches_linux-ec2:
upstream_linux-ec2: released (3.16~rc3)
lucid_linux-ec2: pending (2.6.32-367.82)
precise_linux-ec2: DNE
saucy_linux-ec2: DNE
trusty_linux-ec2: DNE
devel_linux-ec2: DNE

Patches_linux-mvl-dove:
upstream_linux-mvl-dove: released (3.16~rc3)
lucid_linux-mvl-dove: ignored (reached end-of-life)
precise_linux-mvl-dove: DNE
saucy_linux-mvl-dove: DNE
trusty_linux-mvl-dove: DNE
devel_linux-mvl-dove: DNE

Patches_linux-ti-omap4:
upstream_linux-ti-omap4: released (3.16~rc3)
lucid_linux-ti-omap4: DNE
precise_linux-ti-omap4: needed
saucy_linux-ti-omap4: needed
trusty_linux-ti-omap4: DNE
devel_linux-ti-omap4: DNE

Patches_linux-fsl-imx51:
upstream_linux-fsl-imx51: released (3.16~rc3)
lucid_linux-fsl-imx51: ignored (reached end-of-life, does not affect buildd)
precise_linux-fsl-imx51: DNE
saucy_linux-fsl-imx51: DNE
trusty_linux-fsl-imx51: DNE
devel_linux-fsl-imx51: DNE

Patches_linux-linaro-omap:
upstream_linux-linaro-omap: released (3.16~rc3)
lucid_linux-linaro-omap: DNE
precise_linux-linaro-omap: ignored (abandoned)
saucy_linux-linaro-omap: DNE
trusty_linux-linaro-omap: DNE
devel_linux-linaro-omap: DNE

Patches_linux-linaro-shared:
upstream_linux-linaro-shared: released (3.16~rc3)
lucid_linux-linaro-shared: DNE
precise_linux-linaro-shared: ignored (abandoned)
saucy_linux-linaro-shared: DNE
trusty_linux-linaro-shared: DNE
devel_linux-linaro-shared: DNE

Patches_linux-linaro-vexpress:
upstream_linux-linaro-vexpress: released (3.16~rc3)
lucid_linux-linaro-vexpress: DNE
precise_linux-linaro-vexpress: ignored (abandoned)
saucy_linux-linaro-vexpress: DNE
trusty_linux-linaro-vexpress: DNE
devel_linux-linaro-vexpress: DNE

Patches_linux-qcm-msm:
upstream_linux-qcm-msm: released (3.16~rc3)
lucid_linux-qcm-msm: ignored (abandoned)
precise_linux-qcm-msm: ignored (abandoned)
saucy_linux-qcm-msm: DNE
trusty_linux-qcm-msm: DNE
devel_linux-qcm-msm: DNE

Tags_linux-armadaxp: not-ue
Patches_linux-armadaxp:
upstream_linux-armadaxp: released (3.16~rc3)
lucid_linux-armadaxp: DNE
precise_linux-armadaxp: pending (3.2.0-1636.51)
saucy_linux-armadaxp: DNE
trusty_linux-armadaxp: DNE
devel_linux-armadaxp: DNE

Patches_linux-lts-quantal: DNE
upstream_linux-lts-quantal: released (3.16~rc3)
lucid_linux-lts-quantal: DNE
precise_linux-lts-quantal: pending (3.5.0-53.79~precise1)
saucy_linux-lts-quantal: DNE
trusty_linux-lts-quantal: DNE
devel_linux-lts-quantal: DNE

Patches_linux-lts-raring:
upstream_linux-lts-raring: released (3.16~rc3)
lucid_linux-lts-raring: DNE
precise_linux-lts-raring: pending (3.8.0-43.64~precise1)
saucy_linux-lts-raring: DNE
trusty_linux-lts-raring: DNE
devel_linux-lts-raring: DNE

Patches_linux-lts-saucy:
upstream_linux-lts-saucy: released (3.16~rc3)
lucid_linux-lts-saucy: DNE
precise_linux-lts-saucy: pending (3.11.0-25.43~precise1)
saucy_linux-lts-saucy: DNE
trusty_linux-lts-saucy: DNE
devel_linux-lts-saucy: DNE

Patches_linux-lts-trusty:
upstream_linux-lts-trusty: released (3.16~rc3)
lucid_linux-lts-trusty: DNE
precise_linux-lts-trusty: pending (3.13.0-31.55~precise2)
saucy_linux-lts-trusty: DNE
trusty_linux-lts-trusty: DNE
devel_linux-lts-trusty: DNE

Patches_linux-goldfish:
upstream_linux-goldfish: released (3.16~rc3)
lucid_linux-goldfish: DNE
precise_linux-goldfish: DNE
saucy_linux-goldfish: ignored
trusty_linux-goldfish: ignored
devel_linux-goldfish: needed

Patches_linux-grouper:
upstream_linux-grouper: released (3.16~rc3)
lucid_linux-grouper: DNE
precise_linux-grouper: DNE
saucy_linux-grouper: ignored
trusty_linux-grouper: ignored
devel_linux-grouper: needs-triage

Patches_linux-maguro:
upstream_linux-maguro: released (3.16~rc3)
lucid_linux-maguro: DNE
precise_linux-maguro: DNE
saucy_linux-maguro: ignored
trusty_linux-maguro: ignored
devel_linux-maguro: needs-triage

Patches_linux-mako:
upstream_linux-mako: released (3.16~rc3)
lucid_linux-mako: DNE
precise_linux-mako: DNE
saucy_linux-mako: ignored
trusty_linux-mako: ignored
devel_linux-mako: needed

Patches_linux-manta:
upstream_linux-manta: released (3.16~rc3)
lucid_linux-manta: DNE
precise_linux-manta: DNE
saucy_linux-manta: ignored
trusty_linux-manta: ignored
devel_linux-manta: needed

Patches_linux-flo:
upstream_linux-flo: released (3.16~rc3)
lucid_linux-flo: DNE
precise_linux-flo: DNE
saucy_linux-flo: DNE
trusty_linux-flo: ignored
devel_linux-flo: needed
