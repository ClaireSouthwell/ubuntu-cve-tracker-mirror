#!/usr/bin/python
import os, apt_pkg, sys, subprocess

releases = ['dapper','edgy','feisty','gutsy','hardy']

#check = sys.argv[1]

apt_pkg.InitSystem();

def _find_sources():
    rcfile = os.path.expanduser('~/.source_map')
    if os.path.exists(rcfile):
        info = file(rcfile)
        ubuntu = info.readline().strip()
        canonical = info.readline().strip()
        return _find_sources_from_mirror(ubuntu,canonical)
    else:
        return _find_sources_from_apt()

def _find_sources_from_mirror(ubuntu,canonical):
    collection = []
    errors = False
    missing = ""

    for rel in releases:
        # free
        for pocket in ['','-updates','-security']:
            for section in ['main','restricted','universe','multiverse']:
                source = os.path.join(ubuntu, 'dists', rel + pocket, section, 'source', 'Sources')
                if not os.path.exists(source):
                    missing += " %s\n" % (source)
                    errors = True
                else:
                    name = pocket
                    if name.startswith('-'):
            	        name = name[1:]
                    else:
                        name = ''
                    collection += [(source, rel, name, section)]
        # partner
        pocket = ''
        section = 'partner'
        source = os.path.join(canonical, 'dists', rel + pocket, section, 'source', 'Sources')
        if not os.path.exists(source):
            missing += " %s\n" % (source)
            errors = True
        else:
            name = pocket
            if name.startswith('-'):
    	        name = name[1:]
            else:
                name = ''
            collection += [(source, rel, name, section)]
        
    if errors:
        raise NameError, "Missing mirror elements:\n" + missing

    return collection


def _find_sources_from_apt():
  collection = []

  saw = dict()
  lists = '/var/lib/apt/lists'
  for f in os.listdir(lists):
    if not f.endswith('_source_Sources') and not '-commercial_main_binary-' in f:
        continue
    parts = f.split('_')
    parts.pop() # _Sources
    parts.pop() # _source
    section = parts.pop() # _main
    release_real = parts.pop() # _dapper
    saw.setdefault(release_real,True)
    tmp = release_real.split('-')
    release = tmp[0]
    if len(tmp) > 1:
    	pocket = tmp[1]
    else:
        pocket = ''
    collection += [(os.path.join(lists,f), release, pocket, section)]

  # Validate all the sources are available
  errors = False
  missing = ""
  for rel in releases:
    for pocket in ['','-updates','-security']:
        if not saw.has_key(rel+pocket):
            missing += " deb-src http://archive.ubuntu.com/ubuntu %s%s main restricted universe multiverse\n" % (rel,pocket)
            errors = True
    for pocket in ['-commercial']:
        if not rel in ('gutsy','hardy') and not saw.has_key(rel+pocket):
            missing += " deb http://archive.canonical.com/ubuntu %s%s main\n" % (rel,pocket)
            errors = True
  if errors:
    raise NameError, "Missing /etc/apt/sources.list lines:\n%s" % (missing)

  return collection

def load():
    source_map = dict()

    for item in _find_sources():
        tagfile, release, pocket, section = item

        tags = None
        if tagfile.endswith('.gz'):
            tags = subprocess.Popen(['/bin/gunzip','-c',tagfile], stdout=subprocess.PIPE).stdout
        else:
            tags = file(tagfile)
        parser = apt_pkg.ParseTagFile(tags)
        while parser.Step():
            pkg = parser.Section['Package']
            source_map.setdefault(release,dict()).setdefault(pkg, {'section': 'unset', 'version': '0', 'pocket': 'unset' })
            source_map[release][pkg]['section'] = section
       	    source_map[release][pkg]['pocket'] = pocket
            if apt_pkg.VersionCompare(parser.Section['Version'],source_map[release][pkg]['version']) == 1:
                source_map[release][pkg]['version'] = parser.Section['Version']
            
    return source_map
