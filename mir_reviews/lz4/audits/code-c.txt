Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./programs/datagen.c:225:        memcpy(buff, buff + RDG_BLOCKSIZE, RDG_DICTSIZE);
./programs/lz4io.c:366:    in_buff = (char*)malloc(LEGACY_BLOCKSIZE);
./programs/lz4io.c:367:    out_buff = (char*)malloc(outBuffSize);
./programs/lz4io.c:438:    ress.srcBuffer = malloc(blockSize);
./programs/lz4io.c:441:    ress.dstBuffer = malloc(ress.dstBufferSize);
./programs/lz4io.c:600:    char* dstFileName = (char*)malloc(FNSPACE);
./programs/lz4io.c:612:        if (ofnSize <= ifnSize+suffixSize+1) { free(dstFileName); ofnSize = ifnSize + 20; dstFileName = (char*)malloc(ofnSize); }
./programs/lz4io.c:613:        strcpy(dstFileName, inFileNamesTable[i]);
./programs/lz4io.c:738:    in_buff = (char*)malloc(LZ4_compressBound(LEGACY_BLOCKSIZE));
./programs/lz4io.c:739:    out_buff = (char*)malloc(LEGACY_BLOCKSIZE);
./programs/lz4io.c:804:    ress.srcBuffer = malloc(ress.srcBufferSize);
./programs/lz4io.c:806:    ress.dstBuffer = malloc(ress.dstBufferSize);
./programs/lz4io.c:1022:    char* outFileName = (char*)malloc(FNSPACE);
./programs/lz4io.c:1035:        if (ofnSize <= ifnSize-suffixSize+1) { free(outFileName); ofnSize = ifnSize + 20; outFileName = (char*)malloc(ofnSize); if (outFileName==NULL) exit(1); }
./programs/lz4io.c:1042:        memcpy(outFileName, inFileNamesTable[i], ifnSize - suffixSize);
./programs/frametest.c:247:    CNBuffer = malloc(COMPRESSIBLE_NOISE_LENGTH);
./programs/frametest.c:248:    compressedBuffer = malloc(LZ4F_compressFrameBound(COMPRESSIBLE_NOISE_LENGTH, NULL));
./programs/frametest.c:249:    decodedBuffer = malloc(COMPRESSIBLE_NOISE_LENGTH);
./programs/frametest.c:610:    srcBuffer = malloc(srcDataLength);
./programs/frametest.c:612:    compressedBuffer = malloc(LZ4F_compressFrameBound(srcDataLength, NULL));
./programs/frametest.c:614:    decodedBuffer = calloc(1, srcDataLength);   /* calloc avoids decodedBuffer being considered "garbage" by scan-build */
./programs/fuzzer.c:221:    buffers[0] = (char*)malloc(BLOCKSIZE_I134);
./programs/fuzzer.c:222:    buffers[1] = (char*)malloc(BLOCKSIZE_I134);
./programs/fuzzer.c:232:        buffers[nbBuff] = (char*)malloc(BLOCKSIZE_I134);
./programs/fuzzer.c:328:    void* stateLZ4   = malloc(LZ4_sizeofState());
./programs/fuzzer.c:329:    void* stateLZ4HC = malloc(LZ4_sizeofStateHC());
./programs/fuzzer.c:344:    CNBuffer = malloc(COMPRESSIBLE_NOISE_LENGTH);
./programs/fuzzer.c:346:    compressedBuffer = (char*)malloc(LZ4_compressBound(FUZ_MAX_BLOCK_SIZE));
./programs/fuzzer.c:347:    decodedBuffer = (char*)malloc(FUZ_MAX_DICT_SIZE + FUZ_MAX_BLOCK_SIZE);
./programs/fuzzer.c:604:        memcpy(decodedBuffer, dict, dictSize);
./programs/fuzzer.c:816:                memcpy (ringBuffer + rNext, testInput + iNext, messageSize);
./programs/fuzzer.c:978:                memcpy (ringBuffer + rNext, testInput + iNext, messageSize);
./programs/fuzzer.c:1041:                memcpy(testInput + iNext, testInput + 8, messageSize);
./programs/fullbench.c:229:        testmem = (BYTE*) malloc ((size_t)requiredMem);
./programs/fullbench.c:608:      chunkP = (struct chunkParameters*) malloc(((benchedSize / (size_t)g_chunkSize)+1) * sizeof(struct chunkParameters));
./programs/fullbench.c:609:      orig_buff = (char*) malloc(benchedSize);
./programs/fullbench.c:613:      compressed_buff = (char*)malloc((size_t)compressedBuffSize);
./programs/bench.c:209:        testmem = (BYTE*) malloc ((size_t)requiredMem);
./programs/bench.c:298:      chunkP = (struct chunkParameters*) malloc(((benchedSize / (size_t)chunkSize)+1) * sizeof(struct chunkParameters));
./programs/bench.c:299:      orig_buff = (char*)malloc((size_t)benchedSize);
./programs/bench.c:303:      compressedBuffer = (char*)malloc((size_t)compressedBuffSize);
./programs/lz4cli.c:305:        if (!strcmp(argument, "--multiple")) { multiple_inputs = 1; if (inFileNames==NULL) inFileNames = (const char**)malloc(argc * sizeof(char*)); continue; }
./programs/lz4cli.c:421:                        inFileNames = (const char**) malloc(argc * sizeof(char*));
./programs/lz4cli.c:427:                        inFileNames = (const char**) malloc(argc * sizeof(char*));
./programs/lz4cli.c:505:            dynNameSpace = (char*)calloc(1,l+5);
./programs/lz4cli.c:507:            strcpy(dynNameSpace, input_filename);
./programs/lz4cli.c:517:            dynNameSpace = (char*)calloc(1,inl+1);
./programs/lz4cli.c:518:            strcpy(dynNameSpace, input_filename);
./examples/blockStreaming_lineByLine.c:45:    char* const cmpBuf = (char*) malloc(cmpBufBytes);
./examples/blockStreaming_lineByLine.c:46:    char* const inpBuf = (char*) malloc(ringBufferBytes);
./examples/blockStreaming_lineByLine.c:93:    char* const cmpBuf = (char*) malloc(LZ4_COMPRESSBOUND(messageMaxBytes));
./examples/blockStreaming_lineByLine.c:94:    char* const decBuf = (char*) malloc(ringBufferBytes);
./examples/blockStreaming_lineByLine.c:128:    char* const b0 = (char*) malloc(tempBufferBytes);
./examples/blockStreaming_lineByLine.c:129:    char* const b1 = (char*) malloc(tempBufferBytes);
./examples/frameCompress.c:35:	src = malloc(BUF_SIZE);
./examples/frameCompress.c:43:	buf = malloc(size);
./examples/frameCompress.c:126:		output = tmp = malloc(len + 5);
./examples/frameCompress.c:131:		strcpy(tmp, input);
./examples/frameCompress.c:132:		strcpy(tmp + len, ".lz4");
./lib/lz4frame.c:53:#define ALLOCATOR(s)   calloc(1,s)
./lib/lz4frame.c:509:        memcpy(cSizePtr+4, src, srcSize);
./lib/lz4frame.c:590:            memcpy(cctxPtr->tmpIn + cctxPtr->tmpInSize, srcBuffer, srcSize);
./lib/lz4frame.c:599:            memcpy(cctxPtr->tmpIn + cctxPtr->tmpInSize, srcBuffer, sizeToCopy);
./lib/lz4frame.c:653:        memcpy(cctxPtr->tmpIn, srcPtr, sizeToCopy);
./lib/lz4frame.c:859:            memcpy(dctxPtr->header, srcPtr, srcSize);
./lib/lz4frame.c:994:        memcpy(dctxPtr->tmpOutBuffer + preserveSize - copySize, oldDictEnd - copySize, copySize);
./lib/lz4frame.c:1006:            memcpy(dctxPtr->tmpOutBuffer, dctxPtr->dict + dctxPtr->dictSize - preserveSize, preserveSize);
./lib/lz4frame.c:1009:        memcpy(dctxPtr->tmpOutBuffer + dctxPtr->dictSize, dstPtr, dstSize);
./lib/lz4frame.c:1018:        memcpy(dctxPtr->tmpOutBuffer, dctxPtr->dict + dctxPtr->dictSize - preserveSize, preserveSize);
./lib/lz4frame.c:1019:        memcpy(dctxPtr->tmpOutBuffer + preserveSize, dstPtr, dstSize);
./lib/lz4frame.c:1099:                memcpy(dctxPtr->header + dctxPtr->tmpInSize, srcPtr, sizeToCopy);
./lib/lz4frame.c:1135:                memcpy(dctxPtr->tmpIn + dctxPtr->tmpInSize, srcPtr, sizeToCopy);
./lib/lz4frame.c:1176:                memcpy(dstPtr, srcPtr, sizeToCopy);
./lib/lz4frame.c:1215:                memcpy(dctxPtr->tmpIn + dctxPtr->tmpInSize, srcPtr, sizeToCopy);
./lib/lz4frame.c:1280:                            memcpy(dctxPtr->tmpOutBuffer, dctxPtr->dict + dctxPtr->dictSize - 64 KB, 64 KB);
./lib/lz4frame.c:1308:                memcpy(dstPtr, dctxPtr->tmpOut + dctxPtr->tmpOutStart, sizeToCopy);
./lib/lz4frame.c:1356:                memcpy(dctxPtr->tmpIn + dctxPtr->tmpInSize, srcPtr, sizeToCopy);
./lib/lz4frame.c:1400:                memcpy(dctxPtr->header + dctxPtr->tmpInSize, srcPtr, sizeToCopy);
./lib/lz4frame.c:1451:            memcpy(dctxPtr->tmpOutBuffer + preserveSize - copySize, oldDictEnd - copySize, copySize);
./lib/lz4frame.c:1462:            memcpy(dctxPtr->tmpOutBuffer, oldDictEnd - newDictSize, newDictSize);
./lib/xxhash.c:89:/* for malloc(), free() */
./lib/xxhash.c:91:static void* XXH_malloc(size_t s) { return malloc(s); }
./lib/xxhash.c:93:/* for memcpy() */
./lib/xxhash.c:95:static void* XXH_memcpy(void* dest, const void* src, size_t size) { return memcpy(dest,src,size); }
./lib/xxhash.c:119:    memcpy(&val32, memPtr, 4);
./lib/xxhash.c:126:    memcpy(&val64, memPtr, 8);
./lib/xxhash.c:519:    return (XXH32_state_t*)XXH_malloc(sizeof(XXH32_state_t));
./lib/xxhash.c:530:    return (XXH64_state_t*)XXH_malloc(sizeof(XXH64_state_t));
./lib/xxhash.c:582:        XXH_memcpy((BYTE*)(state->mem32) + state->memsize, input, len);
./lib/xxhash.c:589:        XXH_memcpy((BYTE*)(state->mem32) + state->memsize, input, 16-state->memsize);
./lib/xxhash.c:650:        XXH_memcpy(state->mem32, p, bEnd-p);
./lib/xxhash.c:736:        XXH_memcpy(((BYTE*)state->mem64) + state->memsize, input, len);
./lib/xxhash.c:743:        XXH_memcpy(((BYTE*)state->mem64) + state->memsize, input, 32-state->memsize);
./lib/xxhash.c:804:        XXH_memcpy(state->mem64, p, bEnd-p);
./lib/lz4.h:135:    and allocate it on 8-bytes boundaries (using malloc() typically).
./lib/lz4hc.c:529:        memcpy(op, anchor, iend - anchor);
./lib/lz4hc.c:562:LZ4_streamHC_t* LZ4_createStreamHC(void) { return (LZ4_streamHC_t*)malloc(sizeof(LZ4_streamHC_t)); }
./lib/lz4.c:42: * in memory stack (0:default, fastest), or in memory heap (1:requires malloc()).
./lib/lz4.c:106:#define ALLOCATOR(n,s) calloc(n,s)
./lib/lz4.c:148:    memcpy(&val16, memPtr, 2);
./lib/lz4.c:169:        memcpy(memPtr, &value, 2);
./lib/lz4.c:182:    memcpy(&val32, memPtr, 4);
./lib/lz4.c:189:    memcpy(&val64, memPtr, 8);
./lib/lz4.c:202:static void LZ4_copy4(void* dstPtr, const void* srcPtr) { memcpy(dstPtr, srcPtr, 4); }
./lib/lz4.c:204:static void LZ4_copy8(void* dstPtr, const void* srcPtr) { memcpy(dstPtr, srcPtr, 8); }
./lib/lz4.c:648:        memcpy(op, anchor, lastRun);
./lib/lz4.c:884:        memcpy(op, anchor, lastRunSize);
./lib/lz4.c:1186:            memcpy(op, ip, length);
./lib/lz4.c:1228:                memcpy(op, dictEnd - copySize, copySize);
./lib/lz4.c:1239:                    memcpy(op, lowPrefix, copySize);
./lib/lz4hc.h:78:   Allocated memory must be aligned on 8-bytes boundaries (which a normal malloc() will do properly).

== files() ==
./programs/lz4io.c:272:        *pfinput = fopen(input_filename, "rb");
./programs/lz4io.c:296:        if (output_filename != nulmark) *pfoutput = fopen( output_filename, "rb" );
./programs/lz4io.c:311:        *pfoutput = fopen( output_filename, "wb" );
./programs/fullbench.c:595:      inFile = fopen( inFileName, "rb" );
./programs/bench.c:283:      inFile = fopen( inFileName, "rb" );
./examples/blockStreaming_lineByLine.c:175:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/blockStreaming_lineByLine.c:176:        FILE* outFp = fopen(lz4Filename, "wb");
./examples/blockStreaming_lineByLine.c:186:        FILE* inpFp = fopen(lz4Filename, "rb");
./examples/blockStreaming_lineByLine.c:187:        FILE* outFp = fopen(decFilename, "wb");
./examples/blockStreaming_lineByLine.c:197:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/blockStreaming_lineByLine.c:198:        FILE* decFp = fopen(decFilename, "rb");
./examples/HCStreaming_ringBuffer.c:196:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/HCStreaming_ringBuffer.c:197:        FILE* outFp = fopen(lz4Filename, "wb");
./examples/HCStreaming_ringBuffer.c:207:        FILE* inpFp = fopen(lz4Filename, "rb");
./examples/HCStreaming_ringBuffer.c:208:        FILE* outFp = fopen(decFilename, "wb");
./examples/HCStreaming_ringBuffer.c:218:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/HCStreaming_ringBuffer.c:219:        FILE* decFp = fopen(decFilename, "rb");
./examples/blockStreaming_doubleBuffer.c:160:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/blockStreaming_doubleBuffer.c:161:        FILE* outFp = fopen(lz4Filename, "wb");
./examples/blockStreaming_doubleBuffer.c:173:        FILE* inpFp = fopen(lz4Filename, "rb");
./examples/blockStreaming_doubleBuffer.c:174:        FILE* outFp = fopen(decFilename, "wb");
./examples/blockStreaming_doubleBuffer.c:186:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/blockStreaming_doubleBuffer.c:187:        FILE* decFp = fopen(decFilename, "rb");
./examples/frameCompress.c:135:	in = fopen(input, "rb");
./examples/frameCompress.c:141:	out = fopen(output, "wb");
./examples/blockStreaming_ringBuffer.c:163:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/blockStreaming_ringBuffer.c:164:        FILE* outFp = fopen(lz4Filename, "wb");
./examples/blockStreaming_ringBuffer.c:174:        FILE* inpFp = fopen(lz4Filename, "rb");
./examples/blockStreaming_ringBuffer.c:175:        FILE* outFp = fopen(decFilename, "wb");
./examples/blockStreaming_ringBuffer.c:185:        FILE* inpFp = fopen(inpFilename, "rb");
./examples/blockStreaming_ringBuffer.c:186:        FILE* decFp = fopen(decFilename, "rb");

== logging() ==
./programs/lz4io.c:660:        if (seekResult != 0) EXM_THROW(71, "1 GB skip error (sparse file support)");
./programs/lz4io.c:722:        if (seekResult != 0) EXM_THROW(69, "Final skip error (sparse file)\n");
./examples/frameCompress.c:76:				if (ferror(out))
./examples/frameCompress.c:99:		if (ferror(out))
./examples/frameCompress.c:137:		fprintf(stderr, "Failed to open input file %s: %s\n", input, strerror(errno));
./examples/frameCompress.c:143:		fprintf(stderr, "Failed to open output file %s: %s\n", output, strerror(errno));
./lib/lz4.h:323:#    pragma message("WARNING: You need to implement LZ4_DEPRECATED for this compiler")
./lib/lz4hc.h:159:#    pragma message("WARNING: You need to implement LZ4_DEPRECATED for this compiler")

== environment() ==

== privileged() ==

== networking() ==
./programs/datagen.c:223:        fwrite(buff, 1, genBlockSize, stdout);
./programs/lz4io.c:175:int LZ4IO_setOverwrite(int yes)
./programs/lz4io.c:372:    sizeCheck = fwrite(out_buff, 1, MAGICNUMBER_SIZE, foutput);
./programs/lz4io.c:380:        int inSize = (int) fread(in_buff, (size_t)1, (size_t)LEGACY_BLOCKSIZE, finput);
./programs/lz4io.c:391:        sizeCheck = fwrite(out_buff, 1, outSize+4, foutput);
./programs/lz4io.c:497:    readSize  = fread(srcBuffer, (size_t)1, blockSize, srcFile);
./programs/lz4io.c:511:        sizeCheck = fwrite(dstBuffer, 1, cSize, dstFile);
./programs/lz4io.c:522:        sizeCheck = fwrite(dstBuffer, 1, headerSize, dstFile);
./programs/lz4io.c:538:            sizeCheck = fwrite(dstBuffer, 1, outSize, dstFile);
./programs/lz4io.c:542:            readSize  = fread(srcBuffer, (size_t)1, (size_t)blockSize, srcFile);
./programs/lz4io.c:550:        sizeCheck = fwrite(dstBuffer, 1, headerSize, dstFile);
./programs/lz4io.c:651:        size_t sizeCheck = fwrite(buffer, 1, bufferSize, file);
./programs/lz4io.c:684:            sizeCheck = fwrite(ptrT, sizeT, seg0SizeT, file);
./programs/lz4io.c:704:            sizeCheck = fwrite(restPtr, 1, restEnd - restPtr, file);
./programs/lz4io.c:723:        sizeCheck = fwrite(lastZeroByte, 1, 1, file);
./programs/lz4io.c:750:        sizeCheck = fread(in_buff, 1, 4, finput);
./programs/lz4io.c:760:        sizeCheck = fread(in_buff, 1, blockSize, finput);
./programs/lz4io.c:845:        readSize = fread(ress.srcBuffer, 1, nextToLoad, srcFile);
./programs/lz4io.c:888:    sizeCheck = fwrite(MNstore, 1, MAGICNUMBER_SIZE, foutput);
./programs/lz4io.c:893:        read = fread(buffer, 1, PTSIZE, finput);
./programs/lz4io.c:923:      nbReadBytes = fread(MNstore, 1, MAGICNUMBER_SIZE, finput);
./programs/lz4io.c:939:        nbReadBytes = fread(MNstore, 1, 4, finput);
./programs/fullbench.c:626:      readSize = fread(orig_buff, 1, benchedSize, inFile);
./programs/bench.c:333:      readSize = fread(orig_buff, 1, benchedSize, inFile);
./programs/lz4cli.c:287:    LZ4IO_setOverwrite(0);
./programs/lz4cli.c:306:        if (!strcmp(argument, "--test")) { decode = 1; LZ4IO_setOverwrite(1); output_filename=nulmark; continue; }
./programs/lz4cli.c:307:        if (!strcmp(argument, "--force")) { LZ4IO_setOverwrite(1); continue; }
./programs/lz4cli.c:308:        if (!strcmp(argument, "--no-force")) { LZ4IO_setOverwrite(0); continue; }
./programs/lz4cli.c:342:                if (*argument=='y') { LZ4IO_setOverwrite(1); continue; }                           /* -y (answer 'yes' to overwrite permission) */
./programs/lz4cli.c:378:                case 't': decode=1; LZ4IO_setOverwrite(1); output_filename=nulmark; break;
./programs/lz4cli.c:381:                case 'f': LZ4IO_setOverwrite(1); break;
./programs/lz4io.h:64:int LZ4IO_setOverwrite(int yes);
./examples/blockStreaming_lineByLine.c:18:    return fwrite(&i, sizeof(i), 1, fp);
./examples/blockStreaming_lineByLine.c:23:    return fwrite(array, 1, arrayBytes, fp);
./examples/blockStreaming_lineByLine.c:28:    return fread(i, sizeof(*i), 1, fp);
./examples/blockStreaming_lineByLine.c:33:    return fread(array, 1, arrayBytes, fp);
./examples/blockStreaming_lineByLine.c:133:        const size_t r0 = fread(b0, 1, tempBufferBytes, f0);
./examples/blockStreaming_lineByLine.c:134:        const size_t r1 = fread(b1, 1, tempBufferBytes, f1);
./examples/HCStreaming_ringBuffer.c:38:    return fwrite(&i, sizeof(i), 1, fp);
./examples/HCStreaming_ringBuffer.c:42:    return fwrite(array, 1, arrayBytes, fp);
./examples/HCStreaming_ringBuffer.c:46:    return fread(i, sizeof(*i), 1, fp);
./examples/HCStreaming_ringBuffer.c:50:    return fread(array, 1, arrayBytes, fp);
./examples/HCStreaming_ringBuffer.c:142:        const size_t r0 = fread(b0, 1, sizeof(b0), f0);
./examples/HCStreaming_ringBuffer.c:143:        const size_t r1 = fread(b1, 1, sizeof(b1), f1);
./examples/blockStreaming_doubleBuffer.c:23:    return fwrite(&i, sizeof(i), 1, fp);
./examples/blockStreaming_doubleBuffer.c:27:    return fwrite(array, 1, arrayBytes, fp);
./examples/blockStreaming_doubleBuffer.c:31:    return fread(i, sizeof(*i), 1, fp);
./examples/blockStreaming_doubleBuffer.c:35:    return fread(array, 1, arrayBytes, fp);
./examples/frameCompress.c:58:		k = fread(src, 1, BUF_SIZE, in);
./examples/frameCompress.c:74:			k = fwrite(buf, 1, offset, out);
./examples/frameCompress.c:97:	k = fwrite(buf, 1, offset, out);
./examples/blockStreaming_ringBuffer.c:35:    return fwrite(&i, sizeof(i), 1, fp);
./examples/blockStreaming_ringBuffer.c:39:    return fwrite(array, 1, arrayBytes, fp);
./examples/blockStreaming_ringBuffer.c:43:    return fread(i, sizeof(*i), 1, fp);
./examples/blockStreaming_ringBuffer.c:47:    return fread(array, 1, arrayBytes, fp);
./examples/blockStreaming_ringBuffer.c:125:        const size_t r0 = fread(b0, 1, sizeof(b0), f0);
./examples/blockStreaming_ringBuffer.c:126:        const size_t r1 = fread(b1, 1, sizeof(b1), f1);

== http:// ==
./lib/lz4frame.c:5:BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/lz4frame.h:5:   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/xxhash.c:5:BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/lz4frame_static.h:6:   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/xxhash.h:6:   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/lz4.h:6:   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/lz4hc.c:5:    BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/lz4.c:5:   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
./lib/lz4hc.h:5:   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)

== encryption ==
./programs/datagen.c:22:   - ZSTD source repository : https://github.com/Cyan4973/zstd
./programs/datagen.c:23:   - Public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/datagencli.c:23:   - ZSTD source repository : https://github.com/Cyan4973/zstd
./programs/datagencli.c:24:   - Public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/datagen.h:22:   - ZSTD source repository : https://github.com/Cyan4973/zstd
./programs/datagen.h:23:   - Public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/bench.h:20:    - LZ4 source repository : https://github.com/Cyan4973/lz4
./programs/bench.h:21:    - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/lz4io.c:22:  - LZ4 source repository : https://github.com/Cyan4973/lz4
./programs/lz4io.c:23:  - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/frametest.c:22:    - LZ4 source repository : https://github.com/Cyan4973/lz4
./programs/frametest.c:23:    - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/fuzzer.c:22:    - LZ4 source mirror : https://github.com/Cyan4973/lz4
./programs/fuzzer.c:23:    - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/fullbench.c:22:    - LZ4 source repository : https://github.com/Cyan4973/lz4
./programs/fullbench.c:23:    - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/bench.c:22:    - LZ4 source repository : https://github.com/Cyan4973/lz4
./programs/bench.c:23:    - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/lz4cli.c:22:  - LZ4 source repository : https://github.com/Cyan4973/lz4
./programs/lz4cli.c:23:  - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./programs/lz4cli.c:424:                    /* Treat non-option args as input files.  See https://code.google.com/p/lz4/issues/detail?id=151 */
./programs/lz4io.h:21:  - LZ4 source repository : https://github.com/Cyan4973/lz4
./programs/lz4io.h:22:  - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./examples/HCStreaming_ringBuffer.c:15:#  pragma GCC diagnostic ignored "-Wmissing-braces"   /* GCC bug 53119 : doesn't accept { 0 } as initializer (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119) */
./examples/blockStreaming_ringBuffer.c:13:#  pragma GCC diagnostic ignored "-Wmissing-braces"   /* GCC bug 53119 : doesn't accept { 0 } as initializer (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119) */
./lib/lz4frame.c:31:- LZ4 source repository : https://github.com/Cyan4973/lz4
./lib/lz4frame.c:32:- LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./lib/lz4frame.h:31:   - LZ4 source repository : https://github.com/Cyan4973/lz4
./lib/lz4frame.h:32:   - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./lib/xxhash.c:31:- xxHash source repository : https://github.com/Cyan4973/xxHash
./lib/lz4frame_static.h:32:   - LZ4 source repository : https://github.com/Cyan4973/lz4
./lib/lz4frame_static.h:33:   - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./lib/xxhash.h:32:   - xxHash source repository : https://github.com/Cyan4973/xxHash
./lib/lz4.h:32:   - LZ4 source repository : https://github.com/Cyan4973/lz4
./lib/lz4.h:33:   - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./lib/lz4hc.c:31:       - LZ4 source repository : https://github.com/Cyan4973/lz4
./lib/lz4hc.c:32:       - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./lib/lz4.c:31:   - LZ4 source repository : https://github.com/Cyan4973/lz4
./lib/lz4.c:32:   - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c
./lib/lz4hc.h:31:   - LZ4 source repository : https://github.com/Cyan4973/lz4
./lib/lz4hc.h:32:   - LZ4 public forum : https://groups.google.com/forum/#!forum/lz4c

== sql() ==

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==

== unsafe input mechanisms ==

