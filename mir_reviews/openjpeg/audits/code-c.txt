Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./libopenjpeg/mqc.c:356:	opj_mqc_t *mqc = (opj_mqc_t*)opj_malloc(sizeof(opj_mqc_t));
./libopenjpeg/cio.c:39:	opj_cio_t *cio = (opj_cio_t*)opj_malloc(sizeof(opj_cio_t));
./libopenjpeg/cio.c:63:		cio->buffer = (unsigned char *)opj_malloc(cio->length);
./libopenjpeg/tcd.c:103:	opj_tcd_t *tcd = (opj_tcd_t*)opj_malloc(sizeof(opj_tcd_t));
./libopenjpeg/tcd.c:106:	tcd->tcd_image = (opj_tcd_image_t*)opj_malloc(sizeof(opj_tcd_image_t));
./libopenjpeg/tcd.c:134:	tcd->tcd_image->tiles = (opj_tcd_tile_t *) opj_malloc(sizeof(opj_tcd_tile_t));
./libopenjpeg/tcd.c:187:		tile->comps = (opj_tcd_tilecomp_t *) opj_malloc(image->numcomps * sizeof(opj_tcd_tilecomp_t));
./libopenjpeg/tcd.c:199:			tilec->data = (int *) opj_aligned_malloc((tilec->x1 - tilec->x0) * (tilec->y1 - tilec->y0) * sizeof(int));
./libopenjpeg/tcd.c:202:			tilec->resolutions = (opj_tcd_resolution_t *) opj_malloc(tilec->numresolutions * sizeof(opj_tcd_resolution_t));
./libopenjpeg/tcd.c:292:					band->precincts = (opj_tcd_precinct_t *) opj_malloc(3 * res->pw * res->ph * sizeof(opj_tcd_precinct_t));
./libopenjpeg/tcd.c:323:						prc->cblks.enc = (opj_tcd_cblk_enc_t*) opj_calloc((prc->cw * prc->ch), sizeof(opj_tcd_cblk_enc_t));
./libopenjpeg/tcd.c:340:							cblk->data = (unsigned char*) opj_calloc(9728+2, sizeof(unsigned char));
./libopenjpeg/tcd.c:345:							cblk->layers = (opj_tcd_layer_t*) opj_calloc(100, sizeof(opj_tcd_layer_t));
./libopenjpeg/tcd.c:346:							cblk->passes = (opj_tcd_pass_t*) opj_calloc(100, sizeof(opj_tcd_pass_t));
./libopenjpeg/tcd.c:465:			tilec->data = (int *) opj_aligned_malloc((tilec->x1 - tilec->x0) * (tilec->y1 - tilec->y0) * sizeof(int));
./libopenjpeg/tcd.c:578:						prc->cblks.enc = (opj_tcd_cblk_enc_t*) opj_calloc(prc->cw * prc->ch, sizeof(opj_tcd_cblk_enc_t));
./libopenjpeg/tcd.c:603:							cblk->data = (unsigned char*) opj_calloc(8192+2, sizeof(unsigned char));
./libopenjpeg/tcd.c:608:							cblk->layers = (opj_tcd_layer_t*) opj_calloc(100, sizeof(opj_tcd_layer_t));
./libopenjpeg/tcd.c:609:							cblk->passes = (opj_tcd_pass_t*) opj_calloc(100, sizeof(opj_tcd_pass_t));
./libopenjpeg/tcd.c:627:    tcd->tcd_image->tiles = (opj_tcd_tile_t *) opj_calloc(cp->tw * cp->th, sizeof(opj_tcd_tile_t));
./libopenjpeg/tcd.c:640:		tile->comps = (opj_tcd_tilecomp_t*) opj_calloc(image->numcomps, sizeof(opj_tcd_tilecomp_t));
./libopenjpeg/tcd.c:716:		tilec->resolutions = (opj_tcd_resolution_t *) opj_malloc(tilec->numresolutions * sizeof(opj_tcd_resolution_t));
./libopenjpeg/tcd.c:804:				band->precincts = (opj_tcd_precinct_t *) opj_malloc(res->pw * res->ph * sizeof(opj_tcd_precinct_t));
./libopenjpeg/tcd.c:827:					prc->cblks.dec = (opj_tcd_cblk_dec_t*) opj_malloc(prc->cw * prc->ch * sizeof(opj_tcd_cblk_dec_t));
./libopenjpeg/tcd.c:865:	/*matrice=(int*)opj_malloc(tcd_tcp->numlayers*tcd_tile->comps[0].numresolutions*3*sizeof(int)); */
./libopenjpeg/tcd.c:1094:		tile_info->thresh = (double *) opj_malloc(tcd_tcp->numlayers * sizeof(double));
./libopenjpeg/tcd.c:1226:			cstr_info->tile[tileno].packet = (opj_packet_info_t*) opj_calloc(cstr_info->numcomps * cstr_info->numlayers * numpacks, sizeof(opj_packet_info_t));
./libopenjpeg/tcd.c:1377:		cstr_info->tile[tileno].packet = (opj_packet_info_t *) opj_malloc(cstr_info->numlayers * numprec * sizeof(opj_packet_info_t));
./libopenjpeg/tcd.c:1408:		tilec->data = (int*) opj_aligned_malloc((((tilec->x1 - tilec->x0) * (tilec->y1 - tilec->y0))+3) * sizeof(int));
./libopenjpeg/tcd.c:1511:			imagec->data = (int*) opj_malloc(imagec->w * imagec->h * sizeof(int));
./libopenjpeg/bio.c:118:	opj_bio_t *bio = (opj_bio_t*)opj_malloc(sizeof(opj_bio_t));
./libopenjpeg/tgt.c:51:	tree = (opj_tgt_tree_t *) opj_malloc(sizeof(opj_tgt_tree_t));
./libopenjpeg/tgt.c:74:	tree->nodes = (opj_tgt_node_t*) opj_calloc(tree->numnodes, sizeof(opj_tgt_node_t));
./libopenjpeg/openjpeg.c:66:	opj_dinfo_t *dinfo = (opj_dinfo_t*)opj_calloc(1, sizeof(opj_dinfo_t));
./libopenjpeg/openjpeg.c:178:	opj_cinfo_t *cinfo = (opj_cinfo_t*)opj_calloc(1, sizeof(opj_cinfo_t));
./libopenjpeg/thix_manager.c:59:  box = (opj_jp2_box_t *)opj_calloc( cstr_info.tw*cstr_info.th, sizeof(opj_jp2_box_t));
./libopenjpeg/t1.c:1118:		t1->data = (int*) opj_aligned_malloc(datasize * sizeof(int));
./libopenjpeg/t1.c:1131:		t1->flags = (flag_t*) opj_aligned_malloc(flagssize * sizeof(flag_t));
./libopenjpeg/t1.c:1371:	opj_t1_t *t1 = (opj_t1_t*) opj_malloc(sizeof(opj_t1_t));
./libopenjpeg/opj_malloc.h:49:void * OPJ_CALLCONV opj_malloc(size_t size);
./libopenjpeg/opj_malloc.h:51:#define opj_malloc(size) malloc(size)
./libopenjpeg/opj_malloc.h:61:void * OPJ_CALLCONV opj_calloc(size_t _NumOfElements, size_t _SizeOfElements);
./libopenjpeg/opj_malloc.h:63:#define opj_calloc(num, size) calloc(num, size)
./libopenjpeg/opj_malloc.h:73:	/* Someone should tell the mingw people that their malloc.h ought to provide _mm_malloc() */
./libopenjpeg/opj_malloc.h:95:#define opj_aligned_malloc(size) malloc(size)
./libopenjpeg/opj_malloc.h:100:	#define opj_aligned_malloc(size) _mm_malloc(size, 16)
./libopenjpeg/opj_malloc.h:108:	#define opj_aligned_malloc(size) memalign(16, (size))
./libopenjpeg/opj_malloc.h:117:	static INLINE void* __attribute__ ((malloc)) opj_aligned_malloc(size_t size){
./libopenjpeg/opj_malloc.h:128:	#define opj_aligned_malloc(size) opj_malloc(size)
./libopenjpeg/jpwl/jpwl.c:734:	if (!(jpwl_buf = (unsigned char *) opj_malloc((size_t) (new_size + soc_pos) * sizeof(unsigned char)))) {
./libopenjpeg/jpwl/jpwl.c:741:	memcpy(jpwl_buf, cio->buffer, soc_pos);
./libopenjpeg/jpwl/jpwl.c:753:		memcpy(jpwl_buf, cio_getbp(cio), jwmarker[mm].pos - orig_pos);
./libopenjpeg/jpwl/jpwl.c:796:	memcpy(jpwl_buf, cio_getbp(cio), old_size - (orig_pos - soc_pos));
./libopenjpeg/jpwl/jpwl.c:1110:			sprintf(str1, "pred"); /* predefined */
./libopenjpeg/jpwl/jpwl.c:1112:			sprintf(str1, "crc-%lu", 16 * ((Pepb & 0x00000001) + 1)); /* CRC mode */
./libopenjpeg/jpwl/jpwl.c:1114:			sprintf(str1, "rs(%lu,32)", (Pepb & 0x0000FF00) >> 8); /* RS mode */
./libopenjpeg/jpwl/jpwl.c:1116:			sprintf(str1, "nometh"); /* RS mode */
./libopenjpeg/jpwl/jpwl.c:1118:			sprintf(str1, "unknown"); /* unknown */
./libopenjpeg/jpwl/jpwl_lib.c:211:	if (!(epb = (jpwl_epb_ms_t *) opj_malloc((size_t) 1 * sizeof (jpwl_epb_ms_t)))) {
./libopenjpeg/jpwl/jpwl_lib.c:324:	/*memcpy(buf, epb->data, (size_t) epb->Lepb - 11);*/
./libopenjpeg/jpwl/jpwl_lib.c:338:	if (!(epc = (jpwl_epc_ms_t *) opj_malloc((size_t) 1 * sizeof (jpwl_epc_ms_t)))) {
./libopenjpeg/jpwl/jpwl_lib.c:429:			memcpy(codeword, L1_buf, remaining);
./libopenjpeg/jpwl/jpwl_lib.c:434:			memcpy(codeword, L1_buf, epb->k_pre);
./libopenjpeg/jpwl/jpwl_lib.c:446:		memcpy(L2_buf, parityword, P); 
./libopenjpeg/jpwl/jpwl_lib.c:517:				memcpy(codeword, L4_buf, remaining);
./libopenjpeg/jpwl/jpwl_lib.c:522:				memcpy(codeword, L4_buf, epb->k_post);
./libopenjpeg/jpwl/jpwl_lib.c:534:			memcpy(L3_buf, parityword, P); 
./libopenjpeg/jpwl/jpwl_lib.c:835:			memcpy(codeword, L1_buf, remaining);
./libopenjpeg/jpwl/jpwl_lib.c:837:			memcpy(codeword, L1_buf, k_pre);
./libopenjpeg/jpwl/jpwl_lib.c:840:		memcpy(parityword, L2_buf, P); 
./libopenjpeg/jpwl/jpwl_lib.c:875:			memcpy(L2_buf, parityword, P);
./libopenjpeg/jpwl/jpwl_lib.c:882:				memcpy(L1_buf, codeword, remaining);
./libopenjpeg/jpwl/jpwl_lib.c:889:				memcpy(L1_buf, codeword, k_pre);
./libopenjpeg/jpwl/jpwl_lib.c:923:		sprintf(str1, "pred"); /* predefined */
./libopenjpeg/jpwl/jpwl_lib.c:925:		sprintf(str1, "crc-%lu", 16 * ((Pepb & 0x00000001) + 1)); /* CRC mode */
./libopenjpeg/jpwl/jpwl_lib.c:927:		sprintf(str1, "rs(%lu,32)", (Pepb & 0x0000FF00) >> 8); /* RS mode */
./libopenjpeg/jpwl/jpwl_lib.c:929:		sprintf(str1, "nometh"); /* RS mode */
./libopenjpeg/jpwl/jpwl_lib.c:931:		sprintf(str1, "unknown"); /* unknown */
./libopenjpeg/jpwl/jpwl_lib.c:1086:				memcpy(codeword, L4_buf, remaining);
./libopenjpeg/jpwl/jpwl_lib.c:1088:				memcpy(codeword, L4_buf, k_post);
./libopenjpeg/jpwl/jpwl_lib.c:1091:			memcpy(parityword, L3_buf, P); 
./libopenjpeg/jpwl/jpwl_lib.c:1121:				memcpy(L3_buf, parityword, P);
./libopenjpeg/jpwl/jpwl_lib.c:1128:					memcpy(L4_buf, codeword, remaining);
./libopenjpeg/jpwl/jpwl_lib.c:1135:					memcpy(L4_buf, codeword, k_post);
./libopenjpeg/jpwl/jpwl_lib.c:1187:	/*memcpy(buf, epc->data, (size_t) epc->Lepc - 9);*/
./libopenjpeg/jpwl/jpwl_lib.c:1211:	if (!(esd = (jpwl_esd_ms_t *) opj_malloc((size_t) 1 * sizeof (jpwl_esd_ms_t)))) {
./libopenjpeg/jpwl/jpwl_lib.c:1605:		/*memcpy(buf, esd->data, (size_t) esd->Lesd - 4);*/
./libopenjpeg/jpwl/jpwl_lib.c:1608:		/*memcpy(buf, esd->data, (size_t) esd->Lesd - 5);*/
./libopenjpeg/t2.c:282:			memcpy(c, layer->data, layer->len);
./libopenjpeg/t2.c:600:				memcpy(cblk->data + cblk->len, c, seg->newlen);
./libopenjpeg/t2.c:807:	opj_t2_t *t2 = (opj_t2_t*)opj_malloc(sizeof(opj_t2_t));
./libopenjpeg/ppix_manager.c:62:  box = (opj_jp2_box_t *)opj_calloc( cstr_info.numcomps, sizeof(opj_jp2_box_t));
./libopenjpeg/pi.c:419:	pi = (opj_pi_iterator_t*) opj_calloc((tcp->numpocs + 1), sizeof(opj_pi_iterator_t));
./libopenjpeg/pi.c:437:		pi[pino].comps = (opj_pi_comp_t*) opj_calloc(image->numcomps, sizeof(opj_pi_comp_t));
./libopenjpeg/pi.c:452:			comp->resolutions = (opj_pi_resolution_t*) opj_calloc(comp->numresolutions, sizeof(opj_pi_resolution_t));
./libopenjpeg/pi.c:505:			pi[pino].include = (short int*) opj_calloc(image->numcomps * maxres * tcp->numlayers * maxprec, sizeof(short int));
./libopenjpeg/pi.c:554:	pi = (opj_pi_iterator_t*) opj_calloc((tcp->numpocs + 1), sizeof(opj_pi_iterator_t));
./libopenjpeg/pi.c:568:		pi[pino].comps = (opj_pi_comp_t*) opj_calloc(image->numcomps, sizeof(opj_pi_comp_t));
./libopenjpeg/pi.c:582:			comp->resolutions = (opj_pi_resolution_t*) opj_malloc(comp->numresolutions * sizeof(opj_pi_resolution_t));
./libopenjpeg/pi.c:645:			pi[pino].include = (short int*) opj_calloc(tcp->numlayers * pi[pino].step_l, sizeof(short int));
./libopenjpeg/phix_manager.c:58:  box = (opj_jp2_box_t *)opj_calloc( cstr_info.numcomps, sizeof(opj_jp2_box_t));
./libopenjpeg/cidx_manager.c:77:  box = (opj_jp2_box_t *)opj_calloc( 32, sizeof(opj_jp2_box_t));
./libopenjpeg/raw.c:46:	opj_raw_t *raw = (opj_raw_t*)opj_malloc(sizeof(opj_raw_t));
./libopenjpeg/image.c:30:	opj_image_t *image = (opj_image_t*)opj_calloc(1, sizeof(opj_image_t));
./libopenjpeg/image.c:38:	image = (opj_image_t*) opj_calloc(1, sizeof(opj_image_t));
./libopenjpeg/image.c:43:		image->comps = (opj_image_comp_t*)opj_calloc(1,image->numcomps * sizeof(opj_image_comp_t));
./libopenjpeg/image.c:61:			comp->data = (int*) opj_calloc(comp->w * comp->h, sizeof(int));
./libopenjpeg/jp2.c:225:	jp2->comps = (opj_jp2_comps_t*) opj_malloc(jp2->numcomps * sizeof(opj_jp2_comps_t));
./libopenjpeg/jp2.c:376:	 opj_malloc(nr_channels * sizeof(opj_image_comp_t));
./libopenjpeg/jp2.c:396:	 opj_malloc(old_comps[cmp].w * old_comps[cmp].h * sizeof(int));
./libopenjpeg/jp2.c:456:	 opj_malloc(nr_channels * nr_entries * sizeof(unsigned int));
./libopenjpeg/jp2.c:457:	channel_size = (unsigned char*)opj_malloc(nr_channels);
./libopenjpeg/jp2.c:458:	channel_sign = (unsigned char*)opj_malloc(nr_channels);
./libopenjpeg/jp2.c:460:	jp2_pclr = (opj_jp2_pclr_t*)opj_malloc(sizeof(opj_jp2_pclr_t));
./libopenjpeg/jp2.c:508:	 opj_malloc(nr_channels * sizeof(opj_jp2_cmap_comp_t));
./libopenjpeg/jp2.c:542:	memcpy(&saved, &image->comps[cn], sizeof(opj_image_comp_t));
./libopenjpeg/jp2.c:543:	memcpy(&image->comps[cn], &image->comps[acn], sizeof(opj_image_comp_t));
./libopenjpeg/jp2.c:544:	memcpy(&image->comps[acn], &saved, sizeof(opj_image_comp_t));
./libopenjpeg/jp2.c:573:	 opj_malloc(n * sizeof(opj_jp2_cdef_info_t));
./libopenjpeg/jp2.c:575:	color->jp2_cdef = (opj_jp2_cdef_t*)opj_malloc(sizeof(opj_jp2_cdef_t));
./libopenjpeg/jp2.c:625:	color->icc_profile_buf = (unsigned char*)opj_malloc(skip_len);
./libopenjpeg/jp2.c:630:	memcpy(color->icc_profile_buf, start, skip_len);
./libopenjpeg/jp2.c:776:		pcol_usage = opj_calloc(nr_channels, sizeof(opj_bool));
./libopenjpeg/jp2.c:958:	jp2->cl = (unsigned int *) opj_malloc(jp2->numcl * sizeof(unsigned int));
./libopenjpeg/jp2.c:1145:	opj_jp2_t *jp2 = (opj_jp2_t*) opj_calloc(1, sizeof(opj_jp2_t));
./libopenjpeg/jp2.c:1185:	opj_jp2_t *jp2 = (opj_jp2_t*)opj_malloc(sizeof(opj_jp2_t));
./libopenjpeg/jp2.c:1240:	jp2->cl = (unsigned int*) opj_malloc(jp2->numcl * sizeof(unsigned int));
./libopenjpeg/jp2.c:1246:	jp2->comps = (opj_jp2_comps_t*) opj_malloc(jp2->numcomps * sizeof(opj_jp2_comps_t));
./libopenjpeg/dwt.c:356:		bj = (int*)opj_malloc(rh * sizeof(int));
./libopenjpeg/dwt.c:367:		bj = (int*)opj_malloc(rw * sizeof(int));
./libopenjpeg/dwt.c:439:		bj = (int*)opj_malloc(rh * sizeof(int));
./libopenjpeg/dwt.c:450:		bj = (int*)opj_malloc(rw * sizeof(int));
./libopenjpeg/dwt.c:530:	h.mem = (int*)opj_aligned_malloc(dwt_decode_max_resolution(tr, numres) * sizeof(int));
./libopenjpeg/dwt.c:550:			memcpy(&tiledp[j*w], h.mem, rw * sizeof(int));
./libopenjpeg/dwt.c:612:		memcpy(&bi[i*2], &a[i*x], 4 * sizeof(float));
./libopenjpeg/dwt.c:617:		memcpy(&bi[i*2], &a[i*x], 4 * sizeof(float));
./libopenjpeg/dwt.c:786:	h.wavelet = (v4*) opj_aligned_malloc((dwt_decode_max_resolution(res, numres)+5) * sizeof(v4));
./libopenjpeg/dwt.c:841:					memcpy(&aj[k*w], &v.wavelet[k], 4 * sizeof(float));
./libopenjpeg/dwt.c:851:					memcpy(&aj[k*w], &v.wavelet[k], j * sizeof(float));
./libopenjpeg/j2k.c:322:	j2k->cur_totnum_tp = (int *) opj_malloc(cp->tw * cp->th * sizeof(int));
./libopenjpeg/j2k.c:339:			j2k->cstr_info->tile[tileno].tp = (opj_tp_info_t *) opj_malloc(cur_totnum_tp * sizeof(opj_tp_info_t));
./libopenjpeg/j2k.c:501:	image->comps = (opj_image_comp_t*) opj_calloc(image->numcomps, sizeof(opj_image_comp_t));
./libopenjpeg/j2k.c:601:	cp->tcps = (opj_tcp_t*) opj_calloc(cp->tw * cp->th, sizeof(opj_tcp_t));
./libopenjpeg/j2k.c:607:	cp->tileno = (int*) opj_malloc(cp->tw * cp->th * sizeof(int));
./libopenjpeg/j2k.c:641:	j2k->default_tcp->tccps = (opj_tccp_t*) opj_calloc(image->numcomps, sizeof(opj_tccp_t));
./libopenjpeg/j2k.c:643:		cp->tcps[i].tccps = (opj_tccp_t*) opj_malloc(image->numcomps * sizeof(opj_tccp_t));
./libopenjpeg/j2k.c:645:	j2k->tile_data = (unsigned char**) opj_calloc(cp->tw * cp->th, sizeof(unsigned char*));
./libopenjpeg/j2k.c:646:	j2k->tile_len = (int*) opj_calloc(cp->tw * cp->th, sizeof(int));
./libopenjpeg/j2k.c:661:		cstr_info->tile = (opj_tile_info_t*) opj_calloc(cp->tw * cp->th, sizeof(opj_tile_info_t));		
./libopenjpeg/j2k.c:831:		cstr_info->numdecompos = (int*) opj_malloc(image->numcomps * sizeof(int));
./libopenjpeg/j2k.c:1239:			cp->ppm_data = (unsigned char *) opj_malloc(N_ppm * sizeof(unsigned char));
./libopenjpeg/j2k.c:1287:		tcp->ppt_data = (unsigned char *) opj_malloc((len - 3) * sizeof(unsigned char));
./libopenjpeg/j2k.c:1484:		memcpy(tcp, j2k->default_tcp, sizeof(opj_tcp_t));
./libopenjpeg/j2k.c:1850:	opj_j2k_t *j2k = (opj_j2k_t*) opj_calloc(1, sizeof(opj_j2k_t));
./libopenjpeg/j2k.c:1854:	j2k->default_tcp = (opj_tcp_t*) opj_calloc(1, sizeof(opj_tcp_t));
./libopenjpeg/j2k.c:1927:		opj_cp_t *cp = (opj_cp_t*) opj_calloc(1, sizeof(opj_cp_t));
./libopenjpeg/j2k.c:2152:	opj_j2k_t *j2k = (opj_j2k_t*) opj_calloc(1, sizeof(opj_j2k_t));
./libopenjpeg/j2k.c:2191:	cp = (opj_cp_t*) opj_calloc(1, sizeof(opj_cp_t));
./libopenjpeg/j2k.c:2213:		cp->matrice = (int *) opj_malloc(array_size);
./libopenjpeg/j2k.c:2214:		memcpy(cp->matrice, parameters->cp_matrice, array_size);
./libopenjpeg/j2k.c:2227:		cp->comment = (char*)opj_malloc(strlen(parameters->cp_comment) + 1);
./libopenjpeg/j2k.c:2229:			strcpy(cp->comment, parameters->cp_comment);
./libopenjpeg/j2k.c:2315:	cp->tcps = (opj_tcp_t*) opj_calloc(cp->tw * cp->th, sizeof(opj_tcp_t));
./libopenjpeg/j2k.c:2361:		tcp->tccps = (opj_tccp_t*) opj_calloc(image->numcomps, sizeof(opj_tccp_t));
./libopenjpeg/j2k.c:2455:		cstr_info->tile = (opj_tile_info_t *) opj_malloc(cp->tw * cp->th * sizeof(opj_tile_info_t));
./libopenjpeg/j2k.c:2467:		cstr_info->numdecompos = (int*) opj_malloc(image->numcomps * sizeof(int));
./libopenjpeg/j2k.c:2474:		cstr_info->marker = (opj_marker_info_t *) opj_malloc(cstr_info->maxmarknum * sizeof(opj_marker_info_t));
./libopenjpeg/j2k.c:2548:			cstr_info->tile[j2k->curtileno].marker = (opj_marker_info_t *) opj_malloc(cstr_info->tile[j2k->curtileno].maxmarknum * sizeof(opj_marker_info_t));
./tests/comparePGXimages.c:120:        param->base_filename = (char*) malloc(sizemembasefile);
./tests/comparePGXimages.c:128:        param->test_filename = (char*) malloc(sizememtestfile);
./tests/comparePGXimages.c:201:      char* separatorList2 = (char*)malloc( sizeseplist );
./tests/comparePGXimages.c:310:  double* outArgs= malloc(nbcomp * sizeof(double));
./tests/comparePGXimages.c:351:    outFilename = (char*)malloc(1);
./tests/comparePGXimages.c:356:  outFilename = (char*)malloc((posToken + 7) * sizeof(char)); /*6*/
./tests/comparePGXimages.c:364:  sprintf(s, "%i", indexF);
./tests/comparePGXimages.c:394:  param_image_read = malloc(nbFilenamePGX * sizeof(opj_image_cmptparm_t));
./tests/comparePGXimages.c:395:  data = malloc(nbFilenamePGX * sizeof(*data));
./tests/comparePGXimages.c:404:      filenameComponentPGX = malloc((strlen(filename) + 1) * sizeof(*filenameComponentPGX));
./tests/comparePGXimages.c:405:      strcpy(filenameComponentPGX, filename);
./tests/comparePGXimages.c:441:    data[it_file] = malloc(param_image_read[it_file].h * param_image_read[it_file].w * sizeof(int));
./tests/comparePGXimages.c:442:    memcpy(data[it_file], image_read->comps->data, image_read->comps->h * image_read->comps->w * sizeof(int));
./tests/comparePGXimages.c:453:    memcpy(image->comps[it_file].data, data[it_file], image->comps[it_file].h * image->comps[it_file].w * sizeof(int));
./tests/comparePGXimages.c:484:  memcpy(image_write->comps->data, image->comps[num_comp_select].data, param_image_write.h * param_image_write.w * sizeof(int));
./tests/comparePGXimages.c:567:    filenamePNGbase = (char*) malloc(memsizebasefilename);
./tests/comparePGXimages.c:588:    filenamePNGtest = (char*) malloc(memsizetestfilename);
./tests/comparePGXimages.c:609:  param_image_diff = malloc( imageBase->numcomps * sizeof(opj_image_cmptparm_t));
./tests/comparePGXimages.c:689:   filenamePNGdiff = (char*) malloc(memsizedifffilename);
./tests/comparePGXimages.c:703:     filenamePNGbase_it_comp = (char*) malloc(memsizebasefilename);
./tests/comparePGXimages.c:708:     filenamePNGtest_it_comp = (char*) malloc(memsizetestfilename);
./tests/comparePGXimages.c:713:     filenamePNGdiff_it_comp = (char*) malloc(memsizedifffilename);
./tests/comparePGXimages.c:760:         sprintf(it_compc, "_%i", it_comp);
./tests/unit/testempty2.c:123:  strcpy(parameters.outfile, outputfile);
./tests/unit/testempty2.c:144:  src = (unsigned char *) malloc(file_length);
./tests/unit/testempty1.c:119:  strcpy(parameters.outfile, "testempty1.j2k");
./tests/compareRAWimages.c:82:			param->base_filename = (char*) malloc(sizemembasefile);
./tests/compareRAWimages.c:90:			param->test_filename = (char*) malloc(sizememtestfile);
./tests/compare_dump_files.c:81:        param->base_filename = (char*) malloc(sizemembasefile);
./tests/compare_dump_files.c:89:        param->test_filename = (char*) malloc(sizememtestfile);
./tests/compare_dump_files.c:206:      strbase = (char *) malloc(nbytes + 1);
./tests/compare_dump_files.c:207:      strtest = (char *) malloc(nbytes + 1);
./tests/compare_dump_files.c:217:			strbase_d = (char *) malloc(strlen(strbase)+1);
./tests/compare_dump_files.c:218:			strtest_d = (char *) malloc(strlen(strtest)+1);
./applications/codec/j2k_to_image.c:188:		strcpy(dirptr->filename[i],content->d_name);
./applications/codec/j2k_to_image.c:218:	strcpy(image_filename,dirptr->filename[imageno]);
./applications/codec/j2k_to_image.c:223:	sprintf(infilename,"%s/%s",img_fol->imgdirpath,image_filename);
./applications/codec/j2k_to_image.c:227:	strcpy(temp_ofname,strtok(image_filename,"."));
./applications/codec/j2k_to_image.c:230:		sprintf(temp1,".%s",temp_p);
./applications/codec/j2k_to_image.c:233:		sprintf(outfilename,"%s/%s.%s",img_fol->imgdirpath,temp_ofname,img_fol->out_format);
./applications/codec/j2k_to_image.c:316:				sprintf(outformat,".%s",of);
./applications/codec/j2k_to_image.c:377:					img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);
./applications/codec/j2k_to_image.c:378:					strcpy(img_fol->imgdirpath,opj_optarg);
./applications/codec/j2k_to_image.c:559:		dirptr=(dircnt_t*)malloc(sizeof(dircnt_t));
./applications/codec/j2k_to_image.c:561:			dirptr->filename_buf = (char*)malloc(num_images*OPJ_PATH_LEN*sizeof(char));	/* Stores at max 10 image file names*/
./applications/codec/j2k_to_image.c:562:			dirptr->filename = (char**) malloc(num_images*sizeof(char*));
./applications/codec/j2k_to_image.c:604:		src = (unsigned char *) malloc(file_length);
./applications/codec/image_to_j2k.c:386:		strcpy(dirptr->filename[i],content->d_name);
./applications/codec/image_to_j2k.c:423:	strcpy(image_filename,dirptr->filename[imageno]);
./applications/codec/image_to_j2k.c:428:	sprintf(infilename,"%s/%s",img_fol->imgdirpath,image_filename);
./applications/codec/image_to_j2k.c:432:	strcpy(temp_ofname,get_file_name(image_filename));
./applications/codec/image_to_j2k.c:435:		sprintf(temp1,".%s",temp_p);
./applications/codec/image_to_j2k.c:438:		sprintf(outfilename,"%s/%s.%s",img_fol->imgdirpath,temp_ofname,img_fol->out_format);
./applications/codec/image_to_j2k.c:664:					sprintf(outformat,".%s",of);
./applications/codec/image_to_j2k.c:770:				parameters->cp_matrice = (int *) malloc(numlayers * matrix_width * sizeof(int));
./applications/codec/image_to_j2k.c:998:				parameters->cp_comment = (char*)malloc(strlen(opj_optarg) + 1);
./applications/codec/image_to_j2k.c:1000:					strcpy(parameters->cp_comment, opj_optarg);
./applications/codec/image_to_j2k.c:1027:				img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);
./applications/codec/image_to_j2k.c:1028:				strcpy(img_fol->imgdirpath,opj_optarg);
./applications/codec/image_to_j2k.c:1531:		img_fol.rates = (float*)malloc(parameters.tcp_numlayers * sizeof(float));
./applications/codec/image_to_j2k.c:1545:		parameters.cp_comment = (char*)malloc(clen+strlen(version)+11);
./applications/codec/image_to_j2k.c:1546:		sprintf(parameters.cp_comment,"%s%s with JPWL", comment, version);
./applications/codec/image_to_j2k.c:1548:		parameters.cp_comment = (char*)malloc(clen+strlen(version)+1);
./applications/codec/image_to_j2k.c:1549:		sprintf(parameters.cp_comment,"%s%s", comment, version);
./applications/codec/image_to_j2k.c:1557:		dirptr=(dircnt_t*)malloc(sizeof(dircnt_t));
./applications/codec/image_to_j2k.c:1559:			dirptr->filename_buf = (char*)malloc(num_images*OPJ_PATH_LEN*sizeof(char));	/* Stores at max 10 image file names*/
./applications/codec/image_to_j2k.c:1560:			dirptr->filename = (char**) malloc(num_images*sizeof(char*));
./applications/codec/j2k_dump.c:147:		strcpy(dirptr->filename[i],content->d_name);
./applications/codec/j2k_dump.c:177:	strcpy(image_filename,dirptr->filename[imageno]);
./applications/codec/j2k_dump.c:182:	sprintf(infilename,"%s/%s",img_fol->imgdirpath,image_filename);
./applications/codec/j2k_dump.c:186:	strcpy(temp_ofname,strtok(image_filename,"."));
./applications/codec/j2k_dump.c:189:		sprintf(temp1,".%s",temp_p);
./applications/codec/j2k_dump.c:192:		sprintf(outfilename,"%s/%s.%s",img_fol->imgdirpath,temp_ofname,img_fol->out_format);
./applications/codec/j2k_dump.c:259:					img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);
./applications/codec/j2k_dump.c:260:					strcpy(img_fol->imgdirpath,opj_optarg);
./applications/codec/j2k_dump.c:364:		dirptr=(dircnt_t*)malloc(sizeof(dircnt_t));
./applications/codec/j2k_dump.c:366:			dirptr->filename_buf = (char*)malloc(num_images*OPJ_PATH_LEN*sizeof(char));	/* Stores at max 10 image file names*/
./applications/codec/j2k_dump.c:367:			dirptr->filename = (char**) malloc(num_images*sizeof(char*));
./applications/codec/j2k_dump.c:423:		src = (unsigned char *) malloc(file_length);
./applications/codec/windirent.h:350:  dirp = (DIR*)malloc (sizeof (struct DIR));
./applications/codec/windirent.h:355:    dirp->dirname = (char*) malloc (strlen (dirname) + 1 + strlen ("\\*.*"));
./applications/codec/windirent.h:357:      /* failed to duplicate directory name.  errno set by malloc() */
./applications/codec/windirent.h:365:    strcpy (dirp->dirname, dirname);
./applications/codec/windirent.h:370:      strcpy (p++, "\\");
./applications/codec/windirent.h:373:    strcpy (p, "*"); /*scan files with and without extension in win32*/
./applications/codec/windirent.h:375:    strcpy (p, "*.*"); /*scan files with and without extension in DOS*/
./applications/codec/convert.c:119:	tga = (unsigned char*)malloc(TGA_HEADER_SIZE);
./applications/codec/convert.c:155:		unsigned char *id = (unsigned char *) malloc(id_len);
./applications/codec/convert.c:759:	 malloc((3 * W + PAD) * H * sizeof(unsigned char));
./applications/codec/convert.c:862:		table_R = (unsigned char *) malloc(256 * sizeof(unsigned char));
./applications/codec/convert.c:863:		table_G = (unsigned char *) malloc(256 * sizeof(unsigned char));
./applications/codec/convert.c:864:		table_B = (unsigned char *) malloc(256 * sizeof(unsigned char));
./applications/codec/convert.c:920:		RGB = (unsigned char *) calloc(1, W * H * sizeof(unsigned char));
./applications/codec/convert.c:1437:      name = (char*)malloc(total+1);
./applications/codec/convert.c:1441:			sprintf(name+dotpos, "_%d.pgx", compno);
./applications/codec/convert.c:1443:			strcpy(name+dotpos, ".pgx");
./applications/codec/convert.c:2042:	destname = (char*)malloc(strlen(outfile) + 8);
./applications/codec/convert.c:2047:	 sprintf(destname, "%d.%s", compno, outfile);
./applications/codec/convert.c:2049:	 sprintf(destname, "%s", outfile);
./applications/codec/convert.c:2165:	buf = _TIFFmalloc(strip_size);
./applications/codec/convert.c:2377:	buf = _TIFFmalloc(strip_size);
./applications/codec/convert.c:2602:	buf = _TIFFmalloc(TIFFStripSize(tif));
./applications/codec/convert.c:2744:	buf = _TIFFmalloc(TIFFStripSize(tif));
./applications/codec/convert.c:2845:	cmptparm = (opj_image_cmptparm_t*) malloc(numcomps * sizeof(opj_image_cmptparm_t));
./applications/codec/convert.c:3183:	rows = (unsigned char**)calloc(height+1, sizeof(unsigned char*));
./applications/codec/convert.c:3185:	 rows[i] = (unsigned char*)malloc(png_get_rowbytes(png,info));
./applications/codec/convert.c:3408:	row_buf = (unsigned char*)malloc(width * nr_comp * 2);
./applications/codec/convert.c:3526:	 malloc(width * nr_comp * sizeof(unsigned short));
./applications/codec/convert.c:3556:	row_buf = (unsigned char*)calloc(width, nr_comp * 2);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:561:					sprintf(outformat,".%s",of);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:631:				parameters->cp_matrice = (int *) malloc(numlayers * matrix_width * sizeof(int));
./applications/JavaOpenJPEG/JavaOpenJPEG.c:861:				parameters->cp_comment = (char*)malloc(strlen(opj_optarg) + 1);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:866:					strcpy(parameters->cp_comment, opj_optarg);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:893:				img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:897:				strcpy(img_fol->imgdirpath,opj_optarg);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1374:	buffer = (char*) malloc(*buffer_size);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1834:	argv = (const char **)malloc(argc*sizeof(char*));
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1890:		parameters.cp_comment = (char*)malloc(clen+strlen(version)+11);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1894:		sprintf(parameters.cp_comment,"%s%s with JPWL", comment, version);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1896:		parameters.cp_comment = (char*)malloc(clen+strlen(version)+1);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1900:		sprintf(parameters.cp_comment,"%s%s", comment, version);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1971:		memcpy(jbBody, compressed_index, compressed_index_size);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1992:		memcpy(jbBody, cio->buffer, codestream_length);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:178:		strcpy(dirptr->filename[i],content->d_name);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:283:				sprintf(outformat,".%s",of);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:341:					img_fol->imgdirpath = (char*)malloc(strlen(opj_optarg) + 1);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:345:					strcpy(img_fol->imgdirpath,opj_optarg);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:553:	argv = (const char **)malloc(argc*sizeof(char*));
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:609:			src = (unsigned char *) malloc(file_length);
./applications/mj2/wrap_j2k_in_mj2.c:70:	src = (unsigned char*) malloc(src_len);
./applications/mj2/wrap_j2k_in_mj2.c:180:  siz_buffer = (unsigned char*) malloc(len * sizeof(unsigned char));
./applications/mj2/wrap_j2k_in_mj2.c:195:    (opj_image_comp_t *) malloc(image->numcomps * sizeof(opj_image_comp_t));
./applications/mj2/wrap_j2k_in_mj2.c:233:   malloc(movie->tk[0].jp2_struct.numcomps * sizeof(opj_jp2_comps_t));
./applications/mj2/wrap_j2k_in_mj2.c:240:   malloc(movie->tk[0].jp2_struct.numcl * sizeof(int));
./applications/mj2/wrap_j2k_in_mj2.c:321:	j2kfilename = (char*)malloc(strlen(argv[1]) + 12);/* max. '%6d' */
./applications/mj2/wrap_j2k_in_mj2.c:322:	sprintf(j2kfilename, "%s_00000.j2k",argv[1]);
./applications/mj2/wrap_j2k_in_mj2.c:335:  buf = (unsigned char*) malloc (300 * sizeof(unsigned char)); 
./applications/mj2/wrap_j2k_in_mj2.c:357:    sprintf(j2kfilename,"%s_%05d.j2k",argv[1],snum);
./applications/mj2/wrap_j2k_in_mj2.c:383:	 malloc (sample->sample_size+8); 
./applications/mj2/wrap_j2k_in_mj2.c:408:  buf = (unsigned char*) malloc (4 * sizeof(unsigned char));
./applications/mj2/wrap_j2k_in_mj2.c:430:  buf = (unsigned char*) malloc ((TEMP_BUF+snum*20) * sizeof(unsigned char));
./applications/mj2/meta_out.c:937:  frame_codestream = (unsigned char*) malloc (sample->sample_size-8); /* Skipping JP2C marker */
./applications/mj2/extract_j2k_from_mj2.c:120:	outfilename = (char*)malloc(strlen(argv[2]) + 32);
./applications/mj2/extract_j2k_from_mj2.c:163:	 malloc (sample->sample_size-8); /* Skipping JP2C marker */
./applications/mj2/extract_j2k_from_mj2.c:168:    sprintf(outfilename,"%s_%05d.j2k",argv[2],snum);
./applications/mj2/frames_to_mj2.c:283:		j2k_parameters->cp_comment = (char*)malloc(clen+strlen(version)+1);
./applications/mj2/frames_to_mj2.c:284:		sprintf(j2k_parameters->cp_comment,"%s%s", comment, version);
./applications/mj2/frames_to_mj2.c:396:				j2k_parameters->cp_matrice = (int *) malloc(numlayers * matrix_width * sizeof(int));
./applications/mj2/frames_to_mj2.c:577:				j2k_parameters->cp_comment = (char*)malloc(strlen(opj_optarg) + 1);
./applications/mj2/frames_to_mj2.c:579:					strcpy(j2k_parameters->cp_comment, opj_optarg);
./applications/mj2/frames_to_mj2.c:703:	 malloc(movie->tk[0].num_samples * sizeof(mj2_chunk_t));     
./applications/mj2/frames_to_mj2.c:705:	 malloc(movie->tk[0].num_samples * sizeof(mj2_sample_t));
./applications/mj2/frames_to_mj2.c:718:	 malloc (300 * sizeof(unsigned char));
./applications/mj2/frames_to_mj2.c:765:	buf = (unsigned char *) malloc(buflen*sizeof(unsigned char));	
./applications/mj2/frames_to_mj2.c:830:	buf = (unsigned char*) malloc(4*sizeof(unsigned char));
./applications/mj2/frames_to_mj2.c:847:	 malloc ((TEMP_BUF+numframes*20) * sizeof(unsigned char));
./applications/mj2/mj2_to_frames.c:189:	 malloc(max_codstrm_size * sizeof(unsigned char)); 
./applications/mj2/mj2.c:91:  movie->cl = (unsigned int*) opj_malloc(movie->num_cl * sizeof(unsigned int));
./applications/mj2/mj2.c:140:		tk->sampletochunk = (mj2_sampletochunk_t*) opj_malloc(tk->num_samplestochunk * sizeof(mj2_sampletochunk_t));
./applications/mj2/mj2.c:159:		tk->tts = (mj2_tts_t*) opj_malloc(tk->num_tts * sizeof(mj2_tts_t));
./applications/mj2/mj2.c:197:		tk->br = (unsigned int*) opj_malloc(tk->num_br * sizeof(unsigned int));
./applications/mj2/mj2.c:228:  tk->sample = (mj2_sample_t*) opj_malloc(tk->num_samples * sizeof(mj2_sample_t));
./applications/mj2/mj2.c:249:	 tk->chunk = (mj2_chunk_t*) opj_malloc(tk->num_chunks * sizeof(mj2_chunk_t));
./applications/mj2/mj2.c:255:    tk->chunk = (mj2_chunk_t*) opj_malloc(tk->num_samples * sizeof(mj2_chunk_t));
./applications/mj2/mj2.c:391:  movie->cl = (unsigned int*) opj_malloc(movie->num_cl * sizeof(unsigned int));
./applications/mj2/mj2.c:638:  tk->sampletochunk = (mj2_sampletochunk_t*) opj_malloc(tk->num_samplestochunk * sizeof(mj2_sampletochunk_t));
./applications/mj2/mj2.c:717:  tk->tts = (mj2_tts_t*) opj_malloc(tk->num_tts * sizeof(mj2_tts_t));
./applications/mj2/mj2.c:896:  tk->br = (unsigned int*) opj_malloc(tk->num_br * sizeof(unsigned int));
./applications/mj2/mj2.c:955:  tk->jp2xdata = (unsigned char*) opj_malloc(tk->num_jp2x * sizeof(unsigned char));
./applications/mj2/mj2.c:1172:  tk->jp2_struct.comps = (opj_jp2_comps_t*) opj_malloc(tk->jp2_struct.numcomps * sizeof(opj_jp2_comps_t));
./applications/mj2/mj2.c:1173:  tk->jp2_struct.cl = (unsigned int*) opj_malloc(sizeof(unsigned int));
./applications/mj2/mj2.c:2046:  tk->name = (char*) opj_malloc(tk->name_size * sizeof(char));
./applications/mj2/mj2.c:2581:  movie->tk = (mj2_tk_t*) opj_malloc((movie->next_tk_id - 1) * sizeof(mj2_tk_t));
./applications/mj2/mj2.c:2620:	src = (unsigned char*) opj_malloc(300 * sizeof(unsigned char));	
./applications/mj2/mj2.c:2726:	opj_dinfo_t *dinfo = (opj_dinfo_t*) opj_calloc(1, sizeof(opj_dinfo_t));
./applications/mj2/mj2.c:2731:	mj2 = (opj_mj2_t*) opj_calloc(1, sizeof(opj_mj2_t));
./applications/mj2/mj2.c:2805:	opj_cinfo_t *cinfo = (opj_cinfo_t*) opj_calloc(1, sizeof(opj_cinfo_t));
./applications/mj2/mj2.c:2808:	mj2 = (opj_mj2_t*) opj_calloc(1, sizeof(opj_mj2_t));
./applications/mj2/mj2.c:2830:		movie->cl = (unsigned int*) opj_malloc(movie->num_cl * sizeof(unsigned int));
./applications/mj2/mj2.c:2835:		movie->tk = (mj2_tk_t*) opj_malloc(sizeof(mj2_tk_t)); /*Memory allocation for the video track*/
./applications/mj2/mj2.c:2846:		movie->tk[0].chunk = (mj2_chunk_t*) opj_malloc(sizeof(mj2_chunk_t));  
./applications/mj2/mj2.c:2847:		movie->tk[0].sample = (mj2_sample_t*) opj_malloc(sizeof(mj2_sample_t));
./applications/mj2/mj2.c:2852:		jp2_struct->comps = (opj_jp2_comps_t*) opj_malloc(jp2_struct->numcomps * sizeof(opj_jp2_comps_t));
./applications/mj2/mj2.c:2858:		jp2_struct->cl = (unsigned int*) opj_malloc(jp2_struct->numcl * sizeof(unsigned int));
./applications/common/color.c:94:	d0 = r = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:95:	d1 = g = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:96:	d2 = b = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:127:	d0 = r = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:128:	d1 = g = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:129:	d2 = b = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:174:	d0 = r = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:175:	d1 = g = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:176:	d2 = b = (int*)malloc(sizeof(int) * max);
./applications/common/color.c:389:	in = inbuf = (unsigned short*)malloc(nr_samples);
./applications/common/color.c:390:	out = outbuf = (unsigned short*)malloc(nr_samples);
./applications/common/color.c:422:	in = inbuf = (unsigned char*)malloc(nr_samples);
./applications/common/color.c:423:	out = outbuf = (unsigned char*)malloc(nr_samples);
./applications/common/color.c:434:	image->comps[1].data = (int*)calloc(max, sizeof(int));
./applications/common/color.c:435:	image->comps[2].data = (int*)calloc(max, sizeof(int));
./applications/OPJViewer/source/wxjp2parser.cpp:512:				strcpy(methdescr, "Enumerated Colourspace");
./applications/OPJViewer/source/wxjp2parser.cpp:515:				strcpy(methdescr, "Restricted ICC profile");
./applications/OPJViewer/source/wxjp2parser.cpp:518:				strcpy(methdescr, "Unknown");
./applications/OPJViewer/source/wxjp2parser.cpp:528:					strcpy(enumcsdescr, "sRGB");
./applications/OPJViewer/source/wxjp2parser.cpp:531:					strcpy(enumcsdescr, "greyscale");
./applications/OPJViewer/source/wxjp2parser.cpp:534:					strcpy(enumcsdescr, "sYCC");
./applications/OPJViewer/source/wxjp2parser.cpp:537:					strcpy(enumcsdescr, "Unknown");
./applications/OPJViewer/source/wxjp2parser.cpp:770:					strcpy(graphicsdescr, "copy");
./applications/OPJViewer/source/wxjp2parser.cpp:773:					strcpy(graphicsdescr, "transparent");
./applications/OPJViewer/source/wxjp2parser.cpp:776:					strcpy(graphicsdescr, "alpha");
./applications/OPJViewer/source/wxjp2parser.cpp:779:					strcpy(graphicsdescr, "whitealpha");
./applications/OPJViewer/source/wxjp2parser.cpp:782:					strcpy(graphicsdescr, "blackalpha");
./applications/OPJViewer/source/wxjp2parser.cpp:785:					strcpy(graphicsdescr, "unknown");
./applications/OPJViewer/source/wxjp2parser.cpp:1028:			memcpy(scansign, "    ", 4);
./applications/OPJViewer/source/imagjpeg2000.cpp:154:	sprintf(mess, "[ERROR] %.*s", message_len, msg);
./applications/OPJViewer/source/imagjpeg2000.cpp:169:	sprintf(mess, "[WARNING] %.*s", message_len, msg);
./applications/OPJViewer/source/imagjpeg2000.cpp:184:	sprintf(mess, "[INFO] %.*s", message_len, msg);
./applications/OPJViewer/source/imagjpeg2000.cpp:528:				memcpy(scansign, "    ", 4);
./applications/OPJViewer/source/imagjpeg2000.cpp:753:		src = (unsigned char *) malloc(jpeg2000headSIZE + jp2hboxlen + jp2cboxlen);
./applications/OPJViewer/source/imagjpeg2000.cpp:756:		memcpy(src, jpeg2000head, jpeg2000headSIZE);
./applications/OPJViewer/source/imagjpeg2000.cpp:769:		src = (unsigned char *) malloc(file_length);
./applications/OPJViewer/source/imagjpeg2000.cpp:1056:                parameters.cp_comment = (char *) malloc(strlen(m_comment.ToAscii()) + 1);
./applications/OPJViewer/source/imagjpeg2000.cpp:1058:                        strcpy(parameters.cp_comment, m_comment.ToAscii());
./applications/OPJViewer/source/imagjpeg2000.cpp:1229:        cmptparm = (opj_image_cmptparm_t*) malloc(3 * sizeof(opj_image_cmptparm_t));
./applications/OPJViewer/source/imagmxf.cpp:318:    src = (unsigned char *) malloc(j2k_len);
./applications/jpip/libopenjpip/faixbox_manager.c:50:  faix = ( faixbox_param_t *)malloc( sizeof(faixbox_param_t));
./applications/jpip/libopenjpip/faixbox_manager.c:64:    faix->subfaixbox.byte8_params = (subfaixbox8_param_t *)malloc( sizeof(subfaixbox8_param_t));
./applications/jpip/libopenjpip/faixbox_manager.c:72:    subfaixbox->elem = ( faixelem8_param_t *)malloc( numOfelem*sizeof(faixelem8_param_t));
./applications/jpip/libopenjpip/faixbox_manager.c:75:      subfaixbox->aux = ( Byte4_t *)malloc( numOfelem*sizeof(Byte4_t));
./applications/jpip/libopenjpip/faixbox_manager.c:88:    faix->subfaixbox.byte4_params = (subfaixbox4_param_t *)malloc( sizeof(subfaixbox4_param_t));
./applications/jpip/libopenjpip/faixbox_manager.c:96:    subfaixbox->elem = ( faixelem4_param_t *)malloc( numOfelem*sizeof(faixelem4_param_t));
./applications/jpip/libopenjpip/faixbox_manager.c:99:      subfaixbox->aux = ( Byte4_t *)malloc( numOfelem*sizeof(Byte4_t));
./applications/jpip/libopenjpip/cache_manager.c:40:  cachelist = (cachelist_param_t *)malloc( sizeof(cachelist_param_t));
./applications/jpip/libopenjpip/cache_manager.c:65:  cache = (cache_param_t *)malloc( sizeof(cache_param_t));
./applications/jpip/libopenjpip/cache_manager.c:69:  cache->cid = (char **)malloc( sizeof(char *));
./applications/jpip/libopenjpip/cache_manager.c:235:  cache->cid = (char **)malloc( (cache->numOfcid-1)*sizeof(char *));
./applications/jpip/libopenjpip/placeholder_manager.c:52:  list = (placeholderlist_param_t *)malloc( sizeof(placeholderlist_param_t));
./applications/jpip/libopenjpip/placeholder_manager.c:81:  placeholder = (placeholder_param_t *)malloc( sizeof(placeholder_param_t));
./applications/jpip/libopenjpip/jpipstream_manager.c:43:  Byte_t *stream = (Byte_t *)malloc( (*streamlen)+newstreamlen);
./applications/jpip/libopenjpip/jpipstream_manager.c:45:    memcpy( stream, cache_stream, *streamlen);
./applications/jpip/libopenjpip/jpipstream_manager.c:46:  memcpy( stream+(*streamlen), newstream, newstreamlen);
./applications/jpip/libopenjpip/jpipstream_manager.c:65:  sprintf( filename, "%4d%02d%02d%02d%02d%02d.%.3s", t_st->tm_year+1900, t_st->tm_mon+1, t_st->tm_mday, t_st->tm_hour, t_st->tm_min, t_st->tm_sec, fmt);
./applications/jpip/libopenjpip/jpipstream_manager.c:101:  ihdrbox = (ihdrbox_param_t *)malloc( sizeof(ihdrbox_param_t));
./applications/jpip/libopenjpip/auxtrans_manager.c:140:  auxresponse = (aux_response_param_t *)malloc( sizeof(aux_response_param_t));
./applications/jpip/libopenjpip/auxtrans_manager.c:189:  chunk = (unsigned char *)malloc( auxresponse->maxlenPerFrame);
./applications/jpip/libopenjpip/auxtrans_manager.c:205:	memcpy( chunk+headlen, ptr, chunklen-headlen);
./applications/jpip/libopenjpip/msgqueue_manager.c:60:  msgqueue = (msgqueue_param_t *)malloc( sizeof(msgqueue_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:134:  msg = (message_param_t *)malloc( sizeof(message_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:164:    msg = (message_param_t *)malloc( sizeof(message_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:216:      msg = (message_param_t *)malloc( sizeof(message_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:262:      msg = (message_param_t *)malloc( sizeof(message_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:364:  msg = (message_param_t *)malloc( sizeof(message_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:584:    msg = (message_param_t *)malloc( sizeof(message_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:677:  phld = (placeholder_param_t *)malloc( sizeof(placeholder_param_t));
./applications/jpip/libopenjpip/msgqueue_manager.c:684:  phld->OrigBH = (Byte_t *)malloc(phld->OrigBHlen);
./applications/jpip/libopenjpip/msgqueue_manager.c:685:  memcpy( phld->OrigBH, datastream+20, phld->OrigBHlen);
./applications/jpip/libopenjpip/byte_manager.c:62:  data = (Byte_t *)malloc( size);
./applications/jpip/libopenjpip/boxheader_manager.c:63:  boxheader = (boxheader_param_t *)malloc( sizeof( boxheader_param_t));
./applications/jpip/libopenjpip/cachemodel_manager.c:50:  cachemodellist = (cachemodellist_param_t *)malloc( sizeof(cachemodellist_param_t));
./applications/jpip/libopenjpip/cachemodel_manager.c:67:  cachemodel = (cachemodel_param_t *)malloc( sizeof(cachemodel_param_t));
./applications/jpip/libopenjpip/cachemodel_manager.c:88:  cachemodel->tp_model = (bool *)calloc( 1, numOfelem*sizeof(bool));
./applications/jpip/libopenjpip/cachemodel_manager.c:89:  cachemodel->th_model = (bool *)calloc( 1, numOftiles*sizeof(bool));
./applications/jpip/libopenjpip/cachemodel_manager.c:90:  cachemodel->pp_model = (bool **)malloc( target->codeidx->SIZ.Csiz*sizeof(bool *));
./applications/jpip/libopenjpip/cachemodel_manager.c:93:    cachemodel->pp_model[i] = (bool *)calloc( 1, get_nmax(precpacket)*get_m(precpacket)*sizeof(bool));
./applications/jpip/libopenjpip/index_manager.c:101:  jp2idx = (index_param_t *)malloc( sizeof(index_param_t));
./applications/jpip/libopenjpip/index_manager.c:499:  jp2idx->tileheader = (mhixbox_param_t **)malloc( jp2idx->SIZ.XTnum*jp2idx->SIZ.YTnum*sizeof(mhixbox_param_t *));
./applications/jpip/libopenjpip/index_manager.c:554:  jp2idx->precpacket = (faixbox_param_t **)malloc( jp2idx->SIZ.Csiz*sizeof(faixbox_param_t *));
./applications/jpip/libopenjpip/index_manager.c:636:    COD->XPsiz = (Byte4_t *)malloc( (COD->numOfdecomp+1)*sizeof(Byte4_t));
./applications/jpip/libopenjpip/index_manager.c:637:    COD->YPsiz = (Byte4_t *)malloc( (COD->numOfdecomp+1)*sizeof(Byte4_t));
./applications/jpip/libopenjpip/index_manager.c:646:    COD->XPsiz = (Byte4_t *)malloc( sizeof(Byte4_t));
./applications/jpip/libopenjpip/index_manager.c:647:    COD->YPsiz = (Byte4_t *)malloc( sizeof(Byte4_t));
./applications/jpip/libopenjpip/channel_manager.c:52:  channellist = (channellist_param_t *)malloc( sizeof(channellist_param_t));
./applications/jpip/libopenjpip/channel_manager.c:71:  channel = (channel_param_t *)malloc( sizeof(channel_param_t));
./applications/jpip/libopenjpip/jp2k_decoder.c:154:    *ihdrbox = (ihdrbox_param_t *)malloc( sizeof(ihdrbox_param_t));
./applications/jpip/libopenjpip/jp2k_decoder.c:186:  pix = (Byte_t *)malloc( datasize);
./applications/jpip/libopenjpip/dec_clientmsg_handler.c:137:  xmlstream = (Byte_t *)malloc( boxcontents->length);
./applications/jpip/libopenjpip/dec_clientmsg_handler.c:138:  memcpy( xmlstream, jpipstream+boxcontents->offset, boxcontents->length);
./applications/jpip/libopenjpip/mhixbox_manager.c:52:  mhix = ( mhixbox_param_t *)malloc( sizeof( mhixbox_param_t));
./applications/jpip/libopenjpip/mhixbox_manager.c:59:    mkridx = ( markeridx_param_t *)malloc( sizeof( markeridx_param_t));
./applications/jpip/libopenjpip/query_parser.c:159:  query = (query_param_t *)malloc( sizeof(query_param_t));
./applications/jpip/libopenjpip/query_parser.c:201:    strcpy( fieldname, "");
./applications/jpip/libopenjpip/query_parser.c:202:    strcpy( fieldval, "");
./applications/jpip/libopenjpip/query_parser.c:395:  query_param->comps = (bool *)calloc( 1, (query_param->lastcomp+1)*sizeof(bool));
./applications/jpip/libopenjpip/j2kheader_manager.c:135:    COD.XPsiz = (Byte4_t *)malloc( (COD.numOfdecomp+1)*sizeof(Byte4_t));
./applications/jpip/libopenjpip/j2kheader_manager.c:136:    COD.YPsiz = (Byte4_t *)malloc( (COD.numOfdecomp+1)*sizeof(Byte4_t));
./applications/jpip/libopenjpip/j2kheader_manager.c:145:    COD.XPsiz = (Byte4_t *)malloc( sizeof(Byte4_t));
./applications/jpip/libopenjpip/j2kheader_manager.c:146:    COD.YPsiz = (Byte4_t *)malloc( sizeof(Byte4_t));
./applications/jpip/libopenjpip/manfbox_manager.c:52:  manf = ( manfbox_param_t *)malloc( sizeof( manfbox_param_t));
./applications/jpip/libopenjpip/jp2k_encoder.c:121:    memcpy( jp2stream+jp2cDBoxOffset, codestream, codelen);
./applications/jpip/libopenjpip/jp2k_encoder.c:315:  buf = (Byte_t *)malloc(( *j2klen)+2);
./applications/jpip/libopenjpip/jp2k_encoder.c:317:  memcpy( buf, j2kstream, *j2klen);
./applications/jpip/libopenjpip/jp2k_encoder.c:318:  memcpy( buf+(*j2klen), &SOT, 2);
./applications/jpip/libopenjpip/jp2k_encoder.c:656:  buf = (Byte_t *)malloc(( *j2klen)+newlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:658:  memcpy( buf, j2kstream, *j2klen);
./applications/jpip/libopenjpip/jp2k_encoder.c:659:  memcpy( buf+(*j2klen), newstream, newlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:681:  newstream = (Byte_t *)malloc( newlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:683:  memcpy( newstream, phld->OrigBH, phld->OrigBHlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:685:  buf = (Byte_t *)malloc(( *jp2len)+newlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:687:  memcpy( buf, jp2stream, *jp2len);
./applications/jpip/libopenjpip/jp2k_encoder.c:688:  memcpy( buf+(*jp2len), newstream, newlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:706:  buf = (Byte_t *)malloc(( *j2klen)+newlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:708:  memcpy( buf, j2kstream, *j2klen);
./applications/jpip/libopenjpip/jp2k_encoder.c:709:  memcpy( buf+(*j2klen), newstream, newlen);
./applications/jpip/libopenjpip/jp2k_encoder.c:723:  buf = (Byte_t *)malloc(( *j2klen)+padding);
./applications/jpip/libopenjpip/jp2k_encoder.c:725:  memcpy( buf, j2kstream, *j2klen);
./applications/jpip/libopenjpip/jp2k_encoder.c:741:  buf = (Byte_t *)malloc(( *j2klen)+2);
./applications/jpip/libopenjpip/jp2k_encoder.c:743:  memcpy( buf, j2kstream, *j2klen);
./applications/jpip/libopenjpip/jp2k_encoder.c:744:  memcpy( buf+(*j2klen), &EOC, 2);
./applications/jpip/libopenjpip/jp2k_encoder.c:761:  buf = (Byte_t *)malloc( *length);
./applications/jpip/libopenjpip/jp2k_encoder.c:762:  memcpy( buf, stream+message->res_offset,  *length);
./applications/jpip/libopenjpip/jp2k_encoder.c:778:  buf = (Byte_t *)malloc(*length);
./applications/jpip/libopenjpip/jp2k_encoder.c:782:  memcpy( buf, &SOT, 2);
./applications/jpip/libopenjpip/jp2k_encoder.c:783:  memcpy( buf+2, &Lsot, 2);
./applications/jpip/libopenjpip/jp2k_encoder.c:784:  memcpy( buf+4, &Isot, 2);
./applications/jpip/libopenjpip/jp2k_encoder.c:785:  memcpy( buf+6, &Psot, 4);
./applications/jpip/libopenjpip/jp2k_encoder.c:786:  memcpy( buf+10, &TPsot, 1);
./applications/jpip/libopenjpip/jp2k_encoder.c:787:  memcpy( buf+11, &TNsot, 1);
./applications/jpip/libopenjpip/jp2k_encoder.c:788:  memcpy( buf+12, &SOD, 2);
./applications/jpip/libopenjpip/ihdrbox_manager.c:63:  ihdrbox = (ihdrbox_param_t *)malloc( sizeof(ihdrbox_param_t));
./applications/jpip/libopenjpip/session_manager.c:51:  sessionlist = (sessionlist_param_t *)malloc( sizeof(sessionlist_param_t));
./applications/jpip/libopenjpip/session_manager.c:63:  session = (session_param_t *)malloc( sizeof(session_param_t));
./applications/jpip/libopenjpip/metadata_manager.c:50:  list = (metadatalist_param_t *)malloc( sizeof(metadatalist_param_t));
./applications/jpip/libopenjpip/metadata_manager.c:126:  bin = (metadata_param_t *)malloc( sizeof(metadata_param_t));
./applications/jpip/libopenjpip/metadata_manager.c:187:  contents = (boxcontents_param_t *)malloc( sizeof(boxcontents_param_t));
./applications/jpip/libopenjpip/target_manager.c:60:  targetlist = (targetlist_param_t *)malloc( sizeof(targetlist_param_t));
./applications/jpip/libopenjpip/target_manager.c:101:  target = (target_param_t *)malloc( sizeof(target_param_t));
./applications/jpip/libopenjpip/target_manager.c:276:  data = (char *)malloc( 12); /* size of header*/
./applications/jpip/libopenjpip/openjpip.c:60:  server_record_t *record = (server_record_t *)malloc( sizeof(server_record_t));
./applications/jpip/libopenjpip/openjpip.c:82:  qr = (QR_t *)malloc( sizeof(QR_t));
./applications/jpip/libopenjpip/openjpip.c:214:  dec_server_record_t *record = (dec_server_record_t *)malloc( sizeof(dec_server_record_t));
./applications/jpip/libopenjpip/openjpip.c:313:  dec = (jpip_dec_param_t *)calloc( 1, sizeof(jpip_dec_param_t));
./applications/jpip/libopenjpip/openjpip.c:336:  dec->jpipstream = (Byte_t *)malloc( dec->jpiplen);
./applications/jpip/libopenjpip/openjpip.c:422:  data = (char *)malloc( 12); /* size of header*/
./applications/jpip/libopenjpip/box_manager.c:50:  boxlist = (boxlist_param_t *)malloc( sizeof(boxlist_param_t));
./applications/jpip/libopenjpip/box_manager.c:119:  box = (box_param_t *)malloc( sizeof( box_param_t));
./applications/jpip/libopenjpip/box_manager.c:152:  box = (box_param_t *)malloc( sizeof( box_param_t));
./applications/jpip/libopenjpip/box_manager.c:201:	foundbox = (box_param_t *)malloc( sizeof( box_param_t));
./applications/jpip/libopenjpip/box_manager.c:254:      foundbox = (box_param_t *)malloc( sizeof( box_param_t));
./applications/jpip/libopenjpip/sock_manager.c:124:  ptr = stream = malloc( length);
./applications/jpip/util/addXMLinJP2.c:121:  data = (char *)malloc( 12); /* size of header */
./applications/jpip/util/addXMLinJP2.c:169:  data = (char *)malloc( (size_t)*fsize);
./applications/OPJViewer/source/OPJViewer.cpp:138:    wxChar **wxArgv = new wxChar *[argc + 1];
./applications/OPJViewer/source/OPJViewer.cpp:209:	OPJconfig = new wxConfig(OPJ_APPLICATION, OPJ_APPLICATION_VENDOR);
./applications/OPJViewer/source/OPJViewer.cpp:358:  OPJFrame *frame = new OPJFrame(NULL, wxID_ANY, OPJ_APPLICATION_TITLEBAR,
./applications/OPJViewer/source/OPJViewer.cpp:512:	wxMenu *file_menu = new wxMenu;
./applications/OPJViewer/source/OPJViewer.cpp:546:	wxMenu *view_menu = new wxMenu;
./applications/OPJViewer/source/OPJViewer.cpp:603:	wxMenu *sets_menu = new wxMenu;
./applications/OPJViewer/source/OPJViewer.cpp:612:	wxMenu *help_menu = new wxMenu;
./applications/OPJViewer/source/OPJViewer.cpp:618:	wxMenuBar *menu_bar = new wxMenuBar;
./applications/OPJViewer/source/OPJViewer.cpp:631:	tool_bar = new wxToolBar(this, OPJFRAME_TOOLBAR,
./applications/OPJViewer/source/OPJViewer.cpp:705:	loggingWindow = new wxSashLayoutWindow(this, OPJFRAME_LOGWIN,
./applications/OPJViewer/source/OPJViewer.cpp:722:	m_bookCtrlbottom = new wxNotebook(loggingWindow, BOTTOM_NOTEBOOK_ID,
./applications/OPJViewer/source/OPJViewer.cpp:727:	m_textCtrl = new wxTextCtrl(m_bookCtrlbottom, wxID_ANY, wxT(""),
./applications/OPJViewer/source/OPJViewer.cpp:737:	m_textCtrlbrowse = new wxTextCtrl(m_bookCtrlbottom, wxID_ANY, wxT(""),
./applications/OPJViewer/source/OPJViewer.cpp:741:	wxFont *browsefont = new wxFont(wxNORMAL_FONT->GetPointSize(),
./applications/OPJViewer/source/OPJViewer.cpp:750:	markerTreeWindow = new wxSashLayoutWindow(this, OPJFRAME_BROWSEWIN,
./applications/OPJViewer/source/OPJViewer.cpp:762:	m_bookCtrl = new wxNotebook(markerTreeWindow, LEFT_NOTEBOOK_ID,
./applications/OPJViewer/source/OPJViewer.cpp:778:	wxLogTextCtrl *logWindow = new wxLogTextCtrl(m_textCtrl);
./applications/OPJViewer/source/OPJViewer.cpp:1299:		OPJChildFrame *subframe = new OPJChildFrame(this,
./applications/OPJViewer/source/OPJViewer.cpp:1309:		m_treehash[winNumber] = new OPJMarkerTree(m_bookCtrl, subframe, paths[n], wxT("Parsing..."), TreeTest_Ctrl,
./applications/OPJViewer/source/OPJViewer.cpp:1445:    OPJDecoThread *dthread = new OPJDecoThread(this);
./applications/OPJViewer/source/OPJViewer.cpp:1458:    OPJEncoThread *ethread = new OPJEncoThread(this);
./applications/OPJViewer/source/OPJViewer.cpp:1584:	OPJCanvas *canvas = new OPJCanvas(fname, this, wxPoint(0, 0), wxSize(width, height));
./applications/OPJViewer/source/wxj2kparser.cpp:617:			unsigned char *ssiz  = new unsigned char(csiz);
./applications/OPJViewer/source/wxj2kparser.cpp:618:			unsigned char *xrsiz = new unsigned char(csiz);
./applications/OPJViewer/source/wxj2kparser.cpp:619:			unsigned char *yrsiz = new unsigned char(csiz);
./applications/OPJViewer/source/imagmxf.cpp:248:	MXFFilePtr TestFile = new MXFFile;
./applications/OPJViewer/source/imagmxf.cpp:444:			NewEI.PackageID = new UMID(PackageID->PutData()->Data);
./applications/OPJViewer/source/imagmxf.cpp:470:						UMIDPtr TheID = new UMID(PackageID->PutData()->Data);
./applications/OPJViewer/source/OPJAbout.cpp:45:    topsizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJAbout.cpp:47:    html = new wxHtmlWindow(&dlg, wxID_ANY, wxDefaultPosition, wxSize(320, 250), wxHW_SCROLLBAR_NEVER);
./applications/OPJViewer/source/OPJAbout.cpp:59:    wxButton *bu1 = new wxButton(&dlg, wxID_OK, wxT("OK"));
./applications/OPJViewer/source/OPJThreads.cpp:471:    wxImageList *images = new wxImageList(size, size, true);
./applications/OPJViewer/source/OPJThreads.cpp:503:    wxImageList *images = new wxImageList(size, size, true);
./applications/OPJViewer/source/OPJThreads.cpp:745:    OPJParseThread *pthread = new OPJParseThread(this, parentid);
./applications/OPJViewer/source/OPJThreads.cpp:824:	wxFile *fp = new wxFile(m_fname.GetFullPath().c_str(), wxFile::read);
./applications/OPJViewer/source/OPJThreads.cpp:836:	unsigned char *buffer = new unsigned char[bunch_linesize * bunch_numlines];
./applications/OPJViewer/source/OPJDialogs.cpp:83:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:86:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:89:		wxBoxSizer *subtopSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:93:			m_enabledecoCheck = new wxCheckBox(panel, OPJDECO_ENABLEDECO, wxT("Enable decoding"), wxDefaultPosition, wxDefaultSize),
./applications/OPJViewer/source/OPJDialogs.cpp:99:			m_enableparseCheck = new wxCheckBox(panel, OPJDECO_ENABLEPARSE, wxT("Enable parsing"), wxDefaultPosition, wxDefaultSize),
./applications/OPJViewer/source/OPJDialogs.cpp:105:			m_resizeBox = new wxRadioBox(panel, OPJDECO_RESMETHOD,
./applications/OPJViewer/source/OPJDialogs.cpp:127:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:130:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:136:		wxBoxSizer *subtopSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:139:			wxStaticBox* frameBox = new wxStaticBox(panel, wxID_ANY, wxT("Frame"));
./applications/OPJViewer/source/OPJDialogs.cpp:140:			wxBoxSizer* frameSizer = new wxStaticBoxSizer(frameBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:143:				wxBoxSizer* framenumSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:154:					m_framenumCtrl = new wxSpinCtrl(panel, OPJDECO_FRAMENUM,
./applications/OPJViewer/source/OPJDialogs.cpp:176:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:179:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:185:		wxBoxSizer *subtopSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:188:			wxStaticBox* resolutionBox = new wxStaticBox(panel, wxID_ANY, wxT("Resolutions"));
./applications/OPJViewer/source/OPJDialogs.cpp:189:			wxBoxSizer* resolutionSizer = new wxStaticBoxSizer(resolutionBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:192:				wxBoxSizer* reduceSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:203:					m_reduceCtrl = new wxSpinCtrl(panel, OPJDECO_REDUCEFACTOR,
./applications/OPJViewer/source/OPJDialogs.cpp:215:			wxStaticBox* layerBox = new wxStaticBox(panel, wxID_ANY, wxT("Layers"));
./applications/OPJViewer/source/OPJDialogs.cpp:216:			wxBoxSizer* layerSizer = new wxStaticBoxSizer(layerBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:219:				wxBoxSizer* qualitySizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:230:					m_layerCtrl = new wxSpinCtrl(panel, OPJDECO_QUALITYLAYERS,
./applications/OPJViewer/source/OPJDialogs.cpp:242:			wxStaticBox* compoBox = new wxStaticBox(panel, wxID_ANY, wxT("Components"));
./applications/OPJViewer/source/OPJDialogs.cpp:243:			wxBoxSizer* compoSizer = new wxStaticBoxSizer(compoBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:246:				wxBoxSizer* numcompsSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:257:					m_numcompsCtrl = new wxSpinCtrl(panel, OPJDECO_NUMCOMPS,
./applications/OPJViewer/source/OPJDialogs.cpp:281:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:284:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:290:		wxBoxSizer *subtopSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:294:			m_enablejpwlCheck = new wxCheckBox(panel, OPJDECO_ENABLEJPWL, wxT("Enable JPWL"), wxDefaultPosition, wxDefaultSize),
./applications/OPJViewer/source/OPJDialogs.cpp:299:			wxStaticBox* compoBox = new wxStaticBox(panel, wxID_ANY, wxT("Components"));
./applications/OPJViewer/source/OPJDialogs.cpp:300:			wxBoxSizer* compoSizer = new wxStaticBoxSizer(compoBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:303:				wxBoxSizer* expcompsSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:314:					m_expcompsCtrl = new wxSpinCtrl(panel, OPJDECO_EXPCOMPS,
./applications/OPJViewer/source/OPJDialogs.cpp:327:			wxStaticBox* tileBox = new wxStaticBox(panel, wxID_ANY, wxT("Tiles"));
./applications/OPJViewer/source/OPJDialogs.cpp:328:			wxBoxSizer* tileSizer = new wxStaticBoxSizer(tileBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:331:				wxBoxSizer* maxtileSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:342:					m_maxtilesCtrl = new wxSpinCtrl(panel, OPJDECO_MAXTILES,
./applications/OPJViewer/source/OPJDialogs.cpp:462:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:465:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:468:		wxBoxSizer *subtopSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:482:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:486:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:490:			m_enablejpwlCheck = new wxCheckBox(panel, OPJENCO_ENABLEJPWL, wxT("Enable JPWL"),
./applications/OPJViewer/source/OPJDialogs.cpp:496:		wxFlexGridSizer *subtopSizer = new wxFlexGridSizer(2, 3, 3);
./applications/OPJViewer/source/OPJDialogs.cpp:499:			wxStaticBox* headerBox = new wxStaticBox(panel, wxID_ANY, wxT("Header protection"));
./applications/OPJViewer/source/OPJDialogs.cpp:500:			wxBoxSizer* headerSizer = new wxStaticBoxSizer(headerBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:503:				wxBoxSizer* info1Sizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:528:					wxBoxSizer* tilehprotSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:532:						m_hprotChoice[specno] = new wxChoice(panel, OPJENCO_HPROT,
./applications/OPJViewer/source/OPJDialogs.cpp:543:						m_htileCtrl[specno] = new wxSpinCtrl(panel, OPJENCO_HTILE,
./applications/OPJViewer/source/OPJDialogs.cpp:559:			wxStaticBox* packetBox = new wxStaticBox(panel, wxID_ANY, wxT("Packet protection"));
./applications/OPJViewer/source/OPJDialogs.cpp:560:			wxBoxSizer* packetSizer = new wxStaticBoxSizer(packetBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:563:				wxBoxSizer* info2Sizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:596:					wxBoxSizer* tilepprotSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:600:						m_pprotChoice[specno] = new wxChoice(panel, OPJENCO_PPROT,
./applications/OPJViewer/source/OPJDialogs.cpp:611:						m_ptileCtrl[specno] = new wxSpinCtrl(panel, OPJENCO_PTILE,
./applications/OPJViewer/source/OPJDialogs.cpp:623:						m_ppackCtrl[specno] = new wxSpinCtrl(panel, OPJENCO_PPACK,
./applications/OPJViewer/source/OPJDialogs.cpp:639:			wxStaticBox* sensiBox = new wxStaticBox(panel, wxID_ANY, wxT("Sensitivity"));
./applications/OPJViewer/source/OPJDialogs.cpp:640:			wxBoxSizer* sensiSizer = new wxStaticBoxSizer(sensiBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:643:				wxBoxSizer* info3Sizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:666:					wxBoxSizer* tilesensiSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:670:						m_sensiChoice[specno] = new wxChoice(panel, OPJENCO_SENSI,
./applications/OPJViewer/source/OPJDialogs.cpp:681:						m_stileCtrl[specno] = new wxSpinCtrl(panel, OPJENCO_STILE,
./applications/OPJViewer/source/OPJDialogs.cpp:708:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:711:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:717:		wxFlexGridSizer *subtopSizer = new wxFlexGridSizer(2, 3, 3);
./applications/OPJViewer/source/OPJDialogs.cpp:720:			wxStaticBox* imageBox = new wxStaticBox(panel, wxID_ANY, wxT("Image"));
./applications/OPJViewer/source/OPJDialogs.cpp:721:			wxBoxSizer* imageSizer = new wxStaticBoxSizer(imageBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:724:				wxBoxSizer* subsSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:735:					m_subsamplingCtrl = new wxTextCtrl(panel, OPJENCO_SUBSAMPLING,
./applications/OPJViewer/source/OPJDialogs.cpp:744:				wxBoxSizer* imorigSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:755:					m_originCtrl = new wxTextCtrl(panel, OPJENCO_IMORIG,
./applications/OPJViewer/source/OPJDialogs.cpp:766:			wxStaticBox* layerBox = new wxStaticBox(panel, wxID_ANY, wxT("Layers/compression"));
./applications/OPJViewer/source/OPJDialogs.cpp:767:			wxBoxSizer* layerSizer = new wxStaticBoxSizer(layerBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:770:				wxBoxSizer* rateSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:778:					m_rateRadio = new wxRadioButton(panel, OPJENCO_RATERADIO, wxT("&Rate values"),
./applications/OPJViewer/source/OPJDialogs.cpp:790:					m_rateCtrl = new wxTextCtrl(panel, OPJENCO_RATEFACTOR,
./applications/OPJViewer/source/OPJDialogs.cpp:801:				wxBoxSizer* qualitySizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:809:					m_qualityRadio = new wxRadioButton(panel, OPJENCO_QUALITYRADIO, wxT("&Quality values"),
./applications/OPJViewer/source/OPJDialogs.cpp:820:					m_qualityCtrl = new wxTextCtrl(panel, OPJENCO_QUALITYFACTOR,
./applications/OPJViewer/source/OPJDialogs.cpp:833:			wxStaticBox* transformBox = new wxStaticBox(panel, wxID_ANY, wxT("Transforms"));
./applications/OPJViewer/source/OPJDialogs.cpp:834:			wxBoxSizer* transformSizer = new wxStaticBoxSizer(transformBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:838:				m_mctCheck = new wxCheckBox(panel, OPJENCO_ENABLEMCT, wxT("Multiple component"),
./applications/OPJViewer/source/OPJDialogs.cpp:845:				m_irrevCheck = new wxCheckBox(panel, OPJENCO_ENABLEIRREV, wxT("Irreversible wavelet"),
./applications/OPJViewer/source/OPJDialogs.cpp:851:				wxBoxSizer* resnumSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:862:					m_resolutionsCtrl = new wxSpinCtrl(panel, OPJENCO_RESNUMBER,
./applications/OPJViewer/source/OPJDialogs.cpp:874:			wxStaticBox* codestreamBox = new wxStaticBox(panel, wxID_ANY, wxT("Codestream"));
./applications/OPJViewer/source/OPJDialogs.cpp:875:			wxBoxSizer* codestreamSizer = new wxStaticBoxSizer(codestreamBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:878:				wxBoxSizer* codeblockSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:889:					m_cbsizeCtrl = new wxTextCtrl(panel, OPJENCO_CODEBLOCKSIZE,
./applications/OPJViewer/source/OPJDialogs.cpp:898:				wxBoxSizer* precinctSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:909:					m_prsizeCtrl = new wxTextCtrl(panel, OPJENCO_PRECINCTSIZE,
./applications/OPJViewer/source/OPJDialogs.cpp:920:			wxStaticBox* tileBox = new wxStaticBox(panel, wxID_ANY, wxT("Tiles"));
./applications/OPJViewer/source/OPJDialogs.cpp:921:			wxBoxSizer* tileSizer = new wxStaticBoxSizer(tileBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:924:				wxBoxSizer* tilesizeSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:935:					m_tsizeCtrl = new wxTextCtrl(panel, OPJENCO_TILESIZE,
./applications/OPJViewer/source/OPJDialogs.cpp:944:				wxBoxSizer* tilorigSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:955:					m_toriginCtrl = new wxTextCtrl(panel, OPJENCO_TILORIG,
./applications/OPJViewer/source/OPJDialogs.cpp:968:			progressionBox = new wxRadioBox(panel, OPJENCO_PROGRESSION,
./applications/OPJViewer/source/OPJDialogs.cpp:990:    wxPanel* panel = new wxPanel(parent, wxID_ANY);
./applications/OPJViewer/source/OPJDialogs.cpp:993:    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:999:		wxFlexGridSizer *subtopSizer = new wxFlexGridSizer(2, 3, 3);
./applications/OPJViewer/source/OPJDialogs.cpp:1002:			wxStaticBox* resilBox = new wxStaticBox(panel, wxID_ANY, wxT("Error resilience"));
./applications/OPJViewer/source/OPJDialogs.cpp:1003:			wxBoxSizer* resilSizer = new wxStaticBoxSizer(resilBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1006:				wxBoxSizer* resil2Sizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1010:					m_sopCheck = new wxCheckBox(panel, OPJENCO_ENABLESOP, wxT("SOP"),
./applications/OPJViewer/source/OPJDialogs.cpp:1017:					m_ephCheck = new wxCheckBox(panel, OPJENCO_ENABLEEPH, wxT("EPH"),
./applications/OPJViewer/source/OPJDialogs.cpp:1028:				wxFlexGridSizer* resil3Sizer = new wxFlexGridSizer(3, 3, 3);
./applications/OPJViewer/source/OPJDialogs.cpp:1032:					m_enablebypassCheck = new wxCheckBox(panel, OPJENCO_ENABLEBYPASS, wxT("BYPASS"),
./applications/OPJViewer/source/OPJDialogs.cpp:1039:					m_enableresetCheck = new wxCheckBox(panel, OPJENCO_ENABLERESET, wxT("RESET"),
./applications/OPJViewer/source/OPJDialogs.cpp:1046:					m_enablerestartCheck = new wxCheckBox(panel, OPJENCO_ENABLERESTART, wxT("RESTART"),
./applications/OPJViewer/source/OPJDialogs.cpp:1053:					m_enablevscCheck = new wxCheckBox(panel, OPJENCO_ENABLEVSC, wxT("VSC"),
./applications/OPJViewer/source/OPJDialogs.cpp:1060:					m_enableertermCheck = new wxCheckBox(panel, OPJENCO_ENABLEERTERM, wxT("ERTERM"),
./applications/OPJViewer/source/OPJDialogs.cpp:1067:					m_enablesegmarkCheck = new wxCheckBox(panel, OPJENCO_ENABLESEGMARK, wxT("SEGMARK"),
./applications/OPJViewer/source/OPJDialogs.cpp:1077:			wxStaticBox* roiBox = new wxStaticBox(panel, wxID_ANY, wxT("Region Of Interest"));
./applications/OPJViewer/source/OPJDialogs.cpp:1078:			wxBoxSizer* roiSizer = new wxStaticBoxSizer(roiBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1081:				wxBoxSizer* roicompSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1102:				wxBoxSizer* roishiftSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1125:			wxStaticBox* pocBox = new wxStaticBox(panel, wxID_ANY, wxT("POC"));
./applications/OPJViewer/source/OPJDialogs.cpp:1126:			wxBoxSizer* pocSizer = new wxStaticBoxSizer(pocBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1130:				m_enablepocCheck = new wxCheckBox(panel, OPJENCO_ENABLEPOC, wxT("Enabled (tn=rs,cs,le,re,ce,pr)"),
./applications/OPJViewer/source/OPJDialogs.cpp:1136:				wxBoxSizer* pocspecSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1147:					m_pocCtrl = new wxTextCtrl(panel, OPJENCO_POCSPEC,
./applications/OPJViewer/source/OPJDialogs.cpp:1159:			wxStaticBox* commentBox = new wxStaticBox(panel, wxID_ANY, wxT("Comment"));
./applications/OPJViewer/source/OPJDialogs.cpp:1160:			wxBoxSizer* commentSizer = new wxStaticBoxSizer(commentBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1164:				m_enablecommCheck = new wxCheckBox(panel, OPJENCO_ENABLECOMM, wxT("Enabled (empty to reset)"),
./applications/OPJViewer/source/OPJDialogs.cpp:1174:				m_commentCtrl = new wxTextCtrl(panel, OPJENCO_COMMENTTEXT,
./applications/OPJViewer/source/OPJDialogs.cpp:1184:			wxStaticBox* indexBox = new wxStaticBox(panel, wxID_ANY, wxT("Indexing"));
./applications/OPJViewer/source/OPJDialogs.cpp:1185:			wxBoxSizer* indexSizer = new wxStaticBoxSizer(indexBox, wxVERTICAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1189:				m_enableidxCheck = new wxCheckBox(panel, OPJENCO_ENABLEINDEX, wxT("Enabled"),
./applications/OPJViewer/source/OPJDialogs.cpp:1195:				wxBoxSizer* indexnameSizer = new wxBoxSizer(wxHORIZONTAL);
./applications/OPJViewer/source/OPJDialogs.cpp:1206:					m_indexCtrl = new wxTextCtrl(panel, OPJENCO_INDEXNAME,

== files() ==
./libopenjpeg/cio.c:37:opj_cio_t* OPJ_CALLCONV opj_cio_open(opj_common_ptr cinfo, unsigned char *buffer, int length) {
./libopenjpeg/openjpeg.h:772:OPJ_API opj_cio_t* OPJ_CALLCONV opj_cio_open(opj_common_ptr cinfo, unsigned char *buffer, int length);
./libopenjpeg/j2k.c:2612:		PPT_file=fopen("PPT","rb");
./tests/unit/testempty2.c:115:  cio = opj_cio_open((opj_common_ptr)cinfo, NULL, 0);
./tests/unit/testempty2.c:124:  f = fopen(parameters.outfile, "wb");
./tests/unit/testempty2.c:136:  FILE *fsrc = fopen(outputfile, "rb");
./tests/unit/testempty2.c:160:  cio = opj_cio_open((opj_common_ptr)dinfo, src, (int)file_length);
./tests/unit/testempty1.c:111:  cio = opj_cio_open((opj_common_ptr)cinfo, NULL, 0);
./tests/unit/testempty1.c:120:  f = fopen(parameters.outfile, "wb");
./tests/compareRAWimages.c:144:	file_test = fopen(inParam.test_filename, "rb");
./tests/compareRAWimages.c:161:	file_base = fopen(inParam.base_filename, "rb");
./tests/compare_dump_files.c:144:  if((fbase = fopen(inParam.base_filename, "rb"))==NULL)
./tests/compare_dump_files.c:155:  if((ftest = fopen(inParam.test_filename, "rb"))==NULL)
./applications/codec/index.c:60:	stream = fopen(index, "w");
./applications/codec/j2k_to_image.c:596:		fsrc = fopen(parameters.infile, "rb");
./applications/codec/j2k_to_image.c:632:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/codec/j2k_to_image.c:675:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/codec/j2k_to_image.c:718:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/codec/image_to_j2k.c:1705:				cio = opj_cio_open((opj_common_ptr)cinfo, NULL, 0);
./applications/codec/image_to_j2k.c:1720:				f = fopen(parameters.outfile, "wb");
./applications/codec/image_to_j2k.c:1766:				cio = opj_cio_open((opj_common_ptr)cinfo, NULL, 0);
./applications/codec/image_to_j2k.c:1781:				f = fopen(parameters.outfile, "wb");
./applications/codec/j2k_dump.c:390:	  fout = fopen(parameters.outfile,"w");
./applications/codec/j2k_dump.c:415:		fsrc = fopen(parameters.infile, "rb");
./applications/codec/j2k_dump.c:452:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/codec/j2k_dump.c:501:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/codec/j2k_dump.c:554:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/codec/convert.c:273:	f = fopen(filename, "rb");
./applications/codec/convert.c:436:	fdest = fopen(outfile, "wb");
./applications/codec/convert.c:617:	IN = fopen(filename, "rb");
./applications/codec/convert.c:1038:		fdest = fopen(outfile, "wb");
./applications/codec/convert.c:1137:		fdest = fopen(outfile, "wb");
./applications/codec/convert.c:1302:	f = fopen(filename, "rb");
./applications/codec/convert.c:1445:		fdest = fopen(name, "wb");
./applications/codec/convert.c:1735:	if((fp = fopen(filename, "rb")) == NULL)
./applications/codec/convert.c:1944:	fdest = fopen(outfile, "wb");
./applications/codec/convert.c:2051:	fdest = fopen(destname, "wb");
./applications/codec/convert.c:2835:	f = fopen(filename, "rb");
./applications/codec/convert.c:2945:	rawFile = fopen(outfile, "wb");
./applications/codec/convert.c:3102:	if((reader = fopen(read_idf, "rb")) == NULL)
./applications/codec/convert.c:3293:	writer = fopen(write_idf, "wb");
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1945:		cio = opj_cio_open((opj_common_ptr)cinfo, NULL, 0);
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1978:			f = fopen(parameters.outfile, "wb");
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:601:			fsrc = fopen(parameters.infile, "rb");
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:644:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:674:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:705:			cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/mj2/wrap_j2k_in_mj2.c:65:	if((reader = fopen(fname, "rb")) == NULL) return success;
./applications/mj2/wrap_j2k_in_mj2.c:88:	cio = opj_cio_open((opj_common_ptr)dinfo, src, src_len);
./applications/mj2/wrap_j2k_in_mj2.c:182:  cio = opj_cio_open(NULL, siz_buffer, len);
./applications/mj2/wrap_j2k_in_mj2.c:292:  mj2file = fopen(argv[2], "wb");
./applications/mj2/wrap_j2k_in_mj2.c:339:  cio = opj_cio_open(movie->cinfo, buf, 300);
./applications/mj2/wrap_j2k_in_mj2.c:358:    j2kfile = fopen(j2kfilename, "rb");
./applications/mj2/wrap_j2k_in_mj2.c:384:	cio = opj_cio_open(movie->cinfo, frame_codestream, sample->sample_size);    
./applications/mj2/wrap_j2k_in_mj2.c:412:  cio = opj_cio_open(movie->cinfo, buf, 4);
./applications/mj2/wrap_j2k_in_mj2.c:434:  cio = opj_cio_open(movie->cinfo, buf, (TEMP_BUF+snum*20));
./applications/mj2/meta_out.c:945:	cio = opj_cio_open((opj_common_ptr)dinfo, frame_codestream, sample->sample_size-8);
./applications/mj2/mj2_convert.c:46:  f = fopen(infile,"rb");
./applications/mj2/mj2_convert.c:114:  yuvfile = fopen(infile,"rb");
./applications/mj2/mj2_convert.c:200:  f = fopen(outfile, "a+b");
./applications/mj2/mj2_convert.c:289:    f = fopen(outfile, "wb");
./applications/mj2/extract_j2k_from_mj2.c:85:  mj2file = fopen(argv[1], "rb");
./applications/mj2/extract_j2k_from_mj2.c:169:    outfile = fopen(outfilename, "wb");
./applications/mj2/frames_to_mj2.c:675:	mj2file = fopen(mj2_parameters.outfile, "wb");
./applications/mj2/frames_to_mj2.c:721:	cio = opj_cio_open((opj_common_ptr)movie->cinfo, buf, 300);
./applications/mj2/frames_to_mj2.c:787:	cio = opj_cio_open((opj_common_ptr)movie->cinfo, buf, buflen);
./applications/mj2/frames_to_mj2.c:835:	cio = opj_cio_open(NULL, buf, 4);
./applications/mj2/frames_to_mj2.c:851:	cio = opj_cio_open(movie->cinfo, buf, (TEMP_BUF+numframes*20));
./applications/mj2/mj2_to_metadata.c:252:  file = fopen(infile, "rb"); /* was: argv[1] */
./applications/mj2/mj2_to_metadata.c:266:  xmlout = fopen(outfile, "w"); /* was: argv[2] */
./applications/mj2/mj2_to_frames.c:95:  infile = fopen(argv[1], "rb");
./applications/mj2/mj2_to_frames.c:122:  outfile = fopen(argv[2], "w");
./applications/mj2/mj2_to_frames.c:213:	cio = opj_cio_open((opj_common_ptr)dinfo, frame_codestream, sample->sample_size-8);
./applications/mj2/mj2.c:2626:  cio = opj_cio_open((opj_common_ptr)movie->cinfo, src, 300);
./applications/mj2/mj2.c:2644:  cio = opj_cio_open((opj_common_ptr)movie->cinfo, src, 300);
./applications/mj2/mj2.c:2699:		cio = opj_cio_open((opj_common_ptr)movie->cinfo, src, 8);    		
./applications/mj2/mj2.c:2711:	cio = opj_cio_open((opj_common_ptr)movie->cinfo, src, box.length);
./applications/OPJViewer/source/imagjpeg2000.cpp:782:		cio = opj_cio_open((opj_common_ptr)dinfo, src, jpeg2000headSIZE + jp2hboxlen + jp2cboxlen);
./applications/OPJViewer/source/imagjpeg2000.cpp:784:		cio = opj_cio_open((opj_common_ptr)dinfo, src, file_length);
./applications/OPJViewer/source/imagjpeg2000.cpp:1374:        cio = opj_cio_open((opj_common_ptr)cinfo, NULL, 0);
./applications/OPJViewer/source/imagmxf.cpp:331:	cio = opj_cio_open((opj_common_ptr)dinfo, src, j2k_len);
./applications/jpip/libopenjpip/jpipstream_manager.c:67:  fp = fopen( filename, "wb");
./applications/jpip/libopenjpip/jp2k_decoder.c:75:  cio = opj_cio_open((opj_common_ptr)dinfo, j2kstream, j2klen);
./applications/jpip/libopenjpip/target_manager.c:264:    if( (fd = open( filepath, O_RDONLY)) == -1){
./applications/jpip/libopenjpip/target_manager.c:322:  if( (fd = open( tmpfname, O_RDWR|O_CREAT|O_EXCL, S_IRWXU)) == -1){
./applications/jpip/libopenjpip/openjpip.c:134:  if( (fd = open( tmpfname, O_RDWR|O_CREAT|O_EXCL, S_IRWXU)) == -1){
./applications/jpip/libopenjpip/openjpip.c:328:  if(( infd = open( fname, O_RDONLY)) == -1){
./applications/jpip/libopenjpip/openjpip.c:369:  if(( outfd = open( fname, O_WRONLY|O_CREAT, _S_IREAD | _S_IWRITE)) == -1){
./applications/jpip/libopenjpip/openjpip.c:371: if(( outfd = open( fname, O_WRONLY|O_CREAT, S_IRWXU|S_IRWXG)) == -1){
./applications/jpip/util/addXMLinJP2.c:110:  if( !(fp = fopen( filename, "a+b"))){
./applications/jpip/util/addXMLinJP2.c:146:  if(!(fp = fopen( filename, "r"))){
./applications/jpip/util/test_index.c:58:  if( (fd = open( argv[1], O_RDONLY)) == -1){

== logging() ==
./libopenjpeg/event.c:76:opj_bool opj_event_msg(opj_common_ptr cinfo, int event_type, const char *fmt, ...) {
./libopenjpeg/cio.c:65:			opj_event_msg(cio->cinfo, EVT_ERROR, "Error allocating memory for compressed bitstream\n");
./libopenjpeg/cio.c:134:		opj_event_msg(cio->cinfo, EVT_ERROR, "write error\n");
./libopenjpeg/cio.c:147:		opj_event_msg(cio->cinfo, EVT_ERROR, "read error: passed the end of the codestream (start = %d, current = %d, end = %d\n", cio->start, cio->bp, cio->end);
./libopenjpeg/tcd.c:1155:					/* opj_event_msg(tcd->cinfo, EVT_INFO, "rate alloc: len=%d, max=%d\n", l, maxlen); */
./libopenjpeg/tcd.c:1325:		opj_event_msg(tcd->cinfo, EVT_INFO, "- tile encoded in %f s\n", tcd->encoding_time);
./libopenjpeg/tcd.c:1353:	opj_event_msg(tcd->cinfo, EVT_INFO, "tile %d of %d\n", tileno + 1, tcd->cp->tw * tcd->cp->th);
./libopenjpeg/tcd.c:1390:		opj_event_msg(tcd->cinfo, EVT_ERROR, "tcd_decode: incomplete bistream\n");
./libopenjpeg/tcd.c:1400:        opj_event_msg(tcd->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/tcd.c:1411:            opj_event_msg(tcd->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/tcd.c:1420:	opj_event_msg(tcd->cinfo, EVT_INFO, "- tiers-1 took %f s\n", t1_time);
./libopenjpeg/tcd.c:1431:				opj_event_msg(tcd->cinfo, EVT_ERROR, "Error decoding tile. The number of resolutions to remove [%d+1] is higher than the number "
./libopenjpeg/tcd.c:1451:	opj_event_msg(tcd->cinfo, EVT_INFO, "- dwt took %f s\n", dwt_time);
./libopenjpeg/tcd.c:1463:        opj_event_msg(tcd->cinfo, EVT_ERROR, "Tiles don't all have the same dimension. Skip the MCT step.\n");
./libopenjpeg/tcd.c:1480:			opj_event_msg(tcd->cinfo, EVT_WARNING,"Number of components (%d) is inconsistent with a MCT. Skip the MCT step.\n",tile->numcomps);
./libopenjpeg/tcd.c:1504:      opj_event_msg(tcd->cinfo, EVT_ERROR, "Impossible offsets %d / %d\n", offset_x, offset_y);
./libopenjpeg/tcd.c:1515:            opj_event_msg(tcd->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/tcd.c:1542:	opj_event_msg(tcd->cinfo, EVT_INFO, "- tile decoded in %f s\n", tile_time);
./libopenjpeg/openjpeg.c:307:		opj_event_msg((opj_common_ptr)cinfo, EVT_WARNING, "Set index to NULL when calling the opj_encode function.\n"
./libopenjpeg/t1.c:1075:			opj_event_msg(t1->cinfo, EVT_WARNING, "Bad segmentation symbol %x\n", v);
./libopenjpeg/jpwl/jpwl.c:229:		opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:238:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create MH EPC\n");				
./libopenjpeg/jpwl/jpwl.c:274:			opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:281:			opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create MH ESD\n");				
./libopenjpeg/jpwl/jpwl.c:295:		opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:326:						opj_event_msg(j2k->cinfo, EVT_ERROR, "MS %x in %f is not len-ready: could not set up TH EPB\n",
./libopenjpeg/jpwl/jpwl.c:373:					opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:383:					/***** opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create TPH ESD #%d\n", tileno); */
./libopenjpeg/jpwl/jpwl.c:384:					opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create TPH ESD #%d,%d\n", tileno, tpno);
./libopenjpeg/jpwl/jpwl.c:413:					opj_event_msg(j2k->cinfo, EVT_ERROR, "MS %x in %f is not len-ready: could not set up MH EPB\n",
./libopenjpeg/jpwl/jpwl.c:446:			opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:453:			opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create MH EPB\n");				
./libopenjpeg/jpwl/jpwl.c:469:		opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:503:						opj_event_msg(j2k->cinfo, EVT_ERROR, "MS %x in %f is not len-ready: could not set up TH EPB\n",
./libopenjpeg/jpwl/jpwl.c:548:					opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:561:					/****** opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create TPH EPB #%d\n", tileno);	*/
./libopenjpeg/jpwl/jpwl.c:562:					opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create TPH EPB in #%d,d\n", tileno, tpno);
./libopenjpeg/jpwl/jpwl.c:584:						opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:644:				opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:735:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not allocate room for JPWL codestream buffer\n");
./libopenjpeg/jpwl/jpwl.c:804:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not update OPJ cstr_info structure\n");
./libopenjpeg/jpwl/jpwl.c:855:		opj_event_msg(j2k->cinfo, EVT_INFO, "ESDs sensitivities computed in %f s\n", esdcoding_time);
./libopenjpeg/jpwl/jpwl.c:891:		opj_event_msg(j2k->cinfo, EVT_INFO, "EPBs redundancy computed in %f s\n", epbcoding_time);
./libopenjpeg/jpwl/jpwl.c:945:	opj_event_msg(j2k->cinfo, EVT_INFO, 
./libopenjpeg/jpwl/jpwl.c:1083:			opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL correction could not be performed\n");
./libopenjpeg/jpwl/jpwl.c:1121:		opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:1187:	opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:1212:	opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:1275:							opj_event_msg(j2k->cinfo, JPWL_ASSUME ? EVT_WARNING : EVT_ERROR,
./libopenjpeg/jpwl/jpwl.c:1319:	opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl.c:1350:	opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl_lib.c:191:			opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not create TPH EPB for UEP in tile %d\n", tileno);				
./libopenjpeg/jpwl/jpwl_lib.c:212:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not allocate room for one EPB MS\n");
./libopenjpeg/jpwl/jpwl_lib.c:271:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Invalid protection value for EPB h = %d\n", hprot);				
./libopenjpeg/jpwl/jpwl_lib.c:339:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not allocate room for EPC MS\n");
./libopenjpeg/jpwl/jpwl_lib.c:375:		opj_event_msg(j2k->cinfo, EVT_ERROR, "There is no operating buffer for EPBs\n");
./libopenjpeg/jpwl/jpwl_lib.c:380:		opj_event_msg(j2k->cinfo, EVT_ERROR, "There is no operating buffer for EPBs data\n");
./libopenjpeg/jpwl/jpwl_lib.c:418:		opj_event_msg(j2k->cinfo, EVT_ERROR, "There is no room in EPB data field for writing redundancy data\n");
./libopenjpeg/jpwl/jpwl_lib.c:442:			opj_event_msg(j2k->cinfo, EVT_WARNING,
./libopenjpeg/jpwl/jpwl_lib.c:530:				opj_event_msg(j2k->cinfo, EVT_WARNING,
./libopenjpeg/jpwl/jpwl_lib.c:605:				opj_event_msg(j2k->cinfo, EVT_WARNING, "Couldn't find the MH EPB: disabling JPWL\n");
./libopenjpeg/jpwl/jpwl_lib.c:772:		opj_event_msg(j2k->cinfo, EVT_ERROR, "The EPB pointer is a NULL buffer\n");
./libopenjpeg/jpwl/jpwl_lib.c:802:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Auto. setup not yet implemented\n");
./libopenjpeg/jpwl/jpwl_lib.c:808:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Unknown expected EPB type\n");
./libopenjpeg/jpwl/jpwl_lib.c:846:				opj_event_msg(j2k->cinfo, EVT_WARNING,
./libopenjpeg/jpwl/jpwl_lib.c:856:				opj_event_msg(j2k->cinfo, EVT_INFO, "codeword is correctly decoded\n");*/
./libopenjpeg/jpwl/jpwl_lib.c:861:				opj_event_msg(j2k->cinfo, EVT_WARNING, "%d errors corrected in codeword\n", status);*/
./libopenjpeg/jpwl/jpwl_lib.c:866:				opj_event_msg(j2k->cinfo, EVT_WARNING, "EPB correction capability exceeded\n");
./libopenjpeg/jpwl/jpwl_lib.c:900:			opj_event_msg(j2k->cinfo, EVT_INFO, "+ %d symbol errors corrected (Ps=%.1e)\n", errnum,
./libopenjpeg/jpwl/jpwl_lib.c:903:			/*opj_event_msg(j2k->cinfo, EVT_INFO, "+ there were unrecoverable errors\n");*/
./libopenjpeg/jpwl/jpwl_lib.c:935:		opj_event_msg(j2k->cinfo, EVT_INFO,
./libopenjpeg/jpwl/jpwl_lib.c:1008:					opj_event_msg(j2k->cinfo, EVT_INFO, "- CRC is OK\n");
./libopenjpeg/jpwl/jpwl_lib.c:1011:					opj_event_msg(j2k->cinfo, EVT_WARNING, "- CRC is KO (r=%d, c=%d)\n", filecrc, mycrc);
./libopenjpeg/jpwl/jpwl_lib.c:1035:					opj_event_msg(j2k->cinfo, EVT_INFO, "- CRC is OK\n");
./libopenjpeg/jpwl/jpwl_lib.c:1038:					opj_event_msg(j2k->cinfo, EVT_WARNING, "- CRC is KO (r=%d, c=%d)\n", filecrc, mycrc);
./libopenjpeg/jpwl/jpwl_lib.c:1097:					opj_event_msg(j2k->cinfo, EVT_WARNING,
./libopenjpeg/jpwl/jpwl_lib.c:1103:					opj_event_msg(j2k->cinfo, EVT_INFO, "codeword is correctly decoded\n");*/
./libopenjpeg/jpwl/jpwl_lib.c:1107:					opj_event_msg(j2k->cinfo, EVT_WARNING, "%d errors corrected in codeword\n", status);*/
./libopenjpeg/jpwl/jpwl_lib.c:1112:					opj_event_msg(j2k->cinfo, EVT_WARNING, "EPB correction capability exceeded\n");
./libopenjpeg/jpwl/jpwl_lib.c:1151:			opj_event_msg(j2k->cinfo, EVT_INFO, "- %d symbol errors corrected (Ps=%.1e)\n", errnum,
./libopenjpeg/jpwl/jpwl_lib.c:1154:			opj_event_msg(j2k->cinfo, EVT_INFO, "- there were unrecoverable errors\n");
./libopenjpeg/jpwl/jpwl_lib.c:1212:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not allocate room for ESD MS\n");
./libopenjpeg/jpwl/jpwl_lib.c:1222:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Address size %d for ESD MS is forbidden\n", ad_size);
./libopenjpeg/jpwl/jpwl_lib.c:1226:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Sensitivity size %d for ESD MS is forbidden\n", se_size);
./libopenjpeg/jpwl/jpwl_lib.c:1259:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Address mode %d for ESD MS is unimplemented\n", addrm);
./libopenjpeg/jpwl/jpwl_lib.c:1263:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Address mode %d for ESD MS is forbidden\n", addrm);
./libopenjpeg/jpwl/jpwl_lib.c:1428:			opj_event_msg(j2k->cinfo, EVT_WARNING, "Addressing mode packet_range is not implemented\n");
./libopenjpeg/jpwl/jpwl_lib.c:1434:			opj_event_msg(j2k->cinfo, EVT_WARNING, "Unknown addressing mode\n");
./libopenjpeg/jpwl/jpwl_lib.c:1542:			opj_event_msg(j2k->cinfo, EVT_WARNING, "MAXERR sensitivity mode is not implemented\n");
./libopenjpeg/jpwl/jpwl_lib.c:1553:			opj_event_msg(j2k->cinfo, EVT_WARNING, "Reserved sensitivity mode is not implemented\n");
./libopenjpeg/jpwl/jpwl_lib.c:1694:		opj_event_msg(j2k->cinfo, EVT_ERROR, "J2K handle or JPWL markers list badly allocated\n");
./libopenjpeg/event.h:52:opj_bool opj_event_msg(opj_common_ptr cinfo, int event_type, const char *fmt, ...);
./libopenjpeg/t2.c:373:			opj_event_msg(t2->cinfo, EVT_WARNING, "Expected SOP marker\n");
./libopenjpeg/t2.c:480:                    opj_event_msg(t2->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/t2.c:490:                        opj_event_msg(t2->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/t2.c:506:                        opj_event_msg(t2->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/t2.c:526:			opj_event_msg(t2->cinfo, EVT_ERROR, "Expected EPH marker\n");
./libopenjpeg/t2.c:585:					opj_event_msg(t2->cinfo, EVT_WARNING,
./libopenjpeg/t2.c:589:						opj_event_msg(t2->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/t2.c:593:					opj_event_msg(t2->cinfo, EVT_WARNING, "      - truncating segment to %d\n", seg->newlen);
./libopenjpeg/t2.c:647:					opj_event_msg(t2->cinfo, EVT_ERROR, "Error initializing Packet Iterator\n");
./libopenjpeg/jpt.c:95:			opj_event_msg(cinfo, EVT_ERROR, "Forbidden value encounter in message header !!\n");
./libopenjpeg/jp2.c:167:			opj_event_msg(cinfo, EVT_ERROR, "Cannot handle box sizes higher than 2^32\n");
./libopenjpeg/jp2.c:177:		opj_event_msg(cinfo, EVT_ERROR, "Integer overflow in box->length\n");
./libopenjpeg/jp2.c:214:    opj_event_msg(cinfo, EVT_ERROR, "Failed to read boxhdr\n");
./libopenjpeg/jp2.c:218:		opj_event_msg(cinfo, EVT_ERROR, "Expected IHDR Marker\n");
./libopenjpeg/jp2.c:234:		opj_event_msg(cinfo, EVT_ERROR, "Error with IHDR Box\n");
./libopenjpeg/jp2.c:290:    opj_event_msg(cinfo, EVT_ERROR, "Failed to read boxhdr\n");
./libopenjpeg/jp2.c:294:		opj_event_msg(cinfo, EVT_ERROR, "Expected BPCC Marker\n");
./libopenjpeg/jp2.c:303:		opj_event_msg(cinfo, EVT_ERROR, "Error with BPCC Box\n");
./libopenjpeg/jp2.c:386:    opj_event_msg(cinfo, EVT_ERROR, "Error with pcol value %d (max: %d). skipping\n", pcol, nr_channels);
./libopenjpeg/jp2.c:617:	opj_event_msg(cinfo, EVT_ERROR, "Error with COLR box size\n");
./libopenjpeg/jp2.c:636:	opj_event_msg(cinfo, EVT_ERROR, "Error with COLR Box\n");
./libopenjpeg/jp2.c:657:        opj_event_msg(cinfo, EVT_ERROR, "Expected JP2H Marker\n");
./libopenjpeg/jp2.c:751:				opj_event_msg(cinfo, EVT_ERROR, "Invalid component index %d (>= %d).\n", info[i].cn, image->numcomps);
./libopenjpeg/jp2.c:755:				opj_event_msg(cinfo, EVT_ERROR, "Invalid component index %d (>= %d).\n", info[i].asoc - 1, image->numcomps);
./libopenjpeg/jp2.c:771:				opj_event_msg(cinfo, EVT_ERROR, "Invalid component index %d (>= %d).\n", cmap[i].cmp, image->numcomps);
./libopenjpeg/jp2.c:778:			opj_event_msg(cinfo, EVT_ERROR, "Unexpected OOM.\n");
./libopenjpeg/jp2.c:786:				opj_event_msg(cinfo, EVT_ERROR, "Invalid component/palette index for direct mapping %d.\n", pcol);
./libopenjpeg/jp2.c:790:				opj_event_msg(cinfo, EVT_ERROR, "Component %d is mapped twice.\n", pcol);
./libopenjpeg/jp2.c:796:				opj_event_msg(cinfo, EVT_ERROR, "Direct use at #%d however pcol=%d.\n", i, pcol);
./libopenjpeg/jp2.c:805:				opj_event_msg(cinfo, EVT_ERROR, "Component %d doesn't have a mapping.\n", i);
./libopenjpeg/jp2.c:836:	opj_event_msg(cinfo, EVT_ERROR, "Failed to decode jp2 structure\n");
./libopenjpeg/jp2.c:846:	opj_event_msg(cinfo, EVT_ERROR, "Failed to decode J2K image\n");
./libopenjpeg/jp2.c:852:        opj_event_msg(cinfo, EVT_ERROR, "Failed to decode PCRL box\n");
./libopenjpeg/jp2.c:939:    opj_event_msg(cinfo, EVT_ERROR, "Failed to read boxhdr\n");
./libopenjpeg/jp2.c:943:		opj_event_msg(cinfo, EVT_ERROR, "Expected FTYP Marker\n");
./libopenjpeg/jp2.c:953:		opj_event_msg(cinfo, EVT_ERROR, "Not enough bytes in FTYP Box "
./libopenjpeg/jp2.c:965:		opj_event_msg(cinfo, EVT_ERROR, "Error with FTYP Box\n");
./libopenjpeg/jp2.c:985:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Failed to encode image\n");
./libopenjpeg/jp2.c:1007:    opj_event_msg(cinfo, EVT_ERROR, "Failed to read boxhdr\n");
./libopenjpeg/jp2.c:1045:    opj_event_msg(cinfo, EVT_ERROR, "Failed to read boxhdr\n");
./libopenjpeg/jp2.c:1049:		opj_event_msg(cinfo, EVT_ERROR, "Expected JP Marker\n");
./libopenjpeg/jp2.c:1053:		opj_event_msg(cinfo, EVT_ERROR, "Error with JP Marker\n");
./libopenjpeg/jp2.c:1057:		opj_event_msg(cinfo, EVT_ERROR, "Error with JP Box size\n");
./libopenjpeg/jp2.c:1226:		opj_event_msg(jp2->cinfo, EVT_ERROR, "Invalid number of components specified while setting up JP2 encoder\n");
./libopenjpeg/jp2.c:1304:	    opj_event_msg(jp2->cinfo, EVT_ERROR, "Failed to encode image\n");
./libopenjpeg/j2k.c:426:		opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:439:    opj_event_msg(j2k->cinfo, EVT_ERROR, "Error with SIZ marker: negative image size (%d x %d)\n", image->x1 - image->x0, image->y1 - image->y0);
./libopenjpeg/j2k.c:444:    opj_event_msg(j2k->cinfo, EVT_ERROR, "Error with SIZ marker: invalid tile size (tdx: %d, tdy: %d)\n", cp->tdx, cp->tdy);
./libopenjpeg/j2k.c:450:    opj_event_msg(j2k->cinfo, EVT_ERROR, "Prevent buffer overflow (x1: %d, y1: %d)\n", image->x1, image->y1);
./libopenjpeg/j2k.c:459:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:463:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:468:			opj_event_msg(j2k->cinfo, JPWL_ASSUME ? EVT_WARNING : EVT_ERROR,
./libopenjpeg/j2k.c:472:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:476:			opj_event_msg(j2k->cinfo, EVT_WARNING, "- trying to adjust this\n");
./libopenjpeg/j2k.c:479:				opj_event_msg(j2k->cinfo, EVT_WARNING, "- setting Lsiz to %d => HYPOTHESIS!!!\n",
./libopenjpeg/j2k.c:483:				opj_event_msg(j2k->cinfo, EVT_WARNING, "- setting Csiz to %d => HYPOTHESIS!!!\n",
./libopenjpeg/j2k.c:497:    opj_event_msg(j2k->cinfo, EVT_ERROR, "invalid tile size (tdx: %d, tdy: %d)\n", cp->tdx, cp->tdy);
./libopenjpeg/j2k.c:515:				opj_event_msg(j2k->cinfo, JPWL_ASSUME ? EVT_WARNING : EVT_ERROR,
./libopenjpeg/j2k.c:519:					opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:523:				opj_event_msg(j2k->cinfo, EVT_WARNING, "- trying to adjust them\n");
./libopenjpeg/j2k.c:526:					opj_event_msg(j2k->cinfo, EVT_WARNING, "- setting XRsiz_%d to %d => HYPOTHESIS!!!\n",
./libopenjpeg/j2k.c:531:					opj_event_msg(j2k->cinfo, EVT_WARNING, "- setting YRsiz_%d to %d => HYPOTHESIS!!!\n",
./libopenjpeg/j2k.c:541:      opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: invalid component size (dx: %d, dy: %d)\n", image->comps[i].dx, image->comps[i].dy);
./libopenjpeg/j2k.c:554:    opj_event_msg(j2k->cinfo, EVT_ERROR, 
./libopenjpeg/j2k.c:566:			opj_event_msg(j2k->cinfo, JPWL_ASSUME ? EVT_WARNING : EVT_ERROR,
./libopenjpeg/j2k.c:570:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:574:			opj_event_msg(j2k->cinfo, EVT_WARNING, "- trying to adjust them\n");
./libopenjpeg/j2k.c:577:				opj_event_msg(j2k->cinfo, EVT_WARNING, "- setting %d tiles in x => HYPOTHESIS!!!\n",
./libopenjpeg/j2k.c:582:				opj_event_msg(j2k->cinfo, EVT_WARNING, "- too large x, increase expectance of %d\n"
./libopenjpeg/j2k.c:588:				opj_event_msg(j2k->cinfo, EVT_WARNING, "- setting %d tiles in y => HYPOTHESIS!!!\n",
./libopenjpeg/j2k.c:593:				opj_event_msg(j2k->cinfo, EVT_WARNING, "- too large y, increase expectance of %d to continue\n",
./libopenjpeg/j2k.c:604:        opj_event_msg(j2k->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/j2k.c:610:        opj_event_msg(j2k->cinfo, EVT_ERROR, "Out of memory\n");
./libopenjpeg/j2k.c:618:			opj_event_msg(j2k->cinfo, JPWL_ASSUME ? EVT_WARNING : EVT_ERROR,
./libopenjpeg/j2k.c:621:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:734:		opj_event_msg(j2k->cinfo, EVT_ERROR, "Error decoding component %d.\nThe number of resolutions to remove is higher than the number "
./libopenjpeg/j2k.c:739:    opj_event_msg(j2k->cinfo, EVT_ERROR, "Error decoding component %d.\nThe number of resolutions is too big: %d vs max= %d. Truncating.\n\n",
./libopenjpeg/j2k.c:870:    opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:923:			opj_event_msg(j2k->cinfo, JPWL_ASSUME ? EVT_WARNING : EVT_ERROR,
./libopenjpeg/j2k.c:927:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:932:			opj_event_msg(j2k->cinfo, EVT_WARNING, "- trying to adjust them\n"
./libopenjpeg/j2k.c:942:		opj_event_msg(j2k->cinfo, EVT_WARNING ,
./libopenjpeg/j2k.c:1042:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1046:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:1051:			opj_event_msg(j2k->cinfo, EVT_WARNING, "- trying to adjust this\n"
./libopenjpeg/j2k.c:1062:    opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1116:    opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1249:					opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1254:						opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:1365:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1369:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:1374:			opj_event_msg(j2k->cinfo, EVT_WARNING, "- trying to adjust this\n"
./libopenjpeg/j2k.c:1387:      opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1416:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1420:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:1425:			opj_event_msg(j2k->cinfo, EVT_WARNING, "- trying to adjust this\n"
./libopenjpeg/j2k.c:1436:      opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1450:    opj_event_msg(j2k->cinfo, EVT_WARNING, "SOT marker inconsistency in tile %d: tile-part index greater (%d) than number of tile-parts (%d)\n", tileno, partno, numparts);
./libopenjpeg/j2k.c:1596:    opj_event_msg(j2k->cinfo, EVT_ERROR, "Could not reallocated\n" );
./libopenjpeg/j2k.c:1648:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1652:				opj_event_msg(j2k->cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:1660:    opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1671:	/* opj_event_msg(j2k->cinfo, "%.8x: EOC\n", cio_tell(cio) + j2k->pos_correction); */
./libopenjpeg/j2k.c:1770:	opj_event_msg(j2k->cinfo, EVT_WARNING, "Unknown marker\n");
./libopenjpeg/j2k.c:1778:		opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1782:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1813:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1816:			opj_event_msg(j2k->cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1982:				opj_event_msg(cinfo, EVT_ERROR,
./libopenjpeg/j2k.c:1987:					opj_event_msg(cinfo, EVT_ERROR, "JPWL: giving up\n");
./libopenjpeg/j2k.c:1994:				opj_event_msg(cinfo, EVT_WARNING, "- trying to adjust this\n"
./libopenjpeg/j2k.c:2005:		opj_event_msg(cinfo, EVT_ERROR, "%.8x: expected a marker instead of %x\n", cio_tell(cio) - 2, id);
./libopenjpeg/j2k.c:2009:		opj_event_msg(cinfo, EVT_WARNING, "%.8x: expected a marker instead of %x\n", cio_tell(cio) - 2, id);
./libopenjpeg/j2k.c:2017:			opj_event_msg(cinfo, EVT_ERROR, "%.8x: unexpected marker %x\n", cio_tell(cio) - 2, id);
./libopenjpeg/j2k.c:2022:			opj_event_msg(cinfo, EVT_INFO, "Main Header decoded.\n");
./libopenjpeg/j2k.c:2052:		opj_event_msg(cinfo, EVT_WARNING, "Incomplete bitstream\n");
./libopenjpeg/j2k.c:2085:		opj_event_msg(cinfo, EVT_ERROR, "[JPT-stream] : Expecting Main header first [class_Id %d] !\n", header.Class_Id);
./libopenjpeg/j2k.c:2103:				opj_event_msg(cinfo, EVT_ERROR, "[JPT-stream] : Expecting Tile info !\n");
./libopenjpeg/j2k.c:2112:		opj_event_msg(cinfo, EVT_ERROR, "%.8x: expected a marker instead of %x\n", cio_tell(cio) - 2, id);
./libopenjpeg/j2k.c:2116:		opj_event_msg(cinfo, EVT_WARNING, "%.8x: expected a marker instead of %x\n", cio_tell(cio) - 2, id);
./libopenjpeg/j2k.c:2123:			opj_event_msg(cinfo, EVT_ERROR, "%.8x: unexpected marker %x\n", cio_tell(cio) - 2, id);
./libopenjpeg/j2k.c:2141:		opj_event_msg(cinfo, EVT_WARNING, "Incomplete bitstream\n");
./libopenjpeg/j2k.c:2532:		opj_event_msg(j2k->cinfo, EVT_INFO, "tile number %d / %d\n", tileno + 1, cp->tw * cp->th);
./tests/comparePGXimages.c:744:                "than the allowable error (respectively %f and %f) \n",
./tests/compare_dump_files.c:170:    if(ferror(fbase))
./tests/compare_dump_files.c:177:    if(ferror(ftest))
./applications/codec/image_to_j2k.c:847:						"!! Size of code_block error (option -b) !!\n\nRestriction :\n"
./applications/JavaOpenJPEG/JavaOpenJPEG.c:710:						"!! Size of code_block error (option -b) !!\n\nRestriction :\n"
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1377:/* opj_event_msg(j2k->cinfo, EVT_ERROR, "failed to allocate index buffer for writing %d int\n", *buffer_size); */
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1609:/* opj_event_msg(j2k->cinfo, EVT_ERROR, "index creation: buffer_pos (%d) > buffer_size (%d)!\n", buffer_pos, *buffer_size); */
./applications/mj2/frames_to_mj2.c:463:						"!! Size of code_block error (option -b) !!\n\nRestriction :\n"
./applications/mj2/mj2.c:51:      opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Cannot handle box sizes higher than 2^32\n");
./applications/mj2/mj2.c:147:	opj_event_msg(tk->cinfo, EVT_ERROR,
./applications/mj2/mj2.c:330:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected JP Marker\n");
./applications/mj2/mj2.c:334:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with JP Marker\n");
./applications/mj2/mj2.c:338:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with JP Box size \n");
./applications/mj2/mj2.c:384:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected FTYP Marker\n");
./applications/mj2/mj2.c:397:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with FTYP Box\n");
./applications/mj2/mj2.c:446:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected STCO Marker\n");
./applications/mj2/mj2.c:451:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in STCO box\n");
./applications/mj2/mj2.c:456:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in STCO box. Expected flag 0\n");
./applications/mj2/mj2.c:462:    opj_event_msg(cio->cinfo, EVT_ERROR, 
./applications/mj2/mj2.c:474:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with STCO Box size\n");
./applications/mj2/mj2.c:533:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected STSZ Marker\n");
./applications/mj2/mj2.c:539:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in STSZ box\n");
./applications/mj2/mj2.c:544:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in STSZ box. Expected flag 0\n");
./applications/mj2/mj2.c:559:      opj_event_msg(cio->cinfo, EVT_ERROR,
./applications/mj2/mj2.c:568:      opj_event_msg(cio->cinfo, EVT_ERROR, "Error with STSZ Box size\n");
./applications/mj2/mj2.c:621:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected STSC Marker\n");
./applications/mj2/mj2.c:627:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in STSC box\n");
./applications/mj2/mj2.c:632:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in STSC box. Expected flag 0\n");
./applications/mj2/mj2.c:650:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with STSC Box size\n");
./applications/mj2/mj2.c:700:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected STTS Marker\n");
./applications/mj2/mj2.c:706:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in STTS box\n");
./applications/mj2/mj2.c:711:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in STTS box. Expected flag 0\n");
./applications/mj2/mj2.c:727:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with STTS Box size\n");
./applications/mj2/mj2.c:771:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected FIEL Marker\n");
./applications/mj2/mj2.c:780:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with FIEL Box size\n");
./applications/mj2/mj2.c:823:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected ORFO Marker\n");
./applications/mj2/mj2.c:832:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with ORFO Box size\n");
./applications/mj2/mj2.c:880:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected JP2P Marker\n");
./applications/mj2/mj2.c:885:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in JP2P box\n");
./applications/mj2/mj2.c:890:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in JP2P box. Expected flag 0\n");
./applications/mj2/mj2.c:903:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with JP2P Box size\n");
./applications/mj2/mj2.c:949:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected JP2X Marker\n");
./applications/mj2/mj2.c:962:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with JP2X Box size\n");
./applications/mj2/mj2.c:1006:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected JSUB Marker\n");
./applications/mj2/mj2.c:1016:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with JSUB Box size\n");
./applications/mj2/mj2.c:1106:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error in SMJ2 box: Expected MJ2 Marker\n");
./applications/mj2/mj2.c:1111:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in MJP2 box\n");
./applications/mj2/mj2.c:1116:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in MJP2 box. Expected flag 0\n");
./applications/mj2/mj2.c:1168:	opj_event_msg(tk->cinfo, EVT_ERROR, "Error reading JP2H Box\n");
./applications/mj2/mj2.c:1208:      opj_event_msg(cio->cinfo, EVT_ERROR, "Error with MJP2 Box size\n");
./applications/mj2/mj2.c:1268:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected STSD Marker\n");
./applications/mj2/mj2.c:1273:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in STSD box\n");
./applications/mj2/mj2.c:1278:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in STSD box. Expected flag 0\n");
./applications/mj2/mj2.c:1299:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with STSD Box size\n");
./applications/mj2/mj2.c:1343:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected STBL Marker\n");
./applications/mj2/mj2.c:1359:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with STBL Box size\n");
./applications/mj2/mj2.c:1407:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected URL Marker\n");
./applications/mj2/mj2.c:1412:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in URL box\n");
./applications/mj2/mj2.c:1427:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with URL Box size\n");
./applications/mj2/mj2.c:1477:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected URN Marker\n");
./applications/mj2/mj2.c:1482:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in URN box\n");
./applications/mj2/mj2.c:1499:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with URN Box size\n");
./applications/mj2/mj2.c:1557:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected DREF Marker\n");
./applications/mj2/mj2.c:1562:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in DREF box\n");
./applications/mj2/mj2.c:1567:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in DREF box. Expected flag 0\n");
./applications/mj2/mj2.c:1589:      opj_event_msg(cio->cinfo, EVT_ERROR, "Error with in DREF box. Expected URN or URL box\n");
./applications/mj2/mj2.c:1597:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with DREF Box size\n");
./applications/mj2/mj2.c:1637:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected DINF Marker\n");
./applications/mj2/mj2.c:1645:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with DINF Box size\n");
./applications/mj2/mj2.c:1690:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected VMHD Marker\n");
./applications/mj2/mj2.c:1695:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in VMHD box\n");
./applications/mj2/mj2.c:1700:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in VMHD box. Expected flag 1\n");
./applications/mj2/mj2.c:1711:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with VMHD Box size\n");
./applications/mj2/mj2.c:1755:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected SMHD Marker\n");
./applications/mj2/mj2.c:1760:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in SMHD box\n");
./applications/mj2/mj2.c:1765:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in SMHD box. Expected flag 0\n");
./applications/mj2/mj2.c:1785:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with SMHD Box size\n");
./applications/mj2/mj2.c:1831:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected HMHD Marker\n");
./applications/mj2/mj2.c:1836:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in HMHD box\n");
./applications/mj2/mj2.c:1841:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in HMHD box. Expected flag 0\n");
./applications/mj2/mj2.c:1864:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with HMHD Box size\n");
./applications/mj2/mj2.c:1915:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected MINF Marker\n");
./applications/mj2/mj2.c:1933:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error in MINF box expected vmhd, smhd or hmhd\n");
./applications/mj2/mj2.c:1944:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with MINF Box size\n");
./applications/mj2/mj2.c:2024:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected HDLR Marker\n");
./applications/mj2/mj2.c:2030:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in HDLR box\n");
./applications/mj2/mj2.c:2035:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in HDLR box. Expected flag 0\n");
./applications/mj2/mj2.c:2052:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with HDLR Box size\n");
./applications/mj2/mj2.c:2115:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected MDHD Marker\n");
./applications/mj2/mj2.c:2120:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in MDHD box\n");
./applications/mj2/mj2.c:2125:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with flag in MDHD box. Expected flag 0\n");
./applications/mj2/mj2.c:2143:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with MDHD Box size\n");
./applications/mj2/mj2.c:2185:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected MDIA Marker\n");
./applications/mj2/mj2.c:2197:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with MDIA Box size\n");
./applications/mj2/mj2.c:2286:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected TKHD Marker\n");
./applications/mj2/mj2.c:2291:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in TKHD box\n");
./applications/mj2/mj2.c:2298:    opj_event_msg(cio->cinfo, EVT_ERROR,
./applications/mj2/mj2.c:2338:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with TKHD Box size\n");
./applications/mj2/mj2.c:2380:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected TRAK Marker\n");
./applications/mj2/mj2.c:2388:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with TRAK Box\n");
./applications/mj2/mj2.c:2488:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected MVHD Marker\n");
./applications/mj2/mj2.c:2494:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Only Version 0 handled in MVHD box\n");
./applications/mj2/mj2.c:2526:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error with MVHD Box Size\n");
./applications/mj2/mj2.c:2574:    opj_event_msg(cio->cinfo, EVT_ERROR, "Error: Expected MOOV Marker\n");
./applications/mj2/mj2.c:2604:      opj_event_msg(cio->cinfo, EVT_ERROR, "Error with MOOV Box: Expected TRAK or MVEX box\n");
./applications/mj2/mj2.c:2635:    opj_event_msg(cio->cinfo, EVT_ERROR, "End of file reached while trying to read data after FTYP box\n" );
./applications/mj2/mj2.c:2654:				opj_event_msg(cio->cinfo, EVT_ERROR, "End of file reached while trying to read MDAT box\n" );
./applications/mj2/mj2.c:2663:				opj_event_msg(cio->cinfo, EVT_ERROR, "End of file reached while trying to read MOOF box\n" );
./applications/mj2/mj2.c:2671:				opj_event_msg(cio->cinfo, EVT_ERROR, "End of file reached while trying to read FREE box\n" );
./applications/mj2/mj2.c:2679:				opj_event_msg(cio->cinfo, EVT_ERROR, "End of file reached while trying to read SKIP box\n" );
./applications/mj2/mj2.c:2685:      opj_event_msg(cio->cinfo, EVT_ERROR, "Unknown box in MJ2 stream\n");
./applications/mj2/mj2.c:2688:				opj_event_msg(cio->cinfo, EVT_ERROR, "End of file reached while trying to read end of unknown box\n"); 
./applications/mj2/mj2.c:2696:      opj_event_msg(cio->cinfo, EVT_ERROR, "MOOV box not found in file\n"); 
./applications/mj2/mj2.c:2707:    opj_event_msg(cio->cinfo, EVT_ERROR, "End of file reached while trying to read MOOV box\n"); 
./applications/OPJViewer/source/OPJViewer.h:451:	void OnThreadLogmsg(wxCommandEvent& event);
./applications/OPJViewer/source/OPJViewer.cpp:1218:void OPJFrame::OnThreadLogmsg(wxCommandEvent& event)
./applications/OPJViewer/source/imagmxf.cpp:130:void mxflib::error(const char *Fmt, ...)
./applications/OPJViewer/source/imagmxf.cpp:152:void mxflib::debug(const char *Fmt, ...)
./applications/OPJViewer/source/imagmxf.cpp:411:		error("Could not read header metadata from file %s\n", File->Name.c_str());
./applications/OPJViewer/source/imagmxf.cpp:421:		error("Could not read header metadata from file %s\n", File->Name.c_str());
./applications/OPJViewer/source/imagmxf.cpp:431:		error("Header metadata in file %s does not contain an EssenceContainerData set\n", File->Name.c_str());
./applications/jpip/libopenjpip/auxtrans_manager.c:73:      perror("close");
./applications/jpip/libopenjpip/auxtrans_manager.c:77:      perror("close");
./applications/jpip/libopenjpip/auxtrans_manager.c:125:      fprintf( FCGI_stderr,"ERRO: pthread_create() %s", strerror( (int)auxresponse->hTh));
./applications/jpip/libopenjpip/auxtrans_manager.c:129:      fprintf( FCGI_stderr,"ERROR: pthread_create() %s",strerror(status));
./applications/jpip/libopenjpip/auxtrans_manager.c:215:	perror("close");
./applications/jpip/libopenjpip/msgqueue_manager.c:121:void enqueue_message( message_param_t *msg, msgqueue_param_t *msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:147:  enqueue_message( msg, msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:176:    enqueue_message( msg, msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:229:      enqueue_message( msg, msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:274:      enqueue_message( msg, msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:318:message_param_t * gene_metamsg( int meta_id, Byte8_t binoffset, Byte8_t length, Byte8_t res_offset, placeholder_param_t *phld, Byte8_t csn);
./applications/jpip/libopenjpip/msgqueue_manager.c:327:    msg = gene_metamsg( meta_id, *binOffset, box->length, box->offset, NULL, msgqueue->cachemodel->target->csn);
./applications/jpip/libopenjpip/msgqueue_manager.c:328:    enqueue_message( msg, msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:342:    msg = gene_metamsg( meta_id, *binOffset, phld->LBox, 0, phld, msgqueue->cachemodel->target->csn);
./applications/jpip/libopenjpip/msgqueue_manager.c:343:    enqueue_message( msg, msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:354:  msg = gene_metamsg( meta_id, *binOffset, boxcontents->length, boxcontents->offset, NULL, msgqueue->cachemodel->target->csn);
./applications/jpip/libopenjpip/msgqueue_manager.c:355:  enqueue_message( msg, msgqueue);
./applications/jpip/libopenjpip/msgqueue_manager.c:360:message_param_t * gene_metamsg( int meta_id, Byte8_t binOffset, Byte8_t length, Byte8_t res_offset, placeholder_param_t *phld, Byte8_t csn)
./applications/jpip/libopenjpip/msgqueue_manager.c:380:void enqueue_message( message_param_t *msg, msgqueue_param_t *msgqueue)
./applications/jpip/libopenjpip/msgqueue_manager.c:623:void parse_metamsg( msgqueue_param_t *msgqueue, Byte_t *stream, Byte8_t streamlen, metadatalist_param_t *metadatalist)
./applications/jpip/libopenjpip/dec_clientmsg_handler.c:58:  parse_metamsg( msgqueue, *jpipstream, *streamlen, metadatalist);
./applications/jpip/libopenjpip/jp2k_encoder.c:60:message_param_t * search_message( Byte8_t class_id, Byte8_t in_class_id, Byte8_t csn, message_param_t *msg);
./applications/jpip/libopenjpip/jp2k_encoder.c:104:  while(( ptr = search_message( METADATA_MSG, -1, csn, ptr))!=NULL){
./applications/jpip/libopenjpip/jp2k_encoder.c:196:    while(( ptr = search_message( TILE_MSG, tileID, csn, ptr))!=NULL){
./applications/jpip/libopenjpip/jp2k_encoder.c:205:    while(( ptr = search_message( EXT_TILE_MSG, tileID, csn, ptr))!=NULL){
./applications/jpip/libopenjpip/jp2k_encoder.c:262:    while(( ptr = search_message( TILE_HEADER_MSG, tileID, csn, ptr))!=NULL){
./applications/jpip/libopenjpip/jp2k_encoder.c:300:  while(( ptr = search_message( MAINHEADER_MSG, -1, csn, ptr))!=NULL){
./applications/jpip/libopenjpip/jp2k_encoder.c:535:  while(( ptr = search_message( PRECINCT_MSG, precID, csn, ptr))!=NULL){
./applications/jpip/libopenjpip/jp2k_encoder.c:571:  while(( ptr = search_message( PRECINCT_MSG, precID, csn, ptr))!=NULL){
./applications/jpip/libopenjpip/jp2k_encoder.c:625:message_param_t * search_message( Byte8_t class_id, Byte8_t in_class_id, Byte8_t csn, message_param_t *msg)
./applications/jpip/libopenjpip/msgqueue_manager.h:174:void parse_metamsg( msgqueue_param_t *msgqueue, Byte_t *stream, Byte8_t streamlen, metadatalist_param_t *metadatalist);
./applications/jpip/libopenjpip/openjpip.c:125:void add_EORmsg( int fd, QR_t *qr);
./applications/jpip/libopenjpip/openjpip.c:143:  add_EORmsg( fd, qr); /* needed at least for tcp and udp */
./applications/jpip/libopenjpip/openjpip.c:170:void add_EORmsg( int fd, QR_t *qr)
./applications/jpip/libopenjpip/openjpip.c:234:    perror("close");
./applications/jpip/libopenjpip/openjpip.c:253:  msgtype_t msgtype = identify_clientmsg( client);
./applications/jpip/libopenjpip/openjpip.c:298:    perror("close");
./applications/jpip/libopenjpip/openjpip.c:354:    parse_metamsg( dec->msgqueue, dec->jpipstream, dec->jpiplen, dec->metadatalist);
./applications/jpip/libopenjpip/imgsock_manager.c:39:msgtype_t identify_clientmsg( SOCKET connected_socket)
./applications/jpip/libopenjpip/imgsock_manager.h:47:msgtype_t identify_clientmsg( SOCKET connected_socket);
./applications/jpip/libopenjpip/sock_manager.c:65:    perror("socket");
./applications/jpip/libopenjpip/sock_manager.c:70:    perror("setsockopt");
./applications/jpip/libopenjpip/sock_manager.c:80:    perror("bind");
./applications/jpip/libopenjpip/sock_manager.c:86:    perror("listen");
./applications/jpip/libopenjpip/sock_manager.c:148:      perror("receive");

== environment() ==
./applications/jpip/util/opj_server.c:90:      query_string = getenv("QUERY_STRING");    

== privileged() ==

== networking() ==
./applications/jpip/libopenjpip/sock_manager.h:31:#ifndef   	SOCK_MANAGER_H_
./applications/jpip/libopenjpip/sock_manager.h:32:# define   	SOCK_MANAGER_H_
./applications/jpip/libopenjpip/sock_manager.h:105:#endif /* !SOCK_MANAGER_H_ */
./applications/jpip/libopenjpip/imgsock_manager.h:31:#ifndef   	IMGSOCK_MANAGER_H_
./applications/jpip/libopenjpip/imgsock_manager.h:32:# define   	IMGSOCK_MANAGER_H_
./applications/jpip/libopenjpip/imgsock_manager.h:117:#endif /* !IMGSOCK_MANAGER_H_ */
./applications/jpip/libopenjpip/sock_manager.c:63:  listening_socket = socket(AF_INET, SOCK_STREAM, 0);
./applications/jpip/libopenjpip/sock_manager.c:75:  sin.sin_family = AF_INET;
./libopenjpeg/cio.h:73:unsigned int cio_write(opj_cio_t *cio, unsigned int64 v, int n);
./libopenjpeg/cio.h:80:unsigned int cio_read(opj_cio_t *cio, int n);
./libopenjpeg/cio.c:159:unsigned int cio_write(opj_cio_t *cio, unsigned int64 v, int n) {
./libopenjpeg/cio.c:175:unsigned int cio_read(opj_cio_t *cio, int n) {
./libopenjpeg/bio.c:43:@param b Bit to write (0 or 1)
./libopenjpeg/bio.c:148:void bio_write(opj_bio_t *bio, int v, int n) {
./libopenjpeg/bio.c:155:int bio_read(opj_bio_t *bio, int n) {
./libopenjpeg/tgt.c:162:					bio_write(bio, 1, 1);
./libopenjpeg/tgt.c:167:			bio_write(bio, 0, 1);
./libopenjpeg/tgt.c:199:			if (bio_read(bio, 1)) {
./libopenjpeg/bio.h:99:void bio_write(opj_bio_t *bio, int v, int n);
./libopenjpeg/bio.h:106:int bio_read(opj_bio_t *bio, int n);
./libopenjpeg/tpix_manager.c:60:  cio_write( cio, JPIP_TPIX, 4);  /* TPIX           */
./libopenjpeg/tpix_manager.c:66:  cio_write( cio, len, 4);        /* L              */
./libopenjpeg/tpix_manager.c:104:  cio_write( cio, JPIP_FAIX, 4);  /* FAIX                */ 
./libopenjpeg/tpix_manager.c:105:  cio_write( cio, version, 1);     /* Version 0 = 4 bytes */
./libopenjpeg/tpix_manager.c:107:  cio_write( cio, num_max_tile_parts, size_of_coding);                      /* NMAX           */
./libopenjpeg/tpix_manager.c:108:  cio_write( cio, cstr_info.tw*cstr_info.th, size_of_coding);                               /* M              */
./libopenjpeg/tpix_manager.c:112:      cio_write( cio, tp.tp_start_pos-coff, size_of_coding); /* start position */
./libopenjpeg/tpix_manager.c:113:      cio_write( cio, tp.tp_end_pos-tp.tp_start_pos+1, size_of_coding);    /* length         */
./libopenjpeg/tpix_manager.c:120:	cio_write( cio, Aux,4);
./libopenjpeg/tpix_manager.c:121:	/*cio_write(img.tile[i].tile_parts[j].num_reso_AUX,4);*/ /* Aux_i,j : Auxiliary value */
./libopenjpeg/tpix_manager.c:124:      /*cio_write(0,4);*/
./libopenjpeg/tpix_manager.c:128:      cio_write( cio, 0, size_of_coding); /* start position            */
./libopenjpeg/tpix_manager.c:129:      cio_write( cio, 0, size_of_coding); /* length                    */
./libopenjpeg/tpix_manager.c:131:	cio_write( cio, 0,4);                  /* Aux_i,j : Auxiliary value */
./libopenjpeg/tpix_manager.c:138:  cio_write( cio, len, 4);        /* L  */
./libopenjpeg/thix_manager.c:67:    cio_write( cio, JPIP_THIX, 4);  /* THIX           */
./libopenjpeg/thix_manager.c:77:    cio_write( cio, len, 4);        /* L              */
./libopenjpeg/thix_manager.c:96:  cio_write( cio, JPIP_MHIX, 4);                   /* MHIX                              */
./libopenjpeg/thix_manager.c:101:  cio_write( cio, tp.tp_end_header-tp.tp_start_pos+1, 8);  /* TLEN                              */ 
./libopenjpeg/thix_manager.c:106:    cio_write( cio, marker[i].type, 2);
./libopenjpeg/thix_manager.c:107:    cio_write( cio, 0, 2);
./libopenjpeg/thix_manager.c:108:    cio_write( cio, marker[i].pos-coff, 8);
./libopenjpeg/thix_manager.c:109:    cio_write( cio, marker[i].len, 2);
./libopenjpeg/thix_manager.c:116:  cio_write( cio, len, 4);        /* L           */
./libopenjpeg/jpwl/jpwl.c:96:void jpwl_epb_write(opj_j2k_t *j2k, jpwl_epb_ms_t *epbmark, unsigned char *buf);
./libopenjpeg/jpwl/jpwl.c:103:void jpwl_epc_write(opj_j2k_t *j2k, jpwl_epc_ms_t *epcmark, unsigned char *buf);
./libopenjpeg/jpwl/jpwl.c:110:void jpwl_esd_write(opj_j2k_t *j2k, jpwl_esd_ms_t *esdmark, unsigned char *buf);
./libopenjpeg/jpwl/jpwl.c:199:	socsiz_len = (unsigned short int) cio_read(cio, 2) + 4; /* add the 2 marks length itself */
./libopenjpeg/jpwl/jpwl.c:311:			sot_len = cio_read(cio, 2); /* SOT Len */
./libopenjpeg/jpwl/jpwl.c:314:			Psot = cio_read(cio, 4); /* tile length */
./libopenjpeg/jpwl/jpwl.c:371:					cio_write(cio, Psot + esd_mark->Lesd + 2, 4);
./libopenjpeg/jpwl/jpwl.c:487:			sot_len = cio_read(cio, 2); /* SOT Len */
./libopenjpeg/jpwl/jpwl.c:490:			Psot = cio_read(cio, 4); /* tile length */
./libopenjpeg/jpwl/jpwl.c:701:			cio_write(cio, Psot, 4);
./libopenjpeg/jpwl/jpwl.c:764:			jpwl_epb_write(j2k, jwmarker[mm].m.epbmark, jpwl_buf);
./libopenjpeg/jpwl/jpwl.c:768:			jpwl_epc_write(j2k, jwmarker[mm].m.epcmark, jpwl_buf);
./libopenjpeg/jpwl/jpwl.c:772:			jpwl_esd_write(j2k, jwmarker[mm].m.esdmark, jpwl_buf);
./libopenjpeg/jpwl/jpwl.c:916:	Lepc = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl.c:919:	DL = cio_read(cio, 4);
./libopenjpeg/jpwl/jpwl.c:920:	Pepc = cio_read(cio, 1);
./libopenjpeg/jpwl/jpwl.c:926:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:927:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:930:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:931:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:938:			jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:942:		ans1 = (Pcrc == (unsigned short int) cio_read(cio, 2)) ? "crc-ok" : "crc-ko";
./libopenjpeg/jpwl/jpwl.c:966:	cio_write(cio, J2K_MS_EPC, 2);	/* EPC */
./libopenjpeg/jpwl/jpwl.c:973:	cio_write(cio, Pcrc, 2); /* Pcrc placeholder*/
./libopenjpeg/jpwl/jpwl.c:977:	cio_write(cio, DL, 4);   /* DL */
./libopenjpeg/jpwl/jpwl.c:981:	cio_write(cio, Pepc, 1); /* Pepc */
./libopenjpeg/jpwl/jpwl.c:988:	cio_write(cio, Lepc, 2); /* Lepc */
./libopenjpeg/jpwl/jpwl.c:994:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:995:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:998:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:999:		jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:1006:			jpwl_updateCRC16(&Pcrc, (unsigned char) cio_read(cio, 1)); 
./libopenjpeg/jpwl/jpwl.c:1010:		cio_write(cio, Pcrc, 2);
./libopenjpeg/jpwl/jpwl.c:1076:		Lepb = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl.c:1077:		Depb = cio_read(cio, 1);
./libopenjpeg/jpwl/jpwl.c:1078:		LDPepb = cio_read(cio, 4);
./libopenjpeg/jpwl/jpwl.c:1079:		Pepb = cio_read(cio, 4);
./libopenjpeg/jpwl/jpwl.c:1103:		Lepb = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl.c:1104:		Depb = cio_read(cio, 1);
./libopenjpeg/jpwl/jpwl.c:1105:		LDPepb = cio_read(cio, 4);
./libopenjpeg/jpwl/jpwl.c:1106:		Pepb = cio_read(cio, 4);
./libopenjpeg/jpwl/jpwl.c:1141:	cio_write(cio, J2K_MS_EPB, 2);	/* EPB */
./libopenjpeg/jpwl/jpwl.c:1147:	cio_write(cio, Depb, 1);   /* Depb */
./libopenjpeg/jpwl/jpwl.c:1151:	cio_write(cio, LDPepb, 4);   /* LDPepb */
./libopenjpeg/jpwl/jpwl.c:1155:	cio_write(cio, Pepb, 4);   /* Pepb */
./libopenjpeg/jpwl/jpwl.c:1162:	cio_write(cio, Lepb, 2);		/* Lepb */
./libopenjpeg/jpwl/jpwl.c:1182:	Lesd = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl.c:1183:	Cesd = cio_read(cio, cesdsize);
./libopenjpeg/jpwl/jpwl.c:1184:	Pesd = cio_read(cio, 1);
./libopenjpeg/jpwl/jpwl.c:1208:	Lred = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl.c:1209:	Pred = cio_read(cio, 1);
./libopenjpeg/jpwl/jpwl.c:1316:	Lsec = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl.c:1333:	cio_write(cio, J2K_MS_SEC, 2);	/* SEC */
./libopenjpeg/jpwl/jpwl.c:1334:	cio_write(cio, Lsec, 2);
./libopenjpeg/jpwl/jpwl.c:1338:		cio_write(cio, 0, 1);
./libopenjpeg/jpwl/jpwl.c:1347:	Linsec = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl_lib.c:298:void jpwl_epb_write(opj_j2k_t *j2k, jpwl_epb_ms_t *epb, unsigned char *buf) {
./libopenjpeg/jpwl/jpwl_lib.c:677:		id = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl_lib.c:713:			len = cio_read(cio, 2); /* read the length field */
./libopenjpeg/jpwl/jpwl_lib.c:715:			Psot = cio_read(cio, 4); /* tile length */
./libopenjpeg/jpwl/jpwl_lib.c:723:			len = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl_lib.c:730:			len = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl_lib.c:916:	Lepb = cio_read(cio, 2);
./libopenjpeg/jpwl/jpwl_lib.c:917:	Depb = cio_read(cio, 1);
./libopenjpeg/jpwl/jpwl_lib.c:918:	LDPepb = cio_read(cio, 4);
./libopenjpeg/jpwl/jpwl_lib.c:919:	Pepb = cio_read(cio, 4);
./libopenjpeg/jpwl/jpwl_lib.c:1163:void jpwl_epc_write(opj_j2k_t *j2k, jpwl_epc_ms_t *epc, unsigned char *buf) {
./libopenjpeg/jpwl/jpwl_lib.c:1584:void jpwl_esd_write(opj_j2k_t *j2k, jpwl_esd_ms_t *esd, unsigned char *buf) {
./libopenjpeg/t2.c:93:		bio_write(bio, 1, 1);
./libopenjpeg/t2.c:95:	bio_write(bio, 0, 1);
./libopenjpeg/t2.c:100:	for (n = 0; bio_read(bio, 1); n++) {
./libopenjpeg/t2.c:108:		bio_write(bio, 0, 1);
./libopenjpeg/t2.c:110:		bio_write(bio, 2, 2);
./libopenjpeg/t2.c:112:		bio_write(bio, 0xc | (n - 3), 4);
./libopenjpeg/t2.c:114:		bio_write(bio, 0x1e0 | (n - 6), 9);
./libopenjpeg/t2.c:116:		bio_write(bio, 0xff80 | (n - 37), 16);
./libopenjpeg/t2.c:122:	if (!bio_read(bio, 1))
./libopenjpeg/t2.c:124:	if (!bio_read(bio, 1))
./libopenjpeg/t2.c:126:	if ((n = bio_read(bio, 2)) != 3)
./libopenjpeg/t2.c:128:	if ((n = bio_read(bio, 5)) != 31)
./libopenjpeg/t2.c:130:	return (37 + bio_read(bio, 7));
./libopenjpeg/t2.c:175:	bio_write(bio, 1, 1);		/* Empty header bit */
./libopenjpeg/t2.c:198:				bio_write(bio, layer->numpasses != 0, 1);
./libopenjpeg/t2.c:234:					bio_write(bio, len, cblk->numlenbits + int_floorlog2(nump));
./libopenjpeg/t2.c:401:	present = bio_read(bio, 1);
./libopenjpeg/t2.c:454:				included = bio_read(bio, 1);
./libopenjpeg/t2.c:500:				cblk->segs[segno].newlen = bio_read(bio, cblk->numlenbits + int_floorlog2(cblk->segs[segno].numnewpasses));
./libopenjpeg/ppix_manager.c:69:    cio_write( cio, JPIP_PPIX, 4);  /* PPIX           */
./libopenjpeg/ppix_manager.c:80:    cio_write( cio, len, 4);        /* L              */
./libopenjpeg/ppix_manager.c:110:  cio_write( cio, JPIP_FAIX, 4);  /* FAIX                */ 
./libopenjpeg/ppix_manager.c:111:  cio_write( cio, version, 1);     /* Version 0 = 4 bytes */
./libopenjpeg/ppix_manager.c:117:  cio_write( cio, nmax, size_of_coding); /* NMAX */
./libopenjpeg/ppix_manager.c:118:  cio_write( cio, cstr_info.tw*cstr_info.th, size_of_coding);      /* M    */
./libopenjpeg/ppix_manager.c:152:	  cio_write( cio, packet.start_pos-coff, size_of_coding);             /* start position */
./libopenjpeg/ppix_manager.c:153:	  cio_write( cio, packet.end_pos-packet.start_pos+1, size_of_coding); /* length         */
./libopenjpeg/ppix_manager.c:161:      cio_write( cio, 0, size_of_coding); /* start position            */
./libopenjpeg/ppix_manager.c:162:      cio_write( cio, 0, size_of_coding); /* length                    */
./libopenjpeg/ppix_manager.c:169:  cio_write( cio, len, 4);        /* L  */
./libopenjpeg/jpt.c:40:	elmt = cio_read(cio, 1);
./libopenjpeg/jpt.c:44:		elmt = cio_read(cio, 1);
./libopenjpeg/jpt.c:90:	elmt = cio_read(cio, 1);
./libopenjpeg/phix_manager.c:65:    cio_write( cio, JPIP_PHIX, 4);  /* PHIX           */
./libopenjpeg/phix_manager.c:76:    cio_write( cio, len, 4);        /* L              */
./libopenjpeg/phix_manager.c:106:  cio_write( cio, JPIP_FAIX, 4);  /* FAIX                */ 
./libopenjpeg/phix_manager.c:107:  cio_write( cio, version,1);     /* Version 0 = 4 bytes */
./libopenjpeg/phix_manager.c:113:  cio_write( cio, nmax, size_of_coding); /* NMAX */
./libopenjpeg/phix_manager.c:114:  cio_write( cio, cstr_info.tw*cstr_info.th, size_of_coding);      /* M    */
./libopenjpeg/phix_manager.c:148:	  cio_write( cio, packet.start_pos-coff, size_of_coding);                /* start position */
./libopenjpeg/phix_manager.c:149:	  cio_write( cio, packet.end_ph_pos-packet.start_pos+1, size_of_coding); /* length         */
./libopenjpeg/phix_manager.c:158:      cio_write( cio, 0, size_of_coding); /* start position            */
./libopenjpeg/phix_manager.c:159:      cio_write( cio, 0, size_of_coding); /* length                    */
./libopenjpeg/phix_manager.c:166:  cio_write( cio, len, 4);        /* L  */
./libopenjpeg/cidx_manager.c:87:    cio_write( cio, JPIP_CIDX, 4);  /* CIDX           */
./libopenjpeg/cidx_manager.c:117:    cio_write( cio, len, 4);        /* L             */
./libopenjpeg/cidx_manager.c:132:  cio_write( cio, JPIP_CPTR, 4);   /* T                  */
./libopenjpeg/cidx_manager.c:133:  cio_write( cio, 0, 2);           /* DR  A PRECISER !!  */
./libopenjpeg/cidx_manager.c:134:  cio_write( cio, 0, 2);           /* CONT               */
./libopenjpeg/cidx_manager.c:135:  cio_write( cio, coff, 8);    /* COFF A PRECISER !! */
./libopenjpeg/cidx_manager.c:136:  cio_write( cio, clen, 8);    /* CLEN               */
./libopenjpeg/cidx_manager.c:139:  cio_write( cio, len, 4);         /* L                  */
./libopenjpeg/cidx_manager.c:149:  cio_write( cio, JPIP_MANF,4);              /* T                                 */
./libopenjpeg/cidx_manager.c:153:      cio_write( cio, box[i].length, 4);  /* Box length                     */ 
./libopenjpeg/cidx_manager.c:154:      cio_write( cio, box[i].type, 4); /* Box type                       */
./libopenjpeg/cidx_manager.c:160:  cio_write( cio, len, 4);                   /* L                                 */
./libopenjpeg/cidx_manager.c:171:  cio_write( cio, JPIP_MHIX, 4);                   /* MHIX                              */
./libopenjpeg/cidx_manager.c:173:  cio_write( cio, cstr_info.main_head_end-cstr_info.main_head_start+1, 8);        /* TLEN                              */
./libopenjpeg/cidx_manager.c:176:    cio_write( cio, cstr_info.marker[i].type, 2);
./libopenjpeg/cidx_manager.c:177:    cio_write( cio, 0, 2);
./libopenjpeg/cidx_manager.c:178:    cio_write( cio, cstr_info.marker[i].pos-coff, 8);
./libopenjpeg/cidx_manager.c:179:    cio_write( cio, cstr_info.marker[i].len, 2);
./libopenjpeg/cidx_manager.c:184:  cio_write( cio, len, 4);        /* L           */
./libopenjpeg/cidx_manager.c:202:      Scod = cio_read( cio, 1);
./libopenjpeg/jp2.c:163:	box->length = cio_read(cio, 4);
./libopenjpeg/jp2.c:164:	box->type = cio_read(cio, 4);
./libopenjpeg/jp2.c:166:		if (cio_read(cio, 4) != 0) {
./libopenjpeg/jp2.c:170:		box->length = cio_read(cio, 4);
./libopenjpeg/jp2.c:191:	cio_write(cio, JP2_URL, 4);	/* DBTL */
./libopenjpeg/jp2.c:192:	cio_write(cio, 0, 1);		/* VERS */
./libopenjpeg/jp2.c:193:	cio_write(cio, 0, 3);		/* FLAG */
./libopenjpeg/jp2.c:197:			cio_write(cio, Idx_file[i], 1);
./libopenjpeg/jp2.c:203:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:222:	jp2->h = cio_read(cio, 4);			/* HEIGHT */
./libopenjpeg/jp2.c:223:	jp2->w = cio_read(cio, 4);			/* WIDTH */
./libopenjpeg/jp2.c:224:	jp2->numcomps = cio_read(cio, 2);	/* NC */
./libopenjpeg/jp2.c:227:	jp2->bpc = cio_read(cio, 1);		/* BPC */
./libopenjpeg/jp2.c:229:	jp2->C = cio_read(cio, 1);			/* C */
./libopenjpeg/jp2.c:230:	jp2->UnkC = cio_read(cio, 1);		/* UnkC */
./libopenjpeg/jp2.c:231:	jp2->IPR = cio_read(cio, 1);		/* IPR */
./libopenjpeg/jp2.c:246:	cio_write(cio, JP2_IHDR, 4);		/* IHDR */
./libopenjpeg/jp2.c:248:	cio_write(cio, jp2->h, 4);			/* HEIGHT */
./libopenjpeg/jp2.c:249:	cio_write(cio, jp2->w, 4);			/* WIDTH */
./libopenjpeg/jp2.c:250:	cio_write(cio, jp2->numcomps, 2);	/* NC */
./libopenjpeg/jp2.c:252:	cio_write(cio, jp2->bpc, 1);		/* BPC */
./libopenjpeg/jp2.c:254:	cio_write(cio, jp2->C, 1);			/* C : Always 7 */
./libopenjpeg/jp2.c:255:	cio_write(cio, jp2->UnkC, 1);		/* UnkC, colorspace unknown */
./libopenjpeg/jp2.c:256:	cio_write(cio, jp2->IPR, 1);		/* IPR, no intellectual property */
./libopenjpeg/jp2.c:260:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:270:	cio_write(cio, JP2_BPCC, 4);	/* BPCC */
./libopenjpeg/jp2.c:273:		cio_write(cio, jp2->comps[i].bpcc, 1);
./libopenjpeg/jp2.c:278:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:299:		jp2->comps[i].bpcc = cio_read(cio, 1);
./libopenjpeg/jp2.c:315:	cio_write(cio, JP2_COLR, 4);		/* COLR */
./libopenjpeg/jp2.c:317:	cio_write(cio, jp2->meth, 1);		/* METH */
./libopenjpeg/jp2.c:318:	cio_write(cio, jp2->precedence, 1);	/* PRECEDENCE */
./libopenjpeg/jp2.c:319:	cio_write(cio, jp2->approx, 1);		/* APPROX */
./libopenjpeg/jp2.c:324:	cio_write(cio, jp2->enumcs, 4);	/* EnumCS */
./libopenjpeg/jp2.c:328:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:452:	nr_entries = (unsigned short)cio_read(cio, 2); /* NE */
./libopenjpeg/jp2.c:453:	nr_channels = (unsigned short)cio_read(cio, 1);/* NPC */
./libopenjpeg/jp2.c:472:	uc = cio_read(cio, 1); /* Bi */
./libopenjpeg/jp2.c:482:	*entries++ = cio_read(cio, (channel_size[i]+7)>>3);
./libopenjpeg/jp2.c:512:	cmap[i].cmp = (unsigned short)cio_read(cio, 2);
./libopenjpeg/jp2.c:513:	cmap[i].mtyp = cio_read(cio, 1);
./libopenjpeg/jp2.c:514:	cmap[i].pcol = cio_read(cio, 1);
./libopenjpeg/jp2.c:570:	if((n = (unsigned short)cio_read(cio, 2)) == 0) return OPJ_FALSE; /* szukw000: FIXME */
./libopenjpeg/jp2.c:581:	info[i].cn = (unsigned short)cio_read(cio, 2);
./libopenjpeg/jp2.c:582:	info[i].typ = (unsigned short)cio_read(cio, 2);
./libopenjpeg/jp2.c:583:	info[i].asoc = (unsigned short)cio_read(cio, 2);
./libopenjpeg/jp2.c:602:	jp2->meth = cio_read(cio, 1);		/* METH */
./libopenjpeg/jp2.c:603:	jp2->precedence = cio_read(cio, 1);	/* PRECEDENCE */
./libopenjpeg/jp2.c:604:	jp2->approx = cio_read(cio, 1);		/* APPROX */
./libopenjpeg/jp2.c:608:	jp2->enumcs = cio_read(cio, 4);	/* EnumCS */
./libopenjpeg/jp2.c:896:	cio_write(cio, JP2_JP2H, 4);	/* JP2H */
./libopenjpeg/jp2.c:907:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:917:	cio_write(cio, JP2_FTYP, 4);		/* FTYP */
./libopenjpeg/jp2.c:919:	cio_write(cio, jp2->brand, 4);		/* BR */
./libopenjpeg/jp2.c:920:	cio_write(cio, jp2->minversion, 4);	/* MinV */
./libopenjpeg/jp2.c:923:		cio_write(cio, jp2->cl[i], 4);	/* CL */
./libopenjpeg/jp2.c:928:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:947:	jp2->brand = cio_read(cio, 4);		/* BR */
./libopenjpeg/jp2.c:948:	jp2->minversion = cio_read(cio, 4);	/* MinV */
./libopenjpeg/jp2.c:961:		jp2->cl[i] = cio_read(cio, 4);	/* CLi */
./libopenjpeg/jp2.c:980:	cio_write(cio, JP2_JP2C, 4);	/* JP2C */
./libopenjpeg/jp2.c:995:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:1030:	cio_write(cio, JP2_JP, 4);		/* JP2 signature */
./libopenjpeg/jp2.c:1031:	cio_write(cio, 0x0d0a870a, 4);
./libopenjpeg/jp2.c:1035:	cio_write(cio, box.length, 4);	/* L */
./libopenjpeg/jp2.c:1052:	if (0x0d0a870a != cio_read(cio, 4)) {
./libopenjpeg/jp2.c:1086:  cio_write( cio, JPIP_FIDX, 4);  /* IPTR           */
./libopenjpeg/jp2.c:1092:  cio_write( cio, len, 4);        /* L              */
./libopenjpeg/jp2.c:1104:  cio_write( cio, JPIP_PRXY, 4);  /* IPTR           */
./libopenjpeg/jp2.c:1106:  cio_write( cio, offset_jp2c, 8); /* OOFF           */
./libopenjpeg/jp2.c:1107:  cio_write( cio, length_jp2c, 4); /* OBH part 1     */
./libopenjpeg/jp2.c:1108:  cio_write( cio, JP2_JP2C, 4);        /* OBH part 2     */
./libopenjpeg/jp2.c:1110:  cio_write( cio, 1,1);           /* NI             */
./libopenjpeg/jp2.c:1112:  cio_write( cio, offset_idx, 8);  /* IOFF           */
./libopenjpeg/jp2.c:1113:  cio_write( cio, length_idx, 4);  /* IBH part 1     */
./libopenjpeg/jp2.c:1114:  cio_write( cio, JPIP_CIDX, 4);   /* IBH part 2     */
./libopenjpeg/jp2.c:1118:  cio_write( cio, len, 4);        /* L              */
./libopenjpeg/jp2.c:1128:  cio_write( cio, JPIP_IPTR, 4);  /* IPTR           */
./libopenjpeg/jp2.c:1130:  cio_write( cio, offset, 8);
./libopenjpeg/jp2.c:1131:  cio_write( cio, length, 8);
./libopenjpeg/jp2.c:1135:  cio_write( cio, len, 4);        /* L             */
./libopenjpeg/j2k.c:348:	cio_write(cio, J2K_MS_SOC, 2);
./libopenjpeg/j2k.c:379:	cio_write(cio, J2K_MS_SIZ, 2);	/* SIZ */
./libopenjpeg/j2k.c:382:	cio_write(cio, cp->rsiz, 2);			/* Rsiz (capabilities) */
./libopenjpeg/j2k.c:383:	cio_write(cio, image->x1, 4);	/* Xsiz */
./libopenjpeg/j2k.c:384:	cio_write(cio, image->y1, 4);	/* Ysiz */
./libopenjpeg/j2k.c:385:	cio_write(cio, image->x0, 4);	/* X0siz */
./libopenjpeg/j2k.c:386:	cio_write(cio, image->y0, 4);	/* Y0siz */
./libopenjpeg/j2k.c:387:	cio_write(cio, cp->tdx, 4);		/* XTsiz */
./libopenjpeg/j2k.c:388:	cio_write(cio, cp->tdy, 4);		/* YTsiz */
./libopenjpeg/j2k.c:389:	cio_write(cio, cp->tx0, 4);		/* XT0siz */
./libopenjpeg/j2k.c:390:	cio_write(cio, cp->ty0, 4);		/* YT0siz */
./libopenjpeg/j2k.c:391:	cio_write(cio, image->numcomps, 2);	/* Csiz */
./libopenjpeg/j2k.c:393:		cio_write(cio, image->comps[i].prec - 1 + (image->comps[i].sgnd << 7), 1);	/* Ssiz_i */
./libopenjpeg/j2k.c:394:		cio_write(cio, image->comps[i].dx, 1);	/* XRsiz_i */
./libopenjpeg/j2k.c:395:		cio_write(cio, image->comps[i].dy, 1);	/* YRsiz_i */
./libopenjpeg/j2k.c:399:	cio_write(cio, len, 2);		/* Lsiz */
./libopenjpeg/j2k.c:414:	len = cio_read(cio, 2);			/* Lsiz */
./libopenjpeg/j2k.c:415:	cio_read(cio, 2);				/* Rsiz (capabilities) */
./libopenjpeg/j2k.c:416:	image->x1 = cio_read(cio, 4);	/* Xsiz */
./libopenjpeg/j2k.c:417:	image->y1 = cio_read(cio, 4);	/* Ysiz */
./libopenjpeg/j2k.c:418:	image->x0 = cio_read(cio, 4);	/* X0siz */
./libopenjpeg/j2k.c:419:	image->y0 = cio_read(cio, 4);	/* Y0siz */
./libopenjpeg/j2k.c:420:	cp->tdx = cio_read(cio, 4);		/* XTsiz */
./libopenjpeg/j2k.c:421:	cp->tdy = cio_read(cio, 4);		/* YTsiz */
./libopenjpeg/j2k.c:422:	cp->tx0 = cio_read(cio, 4);		/* XT0siz */
./libopenjpeg/j2k.c:423:	cp->ty0 = cio_read(cio, 4);		/* YT0siz */
./libopenjpeg/j2k.c:434:	image->numcomps = cio_read(cio, 2);	/* Csiz */
./libopenjpeg/j2k.c:504:		tmp = cio_read(cio, 1);		/* Ssiz_i */
./libopenjpeg/j2k.c:507:		image->comps[i].dx = cio_read(cio, 1);	/* XRsiz_i */
./libopenjpeg/j2k.c:508:		image->comps[i].dy = cio_read(cio, 1);	/* YRsiz_i */
./libopenjpeg/j2k.c:673:		cio_write(cio, J2K_MS_COM, 2);
./libopenjpeg/j2k.c:676:		cio_write(cio, 1, 2);		/* General use (IS 8859-15:1999 (Latin) values) */
./libopenjpeg/j2k.c:678:			cio_write(cio, comment[i], 1);
./libopenjpeg/j2k.c:682:		cio_write(cio, len, 2);
./libopenjpeg/j2k.c:697:	len = cio_read(cio, 2);
./libopenjpeg/j2k.c:709:	cio_write(cio, tccp->numresolutions - 1, 1);	/* SPcox (D) */
./libopenjpeg/j2k.c:710:	cio_write(cio, tccp->cblkw - 2, 1);				/* SPcox (E) */
./libopenjpeg/j2k.c:711:	cio_write(cio, tccp->cblkh - 2, 1);				/* SPcox (F) */
./libopenjpeg/j2k.c:712:	cio_write(cio, tccp->cblksty, 1);				/* SPcox (G) */
./libopenjpeg/j2k.c:713:	cio_write(cio, tccp->qmfbid, 1);				/* SPcox (H) */
./libopenjpeg/j2k.c:717:			cio_write(cio, tccp->prcw[i] + (tccp->prch[i] << 4), 1);	/* SPcox (I_i) */
./libopenjpeg/j2k.c:730:	tccp->numresolutions = cio_read(cio, 1) + 1;	/* SPcox (D) */
./libopenjpeg/j2k.c:745:	tccp->cblkw = cio_read(cio, 1) + 2;	/* SPcox (E) */
./libopenjpeg/j2k.c:746:	tccp->cblkh = cio_read(cio, 1) + 2;	/* SPcox (F) */
./libopenjpeg/j2k.c:747:	tccp->cblksty = cio_read(cio, 1);	/* SPcox (G) */
./libopenjpeg/j2k.c:748:	tccp->qmfbid = cio_read(cio, 1);	/* SPcox (H) */
./libopenjpeg/j2k.c:751:			int tmp = cio_read(cio, 1);	/* SPcox (I_i) */
./libopenjpeg/j2k.c:780:	cio_write(cio, J2K_MS_COD, 2);	/* COD */
./libopenjpeg/j2k.c:788:	cio_write(cio, tcp->csty, 1);		/* Scod */
./libopenjpeg/j2k.c:789:	cio_write(cio, tcp->prg, 1);		/* SGcod (A) */
./libopenjpeg/j2k.c:790:	cio_write(cio, tcp->numlayers, 2);	/* SGcod (B) */
./libopenjpeg/j2k.c:791:	cio_write(cio, tcp->mct, 1);		/* SGcod (C) */
./libopenjpeg/j2k.c:796:	cio_write(cio, len, 2);		/* Lcod */
./libopenjpeg/j2k.c:812:	len = cio_read(cio, 2);				/* Lcod */
./libopenjpeg/j2k.c:814:	tcp->csty = cio_read(cio, 1);		/* Scod */
./libopenjpeg/j2k.c:815:	tcp->prg = (OPJ_PROG_ORDER)cio_read(cio, 1);		/* SGcod (A) */
./libopenjpeg/j2k.c:816:	tcp->numlayers = cio_read(cio, 2);	/* SGcod (B) */
./libopenjpeg/j2k.c:817:	tcp->mct = cio_read(cio, 1);		/* SGcod (C) */
./libopenjpeg/j2k.c:846:	cio_write(cio, J2K_MS_COC, 2);	/* COC */
./libopenjpeg/j2k.c:849:	cio_write(cio, compno, image->numcomps <= 256 ? 1 : 2);	/* Ccoc */
./libopenjpeg/j2k.c:850:	cio_write(cio, tcp->tccps[compno].csty, 1);	/* Scoc */
./libopenjpeg/j2k.c:854:	cio_write(cio, len, 2);			/* Lcoc */
./libopenjpeg/j2k.c:866:	len = cio_read(cio, 2);		/* Lcoc */
./libopenjpeg/j2k.c:868:	compno = cio_read(cio, image->numcomps <= 256 ? 1 : 2);	/* Ccoc */
./libopenjpeg/j2k.c:875:	tcp->tccps[compno].csty = cio_read(cio, 1);	/* Scoc */
./libopenjpeg/j2k.c:888:	cio_write(cio, tccp->qntsty + (tccp->numgbits << 5), 1);	/* Sqcx */
./libopenjpeg/j2k.c:896:			cio_write(cio, expn << 3, 1);	/* SPqcx_i */
./libopenjpeg/j2k.c:898:			cio_write(cio, (expn << 11) + mant, 2);	/* SPqcx_i */
./libopenjpeg/j2k.c:912:	tmp = cio_read(cio, 1);		/* Sqcx */
./libopenjpeg/j2k.c:954:			expn = cio_read(cio, 1) >> 3;	/* SPqcx_i */
./libopenjpeg/j2k.c:957:			tmp = cio_read(cio, 2);	/* SPqcx_i */
./libopenjpeg/j2k.c:984:	cio_write(cio, J2K_MS_QCD, 2);	/* QCD */
./libopenjpeg/j2k.c:990:	cio_write(cio, len, 2);			/* Lqcd */
./libopenjpeg/j2k.c:1003:	len = cio_read(cio, 2);		/* Lqcd */
./libopenjpeg/j2k.c:1016:	cio_write(cio, J2K_MS_QCC, 2);	/* QCC */
./libopenjpeg/j2k.c:1019:	cio_write(cio, compno, j2k->image->numcomps <= 256 ? 1 : 2);	/* Cqcc */
./libopenjpeg/j2k.c:1023:	cio_write(cio, len, 2);			/* Lqcc */
./libopenjpeg/j2k.c:1032:	len = cio_read(cio, 2);	/* Lqcc */
./libopenjpeg/j2k.c:1033:	compno = cio_read(cio, numcomp <= 256 ? 1 : 2);	/* Cqcc */
./libopenjpeg/j2k.c:1082:	cio_write(cio, J2K_MS_POC, 2);	/* POC  */
./libopenjpeg/j2k.c:1084:	cio_write(cio, len, 2);		/* Lpoc */
./libopenjpeg/j2k.c:1087:		cio_write(cio, poc->resno0, 1);	/* RSpoc_i */
./libopenjpeg/j2k.c:1088:		cio_write(cio, poc->compno0, (numcomps <= 256 ? 1 : 2));	/* CSpoc_i */
./libopenjpeg/j2k.c:1089:		cio_write(cio, poc->layno1, 2);	/* LYEpoc_i */
./libopenjpeg/j2k.c:1091:		cio_write(cio, poc->resno1, 1);	/* REpoc_i */
./libopenjpeg/j2k.c:1093:		cio_write(cio, poc->compno1, (numcomps <= 256 ? 1 : 2));	/* CEpoc_i */
./libopenjpeg/j2k.c:1095:		cio_write(cio, poc->prg, 1);	/* Ppoc_i */
./libopenjpeg/j2k.c:1110:	len = cio_read(cio, 2);		/* Lpoc */
./libopenjpeg/j2k.c:1125:		poc->resno0 = cio_read(cio, 1);	/* RSpoc_i */
./libopenjpeg/j2k.c:1126:		poc->compno0 = cio_read(cio, numcomps <= 256 ? 1 : 2);	/* CSpoc_i */
./libopenjpeg/j2k.c:1127:		poc->layno1 = cio_read(cio, 2);    /* LYEpoc_i */
./libopenjpeg/j2k.c:1128:		poc->resno1 = cio_read(cio, 1);    /* REpoc_i */
./libopenjpeg/j2k.c:1130:			cio_read(cio, numcomps <= 256 ? 1 : 2), (unsigned int) numcomps);	/* CEpoc_i */
./libopenjpeg/j2k.c:1131:		poc->prg = (OPJ_PROG_ORDER)cio_read(cio, 1);	/* Ppoc_i */
./libopenjpeg/j2k.c:1143:	len = cio_read(cio, 2);			/* Lcrg */
./libopenjpeg/j2k.c:1146:		Xcrg_i = cio_read(cio, 2);	/* Xcrg_i */
./libopenjpeg/j2k.c:1148:		Ycrg_i = cio_read(cio, 2);	/* Ycrg_i */
./libopenjpeg/j2k.c:1159:	len = cio_read(cio, 2);		/* Ltlm */
./libopenjpeg/j2k.c:1160:	Ztlm = cio_read(cio, 1);	/* Ztlm */
./libopenjpeg/j2k.c:1162:	Stlm = cio_read(cio, 1);	/* Stlm */
./libopenjpeg/j2k.c:1167:		Ttlm_i = cio_read(cio, ST);	/* Ttlm_i */
./libopenjpeg/j2k.c:1169:		Ptlm_i = cio_read(cio, SP ? 4 : 2);	/* Ptlm_i */
./libopenjpeg/j2k.c:1179:	len = cio_read(cio, 2);		/* Lplm */
./libopenjpeg/j2k.c:1180:	Zplm = cio_read(cio, 1);	/* Zplm */
./libopenjpeg/j2k.c:1184:		Nplm = cio_read(cio, 4);		/* Nplm */
./libopenjpeg/j2k.c:1187:			add = cio_read(cio, 1);
./libopenjpeg/j2k.c:1205:	len = cio_read(cio, 2);		/* Lplt */
./libopenjpeg/j2k.c:1206:	Zplt = cio_read(cio, 1);	/* Zplt */
./libopenjpeg/j2k.c:1209:		add = cio_read(cio, 1);
./libopenjpeg/j2k.c:1225:	len = cio_read(cio, 2);
./libopenjpeg/j2k.c:1228:	Z_ppm = cio_read(cio, 1);	/* Z_ppm */
./libopenjpeg/j2k.c:1232:			N_ppm = cio_read(cio, 4);	/* N_ppm */
./libopenjpeg/j2k.c:1265:			cp->ppm_data[j] = cio_read(cio, 1);
./libopenjpeg/j2k.c:1283:	len = cio_read(cio, 2);
./libopenjpeg/j2k.c:1284:	Z_ppt = cio_read(cio, 1);
./libopenjpeg/j2k.c:1298:		tcp->ppt_data[j] = cio_read(cio, 1);
./libopenjpeg/j2k.c:1308:	cio_write(cio, J2K_MS_TLM, 2);/* TLM */
./libopenjpeg/j2k.c:1310:	cio_write(cio,lenp,2);				/* Ltlm */
./libopenjpeg/j2k.c:1311:	cio_write(cio, 0,1);					/* Ztlm=0*/
./libopenjpeg/j2k.c:1312:	cio_write(cio,80,1);					/* Stlm ST=1(8bits-255 tiles max),SP=1(Ptlm=32bits) */
./libopenjpeg/j2k.c:1322:	cio_write(cio, J2K_MS_SOT, 2);		/* SOT */
./libopenjpeg/j2k.c:1325:	cio_write(cio, j2k->curtileno, 2);	/* Isot */
./libopenjpeg/j2k.c:1327:	cio_write(cio, j2k->cur_tp_num , 1);	/* TPsot */
./libopenjpeg/j2k.c:1328:	cio_write(cio, j2k->cur_totnum_tp[j2k->curtileno], 1);		/* TNsot */
./libopenjpeg/j2k.c:1331:	cio_write(cio, len, 2);				/* Lsot */
./libopenjpeg/j2k.c:1354:	len = cio_read(cio, 2);
./libopenjpeg/j2k.c:1356:	tileno = cio_read(cio, 2);
./libopenjpeg/j2k.c:1409:	totlen = cio_read(cio, 4);
./libopenjpeg/j2k.c:1446:	partno = cio_read(cio, 1);
./libopenjpeg/j2k.c:1447:	numparts = cio_read(cio, 1);
./libopenjpeg/j2k.c:1510:	cio_write(cio, J2K_MS_SOD, 2);
./libopenjpeg/j2k.c:1559:	cio_write(cio, totlen, 4);
./libopenjpeg/j2k.c:1564:		cio_write(cio, j2k->curtileno, 1);
./libopenjpeg/j2k.c:1565:		cio_write(cio, totlen, 4);
./libopenjpeg/j2k.c:1603:		data_ptr[i] = cio_read(cio, 1);
./libopenjpeg/j2k.c:1623:	cio_write(cio, J2K_MS_RGN, 2);						/* RGN  */
./libopenjpeg/j2k.c:1624:	cio_write(cio, numcomps <= 256 ? 5 : 6, 2);			/* Lrgn */
./libopenjpeg/j2k.c:1625:	cio_write(cio, compno, numcomps <= 256 ? 1 : 2);	/* Crgn */
./libopenjpeg/j2k.c:1626:	cio_write(cio, 0, 1);								/* Srgn */
./libopenjpeg/j2k.c:1627:	cio_write(cio, tcp->tccps[compno].roishift, 1);		/* SPrgn */
./libopenjpeg/j2k.c:1638:	len = cio_read(cio, 2);										/* Lrgn */
./libopenjpeg/j2k.c:1640:	compno = cio_read(cio, numcomps <= 256 ? 1 : 2);			/* Crgn */
./libopenjpeg/j2k.c:1641:	roisty = cio_read(cio, 1);									/* Srgn */
./libopenjpeg/j2k.c:1666:	tcp->tccps[compno].roishift = cio_read(cio, 1);				/* SPrgn */
./libopenjpeg/j2k.c:1672:	cio_write(cio, J2K_MS_EOC, 2);
./libopenjpeg/j2k.c:1777:		id = cio_read(j2k->cio, 2);
./libopenjpeg/j2k.c:1819:			cio_write(j2k->cio, min_id, 2);
./libopenjpeg/j2k.c:1962:		int id = cio_read(cio, 2);
./libopenjpeg/j2k.c:1978:			id = cio_read(cio, 2);
./libopenjpeg/j2k.c:1993:				cio_write(cio, id, 2);
./libopenjpeg/j2k.c:2108:		id = cio_read(cio, 2);
./libopenjpeg/j2k.c:2616:		fread(&elmt, 1, 1, PPT_file);
./libopenjpeg/j2k.c:2617:		fwrite(&elmt,1,1,f);
./tests/unit/testempty2.c:126:  fwrite(cio->buffer, 1, codestream_length, f);
./tests/unit/testempty2.c:145:  if (fread(src, 1, file_length, fsrc) != file_length)
./tests/unit/testempty1.c:122:  fwrite(cio->buffer, 1, codestream_length, f);
./tests/compareRAWimages.c:188:		if (!fread(&value_test, 1, 1, file_test)) {
./tests/compareRAWimages.c:193:		if (!fread(&value_base, 1, 1, file_base)) {
./applications/codec/j2k_to_image.c:605:		if (fread(src, 1, file_length, fsrc) != (size_t)file_length)
./applications/codec/image_to_j2k.c:1725:				res = fwrite(cio->buffer, 1, codestream_length, f);
./applications/codec/image_to_j2k.c:1786:				res = fwrite(cio->buffer, 1, codestream_length, f);
./applications/codec/j2k_dump.c:424:		if (fread(src, 1, file_length, fsrc) != (size_t)file_length)
./applications/codec/convert.c:121:	if ( fread(tga, TGA_HEADER_SIZE, 1, fp) != 1 )
./applications/codec/convert.c:156:		if ( !fread(id, id_len, 1, fp) )
./applications/codec/convert.c:217:	if(fwrite(&uc0, 1, 1, fp) != 1) goto fails; /* id_length */
./applications/codec/convert.c:218:	if(fwrite(&uc0, 1, 1, fp) != 1) goto fails; /* colour_map_type */
./applications/codec/convert.c:221:	if(fwrite(&image_type, 1, 1, fp) != 1) goto fails;
./applications/codec/convert.c:224:	if(fwrite(&us0, 2, 1, fp) != 1) goto fails; /* colour_map_index */
./applications/codec/convert.c:225:	if(fwrite(&us0, 2, 1, fp) != 1) goto fails; /* colour_map_length */
./applications/codec/convert.c:226:	if(fwrite(&uc0, 1, 1, fp) != 1) goto fails; /* colour_map_entry_size */
./applications/codec/convert.c:228:	if(fwrite(&us0, 2, 1, fp) != 1) goto fails; /* x_origin */
./applications/codec/convert.c:229:	if(fwrite(&us0, 2, 1, fp) != 1) goto fails; /* y_origin */
./applications/codec/convert.c:235:	if(fwrite(&image_w, 2, 1, fp) != 1) goto fails;
./applications/codec/convert.c:236:	if(fwrite(&image_h, 2, 1, fp) != 1) goto fails;
./applications/codec/convert.c:240:	if(fwrite(&image_w, 2, 1, fp) != 1) goto fails;
./applications/codec/convert.c:241:	if(fwrite(&image_h, 2, 1, fp) != 1) goto fails;
./applications/codec/convert.c:244:	if(fwrite(&pixel_depth, 1, 1, fp) != 1) goto fails;
./applications/codec/convert.c:250:	if(fwrite(&image_desc, 1, 1, fp) != 1) goto fails;
./applications/codec/convert.c:348:				if( !fread(&b, 1, 1, f) )
./applications/codec/convert.c:355:				if ( !fread(&g, 1, 1, f) )
./applications/codec/convert.c:362:				if ( !fread(&r, 1, 1, f) )
./applications/codec/convert.c:381:				if ( !fread(&b, 1, 1, f) )
./applications/codec/convert.c:388:				if ( !fread(&g, 1, 1, f) )
./applications/codec/convert.c:395:				if ( !fread(&r, 1, 1, f) )
./applications/codec/convert.c:402:				if ( !fread(&a, 1, 1, f) )
./applications/codec/convert.c:490:			res = fwrite(&value,1,1,fdest);
./applications/codec/convert.c:498:			res = fwrite(&value,1,1,fdest);
./applications/codec/convert.c:506:			res = fwrite(&value,1,1,fdest);
./applications/codec/convert.c:516:				res = fwrite(&value,1,1,fdest);
./applications/codec/convert.c:761:	if ( fread(RGB, sizeof(unsigned char), (3 * W + PAD) * H, IN) != (3 * W + PAD) * H )
./applications/codec/convert.c:1223:  if ( !fread(&c1, 1, 1, f) )
./applications/codec/convert.c:1234:  if ( !fread(&c1, 1, 1, f) )
./applications/codec/convert.c:1239:  if ( !fread(&c2, 1, 1, f) )
./applications/codec/convert.c:1253:  if ( !fread(&c1, 1, 1, f) )
./applications/codec/convert.c:1258:  if ( !fread(&c2, 1, 1, f) )
./applications/codec/convert.c:1263:  if ( !fread(&c3, 1, 1, f) )
./applications/codec/convert.c:1268:  if ( !fread(&c4, 1, 1, f) )
./applications/codec/convert.c:1466:				res = fwrite(&byte, 1, 1, fdest);
./applications/codec/convert.c:1838:    	  if ( !fread(&c0, 1, 1, fp) )
./applications/codec/convert.c:1846:      	  if ( !fread(&c1, 1, 1, fp) )
./applications/codec/convert.c:1897:  	  if ( !fread(&uc, 1, 1, fp) )
./applications/codec/convert.c:2876:				if (!fread(&value, 1, 1, f)) {
./applications/codec/convert.c:2893:				if (!fread(&temp, 1, 1, f)) {
./applications/codec/convert.c:2901:				if (!fread(&temp, 1, 1, f)) {
./applications/codec/convert.c:2921:	if (fread(&ch, 1, 1, f)) {
./applications/codec/convert.c:2971:						res = fwrite(&curr, sizeof(signed char), 1, rawFile);
./applications/codec/convert.c:2989:						res = fwrite(&curr, sizeof(unsigned char), 1, rawFile);
./applications/codec/convert.c:3012:						res = fwrite(&temp, 1, 1, rawFile);
./applications/codec/convert.c:3019:						res = fwrite(&temp, 1, 1, rawFile);
./applications/codec/convert.c:3039:						res = fwrite(&temp, 1, 1, rawFile);
./applications/codec/convert.c:3046:						res = fwrite(&temp, 1, 1, rawFile);
./applications/codec/convert.c:3109:	if(fread(sigbuf, 1, MAGIC_SIZE, reader) != MAGIC_SIZE
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1983:			fwrite(cio->buffer, 1, codestream_length, f);
./applications/JavaOpenJPEG/JavaOpenJPEGDecoder.c:613:			fread(src, 1, file_length, fsrc);
./applications/mj2/wrap_j2k_in_mj2.c:71:	fread(src, 1, src_len, reader);
./applications/mj2/wrap_j2k_in_mj2.c:171:    fread(&buf,1,1, file);
./applications/mj2/wrap_j2k_in_mj2.c:173:      fread(&buf,1,1, file);
./applications/mj2/wrap_j2k_in_mj2.c:177:  fread(buf2,2,1,file);		/* Lsiz                */
./applications/mj2/wrap_j2k_in_mj2.c:181:  fread(siz_buffer,len, 1, file);
./applications/mj2/wrap_j2k_in_mj2.c:186:  cio_read(cio, 2);			/* Rsiz (capabilities) */
./applications/mj2/wrap_j2k_in_mj2.c:187:  image->x1 = cio_read(cio, 4);	/* Xsiz                */
./applications/mj2/wrap_j2k_in_mj2.c:188:  image->y1 = cio_read(cio, 4);	/* Ysiz                */
./applications/mj2/wrap_j2k_in_mj2.c:189:  image->x0 = cio_read(cio, 4);	/* X0siz               */
./applications/mj2/wrap_j2k_in_mj2.c:190:  image->y0 = cio_read(cio, 4);	/* Y0siz               */
./applications/mj2/wrap_j2k_in_mj2.c:193:  image->numcomps = cio_read(cio,2);	/* Csiz                */
./applications/mj2/wrap_j2k_in_mj2.c:199:    tmp = cio_read(cio,1);		/* Ssiz_i          */
./applications/mj2/wrap_j2k_in_mj2.c:202:    image->comps[i].dx = cio_read(cio,1);	/* XRsiz_i         */
./applications/mj2/wrap_j2k_in_mj2.c:203:    image->comps[i].dy = cio_read(cio,1);	/* YRsiz_i         */
./applications/mj2/wrap_j2k_in_mj2.c:347:  cio_write(cio,MJ2_MDAT, 4);	
./applications/mj2/wrap_j2k_in_mj2.c:348:  fwrite(buf,cio_tell(cio),1,mj2file);
./applications/mj2/wrap_j2k_in_mj2.c:389:    cio_write(cio,sample->sample_size, 4);
./applications/mj2/wrap_j2k_in_mj2.c:390:    cio_write(cio,JP2_JP2C, 4);
./applications/mj2/wrap_j2k_in_mj2.c:393:    fread(frame_codestream+8,sample->sample_size-8,1,j2kfile);
./applications/mj2/wrap_j2k_in_mj2.c:394:    fwrite(frame_codestream,sample->sample_size,1,mj2file);
./applications/mj2/wrap_j2k_in_mj2.c:416:  cio_write(cio,offset-mdat_initpos,4); 
./applications/mj2/wrap_j2k_in_mj2.c:418:  fwrite(buf,4,1,mj2file);
./applications/mj2/wrap_j2k_in_mj2.c:439:  fwrite(buf,cio_tell(cio),1,mj2file);
./applications/mj2/meta_out.c:942:  fread(frame_codestream,sample->sample_size-8,1, file);  /* Assuming that jp and ftyp markers size do */
./applications/mj2/meta_out.c:1017:  /* I'm unclear if the span of the original fread(frame_codestream...) included the following items if they're trailing. */
./applications/mj2/meta_out.c:1262:    /* Unfortunately compo isn't retained in j2k_read_coc:  compno = cio_read(j2k_img->numcomps <= 256 ? 1 : 2);	/* Ccoc */
./applications/mj2/meta_out.c:1716:    fprintf(xmlout,  "%s    <LYEpoc>%d</LYEpoc>\n", s, poc->layno1); /* int_min(cio_read(2), tcp->numlayers);	/* 2 bytes; LYEpoc_i */
./applications/mj2/meta_out.c:1719:    fprintf(xmlout,  "%s    <REpoc>%d</REpoc>\n", s, poc->resno1); /*int_min(cio_read(1), tccp->numresolutions);	/* REpoc_i */
./applications/mj2/meta_out.c:1722:    fprintf(xmlout,  "%s    <CEpoc>%d</CEpoc>\n", s, poc->compno1); /* int_min(cio_read(j2k_img->numcomps <= 256 ? 1 : 2), j2k_img->numcomps);	/* CEpoc_i */
./applications/mj2/mj2_convert.c:154:	fread(&uc, 1, 1, yuvfile);
./applications/mj2/mj2_convert.c:159:	fread(&uc, 1, 1, yuvfile);
./applications/mj2/mj2_convert.c:215:    fwrite(buf, 1, prec_bytes, f);
./applications/mj2/mj2_convert.c:228:      fwrite(buf, 1, prec_bytes, f);
./applications/mj2/mj2_convert.c:238:      fwrite(buf, 1, prec_bytes, f);
./applications/mj2/mj2_convert.c:254:      fwrite(buf, 1, prec_bytes, f);
./applications/mj2/mj2_convert.c:259:      fwrite(buf, 1, prec_bytes, f);
./applications/mj2/extract_j2k_from_mj2.c:95:    fread(buf, 1, 24, mj2file);
./applications/mj2/extract_j2k_from_mj2.c:166:    fread(frame_codestream,sample->sample_size-8,1, mj2file);  
./applications/mj2/extract_j2k_from_mj2.c:174:    fwrite(frame_codestream,sample->sample_size-8,1,outfile);
./applications/mj2/frames_to_mj2.c:731:	cio_write(cio, MJ2_MDAT, 4);	
./applications/mj2/frames_to_mj2.c:733:	fwrite(buf,cio_tell(cio),1,mj2file);
./applications/mj2/frames_to_mj2.c:792:	cio_write(cio, JP2_JP2C, 4);
./applications/mj2/frames_to_mj2.c:808:	cio_write(cio, len+8,4);
./applications/mj2/frames_to_mj2.c:814:	fwrite(buf, 1, len+8, mj2file);				
./applications/mj2/frames_to_mj2.c:839:	cio_write(cio, offset - mdat_initpos, 4);
./applications/mj2/frames_to_mj2.c:840:	fwrite(buf, 4, 1, mj2file);
./applications/mj2/frames_to_mj2.c:856:	fwrite(buf,cio_tell(cio),1,mj2file);
./applications/mj2/mj2_to_frames.c:106:	n = fread(buf, 1, 24, infile);
./applications/mj2/mj2_to_frames.c:210:    fread(frame_codestream, sample->sample_size-8, 1, infile);
./applications/mj2/mj2.c:47:  box->length = cio_read(cio, 4);
./applications/mj2/mj2.c:48:  box->type = cio_read(cio, 4);
./applications/mj2/mj2.c:50:    if (cio_read(cio, 4) != 0) {
./applications/mj2/mj2.c:54:    box->length = cio_read(cio, 4);
./applications/mj2/mj2.c:309:  cio_write(cio, MJ2_JP, 4);		/* JP */
./applications/mj2/mj2.c:310:  cio_write(cio, 0x0d0a870a, 4);	/* 0x0d0a870a required in a JP box */
./applications/mj2/mj2.c:314:  cio_write(cio, box.length, 4);
./applications/mj2/mj2.c:333:  if (0x0d0a870a != cio_read(cio, 4)) {	/* read the 0x0d0a870a required in a JP box */
./applications/mj2/mj2.c:358:  cio_write(cio, MJ2_FTYP, 4);	/* FTYP       */
./applications/mj2/mj2.c:359:  cio_write(cio, movie->brand, 4);	/* BR         */
./applications/mj2/mj2.c:360:  cio_write(cio, movie->minversion, 4);	/* MinV       */
./applications/mj2/mj2.c:363:    cio_write(cio, movie->cl[i], 4);	/* CL         */
./applications/mj2/mj2.c:367:  cio_write(cio, box.length, 4);	/* Length     */
./applications/mj2/mj2.c:388:  movie->brand = cio_read(cio, 4);	/* BR              */
./applications/mj2/mj2.c:389:  movie->minversion = cio_read(cio, 4);	/* MinV            */
./applications/mj2/mj2.c:394:    movie->cl[i] = cio_read(cio, 4);	/* CLi */
./applications/mj2/mj2.c:417:  cio_write(cio, MJ2_STCO, 4);	/* STCO       */
./applications/mj2/mj2.c:419:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:421:  cio_write(cio, tk->num_chunks, 4);	/* Entry Count */
./applications/mj2/mj2.c:424:    cio_write(cio, tk->chunk[i].offset, 4);	/* Entry offset */
./applications/mj2/mj2.c:429:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:450:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:455:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:461:  if (cio_read(cio, 4) != tk->num_chunks) {
./applications/mj2/mj2.c:466:      tk->chunk[i].offset = cio_read(cio, 4);	/* Entry offset */
./applications/mj2/mj2.c:493:  cio_write(cio, MJ2_STSZ, 4);	/* STSZ       */
./applications/mj2/mj2.c:495:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:498:    cio_write(cio, tk->sample[0].sample_size, 4);	/* Size */
./applications/mj2/mj2.c:500:    cio_write(cio, 1, 4);		/* Entry count = 1 */
./applications/mj2/mj2.c:504:    cio_write(cio, 0, 4);		/* Sample Size = 0 becase they all have different sizes */
./applications/mj2/mj2.c:506:    cio_write(cio, tk->num_samples, 4);	/* Sample Count */
./applications/mj2/mj2.c:509:      cio_write(cio, tk->sample[i].sample_size, 4);
./applications/mj2/mj2.c:515:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:538:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:543:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:548:  sample_size = cio_read(cio, 4);
./applications/mj2/mj2.c:558:    if (tk->num_samples != cio_read(cio, 4)) {	/* Sample count */
./applications/mj2/mj2.c:564:      tk->sample[i].sample_size = cio_read(cio, 4);	/* Sample Size */
./applications/mj2/mj2.c:589:  cio_write(cio, MJ2_STSC, 4);	/* STSC       */
./applications/mj2/mj2.c:591:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:593:  cio_write(cio, tk->num_samplestochunk, 4);	/* Entry Count */
./applications/mj2/mj2.c:596:    cio_write(cio, tk->sampletochunk[i].first_chunk, 4);	/* First Chunk */
./applications/mj2/mj2.c:597:    cio_write(cio, tk->sampletochunk[i].samples_per_chunk, 4);	/* Samples per chunk */
./applications/mj2/mj2.c:598:    cio_write(cio, tk->sampletochunk[i].sample_descr_idx, 4);	/* Samples description index */
./applications/mj2/mj2.c:604:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:626:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:631:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:636:  tk->num_samplestochunk = cio_read(cio, 4);
./applications/mj2/mj2.c:641:    tk->sampletochunk[i].first_chunk = cio_read(cio, 4);
./applications/mj2/mj2.c:642:    tk->sampletochunk[i].samples_per_chunk = cio_read(cio, 4);
./applications/mj2/mj2.c:643:    tk->sampletochunk[i].sample_descr_idx = cio_read(cio, 4);
./applications/mj2/mj2.c:670:  cio_write(cio, MJ2_STTS, 4);	/* STTS       */
./applications/mj2/mj2.c:672:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:674:  cio_write(cio, tk->num_tts, 4);	/* entry_count */
./applications/mj2/mj2.c:676:    cio_write(cio, tk->tts[i].sample_count, 4);	/* Sample-count */
./applications/mj2/mj2.c:677:    cio_write(cio, tk->tts[i].sample_delta, 4);	/* Sample-Delta */
./applications/mj2/mj2.c:682:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:705:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:710:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:715:  tk->num_tts = cio_read(cio, 4);
./applications/mj2/mj2.c:720:    tk->tts[i].sample_count = cio_read(cio, 4);
./applications/mj2/mj2.c:721:    tk->tts[i].sample_delta = cio_read(cio, 4);
./applications/mj2/mj2.c:746:  cio_write(cio, MJ2_FIEL, 4);	/* STTS       */
./applications/mj2/mj2.c:748:  cio_write(cio, tk->fieldcount, 1);	/* Field count */
./applications/mj2/mj2.c:749:  cio_write(cio, tk->fieldorder, 1);	/* Field order */
./applications/mj2/mj2.c:754:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:776:  tk->fieldcount = cio_read(cio, 1);
./applications/mj2/mj2.c:777:  tk->fieldorder = cio_read(cio, 1);
./applications/mj2/mj2.c:798:  cio_write(cio, MJ2_ORFO, 4);
./applications/mj2/mj2.c:800:  cio_write(cio, tk->or_fieldcount, 1);	/* Original Field count */
./applications/mj2/mj2.c:801:  cio_write(cio, tk->or_fieldorder, 1);	/* Original Field order */
./applications/mj2/mj2.c:806:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:828:  tk->or_fieldcount = cio_read(cio, 1);
./applications/mj2/mj2.c:829:  tk->or_fieldorder = cio_read(cio, 1);
./applications/mj2/mj2.c:852:  cio_write(cio, MJ2_JP2P, 4);
./applications/mj2/mj2.c:854:  cio_write(cio, 0, 4);		/* Version 0, flags =0 */
./applications/mj2/mj2.c:857:    cio_write(cio, tk->br[i], 4);
./applications/mj2/mj2.c:862:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:884:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:889:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:899:    tk->br[i] = cio_read(cio, 4);
./applications/mj2/mj2.c:923:  cio_write(cio, MJ2_JP2X, 4);
./applications/mj2/mj2.c:926:    cio_write(cio, tk->jp2xdata[i], 1);
./applications/mj2/mj2.c:931:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:958:    tk->jp2xdata[i] = cio_read(cio, 1);
./applications/mj2/mj2.c:981:  cio_write(cio, MJ2_JSUB, 4);
./applications/mj2/mj2.c:983:  cio_write(cio, tk->hsub, 1);
./applications/mj2/mj2.c:984:  cio_write(cio, tk->vsub, 1);
./applications/mj2/mj2.c:985:  cio_write(cio, tk->hoff, 1);
./applications/mj2/mj2.c:986:  cio_write(cio, tk->voff, 1);
./applications/mj2/mj2.c:990:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1010:  tk->hsub = cio_read(cio, 1);
./applications/mj2/mj2.c:1011:  tk->vsub = cio_read(cio, 1);
./applications/mj2/mj2.c:1012:  tk->hoff = cio_read(cio, 1);;
./applications/mj2/mj2.c:1013:  tk->voff = cio_read(cio, 1);
./applications/mj2/mj2.c:1034:  cio_write(cio, MJ2_MJ2, 4);	/* MJ2       */
./applications/mj2/mj2.c:1036:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:1038:  cio_write(cio, 1, 4);
./applications/mj2/mj2.c:1040:  cio_write(cio, 0, 2);		/* Pre-defined */
./applications/mj2/mj2.c:1042:  cio_write(cio, 0, 2);		/* Reserved */
./applications/mj2/mj2.c:1044:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:1045:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:1046:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:1048:  cio_write(cio, tk->w, 2);		/* Width  */
./applications/mj2/mj2.c:1049:  cio_write(cio, tk->h, 2);		/* Height */
./applications/mj2/mj2.c:1051:  cio_write(cio, tk->horizresolution, 4);	/* Horizontal resolution */
./applications/mj2/mj2.c:1052:  cio_write(cio, tk->vertresolution, 4);	/* Vertical resolution   */
./applications/mj2/mj2.c:1054:  cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:1056:  cio_write(cio, 1, 2);		/* Pre-defined = 1 */
./applications/mj2/mj2.c:1058:  cio_write(cio, tk->compressorname[0], 4);	/* Compressor Name */
./applications/mj2/mj2.c:1059:  cio_write(cio, tk->compressorname[1], 4);
./applications/mj2/mj2.c:1060:  cio_write(cio, tk->compressorname[2], 4);
./applications/mj2/mj2.c:1061:  cio_write(cio, tk->compressorname[3], 4);
./applications/mj2/mj2.c:1062:  cio_write(cio, tk->compressorname[4], 4);
./applications/mj2/mj2.c:1063:  cio_write(cio, tk->compressorname[5], 4);
./applications/mj2/mj2.c:1064:  cio_write(cio, tk->compressorname[6], 4);
./applications/mj2/mj2.c:1065:  cio_write(cio, tk->compressorname[7], 4);
./applications/mj2/mj2.c:1067:  cio_write(cio, tk->depth, 2);	/* Depth */
./applications/mj2/mj2.c:1069:  cio_write(cio, 0xffff, 2);		/* Pre-defined = -1 */
./applications/mj2/mj2.c:1085:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1110:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1115:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:1130:  tk->w = cio_read(cio, 2);		/* Width  */
./applications/mj2/mj2.c:1131:  tk->h = cio_read(cio, 2);		/* Height */
./applications/mj2/mj2.c:1133:  tk->horizresolution = cio_read(cio, 4);	/* Horizontal resolution */
./applications/mj2/mj2.c:1134:  tk->vertresolution = cio_read(cio, 4);	/* Vertical resolution   */
./applications/mj2/mj2.c:1140:  tk->compressorname[0] = cio_read(cio, 4);	/* Compressor Name */
./applications/mj2/mj2.c:1141:  tk->compressorname[1] = cio_read(cio, 4);
./applications/mj2/mj2.c:1142:  tk->compressorname[2] = cio_read(cio, 4);
./applications/mj2/mj2.c:1143:  tk->compressorname[3] = cio_read(cio, 4);
./applications/mj2/mj2.c:1144:  tk->compressorname[4] = cio_read(cio, 4);
./applications/mj2/mj2.c:1145:  tk->compressorname[5] = cio_read(cio, 4);
./applications/mj2/mj2.c:1146:  tk->compressorname[6] = cio_read(cio, 4);
./applications/mj2/mj2.c:1147:  tk->compressorname[7] = cio_read(cio, 4);
./applications/mj2/mj2.c:1149:  tk->depth = cio_read(cio, 2);	/* Depth */
./applications/mj2/mj2.c:1230:  cio_write(cio, MJ2_STSD, 4);	/* STSD       */
./applications/mj2/mj2.c:1232:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:1234:  cio_write(cio, 1, 4);		/* entry_count = 1 (considering same JP2 headerboxes) */
./applications/mj2/mj2.c:1248:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1272:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1277:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:1282:  entry_count = cio_read(cio, 4);
./applications/mj2/mj2.c:1290:    len_2skip = cio_read(cio, 4);	/* Not implemented -> skipping box */
./applications/mj2/mj2.c:1293:    len_2skip = cio_read(cio, 4);	/* Not implemented -> skipping box */
./applications/mj2/mj2.c:1317:  cio_write(cio, MJ2_STBL, 4);	/* STBL       */
./applications/mj2/mj2.c:1327:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1377:  cio_write(cio, MJ2_URL, 4);	/* URL       */
./applications/mj2/mj2.c:1380:    cio_write(cio, 1, 4);		/* Version = 0, flags = 1 because stored in same file */
./applications/mj2/mj2.c:1382:    cio_write(cio, 0, 4);		/* Version = 0, flags =  0 */
./applications/mj2/mj2.c:1383:    cio_write(cio, tk->url[url_num - 1].location[0], 4);
./applications/mj2/mj2.c:1384:    cio_write(cio, tk->url[url_num - 1].location[1], 4);
./applications/mj2/mj2.c:1385:    cio_write(cio, tk->url[url_num - 1].location[2], 4);
./applications/mj2/mj2.c:1386:    cio_write(cio, tk->url[url_num - 1].location[3], 4);
./applications/mj2/mj2.c:1391:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1411:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1416:  if (1 != cio_read(cio, 3)) {	/* If flags = 1 --> media data in file */
./applications/mj2/mj2.c:1417:    tk->url[urn_num].location[0] = cio_read(cio, 4);
./applications/mj2/mj2.c:1418:    tk->url[urn_num].location[1] = cio_read(cio, 4);
./applications/mj2/mj2.c:1419:    tk->url[urn_num].location[2] = cio_read(cio, 4);
./applications/mj2/mj2.c:1420:    tk->url[urn_num].location[3] = cio_read(cio, 4);
./applications/mj2/mj2.c:1445:  cio_write(cio, MJ2_URN, 4);	/* URN       */
./applications/mj2/mj2.c:1447:  cio_write(cio, 0, 4);		/* Version = 0, flags =  0 */
./applications/mj2/mj2.c:1449:  cio_write(cio, tk->urn[urn_num].name[0], 4);
./applications/mj2/mj2.c:1450:  cio_write(cio, tk->urn[urn_num].name[1], 4);
./applications/mj2/mj2.c:1451:  cio_write(cio, tk->urn[urn_num].name[2], 4);
./applications/mj2/mj2.c:1452:  cio_write(cio, tk->urn[urn_num].name[3], 4);
./applications/mj2/mj2.c:1453:  cio_write(cio, tk->urn[urn_num].location[0], 4);
./applications/mj2/mj2.c:1454:  cio_write(cio, tk->urn[urn_num].location[1], 4);
./applications/mj2/mj2.c:1455:  cio_write(cio, tk->urn[urn_num].location[2], 4);
./applications/mj2/mj2.c:1456:  cio_write(cio, tk->urn[urn_num].location[3], 4);
./applications/mj2/mj2.c:1460:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1481:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1486:  if (1 != cio_read(cio, 3)) {	/* If flags = 1 --> media data in file */
./applications/mj2/mj2.c:1487:    tk->urn[urn_num].name[0] = cio_read(cio, 4);
./applications/mj2/mj2.c:1488:    tk->urn[urn_num].name[1] = cio_read(cio, 4);
./applications/mj2/mj2.c:1489:    tk->urn[urn_num].name[2] = cio_read(cio, 4);
./applications/mj2/mj2.c:1490:    tk->urn[urn_num].name[3] = cio_read(cio, 4);
./applications/mj2/mj2.c:1491:    tk->urn[urn_num].location[0] = cio_read(cio, 4);
./applications/mj2/mj2.c:1492:    tk->urn[urn_num].location[1] = cio_read(cio, 4);
./applications/mj2/mj2.c:1493:    tk->urn[urn_num].location[2] = cio_read(cio, 4);
./applications/mj2/mj2.c:1494:    tk->urn[urn_num].location[3] = cio_read(cio, 4);
./applications/mj2/mj2.c:1519:  cio_write(cio, MJ2_DREF, 4);	/* DREF       */
./applications/mj2/mj2.c:1521:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:1524:    cio_write(cio, 1, 4);		/* entry_count = 1 */
./applications/mj2/mj2.c:1527:    cio_write(cio, tk->num_url + tk->num_urn, 4);	/* entry_count */
./applications/mj2/mj2.c:1538:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1561:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1566:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:1571:  entry_count = cio_read(cio, 4);
./applications/mj2/mj2.c:1577:    marker = cio_read(cio, 4);
./applications/mj2/mj2.c:1615:  cio_write(cio, MJ2_DINF, 4);	/* DINF       */
./applications/mj2/mj2.c:1621:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1663:  cio_write(cio, MJ2_VMHD, 4);	/* VMHD       */
./applications/mj2/mj2.c:1665:  cio_write(cio, 1, 4);		/* Version = 0, flags = 1 */
./applications/mj2/mj2.c:1667:  cio_write(cio, tk->graphicsmode, 2);
./applications/mj2/mj2.c:1668:  cio_write(cio, tk->opcolor[0], 2);
./applications/mj2/mj2.c:1669:  cio_write(cio, tk->opcolor[1], 2);
./applications/mj2/mj2.c:1670:  cio_write(cio, tk->opcolor[2], 2);
./applications/mj2/mj2.c:1674:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1694:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1699:  if (1 != cio_read(cio, 3)) {	/* Flags = 1  */
./applications/mj2/mj2.c:1705:  tk->graphicsmode = cio_read(cio, 2);
./applications/mj2/mj2.c:1706:  tk->opcolor[0] = cio_read(cio, 2);
./applications/mj2/mj2.c:1707:  tk->opcolor[1] = cio_read(cio, 2);
./applications/mj2/mj2.c:1708:  tk->opcolor[2] = cio_read(cio, 2);
./applications/mj2/mj2.c:1729:  cio_write(cio, MJ2_SMHD, 4);	/* SMHD       */
./applications/mj2/mj2.c:1731:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:1733:  cio_write(cio, tk->balance, 2);
./applications/mj2/mj2.c:1735:  cio_write(cio, 0, 2);		/* Reserved */
./applications/mj2/mj2.c:1739:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1759:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1764:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:1770:  tk->balance = cio_read(cio, 2);
./applications/mj2/mj2.c:1803:  cio_write(cio, MJ2_HMHD, 4);	/* HMHD       */
./applications/mj2/mj2.c:1805:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:1807:  cio_write(cio, tk->maxPDUsize, 2);
./applications/mj2/mj2.c:1808:  cio_write(cio, tk->avgPDUsize, 2);
./applications/mj2/mj2.c:1809:  cio_write(cio, tk->maxbitrate, 4);
./applications/mj2/mj2.c:1810:  cio_write(cio, tk->avgbitrate, 4);
./applications/mj2/mj2.c:1811:  cio_write(cio, tk->slidingavgbitrate, 4);
./applications/mj2/mj2.c:1815:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1835:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:1840:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:1846:  tk->maxPDUsize = cio_read(cio, 2);
./applications/mj2/mj2.c:1847:  tk->avgPDUsize = cio_read(cio, 2);
./applications/mj2/mj2.c:1848:  tk->maxbitrate = cio_read(cio, 4);
./applications/mj2/mj2.c:1849:  tk->avgbitrate = cio_read(cio, 4);
./applications/mj2/mj2.c:1850:  tk->slidingavgbitrate = cio_read(cio, 4);
./applications/mj2/mj2.c:1882:  cio_write(cio, MJ2_MINF, 4);	/* MINF       */
./applications/mj2/mj2.c:1897:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:1920:  box_type = cio_read(cio, 4);
./applications/mj2/mj2.c:1962:  cio_write(cio, MJ2_HDLR, 4);	/* HDLR       */
./applications/mj2/mj2.c:1964:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:1966:  cio_write(cio, 0, 4);		/* Predefine */
./applications/mj2/mj2.c:1972:    cio_write(cio, tk->handler_type, 4);
./applications/mj2/mj2.c:1974:    cio_write(cio, 0, 4);
./applications/mj2/mj2.c:1975:    cio_write(cio, 0, 4);
./applications/mj2/mj2.c:1976:    cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:1978:    cio_write(cio, 0x76696465, 4);
./applications/mj2/mj2.c:1979:    cio_write(cio, 0x6F206d65, 4);
./applications/mj2/mj2.c:1980:    cio_write(cio, 0x64696120, 4);
./applications/mj2/mj2.c:1981:    cio_write(cio, 0x74726163, 4);
./applications/mj2/mj2.c:1982:    cio_write(cio, 0x6b00, 2);	/* String: video media track */
./applications/mj2/mj2.c:1985:    cio_write(cio, tk->handler_type, 4);
./applications/mj2/mj2.c:1987:    cio_write(cio, 0, 4);
./applications/mj2/mj2.c:1988:    cio_write(cio, 0, 4);
./applications/mj2/mj2.c:1989:    cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:1991:    cio_write(cio, 0x536F756E, 4);
./applications/mj2/mj2.c:1992:    cio_write(cio, 0x6400, 2);	/* String: Sound */
./applications/mj2/mj2.c:1995:    cio_write(cio, tk->handler_type, 4);
./applications/mj2/mj2.c:1997:    cio_write(cio, 0, 4);
./applications/mj2/mj2.c:1998:    cio_write(cio, 0, 4);
./applications/mj2/mj2.c:1999:    cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:2001:    cio_write(cio, 0x48696E74, 4);
./applications/mj2/mj2.c:2002:    cio_write(cio, 0, 2);		/* String: Hint */
./applications/mj2/mj2.c:2007:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:2029:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:2034:  if (0 != cio_read(cio, 3)) {	/* Flags = 0  */
./applications/mj2/mj2.c:2041:  tk->handler_type = cio_read(cio, 4);
./applications/mj2/mj2.c:2048:    tk->name[i] = cio_read(cio, 1);	/* Name */
./applications/mj2/mj2.c:2073:  cio_write(cio, MJ2_MDHD, 4);	/* MDHD       */
./applications/mj2/mj2.c:2075:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:2077:  cio_write(cio, tk->creation_time, 4);	/* Creation Time */
./applications/mj2/mj2.c:2082:  cio_write(cio, modification_time, 4);	/* Modification Time */
./applications/mj2/mj2.c:2084:  cio_write(cio, tk->timescale, 4);	/* Timescale */
./applications/mj2/mj2.c:2091:  cio_write(cio, tk->duration, 4);	/* Duration */
./applications/mj2/mj2.c:2093:  cio_write(cio, tk->language, 2);	/* Language */
./applications/mj2/mj2.c:2095:  cio_write(cio, 0, 2);		/* Predefined */
./applications/mj2/mj2.c:2099:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:2119:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:2124:  if (0 != cio_read(cio, 3)) {	/* Flags = 0 */
./applications/mj2/mj2.c:2130:  tk->creation_time = cio_read(cio, 4);	/* Creation Time */
./applications/mj2/mj2.c:2132:  tk->modification_time = cio_read(cio, 4);	/* Modification Time */
./applications/mj2/mj2.c:2134:  tk->timescale = cio_read(cio, 4);	/* Timescale */
./applications/mj2/mj2.c:2136:  tk->duration = cio_read(cio, 4);	/* Duration */
./applications/mj2/mj2.c:2138:  tk->language = cio_read(cio, 2);	/* Language */
./applications/mj2/mj2.c:2161:  cio_write(cio, MJ2_MDIA, 4);	/* MDIA       */
./applications/mj2/mj2.c:2169:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:2218:  cio_write(cio, MJ2_TKHD, 4);	/* TKHD       */
./applications/mj2/mj2.c:2220:  cio_write(cio, 3, 4);		/* Version=0, flags=3 */
./applications/mj2/mj2.c:2225:  cio_write(cio, tk->creation_time, 4);	/* Creation Time */
./applications/mj2/mj2.c:2227:  cio_write(cio, tk->modification_time, 4);	/* Modification Time */
./applications/mj2/mj2.c:2229:  cio_write(cio, tk->track_ID, 4);	/* Track ID */
./applications/mj2/mj2.c:2231:  cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:2238:  cio_write(cio, tk->duration, 4);	/* Duration */
./applications/mj2/mj2.c:2240:  cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:2241:  cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:2243:  cio_write(cio, tk->layer, 2);	/* Layer    */
./applications/mj2/mj2.c:2245:  cio_write(cio, 0, 2);		/* Predefined */
./applications/mj2/mj2.c:2247:  cio_write(cio, tk->volume, 2);	/* Volume       */
./applications/mj2/mj2.c:2249:  cio_write(cio, 0, 2);		/* Reserved */
./applications/mj2/mj2.c:2251:  cio_write(cio, tk->trans_matrix[0], 4);	/* Transformation matrix for track */
./applications/mj2/mj2.c:2252:  cio_write(cio, tk->trans_matrix[1], 4);
./applications/mj2/mj2.c:2253:  cio_write(cio, tk->trans_matrix[2], 4);
./applications/mj2/mj2.c:2254:  cio_write(cio, tk->trans_matrix[3], 4);
./applications/mj2/mj2.c:2255:  cio_write(cio, tk->trans_matrix[4], 4);
./applications/mj2/mj2.c:2256:  cio_write(cio, tk->trans_matrix[5], 4);
./applications/mj2/mj2.c:2257:  cio_write(cio, tk->trans_matrix[6], 4);
./applications/mj2/mj2.c:2258:  cio_write(cio, tk->trans_matrix[7], 4);
./applications/mj2/mj2.c:2259:  cio_write(cio, tk->trans_matrix[8], 4);
./applications/mj2/mj2.c:2261:  cio_write(cio, tk->visual_w, 4);	/* Video Visual Width  */
./applications/mj2/mj2.c:2263:  cio_write(cio, tk->visual_h, 4);	/* Video Visual Height */
./applications/mj2/mj2.c:2267:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:2290:  if (0 != cio_read(cio, 1)) {	/* Version = 0 */
./applications/mj2/mj2.c:2295:  flag = cio_read(cio, 3);
./applications/mj2/mj2.c:2303:  tk->creation_time = cio_read(cio, 4);	/* Creation Time */
./applications/mj2/mj2.c:2305:  tk->modification_time = cio_read(cio, 4);	/* Modification Time */
./applications/mj2/mj2.c:2307:  tk->track_ID = cio_read(cio, 4);	/* Track ID */
./applications/mj2/mj2.c:2311:  tk->duration = cio_read(cio, 4);	/* Duration */
./applications/mj2/mj2.c:2315:  tk->layer = cio_read(cio, 2);	/* Layer    */
./applications/mj2/mj2.c:2317:  cio_read(cio, 2);			/* Predefined */
./applications/mj2/mj2.c:2319:  tk->volume = cio_read(cio, 2);	/* Volume       */
./applications/mj2/mj2.c:2323:  tk->trans_matrix[0] = cio_read(cio, 4);	/* Transformation matrix for track */
./applications/mj2/mj2.c:2324:  tk->trans_matrix[1] = cio_read(cio, 4);
./applications/mj2/mj2.c:2325:  tk->trans_matrix[2] = cio_read(cio, 4);
./applications/mj2/mj2.c:2326:  tk->trans_matrix[3] = cio_read(cio, 4);
./applications/mj2/mj2.c:2327:  tk->trans_matrix[4] = cio_read(cio, 4);
./applications/mj2/mj2.c:2328:  tk->trans_matrix[5] = cio_read(cio, 4);
./applications/mj2/mj2.c:2329:  tk->trans_matrix[6] = cio_read(cio, 4);
./applications/mj2/mj2.c:2330:  tk->trans_matrix[7] = cio_read(cio, 4);
./applications/mj2/mj2.c:2331:  tk->trans_matrix[8] = cio_read(cio, 4);
./applications/mj2/mj2.c:2333:  tk->visual_w = cio_read(cio, 4);	/* Video Visual Width  */
./applications/mj2/mj2.c:2335:  tk->visual_h = cio_read(cio, 4);	/* Video Visual Height */
./applications/mj2/mj2.c:2357:  cio_write(cio, MJ2_TRAK, 4);	/* TRAK       */
./applications/mj2/mj2.c:2364:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:2410:  cio_write(cio, MJ2_MVHD, 4);	/* MVHD       */
./applications/mj2/mj2.c:2412:  cio_write(cio, 0, 4);		/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:2417:  cio_write(cio, movie->creation_time, 4);	/* Creation Time */
./applications/mj2/mj2.c:2419:  cio_write(cio, movie->modification_time, 4);	/* Modification Time */
./applications/mj2/mj2.c:2421:  cio_write(cio, movie->timescale, 4);	/* Timescale */
./applications/mj2/mj2.c:2433:  cio_write(cio, movie->duration, 4);
./applications/mj2/mj2.c:2435:  cio_write(cio, movie->rate, 4);	/* Rate to play presentation    */
./applications/mj2/mj2.c:2437:  cio_write(cio, movie->volume, 2);	/* Volume       */
./applications/mj2/mj2.c:2439:  cio_write(cio, 0, 2);		/* Reserved */
./applications/mj2/mj2.c:2440:  cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:2441:  cio_write(cio, 0, 4);		/* Reserved */
./applications/mj2/mj2.c:2443:  cio_write(cio, movie->trans_matrix[0], 4);	/* Transformation matrix for video */
./applications/mj2/mj2.c:2444:  cio_write(cio, movie->trans_matrix[1], 4);
./applications/mj2/mj2.c:2445:  cio_write(cio, movie->trans_matrix[2], 4);
./applications/mj2/mj2.c:2446:  cio_write(cio, movie->trans_matrix[3], 4);
./applications/mj2/mj2.c:2447:  cio_write(cio, movie->trans_matrix[4], 4);
./applications/mj2/mj2.c:2448:  cio_write(cio, movie->trans_matrix[5], 4);
./applications/mj2/mj2.c:2449:  cio_write(cio, movie->trans_matrix[6], 4);
./applications/mj2/mj2.c:2450:  cio_write(cio, movie->trans_matrix[7], 4);
./applications/mj2/mj2.c:2451:  cio_write(cio, movie->trans_matrix[8], 4);
./applications/mj2/mj2.c:2453:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:2454:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:2455:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:2456:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:2457:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:2458:  cio_write(cio, 0, 4);		/* Pre-defined */
./applications/mj2/mj2.c:2468:  cio_write(cio, movie->next_tk_id, 4);	/* ID of Next track to be added */
./applications/mj2/mj2.c:2472:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:2493:  if (0 != cio_read(cio, 4)) {	/* Version = 0, flags = 0 */
./applications/mj2/mj2.c:2497:  movie->creation_time = cio_read(cio, 4);	/* Creation Time */
./applications/mj2/mj2.c:2499:  movie->modification_time = cio_read(cio, 4);	/* Modification Time */
./applications/mj2/mj2.c:2501:  movie->timescale = cio_read(cio, 4);	/* Timescale */
./applications/mj2/mj2.c:2503:  movie->duration = cio_read(cio, 4);	/* Duration */
./applications/mj2/mj2.c:2505:  movie->rate = cio_read(cio, 4);		/* Rate to play presentation    */
./applications/mj2/mj2.c:2507:  movie->volume = cio_read(cio, 2);		/* Volume       */
./applications/mj2/mj2.c:2511:  movie->trans_matrix[0] = cio_read(cio, 4);	/* Transformation matrix for video */
./applications/mj2/mj2.c:2512:  movie->trans_matrix[1] = cio_read(cio, 4);
./applications/mj2/mj2.c:2513:  movie->trans_matrix[2] = cio_read(cio, 4);
./applications/mj2/mj2.c:2514:  movie->trans_matrix[3] = cio_read(cio, 4);
./applications/mj2/mj2.c:2515:  movie->trans_matrix[4] = cio_read(cio, 4);
./applications/mj2/mj2.c:2516:  movie->trans_matrix[5] = cio_read(cio, 4);
./applications/mj2/mj2.c:2517:  movie->trans_matrix[6] = cio_read(cio, 4);
./applications/mj2/mj2.c:2518:  movie->trans_matrix[7] = cio_read(cio, 4);
./applications/mj2/mj2.c:2519:  movie->trans_matrix[8] = cio_read(cio, 4);
./applications/mj2/mj2.c:2523:  movie->next_tk_id = cio_read(cio, 4);	/* ID of Next track to be added */
./applications/mj2/mj2.c:2546:  cio_write(cio, MJ2_MOOV, 4);	/* MOOV       */
./applications/mj2/mj2.c:2556:  cio_write(cio, box.length, 4);	/* L          */
./applications/mj2/mj2.c:2624:  fread(src,300,1, file);  
./applications/mj2/mj2.c:2643:  fread(src,30,1,file);
./applications/mj2/mj2.c:2694:    fsresult = fread(src,8,1,file);
./applications/mj2/mj2.c:2705:  fsresult = fread(src,box.length,1,file);
./applications/OPJViewer/source/OPJViewer.h:275:		OPJDecoThread *CreateDecoThread(void);
./applications/OPJViewer/source/OPJViewer.h:276:		OPJEncoThread *CreateEncoThread(void);
./applications/OPJViewer/source/OPJViewer.h:328:	OPJParseThread *CreateParseThread(wxTreeItemId parentid = 0x00, OPJChildFrame *subframe = NULL);
./applications/OPJViewer/source/OPJViewer.h:592:    OPJEncoThread(OPJCanvas *canvas);
./applications/OPJViewer/source/OPJViewer.h:612:    OPJDecoThread(OPJCanvas *canvas);
./applications/OPJViewer/source/OPJViewer.h:632:    OPJParseThread(OPJMarkerTree *tree, wxTreeItemId parentid = 0x00);
./applications/OPJViewer/source/OPJViewer.cpp:1021:		OPJDecoThread *dthread = currframe->m_canvas->CreateDecoThread();
./applications/OPJViewer/source/OPJViewer.cpp:1273:	OPJEncoThread *ethread = ((OPJChildFrame *) GetActiveChild())->m_canvas->CreateEncoThread();
./applications/OPJViewer/source/OPJViewer.cpp:1431:    OPJDecoThread *dthread = CreateDecoThread();
./applications/OPJViewer/source/OPJViewer.cpp:1443:OPJDecoThread *OPJCanvas::CreateDecoThread(void)
./applications/OPJViewer/source/OPJViewer.cpp:1445:    OPJDecoThread *dthread = new OPJDecoThread(this);
./applications/OPJViewer/source/OPJViewer.cpp:1456:OPJEncoThread *OPJCanvas::CreateEncoThread(void)
./applications/OPJViewer/source/OPJViewer.cpp:1458:    OPJEncoThread *ethread = new OPJEncoThread(this);
./applications/OPJViewer/source/OPJThreads.cpp:33:OPJEncoThread::OPJEncoThread(OPJCanvas *canvas)
./applications/OPJViewer/source/OPJThreads.cpp:34:        : wxThread()
./applications/OPJViewer/source/OPJThreads.cpp:133:OPJDecoThread::OPJDecoThread(OPJCanvas *canvas)
./applications/OPJViewer/source/OPJThreads.cpp:134:        : wxThread()
./applications/OPJViewer/source/OPJThreads.cpp:289:OPJParseThread::OPJParseThread(OPJMarkerTree *tree, wxTreeItemId parentid)
./applications/OPJViewer/source/OPJThreads.cpp:290:        : wxThread()
./applications/OPJViewer/source/OPJThreads.cpp:450:    OPJParseThread *pthread = CreateParseThread(0x00, subframe);
./applications/OPJViewer/source/OPJThreads.cpp:743:OPJParseThread *OPJMarkerTree::CreateParseThread(wxTreeItemId parentid, OPJChildFrame *subframe)
./applications/OPJViewer/source/OPJThreads.cpp:745:    OPJParseThread *pthread = new OPJParseThread(this, parentid);
./applications/OPJViewer/source/OPJThreads.cpp:799:		OPJParseThread *pthread = CreateParseThread(item);
./applications/jpip/libopenjpip/jpipstream_manager.c:68:  if( fwrite( codestream, streamlen, 1, fp) != 1)
./applications/jpip/libopenjpip/auxtrans_manager.c:59:    auxtrans.tcplistensock = open_listeningsocket( tcp_auxport);
./applications/jpip/libopenjpip/auxtrans_manager.c:72:    if( close_socket( auxtrans.tcplistensock) != 0)
./applications/jpip/libopenjpip/auxtrans_manager.c:76:    if( close_socket( auxtrans.udplistensock) != 0)
./applications/jpip/libopenjpip/auxtrans_manager.c:193:  while((connected_socket = accept_socket( auxresponse->listensock)) != -1){
./applications/jpip/libopenjpip/auxtrans_manager.c:214:      if( close_socket( connected_socket) != 0)
./applications/jpip/libopenjpip/msgqueue_manager.c:491:    if( write( tmpfd, ( Byte4_t *)&seg, 1) != 1){
./applications/jpip/libopenjpip/msgqueue_manager.c:508:  if( write( tmpfd, data, msg->length) < 1){
./applications/jpip/libopenjpip/msgqueue_manager.c:521:  if( write( tmpfd, phld->TBox, 4) < 1){
./applications/jpip/libopenjpip/msgqueue_manager.c:528:  if( write( tmpfd, phld->OrigBH, phld->OrigBHlen) < 1){
./applications/jpip/libopenjpip/msgqueue_manager.c:542:    if( write( tmpfd, ( Byte4_t *)&seg, 1) != 1){
./applications/jpip/libopenjpip/byte_manager.c:64:  if( read( fd, data, size) != size){
./applications/jpip/libopenjpip/byte_manager.c:83:  if( read( fd, &code, 1) != 1){
./applications/jpip/libopenjpip/target_manager.c:278:  if( read( fd, data, 12) != 12){
./applications/jpip/libopenjpip/target_manager.c:339:  int written = write( *fd, ptr, size*nmemb);
./applications/jpip/libopenjpip/sock_manager.h:51:SOCKET open_listeningsocket( int port);
./applications/jpip/libopenjpip/sock_manager.h:57: * @return                 connected socket (-1 if error occurs)
./applications/jpip/libopenjpip/sock_manager.h:59:SOCKET accept_socket( SOCKET listening_socket);
./applications/jpip/libopenjpip/sock_manager.h:103:int close_socket( SOCKET sock);
./applications/jpip/libopenjpip/openjpip.c:161:    if( fwrite( jpipstream, len_of_jpipstream, 1, FCGI_stdout) != 1)
./applications/jpip/libopenjpip/openjpip.c:178:    if( write( fd, EOR, 3) != 3)
./applications/jpip/libopenjpip/openjpip.c:220:  record->listening_socket = open_listeningsocket( port);
./applications/jpip/libopenjpip/openjpip.c:233:  if( close_socket( (*rec)->listening_socket) != 0)
./applications/jpip/libopenjpip/openjpip.c:243:  client = accept_socket( rec->listening_socket);
./applications/jpip/libopenjpip/openjpip.c:297:  if( close_socket(client) != 0){
./applications/jpip/libopenjpip/openjpip.c:338:  if( read( infd, dec->jpipstream, dec->jpiplen) != (int)dec->jpiplen){
./applications/jpip/libopenjpip/openjpip.c:377: if( write( outfd, dec->jp2kstream, dec->jp2klen) != (int)dec->jp2klen)
./applications/jpip/libopenjpip/openjpip.c:423:  if( read( fd, data, 12) != 12){
./applications/jpip/libopenjpip/sock_manager.c:57:SOCKET open_listeningsocket( int port)
./applications/jpip/libopenjpip/sock_manager.c:63:  listening_socket = socket(AF_INET, SOCK_STREAM, 0);
./applications/jpip/libopenjpip/sock_manager.c:79:  if ( bind(listening_socket, (struct sockaddr *)&sin, sizeof(sin)) < 0 ){
./applications/jpip/libopenjpip/sock_manager.c:81:    close_socket(listening_socket);
./applications/jpip/libopenjpip/sock_manager.c:85:  if( listen(listening_socket, SOMAXCONN) == -1){
./applications/jpip/libopenjpip/sock_manager.c:87:    close_socket(listening_socket);
./applications/jpip/libopenjpip/sock_manager.c:95:SOCKET accept_socket( SOCKET listening_socket)
./applications/jpip/libopenjpip/sock_manager.c:175:int close_socket( SOCKET sock)
./applications/jpip/libopenjpip/sock_manager.c:178:  return closesocket( sock);
./applications/jpip/util/addXMLinJP2.c:96:  fwrite( type, 4, 1, fp);
./applications/jpip/util/addXMLinJP2.c:97:  fwrite( xmldata, (size_t)fsize, 1, fp);
./applications/jpip/util/addXMLinJP2.c:122:  if( fread( data, 12, 1, fp) != 1){
./applications/jpip/util/addXMLinJP2.c:171:  if( fread( data, (size_t)*fsize, 1, fp) != 1){

== http:// ==
./applications/codec/windirent.h:76: * for example at: http://ftp.uni-mannheim.de/ftp/GNU/dirent/dirent.tar.gz.
./applications/OPJViewer/source/about_htm.h:22:"<center><font size=+0 color=#000000><a href=\"http://www.openjpeg.org/\">OpenJPEG</a></font></center>"
./applications/OPJViewer/source/about_htm.h:47:"<font size=-2 color=#444444>OpenJPEG is &copy; 2002-2008 <a href=\"http://www.tele.ucl.ac.be/\">TELE</a> - <a href=\"http://www.uclouvain.be/\">Universite' Catholique de Louvain</a></font><br>"
./applications/OPJViewer/source/about_htm.h:48:"<font size=-2 color=#444444>OPJViewer is &copy; 2007-2008 <a href=\"http://dsplab.diei.unipg.it/\">DSPLab</a> - <a href=\"http://www.unipg.it/\">Universita' degli studi di Perugia</a></font>"
./applications/jpip/libopenjpip/target_manager.c:258:  if( strncmp( filepath, "http://", 7) == 0){
./applications/jpip/mainpage.h:36: * ( For more info about JPIP, check the website: http://www.jpeg.org/jpeg2000/j2kpart9.html)\n
./applications/jpip/mainpage.h:54: *  - FastCGI development kit (C libraries) at server (http://www.fastcgi.com)
./applications/jpip/util/opj_server.c:36: *    FastCGI development kit (http://www.fastcgi.com).

== encryption ==

== sql() ==
./applications/jpip/libopenjpip/query_parser.c:61:query_param_t * get_initquery(void);
./applications/jpip/libopenjpip/query_parser.c:86:query_param_t * parse_query( char *query_string)
./applications/jpip/libopenjpip/query_parser.c:91:  query_param = get_initquery();
./applications/jpip/libopenjpip/query_parser.c:154:query_param_t * get_initquery(void)
./applications/jpip/libopenjpip/query_parser.c:404:void delete_query( query_param_t **query)
./applications/jpip/libopenjpip/query_parser.h:80:query_param_t * parse_query( char *query_string);
./applications/jpip/libopenjpip/query_parser.h:95:void delete_query( query_param_t **query);
./applications/jpip/libopenjpip/openjpip.c:84:  qr->query = parse_query( query_string);
./applications/jpip/libopenjpip/openjpip.c:187:  delete_query( &((*qr)->query));

== tmp() ==
./applications/jpip/libopenjpip/openjpip.c:130:  const char tmpfname[] = "/tmp/tmpjpipstream.jpp";

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./libopenjpeg/pi.h:47:FIXME: documentation
./libopenjpeg/pi.h:55:FIXME: documentation
./libopenjpeg/mqc.c:67:FIXME: documentation ???
./libopenjpeg/mqc.c:73:FIXME: documentation ???
./libopenjpeg/tcd.c:341:							/* FIXME: mqc_init_enc and mqc_byteout underrun the buffer if we don't do this. Why? */
./libopenjpeg/tcd.c:604:							/* FIXME: mqc_init_enc and mqc_byteout underrun the buffer if we don't do this. Why? */
./libopenjpeg/tcd.c:1154:					/* TODO: what to do with l ??? seek / tell ??? */
./libopenjpeg/t1.c:1253:		pass->rate = mqc_numbytes(mqc) + correction;	/* FIXME */
./libopenjpeg/t1.c:1315:		/* FIXME: slviewer gets here with a null pointer. Why? Partially downloaded and/or corrupt textures? */
./libopenjpeg/opj_malloc.h:71:/* FIXME: These should be set with cmake tests, but we're currently not requiring use of cmake */
./libopenjpeg/t2.c:378:		/** TODO : check the Nsop value */
./libopenjpeg/t2.c:637:		/* TODO: throw an error */
./libopenjpeg/t2.c:727:		/* TODO: throw an error */
./libopenjpeg/pi.c:421:		/* TODO: throw an error */
./libopenjpeg/pi.c:439:			/* TODO: throw an error */
./libopenjpeg/pi.c:454:				/* TODO: throw an error */
./libopenjpeg/pi.c:507:				/* TODO: throw an error */
./libopenjpeg/tcd.h:45:FIXME: documentation
./libopenjpeg/tcd.h:58:FIXME: documentation
./libopenjpeg/tcd.h:67:FIXME: documentation
./libopenjpeg/tcd.h:77:FIXME: documentation
./libopenjpeg/tcd.h:103:FIXME: documentation
./libopenjpeg/tcd.h:117:FIXME: documentation
./libopenjpeg/tcd.h:128:FIXME: documentation
./libopenjpeg/tcd.h:138:FIXME: documentation
./libopenjpeg/tcd.h:149:FIXME: documentation
./libopenjpeg/tcd.h:163:FIXME: documentation
./libopenjpeg/jp2.c:178:		return OPJ_FALSE; /* TODO: actually check jp2_read_boxhdr's return value */
./libopenjpeg/jp2.c:570:	if((n = (unsigned short)cio_read(cio, 2)) == 0) return OPJ_FALSE; /* szukw000: FIXME */
./libopenjpeg/dwt.c:73:/* FIXME: What is this constant? */
./libopenjpeg/t1_generate_luts.c:236:	/* FIXME FIXME FIXME */
./applications/codec/image_to_j2k.c:1726:        if( res < (size_t)codestream_length ) { /* FIXME */
./applications/codec/image_to_j2k.c:1787:        if( res < (size_t)codestream_length ) { /* FIXME */
./applications/JavaOpenJPEG/JavaOpenJPEG.c:1766:/* Special behaviour to deal with signed elements ?? XXXXX */
./applications/mj2/meta_out.c:2096:	   as : 0xXXXXXXXX-0011-0010-8000-00AA00389B71, where the Xs are the boxtype in hex.  However,
./applications/jpip/libopenjpip/cachemodel_manager.c:118:  int n; /* FIXME: Is this large enough ? */
./applications/jpip/libopenjpip/cachemodel_manager.c:204:  int n; /* FIXME: is this large enough ? */
./applications/jpip/libopenjpip/index_manager.c:708:/* TODO: what is this code doing ? will all compiler be able to optimize the following ? */
./applications/jpip/libopenjpip/jp2k_encoder.c:206:      if( ptr->aux > mindeclev){ /* FIXME: pointer comparison ? */
./applications/jpip/libopenjpip/openjpip.c:185:  /* TODO: record client preferences if necessary*/
./applications/jpip/libopenjpip/jpip_parser.c:334:      /* FIXME: The following code is suspicious it implicitely cast an unsigned int to int, which truncates values */

== unsafe input mechanisms ==

