Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
(unsupported type 'python')

== files() ==
./src/cryptography/hazmat/primitives/constant_time.py:13:with open(os.path.join(os.path.dirname(__file__), "src/constant_time.h")) as f:
./src/cryptography/hazmat/primitives/constant_time.py:16:with open(os.path.join(os.path.dirname(__file__), "src/constant_time.c")) as f:
./src/cryptography/hazmat/primitives/padding.py:18:with open(os.path.join(os.path.dirname(__file__), "src/padding.h")) as f:
./src/cryptography/hazmat/primitives/padding.py:21:with open(os.path.join(os.path.dirname(__file__), "src/padding.c")) as f:
./src/cryptography/hazmat/bindings/openssl/osrandom_engine.py:84:    urandom_fd = open("/dev/urandom", O_RDONLY);
./tests/hazmat/backends/test_openssl.py:247:        with engine_name.open('w') as out:
./docs/development/custom-vectors/seed/generate_seed.py:20:    with open(filename, "r") as f:
./docs/development/custom-vectors/seed/generate_seed.py:51:    with open(filename, "w") as f:
./docs/development/custom-vectors/seed/verify_seed.py:18:    with open(filename, "r") as f:
./docs/development/custom-vectors/idea/generate_idea.py:20:    with open(filename, "r") as f:
./docs/development/custom-vectors/idea/generate_idea.py:52:    with open(filename, "w") as f:
./docs/development/custom-vectors/idea/verify_idea.py:20:    with open(filename, "r") as f:
./docs/development/custom-vectors/cast5/generate_cast5.py:26:    vector_file = open(filename, "r")
./docs/development/custom-vectors/cast5/generate_cast5.py:57:    with open(filename, "w") as f:

== logging() ==
./src/cryptography/utils.py:75:            warnings.warn(obj.message, obj.warning_class, stacklevel=2)
./src/cryptography/hazmat/backends/openssl/rsa.py:106:        _handle_rsa_enc_dec_error(backend, key)
./src/cryptography/hazmat/backends/openssl/rsa.py:122:        _handle_rsa_enc_dec_error(backend, key)
./src/cryptography/hazmat/backends/openssl/rsa.py:127:def _handle_rsa_enc_dec_error(backend, key):
./src/cryptography/hazmat/backends/openssl/backend.py:303:            code = self._lib.ERR_get_error()
./src/cryptography/hazmat/backends/openssl/backend.py:314:    def _unknown_error(self, error):
./src/cryptography/hazmat/backends/openssl/backend.py:716:                self._handle_key_loading_error()
./src/cryptography/hazmat/backends/openssl/backend.py:798:                self._handle_key_loading_error()
./src/cryptography/hazmat/backends/openssl/backend.py:840:                self._handle_key_loading_error()
./src/cryptography/hazmat/backends/openssl/backend.py:855:    def _handle_key_loading_error(self):
./src/cryptography/hazmat/backends/openssl/ciphers.py:155:                raise self._backend._unknown_error(errors[0])
./src/cryptography/hazmat/bindings/openssl/osrandom_engine.py:49:        ERR_put_error(
./src/cryptography/hazmat/bindings/openssl/osrandom_engine.py:107:            ERR_put_error(
./src/cryptography/hazmat/bindings/openssl/osrandom_engine.py:179:        ERR_clear_error();
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:154:int X509_STORE_CTX_get_error(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:155:void X509_STORE_CTX_set_error(X509_STORE_CTX *, int);
./src/cryptography/hazmat/bindings/openssl/err.py:246:unsigned long ERR_get_error(void);
./src/cryptography/hazmat/bindings/openssl/err.py:247:unsigned long ERR_peek_error(void);
./src/cryptography/hazmat/bindings/openssl/err.py:248:unsigned long ERR_peek_last_error(void);
./src/cryptography/hazmat/bindings/openssl/err.py:258:void ERR_put_error(int, int, int, const char *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:187:int SSL_get_error(const SSL *, int);
./tests/hazmat/primitives/test_hkdf.py:95:    def test_unicode_typeerror(self, backend):
./tests/hazmat/primitives/test_hkdf.py:196:    def test_unicode_error(self, backend):
./tests/hazmat/backends/test_openssl.py:111:            backend._lib.ERR_put_error(backend._lib.ERR_LIB_EVP, 0, 0,
./tests/hazmat/backends/test_openssl.py:114:        assert backend._lib.ERR_peek_error() != 0
./tests/hazmat/backends/test_openssl.py:118:        assert backend._lib.ERR_peek_error() == 0
./tests/hazmat/backends/test_openssl.py:122:        backend._lib.ERR_put_error(
./tests/hazmat/backends/test_openssl.py:131:        exc = backend._unknown_error(errors[0])
./tests/hazmat/backends/test_openssl.py:160:        backend._lib.ERR_put_error(0, 0, 1,

== environment() ==
./tests/hazmat/bindings/test_openssl.py:139:        monkeypatch.setenv('PYCA_WINDOWS_LINK_TYPE', 'static')

== privileged() ==

== networking() ==
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:60:static const int X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE;
./src/cryptography/hazmat/primitives/constant_time.py:14:    TYPES = f.read()
./src/cryptography/hazmat/primitives/constant_time.py:17:    FUNCTIONS = f.read()
./src/cryptography/hazmat/primitives/padding.py:19:    TYPES = f.read()
./src/cryptography/hazmat/primitives/padding.py:22:    FUNCTIONS = f.read()
./src/cryptography/hazmat/bindings/openssl/osrandom_engine.py:104:            n = read(urandom_fd, buffer, (size_t)size);
./src/cryptography/hazmat/bindings/openssl/bio.py:108:BIO_METHOD *BIO_s_socket(void);
./src/cryptography/hazmat/bindings/openssl/bio.py:109:BIO *BIO_new_socket(int, int);
./src/cryptography/hazmat/bindings/openssl/bio.py:121:int BIO_read(BIO *, void *, int);
./src/cryptography/hazmat/bindings/openssl/bio.py:123:int BIO_write(BIO *, const void *, int);
./src/cryptography/hazmat/bindings/openssl/bio.py:142:int BIO_should_read(BIO *);
./src/cryptography/hazmat/bindings/openssl/bio.py:143:int BIO_should_write(BIO *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:179:int SSL_write(SSL *, const void *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:180:int SSL_read(SSL *, void *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:243:int SSL_want_read(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:244:int SSL_want_write(const SSL *);
./tests/test_x509.py:30:        loader=lambda pemfile: loader(pemfile.read(), backend),
./tests/hazmat/primitives/test_rsa.py:1814:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_rsa.py:1871:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_rsa.py:1884:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_dsa.py:819:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_dsa.py:849:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_dsa.py:872:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_dsa.py:887:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_dsa.py:902:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_dsa.py:917:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_dsa.py:932:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_dsa.py:950:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_serialization.py:50:                derfile.read(), password, backend
./tests/hazmat/primitives/test_serialization.py:73:                derfile.read(), password, backend
./tests/hazmat/primitives/test_serialization.py:95:                derfile.read(), password, backend
./tests/hazmat/primitives/test_serialization.py:120:                    derfile.read(), password, backend
./tests/hazmat/primitives/test_serialization.py:140:                    derfile.read(), password, backend
./tests/hazmat/primitives/test_serialization.py:162:                    derfile.read(), password, backend
./tests/hazmat/primitives/test_serialization.py:244:                derfile.read(), backend
./tests/hazmat/primitives/test_serialization.py:272:                derfile.read(), backend
./tests/hazmat/primitives/test_serialization.py:287:                derfile.read(), backend
./tests/hazmat/primitives/test_serialization.py:327:                pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_serialization.py:350:                pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_serialization.py:373:                pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_serialization.py:395:                pemfile.read().encode(), backend
./tests/hazmat/primitives/test_serialization.py:417:                pemfile.read().encode(), backend
./tests/hazmat/primitives/test_serialization.py:431:                pemfile.read().encode(), backend
./tests/hazmat/primitives/test_serialization.py:444:                pemfile.read().encode(), b"123456", backend
./tests/hazmat/primitives/test_serialization.py:497:                    pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_serialization.py:516:                    pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_serialization.py:538:                    pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_serialization.py:705:                pemfile.read().encode(), b"foobar", backend
./tests/hazmat/primitives/test_serialization.py:764:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_serialization.py:823:                    pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_serialization.py:839:                    pemfile.read().encode(), password, backend
./tests/hazmat/primitives/test_ec.py:430:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_ec.py:458:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_ec.py:479:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_ec.py:495:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_ec.py:512:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_ec.py:529:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_ec.py:546:                pemfile.read().encode(), None, backend
./tests/hazmat/primitives/test_ec.py:567:            lambda pemfile: pemfile.read().encode()
./tests/hazmat/primitives/test_ec.py:584:                pemfile.read().encode(), backend
./tests/hazmat/primitives/test_ec.py:601:                pemfile.read().encode(), backend
./tests/hazmat/primitives/test_ec.py:615:                pemfile.read().encode(), backend
./tests/hazmat/backends/test_openssl.py:231:            sys.stdout.write(backend._ffi.string(name).decode('ascii'))
./tests/hazmat/backends/test_openssl.py:258:        assert engine_name.read().encode('ascii') == osrandom_engine_name
./tests/hazmat/backends/test_openssl.py:475:                        pemfile.read().encode(), password
./docs/development/custom-vectors/seed/generate_seed.py:21:        vector_file = f.read().splitlines()
./docs/development/custom-vectors/seed/generate_seed.py:52:        f.write(data)
./docs/development/custom-vectors/seed/verify_seed.py:19:        vector_file = f.read().splitlines()
./docs/development/custom-vectors/idea/generate_idea.py:21:        vector_file = f.read().splitlines()
./docs/development/custom-vectors/idea/generate_idea.py:53:        f.write(data)
./docs/development/custom-vectors/idea/verify_idea.py:21:        vector_file = f.read().splitlines()
./docs/development/custom-vectors/cast5/generate_cast5.py:58:        f.write(data)

== http:// ==
./src/cryptography/hazmat/primitives/asymmetric/dh.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./src/cryptography/hazmat/backends/openssl/x509.py:5:#    http://www.apache.org/licenses/LICENSE-2.0
./src/cryptography/hazmat/bindings/openssl/asn1.py:21: * http://paste.pound-python.org/show/iJcTUMkKeBeS6yXpZWUU/
./src/cryptography/hazmat/bindings/openssl/bignum.py:23: * http://paste.pound-python.org/show/iJcTUMkKeBeS6yXpZWUU/
./src/cryptography/hazmat/bindings/openssl/binding.py:41:        # (http://marc.info/?l=openssl-users&m=135361825921871)
./tests/utils.py:491:# http://tools.ietf.org/html/rfc4492#appendix-A
./tests/test_utils.py:200:    # Vectors taken from http://info.isl.ntt.co.jp/crypt/eng/camellia/
./tests/test_utils.py:240:    # Vectors taken from http://info.isl.ntt.co.jp/crypt/eng/camellia/
./tests/test_utils.py:255:        # http://tools.ietf.org/html/rfc1321
./tests/test_utils.py:300:        # http://tools.ietf.org/html/rfc1321
./tests/hazmat/primitives/test_dh.py:5:#    http://www.apache.org/licenses/LICENSE-2.0

== encryption ==
./src/cryptography/hazmat/backends/openssl/ec.py:71:        ec_cdata, backend._lib.OPENSSL_EC_NAMED_CURVE
./src/cryptography/hazmat/backends/openssl/x509.py:32:        res = self._backend._lib.i2d_X509_bio(
./src/cryptography/hazmat/backends/openssl/x509.py:42:        version = self._backend._lib.X509_get_version(self._x509)
./src/cryptography/hazmat/backends/openssl/x509.py:54:        asn1_int = self._backend._lib.X509_get_serialNumber(self._x509)
./src/cryptography/hazmat/backends/openssl/x509.py:64:        pkey = self._backend._lib.X509_get_pubkey(self._x509)
./src/cryptography/hazmat/backends/openssl/x509.py:72:        asn1_time = self._backend._lib.X509_get_notBefore(self._x509)
./src/cryptography/hazmat/backends/openssl/x509.py:77:        asn1_time = self._backend._lib.X509_get_notAfter(self._x509)
./src/cryptography/hazmat/backends/openssl/x509.py:98:        issuer = self._backend._lib.X509_get_issuer_name(self._x509)
./src/cryptography/hazmat/backends/openssl/x509.py:104:        subject = self._backend._lib.X509_get_subject_name(self._x509)
./src/cryptography/hazmat/backends/openssl/x509.py:109:        count = self._backend._lib.X509_NAME_entry_count(x509_name)
./src/cryptography/hazmat/backends/openssl/x509.py:112:            entry = self._backend._lib.X509_NAME_get_entry(x509_name, x)
./src/cryptography/hazmat/backends/openssl/x509.py:113:            obj = self._backend._lib.X509_NAME_ENTRY_get_object(entry)
./src/cryptography/hazmat/backends/openssl/x509.py:115:            data = self._backend._lib.X509_NAME_ENTRY_get_data(entry)
./src/cryptography/hazmat/backends/openssl/x509.py:122:                buf, lambda buf: self._backend._lib.OPENSSL_free(buf[0])
./src/cryptography/hazmat/backends/openssl/backend.py:82:        self._lib.OpenSSL_add_all_algorithms()
./src/cryptography/hazmat/backends/openssl/backend.py:84:        self._lib.SSL_library_init()
./src/cryptography/hazmat/backends/openssl/backend.py:86:        self._lib.SSL_load_error_strings()
./src/cryptography/hazmat/backends/openssl/backend.py:340:            self._lib.OPENSSL_free(hex_cdata)
./src/cryptography/hazmat/backends/openssl/backend.py:587:        if (self._lib.OPENSSL_VERSION_NUMBER < 0x1000000f and
./src/cryptography/hazmat/backends/openssl/backend.py:664:        if self._lib.OPENSSL_VERSION_NUMBER < 0x1000000f:
./src/cryptography/hazmat/backends/openssl/backend.py:670:        if self._lib.OPENSSL_VERSION_NUMBER < 0x1000000f:
./src/cryptography/hazmat/backends/openssl/backend.py:809:        x509 = self._ffi.gc(x509, self._lib.X509_free)
./src/cryptography/hazmat/backends/openssl/backend.py:814:        x509 = self._lib.d2i_X509_bio(mem_bio.bio, self._ffi.NULL)
./src/cryptography/hazmat/backends/openssl/backend.py:819:        x509 = self._ffi.gc(x509, self._lib.X509_free)
./src/cryptography/hazmat/backends/openssl/backend.py:953:            self._lib.OPENSSL_VERSION_NUMBER < 0x009080df and
./src/cryptography/hazmat/bindings/openssl/hmac.py:32:#if OPENSSL_VERSION_NUMBER >= 0x010000000
./src/cryptography/hazmat/bindings/openssl/hmac.py:42:#if OPENSSL_VERSION_NUMBER >= 0x010000000
./src/cryptography/hazmat/bindings/openssl/hmac.py:52:#if OPENSSL_VERSION_NUMBER >= 0x010000000
./src/cryptography/hazmat/bindings/openssl/hmac.py:61:#if OPENSSL_VERSION_NUMBER >= 0x010000000
./src/cryptography/hazmat/bindings/openssl/opensslv.py:14:static const int OPENSSL_VERSION_NUMBER;
./src/cryptography/hazmat/bindings/openssl/opensslv.py:15:static const char *const OPENSSL_VERSION_TEXT;
./src/cryptography/hazmat/bindings/openssl/pem.py:39:int PEM_write_bio_X509_REQ(BIO *, X509_REQ *);
./src/cryptography/hazmat/bindings/openssl/pem.py:41:X509_REQ *PEM_read_bio_X509_REQ(BIO *, X509_REQ **, pem_password_cb *, void *);
./src/cryptography/hazmat/bindings/openssl/pem.py:43:X509_CRL *PEM_read_bio_X509_CRL(BIO *, X509_CRL **, pem_password_cb *, void *);
./src/cryptography/hazmat/bindings/openssl/pem.py:45:int PEM_write_bio_X509_CRL(BIO *, X509_CRL *);
./src/cryptography/hazmat/bindings/openssl/pem.py:82:#ifdef OPENSSL_NO_EC
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:23:static const long Cryptography_HAS_X509_V_FLAG_TRUSTED_FIRST;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:24:static const long Cryptography_HAS_X509_V_FLAG_PARTIAL_CHAIN;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:27:static const long Cryptography_HAS_X509_V_FLAG_CHECK_SS_SIGNATURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:31:typedef ... X509_STORE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:32:typedef ... X509_STORE_CTX;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:33:typedef ... X509_VERIFY_PARAM;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:40:static const int X509_V_OK;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:41:static const int X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:42:static const int X509_V_ERR_UNABLE_TO_GET_CRL;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:43:static const int X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:44:static const int X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:45:static const int X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:46:static const int X509_V_ERR_CERT_SIGNATURE_FAILURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:47:static const int X509_V_ERR_CRL_SIGNATURE_FAILURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:48:static const int X509_V_ERR_CERT_NOT_YET_VALID;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:49:static const int X509_V_ERR_CERT_HAS_EXPIRED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:50:static const int X509_V_ERR_CRL_NOT_YET_VALID;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:51:static const int X509_V_ERR_CRL_HAS_EXPIRED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:52:static const int X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:53:static const int X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:54:static const int X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:55:static const int X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:56:static const int X509_V_ERR_OUT_OF_MEM;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:57:static const int X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:58:static const int X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:59:static const int X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:60:static const int X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:61:static const int X509_V_ERR_CERT_CHAIN_TOO_LONG;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:62:static const int X509_V_ERR_CERT_REVOKED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:63:static const int X509_V_ERR_INVALID_CA;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:64:static const int X509_V_ERR_PATH_LENGTH_EXCEEDED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:65:static const int X509_V_ERR_INVALID_PURPOSE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:66:static const int X509_V_ERR_CERT_UNTRUSTED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:67:static const int X509_V_ERR_CERT_REJECTED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:68:static const int X509_V_ERR_SUBJECT_ISSUER_MISMATCH;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:69:static const int X509_V_ERR_AKID_SKID_MISMATCH;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:70:static const int X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:71:static const int X509_V_ERR_KEYUSAGE_NO_CERTSIGN;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:72:static const int X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:73:static const int X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:74:static const int X509_V_ERR_KEYUSAGE_NO_CRL_SIGN;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:75:static const int X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:76:static const int X509_V_ERR_INVALID_NON_CA;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:77:static const int X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:78:static const int X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:79:static const int X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:80:static const int X509_V_ERR_INVALID_EXTENSION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:81:static const int X509_V_ERR_INVALID_POLICY_EXTENSION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:82:static const int X509_V_ERR_NO_EXPLICIT_POLICY;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:83:static const int X509_V_ERR_DIFFERENT_CRL_SCOPE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:84:static const int X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:85:static const int X509_V_ERR_UNNESTED_RESOURCE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:86:static const int X509_V_ERR_PERMITTED_VIOLATION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:87:static const int X509_V_ERR_EXCLUDED_VIOLATION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:88:static const int X509_V_ERR_SUBTREE_MINMAX;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:89:static const int X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:90:static const int X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:91:static const int X509_V_ERR_UNSUPPORTED_NAME_SYNTAX;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:92:static const int X509_V_ERR_CRL_PATH_VALIDATION_ERROR;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:93:static const int X509_V_ERR_SUITE_B_INVALID_VERSION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:94:static const int X509_V_ERR_SUITE_B_INVALID_ALGORITHM;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:95:static const int X509_V_ERR_SUITE_B_INVALID_CURVE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:96:static const int X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:97:static const int X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:98:static const int X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:99:static const int X509_V_ERR_HOSTNAME_MISMATCH;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:100:static const int X509_V_ERR_EMAIL_MISMATCH;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:101:static const int X509_V_ERR_IP_ADDRESS_MISMATCH;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:102:static const int X509_V_ERR_APPLICATION_VERIFICATION;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:105:static const long X509_V_FLAG_CB_ISSUER_CHECK;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:106:static const long X509_V_FLAG_USE_CHECK_TIME;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:107:static const long X509_V_FLAG_CRL_CHECK;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:108:static const long X509_V_FLAG_CRL_CHECK_ALL;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:109:static const long X509_V_FLAG_IGNORE_CRITICAL;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:110:static const long X509_V_FLAG_X509_STRICT;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:111:static const long X509_V_FLAG_ALLOW_PROXY_CERTS;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:112:static const long X509_V_FLAG_POLICY_CHECK;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:113:static const long X509_V_FLAG_EXPLICIT_POLICY;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:114:static const long X509_V_FLAG_INHIBIT_ANY;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:115:static const long X509_V_FLAG_INHIBIT_MAP;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:116:static const long X509_V_FLAG_NOTIFY_POLICY;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:117:static const long X509_V_FLAG_EXTENDED_CRL_SUPPORT;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:118:static const long X509_V_FLAG_USE_DELTAS;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:119:static const long X509_V_FLAG_CHECK_SS_SIGNATURE;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:120:static const long X509_V_FLAG_TRUSTED_FIRST;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:121:static const long X509_V_FLAG_SUITEB_128_LOS_ONLY;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:122:static const long X509_V_FLAG_SUITEB_192_LOS;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:123:static const long X509_V_FLAG_SUITEB_128_LOS;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:124:static const long X509_V_FLAG_PARTIAL_CHAIN;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:128:int X509_verify_cert(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:130:/* X509_STORE */
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:131:X509_STORE *X509_STORE_new(void);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:132:void X509_STORE_free(X509_STORE *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:133:int X509_STORE_add_cert(X509_STORE *, X509 *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:134:int X509_STORE_load_locations(X509_STORE *, const char *, const char *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:135:int X509_STORE_set_default_paths(X509_STORE *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:137:/* X509_STORE_CTX */
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:138:X509_STORE_CTX *X509_STORE_CTX_new(void);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:139:void X509_STORE_CTX_cleanup(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:140:void X509_STORE_CTX_free(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:141:int X509_STORE_CTX_init(X509_STORE_CTX *, X509_STORE *, X509 *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:143:void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:145:void X509_STORE_CTX_set_cert(X509_STORE_CTX *, X509 *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:146:void X509_STORE_CTX_set_chain(X509_STORE_CTX *,Cryptography_STACK_OF_X509 *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:147:X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:148:void X509_STORE_CTX_set0_param(X509_STORE_CTX *, X509_VERIFY_PARAM *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:149:int X509_STORE_CTX_set_default(X509_STORE_CTX *, const char *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:150:void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:151:                                  int (*)(int, X509_STORE_CTX *));
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:152:Cryptography_STACK_OF_X509 *X509_STORE_CTX_get_chain(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:153:Cryptography_STACK_OF_X509 *X509_STORE_CTX_get1_chain(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:154:int X509_STORE_CTX_get_error(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:155:void X509_STORE_CTX_set_error(X509_STORE_CTX *, int);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:156:int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:157:X509 *X509_STORE_CTX_get_current_cert(X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:158:int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *, int, void *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:159:void *X509_STORE_CTX_get_ex_data(X509_STORE_CTX *, int);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:161:/* X509_VERIFY_PARAM */
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:162:X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:163:int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *, unsigned long);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:164:int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *, unsigned long);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:165:unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:166:int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *, int);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:167:int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *, int);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:168:void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *, time_t);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:169:int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *, ASN1_OBJECT *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:170:int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:172:void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *, int);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:173:int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:177:/* X509_STORE_CTX */
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:178:void X509_STORE_CTX_set0_crls(X509_STORE_CTX *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:179:                              Cryptography_STACK_OF_X509_CRL *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:181:/* X509_VERIFY_PARAM */
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:182:int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *, const char *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:184:void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *, unsigned int);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:185:int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *, const char *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:187:int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *, const unsigned char *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:189:int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *, const char *);
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:194:#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:198:static const long X509_V_ERR_SUITE_B_INVALID_VERSION = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:199:static const long X509_V_ERR_SUITE_B_INVALID_ALGORITHM = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:200:static const long X509_V_ERR_SUITE_B_INVALID_CURVE = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:201:static const long X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:202:static const long X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:203:static const long X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:204:static const long X509_V_ERR_HOSTNAME_MISMATCH = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:205:static const long X509_V_ERR_EMAIL_MISMATCH = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:206:static const long X509_V_ERR_IP_ADDRESS_MISMATCH = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:210:#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:214:/* X509_V_FLAG_TRUSTED_FIRST is also new in 1.0.2+, but it is added separately
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:216:static const long X509_V_FLAG_SUITEB_128_LOS_ONLY = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:217:static const long X509_V_FLAG_SUITEB_192_LOS = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:218:static const long X509_V_FLAG_SUITEB_128_LOS = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:220:int (*X509_VERIFY_PARAM_set1_host)(X509_VERIFY_PARAM *, const char *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:222:int (*X509_VERIFY_PARAM_set1_email)(X509_VERIFY_PARAM *, const char *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:224:int (*X509_VERIFY_PARAM_set1_ip)(X509_VERIFY_PARAM *, const unsigned char *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:226:int (*X509_VERIFY_PARAM_set1_ip_asc)(X509_VERIFY_PARAM *, const char *) = NULL;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:227:void (*X509_VERIFY_PARAM_set_hostflags)(X509_VERIFY_PARAM *,
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:232:#ifdef X509_V_FLAG_PARTIAL_CHAIN
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:233:static const long Cryptography_HAS_X509_V_FLAG_PARTIAL_CHAIN = 1;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:235:static const long Cryptography_HAS_X509_V_FLAG_PARTIAL_CHAIN = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:236:static const long X509_V_FLAG_PARTIAL_CHAIN = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:240:#ifdef X509_V_FLAG_TRUSTED_FIRST
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:241:static const long Cryptography_HAS_X509_V_FLAG_TRUSTED_FIRST = 1;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:243:static const long Cryptography_HAS_X509_V_FLAG_TRUSTED_FIRST = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:244:static const long X509_V_FLAG_TRUSTED_FIRST = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:248:#if OPENSSL_VERSION_NUMBER >= 0x10000000L
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:252:static const long X509_V_ERR_DIFFERENT_CRL_SCOPE = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:253:static const long X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:254:static const long X509_V_ERR_PERMITTED_VIOLATION = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:255:static const long X509_V_ERR_EXCLUDED_VIOLATION = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:256:static const long X509_V_ERR_SUBTREE_MINMAX = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:257:static const long X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:258:static const long X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:259:static const long X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:260:static const long X509_V_ERR_CRL_PATH_VALIDATION_ERROR = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:264:#if OPENSSL_VERSION_NUMBER >= 0x10000000L
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:268:static const long X509_V_FLAG_EXTENDED_CRL_SUPPORT = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:269:static const long X509_V_FLAG_USE_DELTAS = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:273:#ifdef X509_V_FLAG_CHECK_SS_SIGNATURE
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:274:static const long Cryptography_HAS_X509_V_FLAG_CHECK_SS_SIGNATURE = 1;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:276:static const long Cryptography_HAS_X509_V_FLAG_CHECK_SS_SIGNATURE = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:277:static const long X509_V_FLAG_CHECK_SS_SIGNATURE = 0;
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:283:        'X509_V_ERR_SUITE_B_INVALID_VERSION',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:284:        'X509_V_ERR_SUITE_B_INVALID_ALGORITHM',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:285:        'X509_V_ERR_SUITE_B_INVALID_CURVE',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:286:        'X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:287:        'X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:288:        'X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:289:        'X509_V_ERR_HOSTNAME_MISMATCH',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:290:        'X509_V_ERR_EMAIL_MISMATCH',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:291:        'X509_V_ERR_IP_ADDRESS_MISMATCH'
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:294:        "X509_V_FLAG_SUITEB_128_LOS_ONLY",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:295:        "X509_V_FLAG_SUITEB_192_LOS",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:296:        "X509_V_FLAG_SUITEB_128_LOS",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:297:        "X509_VERIFY_PARAM_set1_host",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:298:        "X509_VERIFY_PARAM_set1_email",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:299:        "X509_VERIFY_PARAM_set1_ip",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:300:        "X509_VERIFY_PARAM_set1_ip_asc",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:301:        "X509_VERIFY_PARAM_set_hostflags",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:303:    "Cryptography_HAS_X509_V_FLAG_TRUSTED_FIRST": [
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:304:        "X509_V_FLAG_TRUSTED_FIRST",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:306:    "Cryptography_HAS_X509_V_FLAG_PARTIAL_CHAIN": [
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:307:        "X509_V_FLAG_PARTIAL_CHAIN",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:310:        'X509_V_ERR_DIFFERENT_CRL_SCOPE',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:311:        'X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:312:        'X509_V_ERR_UNNESTED_RESOURCE',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:313:        'X509_V_ERR_PERMITTED_VIOLATION',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:314:        'X509_V_ERR_EXCLUDED_VIOLATION',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:315:        'X509_V_ERR_SUBTREE_MINMAX',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:316:        'X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:317:        'X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:318:        'X509_V_ERR_UNSUPPORTED_NAME_SYNTAX',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:319:        'X509_V_ERR_CRL_PATH_VALIDATION_ERROR',
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:323:        "X509_V_FLAG_EXTENDED_CRL_SUPPORT",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:324:        "X509_V_FLAG_USE_DELTAS",
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:326:    "Cryptography_HAS_X509_V_FLAG_CHECK_SS_SIGNATURE": [
./src/cryptography/hazmat/bindings/openssl/x509_vfy.py:327:        "X509_V_FLAG_CHECK_SS_SIGNATURE",
./src/cryptography/hazmat/bindings/openssl/rand.py:35:#if defined(LIBRESSL_VERSION_NUMBER)
./src/cryptography/hazmat/bindings/openssl/ec.py:8:#ifndef OPENSSL_NO_EC
./src/cryptography/hazmat/bindings/openssl/ec.py:21:static const int OPENSSL_EC_NAMED_CURVE;
./src/cryptography/hazmat/bindings/openssl/ec.py:194:#ifdef OPENSSL_NO_EC
./src/cryptography/hazmat/bindings/openssl/ec.py:207:static const int OPENSSL_EC_NAMED_CURVE = 0;
./src/cryptography/hazmat/bindings/openssl/ec.py:338:#if defined(OPENSSL_NO_EC) || OPENSSL_VERSION_NUMBER < 0x1000100f
./src/cryptography/hazmat/bindings/openssl/ec.py:352:#if defined(OPENSSL_NO_EC) || OPENSSL_VERSION_NUMBER < 0x1000100f || \
./src/cryptography/hazmat/bindings/openssl/ec.py:353:    defined(OPENSSL_NO_EC_NISTP_64_GCC_128)
./src/cryptography/hazmat/bindings/openssl/ec.py:363:#if defined(OPENSSL_NO_EC) || defined(OPENSSL_NO_EC2M)
./src/cryptography/hazmat/bindings/openssl/ec.py:392:        "OPENSSL_EC_NAMED_CURVE",
./src/cryptography/hazmat/bindings/openssl/rsa.py:71:#if OPENSSL_VERSION_NUMBER >= 0x10000000
./src/cryptography/hazmat/bindings/openssl/rsa.py:80:#if OPENSSL_VERSION_NUMBER >= 0x1000100f
./src/cryptography/hazmat/bindings/openssl/cmac.py:8:#if OPENSSL_VERSION_NUMBER >= 0x10001000L
./src/cryptography/hazmat/bindings/openssl/cmac.py:31:#if OPENSSL_VERSION_NUMBER < 0x10001000L
./src/cryptography/hazmat/bindings/openssl/x509name.py:13:typedef STACK_OF(X509_NAME) Cryptography_STACK_OF_X509_NAME;
./src/cryptography/hazmat/bindings/openssl/x509name.py:17:typedef ... X509_NAME;
./src/cryptography/hazmat/bindings/openssl/x509name.py:18:typedef ... X509_NAME_ENTRY;
./src/cryptography/hazmat/bindings/openssl/x509name.py:19:typedef ... Cryptography_STACK_OF_X509_NAME;
./src/cryptography/hazmat/bindings/openssl/x509name.py:23:X509_NAME *X509_NAME_new(void);
./src/cryptography/hazmat/bindings/openssl/x509name.py:24:void X509_NAME_free(X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:26:int X509_NAME_entry_count(X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:27:X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *, int);
./src/cryptography/hazmat/bindings/openssl/x509name.py:28:ASN1_OBJECT *X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:29:ASN1_STRING *X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:30:unsigned long X509_NAME_hash(X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:32:int i2d_X509_NAME(X509_NAME *, unsigned char **);
./src/cryptography/hazmat/bindings/openssl/x509name.py:33:int X509_NAME_add_entry_by_txt(X509_NAME *, const char *, int,
./src/cryptography/hazmat/bindings/openssl/x509name.py:35:int X509_NAME_add_entry_by_NID(X509_NAME *, int, int, unsigned char *,
./src/cryptography/hazmat/bindings/openssl/x509name.py:37:X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *, int);
./src/cryptography/hazmat/bindings/openssl/x509name.py:38:void X509_NAME_ENTRY_free(X509_NAME_ENTRY *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:39:int X509_NAME_get_index_by_NID(X509_NAME *, int, int);
./src/cryptography/hazmat/bindings/openssl/x509name.py:40:int X509_NAME_cmp(const X509_NAME *, const X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:41:char *X509_NAME_oneline(X509_NAME *, char *, int);
./src/cryptography/hazmat/bindings/openssl/x509name.py:42:X509_NAME *X509_NAME_dup(X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:46:Cryptography_STACK_OF_X509_NAME *sk_X509_NAME_new_null(void);
./src/cryptography/hazmat/bindings/openssl/x509name.py:47:int sk_X509_NAME_num(Cryptography_STACK_OF_X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:48:int sk_X509_NAME_push(Cryptography_STACK_OF_X509_NAME *, X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509name.py:49:X509_NAME *sk_X509_NAME_value(Cryptography_STACK_OF_X509_NAME *, int);
./src/cryptography/hazmat/bindings/openssl/x509name.py:50:void sk_X509_NAME_free(Cryptography_STACK_OF_X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/engine.py:156:#if defined(LIBRESSL_VERSION_NUMBER)
./src/cryptography/hazmat/bindings/openssl/x509v3.py:17:#if OPENSSL_VERSION_NUMBER >= 0x10000000
./src/cryptography/hazmat/bindings/openssl/x509v3.py:65:        X509_NAME *directoryName;
./src/cryptography/hazmat/bindings/openssl/x509v3.py:73:        X509_NAME *dirn;       /* dirn */
./src/cryptography/hazmat/bindings/openssl/x509v3.py:90:void X509V3_set_ctx(X509V3_CTX *, X509 *, X509 *, X509_REQ *, X509_CRL *, int);
./src/cryptography/hazmat/bindings/openssl/x509v3.py:91:X509_EXTENSION *X509V3_EXT_nconf(CONF *, X509V3_CTX *, char *, char *);
./src/cryptography/hazmat/bindings/openssl/x509v3.py:94:void *X509V3_EXT_d2i(X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/x509v3.py:103:X509_EXTENSION *X509V3_EXT_conf_nid(Cryptography_LHASH_OF_CONF_VALUE *,
./src/cryptography/hazmat/bindings/openssl/x509v3.py:107:const X509V3_EXT_METHOD *X509V3_EXT_get(X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/cms.py:8:#if !defined(OPENSSL_NO_CMS) && OPENSSL_VERSION_NUMBER >= 0x0090808fL
./src/cryptography/hazmat/bindings/openssl/cms.py:11:#if defined(OPENSSL_SYS_WINDOWS)
./src/cryptography/hazmat/bindings/openssl/cms.py:61:int CMS_verify(CMS_ContentInfo *, Cryptography_STACK_OF_X509 *, X509_STORE *,
./src/cryptography/hazmat/bindings/openssl/cms.py:72:#if !defined(OPENSSL_NO_CMS) && OPENSSL_VERSION_NUMBER >= 0x0090808fL
./src/cryptography/hazmat/bindings/openssl/cms.py:110:                  X509_STORE *, BIO *, BIO *, unsigned int) = NULL;
./src/cryptography/hazmat/bindings/openssl/x509.py:18:typedef STACK_OF(X509_CRL) Cryptography_STACK_OF_X509_CRL;
./src/cryptography/hazmat/bindings/openssl/x509.py:19:typedef STACK_OF(X509_REVOKED) Cryptography_STACK_OF_X509_REVOKED;
./src/cryptography/hazmat/bindings/openssl/x509.py:24:typedef ... Cryptography_STACK_OF_X509_CRL;
./src/cryptography/hazmat/bindings/openssl/x509.py:25:typedef ... Cryptography_STACK_OF_X509_REVOKED;
./src/cryptography/hazmat/bindings/openssl/x509.py:30:} X509_ALGOR;
./src/cryptography/hazmat/bindings/openssl/x509.py:32:typedef ... X509_ATTRIBUTE;
./src/cryptography/hazmat/bindings/openssl/x509.py:35:    X509_ALGOR *signature;
./src/cryptography/hazmat/bindings/openssl/x509.py:37:} X509_CINF;
./src/cryptography/hazmat/bindings/openssl/x509.py:43:} X509_EXTENSION;
./src/cryptography/hazmat/bindings/openssl/x509.py:45:typedef ... X509_EXTENSIONS;
./src/cryptography/hazmat/bindings/openssl/x509.py:47:typedef ... X509_REQ;
./src/cryptography/hazmat/bindings/openssl/x509.py:52:    X509_EXTENSIONS *extensions;
./src/cryptography/hazmat/bindings/openssl/x509.py:55:} X509_REVOKED;
./src/cryptography/hazmat/bindings/openssl/x509.py:58:    Cryptography_STACK_OF_X509_REVOKED *revoked;
./src/cryptography/hazmat/bindings/openssl/x509.py:60:} X509_CRL_INFO;
./src/cryptography/hazmat/bindings/openssl/x509.py:63:    X509_CRL_INFO *crl;
./src/cryptography/hazmat/bindings/openssl/x509.py:65:} X509_CRL;
./src/cryptography/hazmat/bindings/openssl/x509.py:68:    X509_ALGOR *sig_alg;
./src/cryptography/hazmat/bindings/openssl/x509.py:69:    X509_CINF *cert_info;
./src/cryptography/hazmat/bindings/openssl/x509.py:77:static const int X509_FLAG_COMPAT;
./src/cryptography/hazmat/bindings/openssl/x509.py:78:static const int X509_FLAG_NO_HEADER;
./src/cryptography/hazmat/bindings/openssl/x509.py:79:static const int X509_FLAG_NO_VERSION;
./src/cryptography/hazmat/bindings/openssl/x509.py:80:static const int X509_FLAG_NO_SERIAL;
./src/cryptography/hazmat/bindings/openssl/x509.py:81:static const int X509_FLAG_NO_SIGNAME;
./src/cryptography/hazmat/bindings/openssl/x509.py:82:static const int X509_FLAG_NO_ISSUER;
./src/cryptography/hazmat/bindings/openssl/x509.py:83:static const int X509_FLAG_NO_VALIDITY;
./src/cryptography/hazmat/bindings/openssl/x509.py:84:static const int X509_FLAG_NO_SUBJECT;
./src/cryptography/hazmat/bindings/openssl/x509.py:85:static const int X509_FLAG_NO_PUBKEY;
./src/cryptography/hazmat/bindings/openssl/x509.py:86:static const int X509_FLAG_NO_EXTENSIONS;
./src/cryptography/hazmat/bindings/openssl/x509.py:87:static const int X509_FLAG_NO_SIGDUMP;
./src/cryptography/hazmat/bindings/openssl/x509.py:88:static const int X509_FLAG_NO_AUX;
./src/cryptography/hazmat/bindings/openssl/x509.py:89:static const int X509_FLAG_NO_ATTRIBUTES;
./src/cryptography/hazmat/bindings/openssl/x509.py:112:X509 *X509_new(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:113:void X509_free(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:114:X509 *X509_dup(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:116:int X509_print_ex(BIO *, X509 *, unsigned long, unsigned long);
./src/cryptography/hazmat/bindings/openssl/x509.py:118:int X509_set_version(X509 *, long);
./src/cryptography/hazmat/bindings/openssl/x509.py:120:EVP_PKEY *X509_get_pubkey(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:121:int X509_set_pubkey(X509 *, EVP_PKEY *);
./src/cryptography/hazmat/bindings/openssl/x509.py:123:unsigned char *X509_alias_get0(X509 *, int *);
./src/cryptography/hazmat/bindings/openssl/x509.py:124:int X509_sign(X509 *, EVP_PKEY *, const EVP_MD *);
./src/cryptography/hazmat/bindings/openssl/x509.py:126:int X509_digest(const X509 *, const EVP_MD *, unsigned char *, unsigned int *);
./src/cryptography/hazmat/bindings/openssl/x509.py:128:ASN1_TIME *X509_gmtime_adj(ASN1_TIME *, long);
./src/cryptography/hazmat/bindings/openssl/x509.py:130:unsigned long X509_subject_name_hash(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:132:X509_NAME *X509_get_subject_name(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:133:int X509_set_subject_name(X509 *, X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509.py:135:X509_NAME *X509_get_issuer_name(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:136:int X509_set_issuer_name(X509 *, X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509.py:138:int X509_get_ext_count(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:139:int X509_add_ext(X509 *, X509_EXTENSION *, int);
./src/cryptography/hazmat/bindings/openssl/x509.py:140:X509_EXTENSION *X509_EXTENSION_dup(X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/x509.py:141:X509_EXTENSION *X509_get_ext(X509 *, int);
./src/cryptography/hazmat/bindings/openssl/x509.py:142:int X509_EXTENSION_get_critical(X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/x509.py:143:ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/x509.py:144:void X509_EXTENSION_free(X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/x509.py:148:int X509_REQ_set_version(X509_REQ *, long);
./src/cryptography/hazmat/bindings/openssl/x509.py:149:X509_REQ *X509_REQ_new(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:150:void X509_REQ_free(X509_REQ *);
./src/cryptography/hazmat/bindings/openssl/x509.py:151:int X509_REQ_set_pubkey(X509_REQ *, EVP_PKEY *);
./src/cryptography/hazmat/bindings/openssl/x509.py:152:int X509_REQ_sign(X509_REQ *, EVP_PKEY *, const EVP_MD *);
./src/cryptography/hazmat/bindings/openssl/x509.py:153:int X509_REQ_verify(X509_REQ *, EVP_PKEY *);
./src/cryptography/hazmat/bindings/openssl/x509.py:154:int X509_REQ_digest(const X509_REQ *, const EVP_MD *,
./src/cryptography/hazmat/bindings/openssl/x509.py:156:EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *);
./src/cryptography/hazmat/bindings/openssl/x509.py:157:int X509_REQ_print_ex(BIO *, X509_REQ *, unsigned long, unsigned long);
./src/cryptography/hazmat/bindings/openssl/x509.py:159:int X509V3_EXT_print(BIO *, X509_EXTENSION *, unsigned long, int);
./src/cryptography/hazmat/bindings/openssl/x509.py:160:ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/x509.py:162:X509_REVOKED *X509_REVOKED_new(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:163:void X509_REVOKED_free(X509_REVOKED *);
./src/cryptography/hazmat/bindings/openssl/x509.py:165:int X509_REVOKED_set_serialNumber(X509_REVOKED *, ASN1_INTEGER *);
./src/cryptography/hazmat/bindings/openssl/x509.py:167:int X509_REVOKED_add1_ext_i2d(X509_REVOKED *, int, void *, int, unsigned long);
./src/cryptography/hazmat/bindings/openssl/x509.py:169:X509_CRL *d2i_X509_CRL_bio(BIO *, X509_CRL **);
./src/cryptography/hazmat/bindings/openssl/x509.py:170:X509_CRL *X509_CRL_new(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:171:void X509_CRL_free(X509_CRL *);
./src/cryptography/hazmat/bindings/openssl/x509.py:172:int X509_CRL_add0_revoked(X509_CRL *, X509_REVOKED *);
./src/cryptography/hazmat/bindings/openssl/x509.py:173:int i2d_X509_CRL_bio(BIO *, X509_CRL *);
./src/cryptography/hazmat/bindings/openssl/x509.py:174:int X509_CRL_print(BIO *, X509_CRL *);
./src/cryptography/hazmat/bindings/openssl/x509.py:175:int X509_CRL_set_issuer_name(X509_CRL *, X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/x509.py:176:int X509_CRL_sign(X509_CRL *, EVP_PKEY *, const EVP_MD *);
./src/cryptography/hazmat/bindings/openssl/x509.py:188:int i2d_X509_bio(BIO *, X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:189:X509 *d2i_X509_bio(BIO *, X509 **);
./src/cryptography/hazmat/bindings/openssl/x509.py:191:int i2d_X509_REQ_bio(BIO *, X509_REQ *);
./src/cryptography/hazmat/bindings/openssl/x509.py:192:X509_REQ *d2i_X509_REQ_bio(BIO *, X509_REQ **);
./src/cryptography/hazmat/bindings/openssl/x509.py:199:ASN1_INTEGER *X509_get_serialNumber(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:200:int X509_set_serialNumber(X509 *, ASN1_INTEGER *);
./src/cryptography/hazmat/bindings/openssl/x509.py:202:const char *X509_verify_cert_error_string(long);
./src/cryptography/hazmat/bindings/openssl/x509.py:204:const char *X509_get_default_cert_area(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:205:const char *X509_get_default_cert_dir(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:206:const char *X509_get_default_cert_file(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:207:const char *X509_get_default_cert_dir_env(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:208:const char *X509_get_default_cert_file_env(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:209:const char *X509_get_default_private_dir(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:237:long X509_get_version(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:239:ASN1_TIME *X509_get_notBefore(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:240:ASN1_TIME *X509_get_notAfter(X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:242:long X509_REQ_get_version(X509_REQ *);
./src/cryptography/hazmat/bindings/openssl/x509.py:243:X509_NAME *X509_REQ_get_subject_name(X509_REQ *);
./src/cryptography/hazmat/bindings/openssl/x509.py:245:Cryptography_STACK_OF_X509 *sk_X509_new_null(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:246:void sk_X509_free(Cryptography_STACK_OF_X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:247:int sk_X509_num(Cryptography_STACK_OF_X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:248:int sk_X509_push(Cryptography_STACK_OF_X509 *, X509 *);
./src/cryptography/hazmat/bindings/openssl/x509.py:249:X509 *sk_X509_value(Cryptography_STACK_OF_X509 *, int);
./src/cryptography/hazmat/bindings/openssl/x509.py:251:X509_EXTENSIONS *sk_X509_EXTENSION_new_null(void);
./src/cryptography/hazmat/bindings/openssl/x509.py:252:int sk_X509_EXTENSION_num(X509_EXTENSIONS *);
./src/cryptography/hazmat/bindings/openssl/x509.py:253:X509_EXTENSION *sk_X509_EXTENSION_value(X509_EXTENSIONS *, int);
./src/cryptography/hazmat/bindings/openssl/x509.py:254:int sk_X509_EXTENSION_push(X509_EXTENSIONS *, X509_EXTENSION *);
./src/cryptography/hazmat/bindings/openssl/x509.py:255:X509_EXTENSION *sk_X509_EXTENSION_delete(X509_EXTENSIONS *, int);
./src/cryptography/hazmat/bindings/openssl/x509.py:256:void sk_X509_EXTENSION_free(X509_EXTENSIONS *);
./src/cryptography/hazmat/bindings/openssl/x509.py:258:int sk_X509_REVOKED_num(Cryptography_STACK_OF_X509_REVOKED *);
./src/cryptography/hazmat/bindings/openssl/x509.py:259:X509_REVOKED *sk_X509_REVOKED_value(Cryptography_STACK_OF_X509_REVOKED *, int);
./src/cryptography/hazmat/bindings/openssl/x509.py:267:int X509_CRL_set_lastUpdate(X509_CRL *, ASN1_TIME *);
./src/cryptography/hazmat/bindings/openssl/x509.py:268:int X509_CRL_set_nextUpdate(X509_CRL *, ASN1_TIME *);
./src/cryptography/hazmat/bindings/openssl/x509.py:269:int X509_set_notBefore(X509 *, ASN1_UTCTIME *);
./src/cryptography/hazmat/bindings/openssl/x509.py:270:int X509_set_notAfter(X509 *, ASN1_UTCTIME *);
./src/cryptography/hazmat/bindings/openssl/x509.py:272:/* These use STACK_OF(X509_EXTENSION) in 0.9.8e. Once we drop support for
./src/cryptography/hazmat/bindings/openssl/x509.py:274:int X509_REQ_add_extensions(X509_REQ *, X509_EXTENSIONS *);
./src/cryptography/hazmat/bindings/openssl/x509.py:275:X509_EXTENSIONS *X509_REQ_get_extensions(X509_REQ *);
./src/cryptography/hazmat/bindings/openssl/x509.py:287:#if OPENSSL_VERSION_NUMBER <= 0x0090805fL
./src/cryptography/hazmat/bindings/openssl/x509.py:288:typedef STACK_OF(X509_EXTENSION) X509_EXTENSIONS;
./src/cryptography/hazmat/bindings/openssl/x509.py:290:#ifdef OPENSSL_NO_EC
./src/cryptography/hazmat/bindings/openssl/ecdsa.py:8:#ifndef OPENSSL_NO_ECDSA
./src/cryptography/hazmat/bindings/openssl/ecdsa.py:58:#ifdef OPENSSL_NO_ECDSA
./src/cryptography/hazmat/bindings/openssl/aes.py:44:#if OPENSSL_VERSION_NUMBER >= 0x0090808fL
./src/cryptography/hazmat/bindings/openssl/err.py:63:static const int ASN1_F_D2I_X509_CINF;
./src/cryptography/hazmat/bindings/openssl/err.py:64:static const int ASN1_F_D2I_X509_PKEY;
./src/cryptography/hazmat/bindings/openssl/err.py:72:static const int ASN1_F_X509_CINF_NEW;
./src/cryptography/hazmat/bindings/openssl/err.py:203:static const int PEM_F_PEM_X509_INFO_READ;
./src/cryptography/hazmat/bindings/openssl/err.py:204:static const int PEM_F_PEM_X509_INFO_READ_BIO;
./src/cryptography/hazmat/bindings/openssl/err.py:205:static const int PEM_F_PEM_X509_INFO_WRITE_BIO;
./src/cryptography/hazmat/bindings/openssl/err.py:237:void ERR_load_SSL_strings(void);
./src/cryptography/hazmat/bindings/openssl/err.py:289:#if OPENSSL_VERSION_NUMBER >= 0x10000000L
./src/cryptography/hazmat/bindings/openssl/err.py:298:#if OPENSSL_VERSION_NUMBER >= 0x0090808fL
./src/cryptography/hazmat/bindings/openssl/err.py:321:#ifndef OPENSSL_NO_EC
./src/cryptography/hazmat/bindings/openssl/ecdh.py:8:#ifndef OPENSSL_NO_ECDH
./src/cryptography/hazmat/bindings/openssl/ecdh.py:33:#ifdef OPENSSL_NO_ECDH
./src/cryptography/hazmat/bindings/openssl/crypto.py:46:void OPENSSL_free(void *);
./src/cryptography/hazmat/bindings/openssl/evp.py:111:X509_ATTRIBUTE *EVP_PKEY_get_attr(const EVP_PKEY *, int);
./src/cryptography/hazmat/bindings/openssl/evp.py:112:X509_ATTRIBUTE *EVP_PKEY_delete_attr(EVP_PKEY *, int);
./src/cryptography/hazmat/bindings/openssl/evp.py:113:int EVP_PKEY_add1_attr(EVP_PKEY *, X509_ATTRIBUTE *);
./src/cryptography/hazmat/bindings/openssl/evp.py:127:void OpenSSL_add_all_algorithms(void);
./src/cryptography/hazmat/bindings/openssl/evp.py:183:#if OPENSSL_VERSION_NUMBER >= 0x10000000L
./src/cryptography/hazmat/bindings/openssl/evp.py:225:#ifdef OPENSSL_NO_EC
./src/cryptography/hazmat/bindings/openssl/ssl.py:10:typedef STACK_OF(SSL_CIPHER) Cryptography_STACK_OF_SSL_CIPHER;
./src/cryptography/hazmat/bindings/openssl/ssl.py:27:/* Internally invented symbol to tell us if SSL_MODE_RELEASE_BUFFERS is
./src/cryptography/hazmat/bindings/openssl/ssl.py:32:/* Internally invented symbol to tell us if SSL_OP_NO_COMPRESSION is
./src/cryptography/hazmat/bindings/openssl/ssl.py:37:static const long Cryptography_HAS_SSL_OP_MSIE_SSLV2_RSA_PADDING;
./src/cryptography/hazmat/bindings/openssl/ssl.py:38:static const long Cryptography_HAS_SSL_SET_SSL_CTX;
./src/cryptography/hazmat/bindings/openssl/ssl.py:39:static const long Cryptography_HAS_SSL_OP_NO_TICKET;
./src/cryptography/hazmat/bindings/openssl/ssl.py:44:static const long SSL_FILETYPE_PEM;
./src/cryptography/hazmat/bindings/openssl/ssl.py:45:static const long SSL_FILETYPE_ASN1;
./src/cryptography/hazmat/bindings/openssl/ssl.py:46:static const long SSL_ERROR_NONE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:47:static const long SSL_ERROR_ZERO_RETURN;
./src/cryptography/hazmat/bindings/openssl/ssl.py:48:static const long SSL_ERROR_WANT_READ;
./src/cryptography/hazmat/bindings/openssl/ssl.py:49:static const long SSL_ERROR_WANT_WRITE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:50:static const long SSL_ERROR_WANT_X509_LOOKUP;
./src/cryptography/hazmat/bindings/openssl/ssl.py:51:static const long SSL_ERROR_SYSCALL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:52:static const long SSL_ERROR_SSL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:53:static const long SSL_SENT_SHUTDOWN;
./src/cryptography/hazmat/bindings/openssl/ssl.py:54:static const long SSL_RECEIVED_SHUTDOWN;
./src/cryptography/hazmat/bindings/openssl/ssl.py:55:static const long SSL_OP_NO_SSLv2;
./src/cryptography/hazmat/bindings/openssl/ssl.py:56:static const long SSL_OP_NO_SSLv3;
./src/cryptography/hazmat/bindings/openssl/ssl.py:57:static const long SSL_OP_NO_TLSv1;
./src/cryptography/hazmat/bindings/openssl/ssl.py:58:static const long SSL_OP_NO_TLSv1_1;
./src/cryptography/hazmat/bindings/openssl/ssl.py:59:static const long SSL_OP_NO_TLSv1_2;
./src/cryptography/hazmat/bindings/openssl/ssl.py:60:static const long SSL_OP_NO_COMPRESSION;
./src/cryptography/hazmat/bindings/openssl/ssl.py:61:static const long SSL_OP_SINGLE_DH_USE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:62:static const long SSL_OP_EPHEMERAL_RSA;
./src/cryptography/hazmat/bindings/openssl/ssl.py:63:static const long SSL_OP_MICROSOFT_SESS_ID_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:64:static const long SSL_OP_NETSCAPE_CHALLENGE_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:65:static const long SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:66:static const long SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:67:static const long SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER;
./src/cryptography/hazmat/bindings/openssl/ssl.py:68:static const long SSL_OP_MSIE_SSLV2_RSA_PADDING;
./src/cryptography/hazmat/bindings/openssl/ssl.py:69:static const long SSL_OP_SSLEAY_080_CLIENT_DH_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:70:static const long SSL_OP_TLS_D5_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:71:static const long SSL_OP_TLS_BLOCK_PADDING_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:72:static const long SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;
./src/cryptography/hazmat/bindings/openssl/ssl.py:73:static const long SSL_OP_CIPHER_SERVER_PREFERENCE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:74:static const long SSL_OP_TLS_ROLLBACK_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:75:static const long SSL_OP_PKCS1_CHECK_1;
./src/cryptography/hazmat/bindings/openssl/ssl.py:76:static const long SSL_OP_PKCS1_CHECK_2;
./src/cryptography/hazmat/bindings/openssl/ssl.py:77:static const long SSL_OP_NETSCAPE_CA_DN_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:78:static const long SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG;
./src/cryptography/hazmat/bindings/openssl/ssl.py:79:static const long SSL_OP_NO_QUERY_MTU;
./src/cryptography/hazmat/bindings/openssl/ssl.py:80:static const long SSL_OP_COOKIE_EXCHANGE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:81:static const long SSL_OP_NO_TICKET;
./src/cryptography/hazmat/bindings/openssl/ssl.py:82:static const long SSL_OP_ALL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:83:static const long SSL_OP_SINGLE_ECDH_USE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:84:static const long SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION;
./src/cryptography/hazmat/bindings/openssl/ssl.py:85:static const long SSL_OP_LEGACY_SERVER_CONNECT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:86:static const long SSL_VERIFY_PEER;
./src/cryptography/hazmat/bindings/openssl/ssl.py:87:static const long SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:88:static const long SSL_VERIFY_CLIENT_ONCE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:89:static const long SSL_VERIFY_NONE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:90:static const long SSL_SESS_CACHE_OFF;
./src/cryptography/hazmat/bindings/openssl/ssl.py:91:static const long SSL_SESS_CACHE_CLIENT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:92:static const long SSL_SESS_CACHE_SERVER;
./src/cryptography/hazmat/bindings/openssl/ssl.py:93:static const long SSL_SESS_CACHE_BOTH;
./src/cryptography/hazmat/bindings/openssl/ssl.py:94:static const long SSL_SESS_CACHE_NO_AUTO_CLEAR;
./src/cryptography/hazmat/bindings/openssl/ssl.py:95:static const long SSL_SESS_CACHE_NO_INTERNAL_LOOKUP;
./src/cryptography/hazmat/bindings/openssl/ssl.py:96:static const long SSL_SESS_CACHE_NO_INTERNAL_STORE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:97:static const long SSL_SESS_CACHE_NO_INTERNAL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:98:static const long SSL_ST_CONNECT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:99:static const long SSL_ST_ACCEPT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:100:static const long SSL_ST_MASK;
./src/cryptography/hazmat/bindings/openssl/ssl.py:101:static const long SSL_ST_INIT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:102:static const long SSL_ST_BEFORE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:103:static const long SSL_ST_OK;
./src/cryptography/hazmat/bindings/openssl/ssl.py:104:static const long SSL_ST_RENEGOTIATE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:105:static const long SSL_CB_LOOP;
./src/cryptography/hazmat/bindings/openssl/ssl.py:106:static const long SSL_CB_EXIT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:107:static const long SSL_CB_READ;
./src/cryptography/hazmat/bindings/openssl/ssl.py:108:static const long SSL_CB_WRITE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:109:static const long SSL_CB_ALERT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:110:static const long SSL_CB_READ_ALERT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:111:static const long SSL_CB_WRITE_ALERT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:112:static const long SSL_CB_ACCEPT_LOOP;
./src/cryptography/hazmat/bindings/openssl/ssl.py:113:static const long SSL_CB_ACCEPT_EXIT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:114:static const long SSL_CB_CONNECT_LOOP;
./src/cryptography/hazmat/bindings/openssl/ssl.py:115:static const long SSL_CB_CONNECT_EXIT;
./src/cryptography/hazmat/bindings/openssl/ssl.py:116:static const long SSL_CB_HANDSHAKE_START;
./src/cryptography/hazmat/bindings/openssl/ssl.py:117:static const long SSL_CB_HANDSHAKE_DONE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:118:static const long SSL_MODE_RELEASE_BUFFERS;
./src/cryptography/hazmat/bindings/openssl/ssl.py:119:static const long SSL_MODE_ENABLE_PARTIAL_WRITE;
./src/cryptography/hazmat/bindings/openssl/ssl.py:120:static const long SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER;
./src/cryptography/hazmat/bindings/openssl/ssl.py:121:static const long SSL_MODE_AUTO_RETRY;
./src/cryptography/hazmat/bindings/openssl/ssl.py:123:typedef ... SSL_METHOD;
./src/cryptography/hazmat/bindings/openssl/ssl.py:128:} SSL_CTX;
./src/cryptography/hazmat/bindings/openssl/ssl.py:134:} SSL_SESSION;
./src/cryptography/hazmat/bindings/openssl/ssl.py:144:    SSL_SESSION *session;
./src/cryptography/hazmat/bindings/openssl/ssl.py:151:typedef ... SSL_CIPHER;
./src/cryptography/hazmat/bindings/openssl/ssl.py:152:typedef ... Cryptography_STACK_OF_SSL_CIPHER;
./src/cryptography/hazmat/bindings/openssl/ssl.py:157:void SSL_load_error_strings(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:158:int SSL_library_init(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:161:const char *SSL_state_string_long(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:162:SSL_SESSION *SSL_get1_session(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:163:int SSL_set_session(SSL *, SSL_SESSION *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:164:int SSL_get_verify_mode(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:165:void SSL_set_verify_depth(SSL *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:166:int SSL_get_verify_depth(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:167:int (*SSL_get_verify_callback(const SSL *))(int, X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:168:void SSL_set_info_callback(SSL *ssl, void (*)(const SSL *, int, int));
./src/cryptography/hazmat/bindings/openssl/ssl.py:169:void (*SSL_get_info_callback(const SSL *))(const SSL *, int, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:170:SSL *SSL_new(SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:171:void SSL_free(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:172:int SSL_set_fd(SSL *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:173:void SSL_set_bio(SSL *, BIO *, BIO *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:174:void SSL_set_connect_state(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:175:void SSL_set_accept_state(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:176:void SSL_set_shutdown(SSL *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:177:int SSL_get_shutdown(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:178:int SSL_pending(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:179:int SSL_write(SSL *, const void *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:180:int SSL_read(SSL *, void *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:181:X509 *SSL_get_peer_certificate(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:182:int SSL_get_ex_data_X509_STORE_CTX_idx(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:184:Cryptography_STACK_OF_X509 *SSL_get_peer_cert_chain(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:185:Cryptography_STACK_OF_X509_NAME *SSL_get_client_CA_list(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:187:int SSL_get_error(const SSL *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:188:int SSL_do_handshake(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:189:int SSL_shutdown(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:190:const char *SSL_get_cipher_list(const SSL *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:191:Cryptography_STACK_OF_SSL_CIPHER *SSL_get_ciphers(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:194:void SSL_CTX_free(SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:195:long SSL_CTX_set_timeout(SSL_CTX *, long);
./src/cryptography/hazmat/bindings/openssl/ssl.py:196:int SSL_CTX_set_default_verify_paths(SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:197:void SSL_CTX_set_verify(SSL_CTX *, int, int (*)(int, X509_STORE_CTX *));
./src/cryptography/hazmat/bindings/openssl/ssl.py:198:void SSL_CTX_set_verify_depth(SSL_CTX *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:199:int (*SSL_CTX_get_verify_callback(const SSL_CTX *))(int, X509_STORE_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:200:int SSL_CTX_get_verify_mode(const SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:201:int SSL_CTX_get_verify_depth(const SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:202:int SSL_CTX_set_cipher_list(SSL_CTX *, const char *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:203:int SSL_CTX_load_verify_locations(SSL_CTX *, const char *, const char *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:204:void SSL_CTX_set_default_passwd_cb(SSL_CTX *, pem_password_cb *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:205:void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *, void *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:206:int SSL_CTX_use_certificate(SSL_CTX *, X509 *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:207:int SSL_CTX_use_certificate_file(SSL_CTX *, const char *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:208:int SSL_CTX_use_certificate_chain_file(SSL_CTX *, const char *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:209:int SSL_CTX_use_PrivateKey(SSL_CTX *, EVP_PKEY *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:210:int SSL_CTX_use_PrivateKey_file(SSL_CTX *, const char *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:211:int SSL_CTX_check_private_key(const SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:213:void SSL_CTX_set_cert_store(SSL_CTX *, X509_STORE *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:214:X509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:215:int SSL_CTX_add_client_CA(SSL_CTX *, X509 *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:217:void SSL_CTX_set_client_CA_list(SSL_CTX *, Cryptography_STACK_OF_X509_NAME *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:219:/*  SSL_SESSION */
./src/cryptography/hazmat/bindings/openssl/ssl.py:220:void SSL_SESSION_free(SSL_SESSION *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:223:const char *SSL_CIPHER_get_name(const SSL_CIPHER *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:224:int SSL_CIPHER_get_bits(const SSL_CIPHER *, int *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:225:char *SSL_CIPHER_get_version(const SSL_CIPHER *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:227:size_t SSL_get_finished(const SSL *, void *, size_t);
./src/cryptography/hazmat/bindings/openssl/ssl.py:228:size_t SSL_get_peer_finished(const SSL *, void *, size_t);
./src/cryptography/hazmat/bindings/openssl/ssl.py:233:const COMP_METHOD *SSL_get_current_compression(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:234:const COMP_METHOD *SSL_get_current_expansion(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:235:const char *SSL_COMP_get_name(const COMP_METHOD *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:237:unsigned long SSL_set_mode(SSL *, unsigned long);
./src/cryptography/hazmat/bindings/openssl/ssl.py:238:unsigned long SSL_get_mode(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:240:unsigned long SSL_set_options(SSL *, unsigned long);
./src/cryptography/hazmat/bindings/openssl/ssl.py:241:unsigned long SSL_get_options(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:243:int SSL_want_read(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:244:int SSL_want_write(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:246:long SSL_total_renegotiations(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:247:long SSL_get_secure_renegotiation_support(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:249:/* Defined as unsigned long because SSL_OP_ALL is greater than signed 32-bit
./src/cryptography/hazmat/bindings/openssl/ssl.py:251:unsigned long SSL_CTX_set_options(SSL_CTX *, unsigned long);
./src/cryptography/hazmat/bindings/openssl/ssl.py:252:unsigned long SSL_CTX_get_options(SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:253:unsigned long SSL_CTX_set_mode(SSL_CTX *, unsigned long);
./src/cryptography/hazmat/bindings/openssl/ssl.py:254:unsigned long SSL_CTX_get_mode(SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:255:unsigned long SSL_CTX_set_session_cache_mode(SSL_CTX *, unsigned long);
./src/cryptography/hazmat/bindings/openssl/ssl.py:256:unsigned long SSL_CTX_get_session_cache_mode(SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:257:unsigned long SSL_CTX_set_tmp_dh(SSL_CTX *, DH *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:258:unsigned long SSL_CTX_set_tmp_ecdh(SSL_CTX *, EC_KEY *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:259:unsigned long SSL_CTX_add_extra_chain_cert(SSL_CTX *, X509 *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:270:const SSL_METHOD *SSLv2_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:271:const SSL_METHOD *SSLv2_server_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:272:const SSL_METHOD *SSLv2_client_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:278:const SSL_METHOD *TLSv1_1_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:279:const SSL_METHOD *TLSv1_1_server_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:280:const SSL_METHOD *TLSv1_1_client_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:282:const SSL_METHOD *TLSv1_2_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:283:const SSL_METHOD *TLSv1_2_server_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:284:const SSL_METHOD *TLSv1_2_client_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:286:const SSL_METHOD *SSLv3_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:287:const SSL_METHOD *SSLv3_server_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:288:const SSL_METHOD *SSLv3_client_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:290:const SSL_METHOD *TLSv1_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:291:const SSL_METHOD *TLSv1_server_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:292:const SSL_METHOD *TLSv1_client_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:294:const SSL_METHOD *DTLSv1_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:295:const SSL_METHOD *DTLSv1_server_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:296:const SSL_METHOD *DTLSv1_client_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:298:const SSL_METHOD *SSLv23_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:299:const SSL_METHOD *SSLv23_server_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:300:const SSL_METHOD *SSLv23_client_method(void);
./src/cryptography/hazmat/bindings/openssl/ssl.py:303:SSL_CTX *SSL_CTX_new(SSL_METHOD *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:304:long SSL_CTX_get_timeout(const SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:306:const SSL_CIPHER *SSL_get_current_cipher(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:307:int SSL_version(const SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:312:const char *SSL_get_servername(const SSL *, const int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:313:void SSL_set_tlsext_host_name(SSL *, char *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:314:void SSL_CTX_set_tlsext_servername_callback(
./src/cryptography/hazmat/bindings/openssl/ssl.py:315:    SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:318:long SSL_session_reused(SSL *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:322:void SSL_CTX_set_info_callback(SSL_CTX *, void (*)(const SSL *, int, int));
./src/cryptography/hazmat/bindings/openssl/ssl.py:323:void (*SSL_CTX_get_info_callback(SSL_CTX *))(const SSL *, int, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:326:SSL_CTX *SSL_set_SSL_CTX(SSL *, SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:328:const SSL_METHOD *Cryptography_SSL_CTX_get_method(const SSL_CTX *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:333:void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:339:void SSL_CTX_set_next_proto_select_cb(SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:347:int SSL_select_next_proto(unsigned char **, unsigned char *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:350:void SSL_get0_next_proto_negotiated(const SSL *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:353:int sk_SSL_CIPHER_num(Cryptography_STACK_OF_SSL_CIPHER *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:354:SSL_CIPHER *sk_SSL_CIPHER_value(Cryptography_STACK_OF_SSL_CIPHER *, int);
./src/cryptography/hazmat/bindings/openssl/ssl.py:359:int SSL_CTX_set_alpn_protos(SSL_CTX *, const unsigned char *, unsigned);
./src/cryptography/hazmat/bindings/openssl/ssl.py:360:int SSL_set_alpn_protos(SSL *, const unsigned char *, unsigned);
./src/cryptography/hazmat/bindings/openssl/ssl.py:361:void SSL_CTX_set_alpn_select_cb(SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:369:void SSL_get0_alpn_selected(const SSL *, const unsigned char **, unsigned *);
./src/cryptography/hazmat/bindings/openssl/ssl.py:376:#ifndef SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
./src/cryptography/hazmat/bindings/openssl/ssl.py:378:long (*SSL_get_secure_renegotiation_support)(SSL *) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:379:const long SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:380:const long SSL_OP_LEGACY_SERVER_CONNECT = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:384:#ifdef OPENSSL_NO_SSL2
./src/cryptography/hazmat/bindings/openssl/ssl.py:386:SSL_METHOD* (*SSLv2_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:387:SSL_METHOD* (*SSLv2_client_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:388:SSL_METHOD* (*SSLv2_server_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:393:#ifdef OPENSSL_NO_SSL3_METHOD
./src/cryptography/hazmat/bindings/openssl/ssl.py:395:SSL_METHOD* (*SSLv3_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:396:SSL_METHOD* (*SSLv3_client_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:397:SSL_METHOD* (*SSLv3_server_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:402:#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME
./src/cryptography/hazmat/bindings/openssl/ssl.py:406:void (*SSL_set_tlsext_host_name)(SSL *, char *) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:407:const char* (*SSL_get_servername)(const SSL *, const int) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:408:void (*SSL_CTX_set_tlsext_servername_callback)(
./src/cryptography/hazmat/bindings/openssl/ssl.py:409:    SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:413:#ifdef SSL_MODE_RELEASE_BUFFERS
./src/cryptography/hazmat/bindings/openssl/ssl.py:417:const long SSL_MODE_RELEASE_BUFFERS = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:420:#ifdef SSL_OP_NO_COMPRESSION
./src/cryptography/hazmat/bindings/openssl/ssl.py:424:const long SSL_OP_NO_COMPRESSION = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:427:#ifdef SSL_OP_NO_TLSv1_1
./src/cryptography/hazmat/bindings/openssl/ssl.py:431:static const long SSL_OP_NO_TLSv1_1 = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:432:SSL_METHOD* (*TLSv1_1_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:433:SSL_METHOD* (*TLSv1_1_client_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:434:SSL_METHOD* (*TLSv1_1_server_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:437:#ifdef SSL_OP_NO_TLSv1_2
./src/cryptography/hazmat/bindings/openssl/ssl.py:441:static const long SSL_OP_NO_TLSv1_2 = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:442:SSL_METHOD* (*TLSv1_2_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:443:SSL_METHOD* (*TLSv1_2_client_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:444:SSL_METHOD* (*TLSv1_2_server_method)(void) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:447:#ifdef SSL_OP_MSIE_SSLV2_RSA_PADDING
./src/cryptography/hazmat/bindings/openssl/ssl.py:448:static const long Cryptography_HAS_SSL_OP_MSIE_SSLV2_RSA_PADDING = 1;
./src/cryptography/hazmat/bindings/openssl/ssl.py:450:static const long Cryptography_HAS_SSL_OP_MSIE_SSLV2_RSA_PADDING = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:451:const long SSL_OP_MSIE_SSLV2_RSA_PADDING = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:454:#ifdef OPENSSL_NO_EC
./src/cryptography/hazmat/bindings/openssl/ssl.py:455:long (*SSL_CTX_set_tmp_ecdh)(SSL_CTX *, EC_KEY *) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:458:#ifdef SSL_OP_NO_TICKET
./src/cryptography/hazmat/bindings/openssl/ssl.py:459:static const long Cryptography_HAS_SSL_OP_NO_TICKET = 1;
./src/cryptography/hazmat/bindings/openssl/ssl.py:461:static const long Cryptography_HAS_SSL_OP_NO_TICKET = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:462:const long SSL_OP_NO_TICKET = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:466:#if OPENSSL_VERSION_NUMBER >= 0x00908070L
./src/cryptography/hazmat/bindings/openssl/ssl.py:467:static const long Cryptography_HAS_SSL_SET_SSL_CTX = 1;
./src/cryptography/hazmat/bindings/openssl/ssl.py:469:static const long Cryptography_HAS_SSL_SET_SSL_CTX = 0;
./src/cryptography/hazmat/bindings/openssl/ssl.py:471:SSL_CTX *(*SSL_set_SSL_CTX)(SSL *, SSL_CTX *) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:482:const SSL_METHOD *DTLSv1_method(void) {
./src/cryptography/hazmat/bindings/openssl/ssl.py:493:const SSL_METHOD *Cryptography_SSL_CTX_get_method(const SSL_CTX *ctx) {
./src/cryptography/hazmat/bindings/openssl/ssl.py:502:#if defined(OPENSSL_NO_NEXTPROTONEG) || OPENSSL_VERSION_NUMBER < 0x1000100fL
./src/cryptography/hazmat/bindings/openssl/ssl.py:504:void (*SSL_CTX_set_next_protos_advertised_cb)(SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:510:void (*SSL_CTX_set_next_proto_select_cb)(SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:518:int (*SSL_select_next_proto)(unsigned char **, unsigned char *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:521:void (*SSL_get0_next_proto_negotiated)(const SSL *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:529:#if OPENSSL_VERSION_NUMBER < 0x10002001L
./src/cryptography/hazmat/bindings/openssl/ssl.py:530:int (*SSL_CTX_set_alpn_protos)(SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:533:int (*SSL_set_alpn_protos)(SSL *, const unsigned char *, unsigned) = NULL;
./src/cryptography/hazmat/bindings/openssl/ssl.py:534:void (*SSL_CTX_set_alpn_select_cb)(SSL_CTX *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:542:void (*SSL_get0_alpn_selected)(const SSL *,
./src/cryptography/hazmat/bindings/openssl/ssl.py:553:#ifdef LIBRESSL_VERSION_NUMBER
./src/cryptography/hazmat/bindings/openssl/ssl.py:564:        "SSL_OP_NO_TLSv1_1",
./src/cryptography/hazmat/bindings/openssl/ssl.py:571:        "SSL_OP_NO_TLSv1_2",
./src/cryptography/hazmat/bindings/openssl/ssl.py:590:        "SSL_set_tlsext_host_name",
./src/cryptography/hazmat/bindings/openssl/ssl.py:591:        "SSL_get_servername",
./src/cryptography/hazmat/bindings/openssl/ssl.py:592:        "SSL_CTX_set_tlsext_servername_callback",
./src/cryptography/hazmat/bindings/openssl/ssl.py:596:        "SSL_MODE_RELEASE_BUFFERS",
./src/cryptography/hazmat/bindings/openssl/ssl.py:600:        "SSL_OP_NO_COMPRESSION",
./src/cryptography/hazmat/bindings/openssl/ssl.py:603:    "Cryptography_HAS_SSL_OP_MSIE_SSLV2_RSA_PADDING": [
./src/cryptography/hazmat/bindings/openssl/ssl.py:604:        "SSL_OP_MSIE_SSLV2_RSA_PADDING",
./src/cryptography/hazmat/bindings/openssl/ssl.py:608:        "SSL_CTX_set_tmp_ecdh",
./src/cryptography/hazmat/bindings/openssl/ssl.py:611:    "Cryptography_HAS_SSL_OP_NO_TICKET": [
./src/cryptography/hazmat/bindings/openssl/ssl.py:612:        "SSL_OP_NO_TICKET",
./src/cryptography/hazmat/bindings/openssl/ssl.py:615:    "Cryptography_HAS_SSL_SET_SSL_CTX": [
./src/cryptography/hazmat/bindings/openssl/ssl.py:616:        "SSL_set_SSL_CTX",
./src/cryptography/hazmat/bindings/openssl/ssl.py:625:        "SSL_CTX_set_next_protos_advertised_cb",
./src/cryptography/hazmat/bindings/openssl/ssl.py:626:        "SSL_CTX_set_next_proto_select_cb",
./src/cryptography/hazmat/bindings/openssl/ssl.py:627:        "SSL_select_next_proto",
./src/cryptography/hazmat/bindings/openssl/ssl.py:628:        "SSL_get0_next_proto_negotiated",
./src/cryptography/hazmat/bindings/openssl/ssl.py:632:        "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION",
./src/cryptography/hazmat/bindings/openssl/ssl.py:633:        "SSL_OP_LEGACY_SERVER_CONNECT",
./src/cryptography/hazmat/bindings/openssl/ssl.py:634:        "SSL_get_secure_renegotiation_support",
./src/cryptography/hazmat/bindings/openssl/ssl.py:638:        "SSL_CTX_set_alpn_protos",
./src/cryptography/hazmat/bindings/openssl/ssl.py:639:        "SSL_set_alpn_protos",
./src/cryptography/hazmat/bindings/openssl/ssl.py:640:        "SSL_CTX_set_alpn_select_cb",
./src/cryptography/hazmat/bindings/openssl/ssl.py:641:        "SSL_get0_alpn_selected",
./src/cryptography/hazmat/bindings/openssl/ssl.py:645:        "SSL_get_current_compression",
./src/cryptography/hazmat/bindings/openssl/ssl.py:646:        "SSL_get_current_expansion",
./src/cryptography/hazmat/bindings/openssl/ssl.py:647:        "SSL_COMP_get_name",
./src/cryptography/hazmat/bindings/openssl/nid.py:230:#if OPENSSL_VERSION_NUMBER >= 0x0090807fL
./tests/hazmat/primitives/test_rsa.py:1811:                "Traditional_OpenSSL_Serialization",
./tests/hazmat/primitives/test_dsa.py:846:                "Traditional_OpenSSL_Serialization",
./tests/hazmat/primitives/test_dsa.py:869:                "Traditional_OpenSSL_Serialization",
./tests/hazmat/primitives/test_serialization.py:316:            (["Traditional_OpenSSL_Serialization", "key1.pem"], b"123456"),
./tests/hazmat/primitives/test_serialization.py:317:            (["Traditional_OpenSSL_Serialization", "key2.pem"], b"a123456"),
./tests/hazmat/primitives/test_serialization.py:318:            (["Traditional_OpenSSL_Serialization", "testrsa.pem"], None),
./tests/hazmat/primitives/test_serialization.py:319:            (["Traditional_OpenSSL_Serialization", "testrsa-encrypted.pem"],
./tests/hazmat/primitives/test_serialization.py:339:            (["Traditional_OpenSSL_Serialization", "dsa.1024.pem"], None),
./tests/hazmat/primitives/test_serialization.py:340:            (["Traditional_OpenSSL_Serialization", "dsa.2048.pem"], None),
./tests/hazmat/primitives/test_serialization.py:341:            (["Traditional_OpenSSL_Serialization", "dsa.3072.pem"], None),
./tests/hazmat/primitives/test_serialization.py:442:                "asymmetric", "Traditional_OpenSSL_Serialization", "key1.pem"),
./tests/hazmat/primitives/test_serialization.py:485:            ["Traditional_OpenSSL_Serialization", "testrsa.pem"],
./tests/hazmat/primitives/test_serialization.py:504:            ["Traditional_OpenSSL_Serialization", "testrsa-encrypted.pem"],
./tests/hazmat/primitives/test_serialization.py:524:                ["Traditional_OpenSSL_Serialization",
./tests/hazmat/backends/test_openssl.py:71:        This test checks the value of OPENSSL_VERSION_TEXT.
./tests/hazmat/backends/test_openssl.py:140:        ctx = backend._lib.SSL_CTX_new(meth)
./tests/hazmat/backends/test_openssl.py:142:        backend._lib.SSL_CTX_free(ctx)
./tests/hazmat/backends/test_openssl.py:172:        backend._lib.OPENSSL_VERSION_NUMBER >= 0x1000000f,
./tests/hazmat/backends/test_openssl.py:183:        backend._lib.OPENSSL_VERSION_NUMBER < 0x1000000f,
./tests/hazmat/backends/test_openssl.py:335:        backend._lib.OPENSSL_VERSION_NUMBER >= 0x1000100f,
./tests/hazmat/backends/test_openssl.py:439:    backend._lib.OPENSSL_VERSION_NUMBER <= 0x10001000,
./tests/hazmat/backends/test_openssl.py:470:                    "asymmetric", "Traditional_OpenSSL_Serialization",
./tests/hazmat/bindings/test_openssl.py:100:        assert b.lib.SSL_OP_ALL > 0
./tests/hazmat/bindings/test_openssl.py:101:        ctx = b.lib.SSL_CTX_new(b.lib.TLSv1_method())
./tests/hazmat/bindings/test_openssl.py:102:        ctx = b.ffi.gc(ctx, b.lib.SSL_CTX_free)
./tests/hazmat/bindings/test_openssl.py:103:        current_options = b.lib.SSL_CTX_get_options(ctx)
./tests/hazmat/bindings/test_openssl.py:104:        resp = b.lib.SSL_CTX_set_options(ctx, b.lib.SSL_OP_ALL)
./tests/hazmat/bindings/test_openssl.py:105:        expected_options = current_options | b.lib.SSL_OP_ALL
./tests/hazmat/bindings/test_openssl.py:107:        assert b.lib.SSL_CTX_get_options(ctx) == expected_options
./tests/hazmat/bindings/test_openssl.py:112:        assert b.lib.SSL_OP_ALL > 0
./tests/hazmat/bindings/test_openssl.py:113:        ctx = b.lib.SSL_CTX_new(b.lib.TLSv1_method())
./tests/hazmat/bindings/test_openssl.py:114:        ctx = b.ffi.gc(ctx, b.lib.SSL_CTX_free)
./tests/hazmat/bindings/test_openssl.py:115:        ssl = b.lib.SSL_new(ctx)
./tests/hazmat/bindings/test_openssl.py:116:        ssl = b.ffi.gc(ssl, b.lib.SSL_free)
./tests/hazmat/bindings/test_openssl.py:117:        current_options = b.lib.SSL_get_options(ssl)
./tests/hazmat/bindings/test_openssl.py:118:        resp = b.lib.SSL_set_options(ssl, b.lib.SSL_OP_ALL)
./tests/hazmat/bindings/test_openssl.py:119:        expected_options = current_options | b.lib.SSL_OP_ALL
./tests/hazmat/bindings/test_openssl.py:121:        assert b.lib.SSL_get_options(ssl) == expected_options
./tests/hazmat/bindings/test_openssl.py:126:        assert b.lib.SSL_OP_ALL > 0
./tests/hazmat/bindings/test_openssl.py:127:        ctx = b.lib.SSL_CTX_new(b.lib.TLSv1_method())
./tests/hazmat/bindings/test_openssl.py:128:        ctx = b.ffi.gc(ctx, b.lib.SSL_CTX_free)
./tests/hazmat/bindings/test_openssl.py:129:        ssl = b.lib.SSL_new(ctx)
./tests/hazmat/bindings/test_openssl.py:130:        ssl = b.ffi.gc(ssl, b.lib.SSL_free)
./tests/hazmat/bindings/test_openssl.py:131:        current_options = b.lib.SSL_get_mode(ssl)
./tests/hazmat/bindings/test_openssl.py:132:        resp = b.lib.SSL_set_mode(ssl, b.lib.SSL_OP_ALL)
./tests/hazmat/bindings/test_openssl.py:133:        expected_options = current_options | b.lib.SSL_OP_ALL
./tests/hazmat/bindings/test_openssl.py:135:        assert b.lib.SSL_get_mode(ssl) == expected_options
./src/cryptography/__about__.py:15:__uri__ = "https://github.com/pyca/cryptography"
./src/cryptography/hazmat/backends/openssl/x509.py:136:        # https://www.openssl.org/docs/crypto/OBJ_nid2ln.html#return_values
./src/cryptography/hazmat/bindings/openssl/asn1.py:16: * See https://bitbucket.org/cffi/cffi/issue/69
./src/cryptography/hazmat/bindings/openssl/bignum.py:18: * See https://bitbucket.org/cffi/cffi/issue/69

== sql() ==

== tmp() ==

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==
./tests/hazmat/backends/test_openssl.py:243:        # PYTHONPATH environment variable.
./tests/hazmat/backends/test_openssl.py:245:        env["PYTHONPATH"] = os.pathsep.join(sys.path)

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./src/cryptography/hazmat/primitives/padding.py:65:        # TODO: more copies than necessary, we should use zero-buffer (#193)
./src/cryptography/hazmat/primitives/padding.py:98:        # TODO: more copies than necessary, we should use zero-buffer (#193)
./src/cryptography/hazmat/bindings/openssl/asn1.py:13: * TODO: This typedef is wrong.
./src/cryptography/hazmat/bindings/openssl/bignum.py:15: * TODO: This typedef is wrong.

== unsafe input mechanisms ==
(unsupported type 'python')

