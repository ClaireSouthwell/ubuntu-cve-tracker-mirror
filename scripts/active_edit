#!/usr/bin/env python
import os, re, sys
import optparse

releases = ['upstream', 'dapper', 'edgy', 'feisty', 'devel']
max_file_size = 10 * 1024 * 1024  # 10MB

def update_cve(cve, pkgname):
	'''Update an existing CVE file'''
	file = open(cve, "r")
	lines =  file.read(max_file_size).split('\n')
	file.close()

	skipped = []
	added_lines = ""

	for line in lines:
		for r in releases:
			pat = re.compile(r'^' + r + '_' + pkgname + ':')
			if pat.search(line):
				skipped.append(r)
		
	for r in releases:
		if r in skipped:
			 os.write(sys.stderr.fileno(), "skipping '" + pkgname + "' for " + r + " (already included)\n")
		else:
			added_lines += r + '_' + pkgname + ': needs-triage\n'

	if len(releases) == len(skipped):
		os.write(sys.stdout.fileno(), "\nNothing to add!\n")
		return
		
	if not options.autoconfirm:
		os.write(sys.stdout.fileno(), "\n" + added_lines)
		os.write(sys.stdout.fileno(), "\nAppend the above to " + cve + " (y|N)? ")
		ans = sys.stdin.readline().lower()
		os.write(sys.stdout.fileno(), "\n")

	if options.autoconfirm or ans.startswith("y"):
		file = open(cve, "a")
		file.write(added_lines)
		file.close()
	else:
		os.write(sys.stdout.fileno(), "Aborted\n")

def create_cve(cve, pkgname):
	'''Create a new CVE file'''
	boiler = open("00boilerplate", "r")
	lines =  boiler.read(max_file_size).split('\n')
	boiler.close()

	cand_pat = re.compile(r'^Candidate:')
	pkg_pat = re.compile(r'^#[a-z]+_PKG')

	contents = ""
	for line in lines:
		if (cand_pat.search(line)):
			contents += line + cve + '\n'
		elif (pkg_pat.search(line)):
			for r in releases:
				rel_pat = re.compile(r)
				if (rel_pat.search(line)):
					contents += r + '_' + pkgname + ": needs-triage" + '\n'
		elif (line):
			contents += line + '\n'
		
	if not options.autoconfirm:
		os.write(sys.stdout.fileno(), contents)
		os.write(sys.stdout.fileno(), "\nWrite the above to " + cve + " (y|N)? ")
		ans = sys.stdin.readline().lower()
		os.write(sys.stdout.fileno(), "\n")

	if options.autoconfirm or ans.startswith("y"):
		newfile = open(cve, 'w')
		newfile.write(contents)
		newfile.close()
	else:
		os.write(sys.stdout.fileno(), "Aborted\n")

parser = optparse.OptionParser()
parser.add_option("-p", "--package", dest="pkgname", help="package name", metavar="NAME")
parser.add_option("-c", "--cve", dest="cve", help="CVE entry", metavar="CVE-XXXX-XXXX")
parser.add_option("-y", "--yes", dest="autoconfirm", help="Do not ask for confirmation", action="store_true")
(options, args) = parser.parse_args()

if not options.pkgname:
	os.write(sys.stderr.fileno(), "Need to supply a package name\n")
	sys.exit(1)

if not options.cve:
	os.write(sys.stderr.fileno(), "Need to supply a CVE entry\n")
	sys.exit(1)

cve = options.cve
pkgname = options.pkgname

pat = re.compile(r'^CVE-\d\d\d\d-\d\d\d\d$')
if not pat.search(cve):
	os.write(sys.stderr.fileno(), "Bad CVE entry.  Should be CVE-XXXX-XXXX\n")
	sys.exit(1)

# more here
pat = re.compile(r'\s')
if pat.search(pkgname):
	os.write(sys.stderr.fileno(), "Bad package name\n")
	sys.exit(1)

if not os.path.isfile("00boilerplate"):
	os.write(sys.stderr.fileno(), "Could not find 00boilerplate in the current directory\n")
	sys.exit(1)

if (os.path.isfile(cve)):
	if not options.autoconfirm:
		os.write(sys.stdout.fileno(), "Found existing " + cve + "...\n\n")
	update_cve(cve, pkgname)
else:
	if not options.autoconfirm:
		os.write(sys.stdout.fileno(), "Creating new " + cve + "...\n\n")
	create_cve(cve, pkgname)

sys.exit(0)

