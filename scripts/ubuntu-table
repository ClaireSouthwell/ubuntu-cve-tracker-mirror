#!/usr/bin/env python

# Copyright (C) 2005-2008 Canonical Ltd.
# Author: Kees Cook <kees@ubuntu.com>
# Author: Jamie Strandboge <jamie@ubuntu.com>
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import os, re, sys
import optparse
import cve_lib
import support_tool
from urllib import quote
from cgi import escape

import source_map
map = source_map.load()
releases = cve_lib.all_releases

def htmlTableHeader():
    header = '<tr><th>CVE</th><th>Package</th>'
    for rel in releases:
        name = rel
        header += "<th>%s</th>" % (cve_lib.release_names[name])
    header += '<th>Links</th><th>Notes</th></tr>'
    return header

parser = optparse.OptionParser()
parser.add_option("-H", "--html", help="Output html", action="store_true")
parser.add_option("-s", "--supported", help="Mark those CVEs that have packages officially supported by Canonical", action="store_true")
parser.add_option("-t", "--untriaged", help="Show only those CVEs do not have a Priority set", action="store_true")
parser.add_option("-S", "--skip-devel", help="Show only those CVEs *not* in the current devel release", action="store_true")
parser.add_option("-E", "--skip-embargoed", help="Show only those CVEs *not* embargoed", action="store_true")
parser.add_option("--unmask-needed", help="Show CVE status without translating to 'needed'", action="store_true")
parser.add_option("-D", "--only-devel", help="Show only those CVEs in the current devel release", action="store_true")
parser.add_option("-N", "--no-retired", help="Don't report retireable CVEs", action="store_true")
parser.add_option("-p", "--packages", help="Report only on the given packages", action="append", type="string")
parser.add_option("-P", "--pkgfamily", help="Perform pkg family renamings (use argument multiple times for 'linux' and/or 'xen')", action="append", default=[])
parser.add_option("--flavor", help="Show packages affecting flavor", metavar="FLAVOR")
parser.add_option("--only-flavor", help="Show only packages affecting flavor specified with --flavor", action="store_true")
parser.add_option("--support-db", help="Database for support mappings (required for --flavor)", metavar="FILE")
parser.add_option("-d", "--debug", help="Report debug information while loading", action="store_true")
(opt, args) = parser.parse_args()

# retirement processes cannot be done safely when limiting by package
if opt.packages:
    opt.no_retired = True

support_db = None
if opt.flavor:
    if not opt.support_db:
        print >>sys.stderr, "Must specify --support-db with --flavor"
        sys.exit(1)
    if not os.path.exists(os.path.expanduser(opt.support_db)):
        print >>sys.stderr, "'%s' does not exist" % opt.support_db
        sys.exit(1)
    support_db = support_tool._load_db(os.path.expanduser(opt.support_db))
    releases = cve_lib.flavor_releases

if len(cve_lib.devel_release)>0:
    if opt.skip_devel:
        releases.remove(cve_lib.devel_release)
    if opt.only_devel:
        releases = [cve_lib.devel_release]

for eol in cve_lib.eol_releases:
    if eol in releases:
        releases.remove(eol)

if len(args)>0:
    cves = args
    uems = []
else:
    (cves, uems) = cve_lib.get_cve_list()
    if opt.skip_embargoed:
        for cve in uems:
            cves.remove(cve)
        uems = []
(table, priority, cves, namemap, cveinfo) = cve_lib.load_table(cves, uems, opt)

if opt.html:
    print "<table>"
    print htmlTableHeader()
else:
    prefix = '%-35s'
    format = '%14s'
    print prefix % ' ',
    for rel in releases:
        if '/' in rel:
            (base, ppa) = rel.split('/')
            rel = "%s/" % (base)
            # abbreviate the ppa name 
            for i in ppa.split('-'):
                rel += i[0]
        print format % rel,
    print

for cve in sorted(cves):
    if not table.has_key(cve):
        print >>sys.stderr, 'triage: %s' % (cve)
        continue
    if opt.untriaged and priority[cve] in ['negligible','low','medium','high','critical']:
        continue
    cve_needed = False
    for pkg in sorted(table[cve].keys()):
        if opt.debug:
            print >>sys.stderr, "%s: Processing '%s'" % (cve, pkg)

        # Skip CVEs for some package if flavor is specified
        in_flavor = True
        if support_db != None:
            in_flavor = False
            for rel in releases:
                if support_tool._is_flavor('src', support_db, pkg, rel, opt.flavor):
                    if opt.only_flavor:
                        if not table[cve][pkg].has_key(rel) and not map[rel].has_key(pkg):
                            # DNE
                            continue
                        elif table[cve][pkg].has_key(rel) and table[cve][pkg][rel] in ['released', 'not-affected', 'ignored']:
                            # Nothing to do
                            continue
                        elif support_tool._is_canonical_supported('src', support_db, pkg, rel):
                            # Canonical supports it
                            continue
                    in_flavor = True
        if not in_flavor:
            continue

        action_needed = False   # A package in any release needs updating
        released = False        # A package in any release has been fixed
        supported = False       # A package in any release is supported and needs to be fixed
        partner = False         # A package in any release is partner-supplied
        mark = dict()
        for rel in releases:
            release = rel
            pkg_rel_supported = False  # Package in *this* release is supported

            mark.setdefault(rel,"")

            # Find any unlisted items and decide if they are DNE or needs-triage
            if not table[cve][pkg].has_key(rel):
                table[cve][pkg].setdefault(rel,'needs-triage')
                if not map[release].has_key(pkg):
                    table[cve][pkg][rel] = 'DNE'

            # FIXME: this shouldn't be possible, with the cve_lib checks now...
            if not table[cve][pkg][rel] in ['N/A', 'DNE', 'active', 'ignored', 'not-affected', 'needs-triage', 'needed', 'deferred', 'pending', 'released']:
                print >>sys.stderr, '%s %s %s: bad state "%s"' % (cve, pkg, rel, table[cve][pkg][rel])
                continue

            # Check if package is supported on this release
            pkgname = pkg
            if namemap.has_key(pkg) and namemap[pkg].has_key(rel):
                pkgname = namemap[pkg][rel]
            if cve_lib.is_supported(map, pkgname, rel, cveinfo[cve]):
                pkg_rel_supported = True
                if opt.supported:
                    mark[rel] = "*"

            # Is it already released?
            if table[cve][pkg][rel] in ['released']:
                released = True

            # Is is needed still?
            if table[cve][pkg][rel] in ['needed','deferred','pending','needs-triage','active']:
                action_needed = True
                # Does this package need attention for a supported release?
                if pkg_rel_supported:
                    supported = True

            # A partner issue?
            if cve_lib.is_partner(map, pkg, rel):
                partner = True

            if opt.debug:
                print >>sys.stderr, "%s: %s: %s (%s, released:%d)" % (cve,pkg,table[cve][pkg][rel],rel,released)

        if action_needed:
            if opt.html:
                show_priority = priority[cve]['default']
                if priority[cve].has_key(pkg):
                    show_priority = priority[cve][pkg]
                print '<tr class="%s">' % (quote(show_priority)),
                print '<td class="cve"><a href="%s">%s</a></td>' % (quote(cve), escape(cve)),

                # this rigamorole is to add 'pkgpending' to the source package
                # column *only* if all releases are 'pending' (so we can still
                # see the vulnerability priority)
                numpending = 0
                for rel in releases:
                    if table[cve][pkg][rel] == "pending":
                        numpending += 1

                pkgclass = 'pkg'
                if numpending == len(releases):
                    pkgclass += 'pending'

                print '<td class="%s"><a href="pkg/%s.html">%s</a></td>' % (pkgclass, quote(pkg), escape(pkg)),

                for rel in releases:
                    pkg_status = table[cve][pkg][rel]
                    if not opt.unmask_needed and table[cve][pkg][rel] in ['active','deferred']:
                        pkg_status = 'needed'
                    print '<td class="%s">%s%s</td>' % (quote(pkg_status),escape(pkg_status),escape(mark[rel])),
                print '<td style="font-size: small;"><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=%s">Mitre</a> <a href="https://launchpad.net/bugs/cve/%s">LP</a> <a href="http://security-tracker.debian.net/tracker/%s">Debian</a></td>' % (quote(cve), quote(cve), quote(cve)),
                print '<td>',
                if opt.supported:
                    if partner:
                        print '<p>PARTNER</p>',
                    elif supported:
                        print '<p>SUPPORTED</p>',
                if cve in uems:
                    print '<p>EMBARGOED</p>',
                print '</td>',
                print '</tr>'
            else:
                print prefix % ('%s %s:' % (cve,pkg)), 
                for rel in releases:
                    pkg_status = table[cve][pkg][rel]
                    if not opt.unmask_needed and table[cve][pkg][rel] in ['active','deferred']:
                        pkg_status = 'needed'
                    print format % ('%s%s' % (pkg_status,mark[rel])),
                if action_needed and released:
                    print '[out of sync]',
                if opt.supported:
                    if partner:
                        print 'PARTNER',
                    elif supported:
                        print 'SUPPORTED',
                if cve in uems:
                    print 'EMBARGOED',
                # Priority needs to remain the last item in the list for other
                # scripts that parse ubuntu-table output.
                if priority[cve].has_key(pkg):
                    print priority[cve][pkg],
                else:
                    print priority[cve]['default'],
                print
            cve_needed = True

    if not opt.no_retired and not cve_needed and not opt.skip_devel and not cve in uems:
        print >>sys.stderr, 'retire: %s' % (cve)

if opt.html:
    print "</table>"
