#!/bin/bash
# shellcheck disable=SC2039
# ^^^^^^^^^^^^^^^^^^^^^^^^^ this is bash so ignore warnings related to /bin/sh

# Copyright (C) 2018 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

# Common functions etc for interfacing with KPIs etc
set -e

# uncomment to enable more verbosity
#VERBOSE=1

# uncomment to not actually push any data for testing purposes
#DRY_RUN=1

# for some graphs we generate data for historic releases as well
export HISTORIC_RELEASES="precise vivid wily yakkety zesty artful"
# current supported releases
export RELEASES="trusty xenial bionic cosmic"
# current supported releases and versions - intended to be parsed via
# echo $RELEASES_VERSIONS | while read -r dist version; do ... done
export RELEASES_VERSIONS="trusty 14.04
xenial 16.04
bionic 18.04
cosmic 18.10"

INFLUXDB_HOSTNAME="influxdb.security.kpi.internal"
PROMETHEUS_PUSH_HOSTNAME="push.security.kpi.internal"

# echo conditional on $VERBOSE
debug ()
{
  if [ ! -z "$VERBOSE" ]; then
    echo "$@" >> /dev/stdout
  fi
}

# output to stderr
error ()
{
  echo "ERROR: $*" >> /dev/stderr
}

# quiet versions of pushd and popd
pushd () {
  local output;
  if [ ! -z "$VERBOSE" ]; then
    output=/dev/stdout
  else
    output=/dev/null
  fi
  command pushd "$@" >> $output
}

# quiet versions of pushd and popd
popd () {
  local output;
  if [ ! -z "$VERBOSE" ]; then
    output=/dev/stdout
  else
    output=/dev/null
  fi
  command popd "$@" >> $output
}

check_name_resolution ()
{
  if [ $# -ne 1 ]; then
    error "Need to provide HOSTNAME check_name_resolution() "
    return 1
  fi
  local hostname=$1
  if ! nslookup "$hostname" 1>/dev/null 2>&1; then
    error "Unable to resolve host $hostname - you must be connected to the Canonical VPN to use this script."
    return 1
  fi
  return 0
}

debug "Running with VERBOSE output"
if [ ! -z "$DRY_RUN" ]; then
  # use error so this output is noticeable
  error "DRY_RUN - not actually pushing to influxdb / prometheus"
fi

# always check we can resolve influxdb and prometheus push server
debug "Checking we can resolve influxdb and prometheus push hostnames..."
check_name_resolution "$INFLUXDB_HOSTNAME"
check_name_resolution "$PROMETHEUS_PUSH_HOSTNAME"

# read influxdb_security_password from UCT config
# shellcheck source=/dev/null
. "$HOME"/.ubuntu-cve-tracker.conf
# shellcheck disable=SC2154
INFLUXDB_PASSWORD=${influxdb_security_password}

# support running interactively as well
while [ -z "$INFLUXDB_PASSWORD" ]; do
  echo -n "Enter password for user 'security' influxdb: "
  read -r -s INFLUXDB_PASSWORD
  # newline after password
  echo ""
done

# push DATA with TIMESTAMP (in seconds since epoch) to influxdb
push_to_influx ()
{
  if [ $# -ne 2 ]; then
    error "Need to provide DATA and TIMESTAMP to push_to_influx() "
    return 1
  fi
  local data=$1
  local timestamp=$2

  local response;

  # add timestamp to data
  data="$data $timestamp"

  # shellcheck disable=SC2086
  date="$(date -d@$timestamp -u)"
  debug "Pushing \"$data\" for $date to Influx..."
  if [ -z "$DRY_RUN" ]; then
    # shellcheck disable=SC2034
    response=$(http_proxy=; curl -s -o /dev/null -w "%{http_code}" -i -XPOST "http://influxdb.security.kpi.internal:8086/write?db=security&u=security&p=$INFLUXDB_PASSWORD;precision=s" --data-binary "$data")
    if [ "$response" != 204 ]; then
      error "Failed to push data: $response"
      return 1
    fi
  fi
  return 0
}

# query influxdb user read-only account to look up most recent data for METRIC
# and return the number of days this was in the past - ie. the number of days
# of missing data for METRIC
get_missing_days_from_influx ()
{
  if [ $# -ne 1 ]; then
    error "Need to specify the METRIC to get_missing_days_from_influx()"
    return 1
  fi

  local metric=$1

  local lastday;
  local lastday_secs;
  local today_secs;
  local diff_secs;
  local days;

  # poll influxdb to find last day with data - use the readonly user and password
  # shellcheck disable=SC2034
  lastday=$(http_proxy=; curl -s -G "http://influxdb.security.kpi.internal:8086/query?db=security&u=securityro&p=ainoNgoh2hohseevoo0zeic3iedew9Oo" --data-urlencode "q=SELECT * FROM \"$metric\" GROUP BY * ORDER BY DESC LIMIT 1" | grep -o "[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}" | head -n1 || true)
  if [ -z "$lastday" ]; then
    # 2 years ago seems long enough
    lastday="2016-01-01"
    error "Unable to get last day for $metric... assuming $lastday"
  fi

  lastday_secs=$(date +%s -d "$lastday")
  today_secs=$(date +%s)
  diff_secs=$((today_secs - lastday_secs))
  days=$((diff_secs / 86400))
  echo "$days"
}

# push DATA to JOB on prometheus push server
push_to_prometheus ()
{
  if [ $# -ne 2 ]; then
    error "Need to specify the DATA to push and the JOB to push_to_prometheus()"
    return 1
  fi

  local data=$1
  local job=$2

  debug "Pushing \"$data\" to Prometheus job \"$job\""
  if [ -z "$DRY_RUN" ]; then
    # shellcheck disable=SC2034
    response=$(http_proxy=; echo "$data" | curl -s --data-binary @- "http://push.security.kpi.internal:9091/metrics/job/$job")
    if [ "$response" != 202 ]; then
      error "Failed to push data: $response"
      return 1
    fi
  fi
  return 0
}
