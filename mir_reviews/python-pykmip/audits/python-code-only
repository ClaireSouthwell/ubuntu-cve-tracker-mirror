Running: /home/sarnold/bin/audit-code.sh -c python ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
(unsupported type 'python')

== files() ==
./kmip/services/kmip_client.py:197:    def open(self):
./kmip/services/server/server.py:123:            open(path, 'w').close()
./kmip/pie/client.py:101:    def open(self):
./kmip/pie/client.py:114:                self.proxy.open()
./kmip/pie/client.py:395:        self.open()
./kmip/__init__.py:24:with open(version_path, 'r') as version_file:
./kmip/demos/units/activate.py:44:    client.open()
./kmip/demos/units/create.py:77:    client.open()
./kmip/demos/units/query.py:60:    client.open()
./kmip/demos/units/revoke.py:45:    client.open()
./kmip/demos/units/locate.py:68:    client.open()
./kmip/demos/units/destroy.py:63:    client.open()
./kmip/demos/units/register.py:65:    client.open()
./kmip/demos/units/get.py:81:    client.open()
./kmip/demos/units/discover_versions.py:50:    client.open()
./kmip/demos/units/create_key_pair.py:90:    client.open()

== logging() ==
./kmip/services/kmip_client.py:199:        self.logger.debug("KMIPProxy keyfile: {0}".format(self.keyfile))
./kmip/services/kmip_client.py:200:        self.logger.debug("KMIPProxy certfile: {0}".format(self.certfile))
./kmip/services/kmip_client.py:201:        self.logger.debug(
./kmip/services/kmip_client.py:204:        self.logger.debug(
./kmip/services/kmip_client.py:207:        self.logger.debug("KMIPProxy ca_certs: {0}".format(self.ca_certs))
./kmip/services/kmip_client.py:208:        self.logger.debug("KMIPProxy do_handshake_on_connect: {0}".format(
./kmip/services/kmip_client.py:210:        self.logger.debug("KMIPProxy suppress_ragged_eofs: {0}".format(
./kmip/services/kmip_client.py:221:                self.logger.error("An error occurred while connecting to "
./kmip/services/kmip_client.py:269:            request = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:270:            response = self._send_and_receive_message(request)
./kmip/services/kmip_client.py:310:        request = self._build_request_message(None, [batch_item])
./kmip/services/kmip_client.py:311:        response = self._send_and_receive_message(request)
./kmip/services/kmip_client.py:344:            request = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:345:            response = self._send_and_receive_message(request)
./kmip/services/kmip_client.py:376:            request = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:377:            response = self._send_and_receive_message(request)
./kmip/services/kmip_client.py:389:            request = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:390:            response = self._send_and_receive_message(request)
./kmip/services/kmip_client.py:409:        message = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:410:        self._send_message(message)
./kmip/services/kmip_client.py:412:        data = self._receive_message()
./kmip/services/kmip_client.py:599:    def _process_response_error(self, batch_item):
./kmip/services/kmip_client.py:635:        message = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:636:        self._send_message(message)
./kmip/services/kmip_client.py:638:        data = self._receive_message()
./kmip/services/kmip_client.py:672:        message = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:673:        self._send_message(message)
./kmip/services/kmip_client.py:675:        data = self._receive_message()
./kmip/services/kmip_client.py:705:        message = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:706:        self._send_message(message)
./kmip/services/kmip_client.py:708:        data = self._receive_message()
./kmip/services/kmip_client.py:742:        message = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:743:        self._send_message(message)
./kmip/services/kmip_client.py:745:        data = self._receive_message()
./kmip/services/kmip_client.py:779:        message = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:780:        self._send_message(message)
./kmip/services/kmip_client.py:782:        data = self._receive_message()
./kmip/services/kmip_client.py:828:        message = self._build_request_message(credential, [batch_item])
./kmip/services/kmip_client.py:829:        self._send_message(message)
./kmip/services/kmip_client.py:831:        data = self._receive_message()
./kmip/services/kmip_client.py:866:    def _build_request_message(self, credential, batch_items):
./kmip/services/kmip_client.py:884:    def _send_message(self, message):
./kmip/services/kmip_client.py:889:    def _receive_message(self):
./kmip/services/kmip_client.py:892:    def _send_and_receive_message(self, request):
./kmip/services/kmip_client.py:893:        self._send_message(request)
./kmip/services/kmip_client.py:895:        data = self._receive_message()
./kmip/services/server/engine.py:303:            message (str): A string providing additional information about
./kmip/services/server/processor.py:181:            self.logger.debug("Process operation: Not implemented")
./kmip/services/server/kmip_server.py:37:        warnings.warn((
./kmip/services/server/kmip_server.py:86:                self.logger.error('KMIPServer {0} {1}'.format(type(e), e))
./kmip/services/server/kmip_protocol.py:34:            self.logger.debug('KMIPProtocol.write: {0}'.format(
./kmip/services/server/kmip_protocol.py:50:        self.logger.debug('KMIPProtocol.read: {0}'.format(
./kmip/__init__.py:34:    warnings.warn(
./kmip/demos/utils.py:242:        logger.error("Unrecognized object type, could not build cryptographic "
./kmip/demos/utils.py:288:        logger.error("Unrecognized object type, could not build key")
./kmip/demos/utils.py:301:        logger.error("Unrecognized object type, could not build cryptographic "
./kmip/demos/utils.py:315:        logger.error("Unrecognized object type, could not build cryptographic "
./kmip/demos/utils.py:442:        logger.error("Unrecognized object type, could not build secret value")
./kmip/demos/pie/create.py:38:        logger.error('No algorithm provided, exiting early from demo')
./kmip/demos/pie/create.py:41:        logger.error("No key length provided, exiting early from demo")
./kmip/demos/pie/create.py:53:            logger.error(e)
./kmip/demos/pie/register_symmetric_key.py:52:            logger.error(e)
./kmip/demos/pie/get_attribute_list.py:36:        logger.error('No ID provided, exiting early from demo')
./kmip/demos/pie/get_attribute_list.py:48:            logger.error(e)
./kmip/demos/pie/register_opaque_object.py:47:            logger.error(e)
./kmip/demos/pie/register_certificate.py:99:            logger.error(e)
./kmip/demos/pie/destroy.py:36:        logger.error('No UUID provided, exiting early from demo')
./kmip/demos/pie/destroy.py:46:            logger.error(e)
./kmip/demos/pie/register_secret_data.py:49:            logger.error(e)
./kmip/demos/pie/get.py:36:        logger.error('No UUID provided, exiting early from demo')
./kmip/demos/pie/get.py:47:            logger.error(e)
./kmip/demos/pie/create_key_pair.py:37:        logger.error('No algorithm provided, exiting early from demo')
./kmip/demos/pie/create_key_pair.py:40:        logger.error("No key length provided, exiting early from demo")
./kmip/demos/pie/create_key_pair.py:54:            logger.error(e)
./kmip/demos/pie/register_private_key.py:126:            logger.error(e)
./kmip/demos/pie/register_public_key.py:68:            logger.error(e)
./kmip/demos/units/activate.py:39:        logger.error('No UUID provided, exiting early from demo')
./kmip/demos/units/create.py:56:        logger.error('No algorithm provided, exiting early from demo')
./kmip/demos/units/create.py:59:        logger.error("No key length provided, exiting early from demo")
./kmip/demos/units/create.py:86:        logger.debug("{0} not found".format(algorithm))
./kmip/demos/units/create.py:87:        logger.debug("Invalid algorithm specified, exiting early from demo")
./kmip/demos/units/revoke.py:40:        logger.error('No UUID provided, exiting early from demo')
./kmip/demos/units/locate.py:50:        logger.error('No name provided, exiting early from demo')
./kmip/demos/units/destroy.py:45:        logger.error('No UUID provided, exiting early from demo')
./kmip/demos/units/register.py:46:        logger.error("Invalid object type specified; exiting early from demo")
./kmip/demos/units/register.py:51:        logger.error(
./kmip/demos/units/get.py:49:        logger.error('No UUID provided, exiting early from demo')
./kmip/demos/units/get.py:57:            logger.error(
./kmip/demos/units/create_key_pair.py:59:        logger.error('No algorithm provided, exiting early from demo')
./kmip/demos/units/create_key_pair.py:62:        logger.error("No key length provided, exiting early from demo")
./kmip/demos/units/create_key_pair.py:65:        logger.error("No key name provided, exiting early from demo")
./kmip/demos/units/create_key_pair.py:72:        logger.error("Invalid algorithm specified; exiting early from demo")
./kmip/core/exceptions.py:34:            message (string): A string containing more information about the
./kmip/core/exceptions.py:52:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:70:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:88:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:106:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:124:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:143:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:162:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:180:            message (string): A string containing information about the error.
./kmip/core/exceptions.py:198:            message (string): A string containing information about the error.
./kmip/core/utils.py:53:def build_er_error(class_object, descriptor, expected, received,
./kmip/core/primitives.py:682:            self.logger.error("Error reading boolean value from buffer")
./kmip/core/primitives.py:717:            self.logger.error("Error writing boolean value to buffer")
./kmip/core/factories/attribute_values.py:124:            msg = utils.build_er_error(attributes.CryptographicLength,
./kmip/core/factories/attribute_values.py:175:            msg = utils.build_er_error(attributes.ObjectGroup,
./kmip/core/factories/attribute_values.py:190:                msg = utils.build_er_error(
./kmip/core/factories/attribute_values.py:197:                msg = utils.build_er_error(
./kmip/core/factories/attribute_values.py:211:                msg = utils.build_er_error(attributes.ContactInformation,
./kmip/core/factories/secrets.py:130:                msg = utils.build_er_error(Template,
./kmip/core/factories/secrets.py:137:                        msg = utils.build_er_error(Template,
./kmip/core/factories/attributes.py:51:            msg = utils.build_er_error(Attribute, 'name',
./kmip/core/objects.py:1223:            message(string): An optional revocation message
./kmip/core/config_helper.py:53:            self.logger.debug("Using config file at {0}".format(CONFIG_FILE))
./kmip/core/config_helper.py:78:            self.logger.debug(ARG_MSG.format(direct_value, config_option_name))
./kmip/core/config_helper.py:83:                self.logger.debug(CONF_MSG.format(return_value,
./kmip/core/config_helper.py:88:                self.logger.debug(DEFAULT_MSG.format(default_value,
./kmip/core/server.py:109:        self.logger.debug('create() called')
./kmip/core/server.py:110:        self.logger.debug('object type = %s' % object_type)
./kmip/core/server.py:115:            self.logger.debug('invalid object type')
./kmip/core/server.py:127:            self.logger.debug('InvalidFieldException raised')
./kmip/core/server.py:133:            self.logger.debug('cryptographic length not supplied')
./kmip/core/server.py:157:        self.logger.debug('register() called')
./kmip/core/server.py:158:        self.logger.debug('object type = %s' % object_type)
./kmip/core/server.py:162:            self.logger.debug('invalid object type')
./kmip/core/server.py:165:            self.logger.debug('invalid object type')
./kmip/core/server.py:169:            self.logger.debug(msg)
./kmip/core/server.py:172:        self.logger.debug('Collecting all attributes')
./kmip/core/server.py:177:        self.logger.debug('Verifying all attributes are valid and set')
./kmip/core/server.py:188:            self.logger.debug('InvalidFieldException raised')
./kmip/core/server.py:212:        self.logger.debug('get() called')
./kmip/core/server.py:215:            self.logger.debug('no uuid provided')
./kmip/core/server.py:220:            self.logger.debug('key format type is None, setting to raw')
./kmip/core/server.py:223:            self.logger.debug('key format type is not raw')
./kmip/core/server.py:229:            self.logger.debug('key compression type is not None')
./kmip/core/server.py:235:            self.logger.debug('key wrapping specification is not None')
./kmip/core/server.py:240:        self.logger.debug('retrieving object from repo')
./kmip/core/server.py:244:            self.logger.debug('object not found in repo')
./kmip/core/server.py:256:        self.logger.debug('destroy() called')
./kmip/core/server.py:259:            self.logger.debug('no uuid provided')
./kmip/core/server.py:265:        self.logger.debug(msg)
./kmip/core/server.py:267:            self.logger.debug('repo did not find and delete managed object')
./kmip/core/server.py:278:        self.logger.debug('locate() called')
./kmip/core/server.py:280:        self.logger.debug(msg)
./kmip/core/server.py:292:        self.logger.debug(
./kmip/core/server.py:306:        self.logger.debug(msg)
./kmip/core/server.py:318:        self.logger.debug('Validating attribute %s' % name)
./kmip/core/server.py:326:                    self.logger.debug(msg)
./kmip/core/server.py:338:            self.logger.debug('validating attribute %s' % name)
./kmip/core/server.py:340:                self.logger.debug('attribute validated')
./kmip/core/server.py:343:                self.logger.debug('attribute not validated')
./kmip/core/server.py:357:        self.logger.debug(msg)
./kmip/core/server.py:365:        self.logger.debug(msg)
./kmip/core/server.py:382:        self.logger.debug('creating object with uuid = %s' % s_uuid)
./kmip/core/server.py:392:        self.logger.debug('getting all key attributes from key block')
./kmip/core/server.py:395:            self.logger.debug('crypto_alg set on key block')
./kmip/core/server.py:396:            self.logger.debug('adding crypto algorithm attribute')
./kmip/core/server.py:401:            self.logger.debug('crypto_length set on key block')
./kmip/core/server.py:402:            self.logger.debug('adding crypto length attribute')
./kmip/core/server.py:406:        self.logger.debug('getting key value attributes')
./kmip/core/server.py:408:            self.logger.debug('no wrapping data so key value is struct')
./kmip/core/server.py:413:                    self.logger.debug('adding the key value struct attributes')

== environment() ==

== privileged() ==

== networking() ==
./kmip/services/kmip_client.py:215:            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
./kmip/services/server/kmip_server.py:53:        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
./kmip/services/server/server.py:179:        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
./kmip/services/kmip_client.py:215:            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
./kmip/services/kmip_client.py:216:            self._create_socket(sock)
./kmip/services/kmip_client.py:219:                self.socket.connect((self.host, self.port))
./kmip/services/kmip_client.py:230:    def _create_socket(self, sock):
./kmip/services/kmip_client.py:231:        self.socket = ssl.wrap_socket(
./kmip/services/kmip_client.py:413:        message.read(data)
./kmip/services/kmip_client.py:639:        message.read(data)
./kmip/services/kmip_client.py:676:        message.read(data)
./kmip/services/kmip_client.py:709:        message.read(data)
./kmip/services/kmip_client.py:746:        message.read(data)
./kmip/services/kmip_client.py:783:        message.read(data)
./kmip/services/kmip_client.py:833:        message.read(data)
./kmip/services/kmip_client.py:886:        message.write(stream)
./kmip/services/kmip_client.py:887:        self.protocol.write(stream.buffer)
./kmip/services/kmip_client.py:890:        return self.protocol.read()
./kmip/services/kmip_client.py:896:        response.read(data)
./kmip/services/server/config.py:105:        parser.read(path)
./kmip/services/server/session.py:93:            request.read(request_data)
./kmip/services/server/session.py:129:        response.write(response_data)
./kmip/services/server/session.py:146:            response.write(response_data)
./kmip/services/server/processor.py:53:        stream = istream.read()
./kmip/services/server/processor.py:57:            message.read(stream)
./kmip/services/server/processor.py:63:            result.write(tstream)
./kmip/services/server/processor.py:64:            ostream.write(tstream.buffer)
./kmip/services/server/processor.py:67:            message.read(stream)
./kmip/services/server/kmip_server.py:53:        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
./kmip/services/server/kmip_server.py:55:        self.socket.bind((self.host, self.port))
./kmip/services/server/kmip_server.py:62:        self.socket.listen(0)
./kmip/services/server/kmip_server.py:66:            connection = ssl.wrap_socket(
./kmip/services/server/server.py:179:        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
./kmip/services/server/server.py:182:        self._socket = ssl.wrap_socket(
./kmip/services/server/server.py:196:            self._socket.bind(
./kmip/services/server/server.py:233:            if thread is not threading.current_thread():
./kmip/services/server/server.py:273:        self._socket.listen(5)
./kmip/services/server/kmip_protocol.py:31:    def write(self, data):
./kmip/services/server/kmip_protocol.py:38:    def read(self):
./kmip/pie/objects.py:382:event.listen(SymmetricKey._names, 'append',
./kmip/pie/objects.py:535:event.listen(PublicKey._names, 'append',
./kmip/pie/objects.py:687:event.listen(PrivateKey._names, 'append',
./kmip/pie/objects.py:867:event.listen(X509Certificate._names, 'append',
./kmip/pie/objects.py:985:event.listen(SecretData._names, 'append',
./kmip/pie/objects.py:1092:event.listen(OpaqueObject._names, 'append',
./kmip/__init__.py:25:    mo = re.search(r"^.*= '(\d\.\d\.\d)'$", version_file.read(), re.MULTILINE)
./kmip/core/misc.py:143:    def read(self, istream):
./kmip/core/misc.py:152:        super(ServerInformation, self).read(istream)
./kmip/core/misc.py:153:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/misc.py:155:        self.data = BytearrayStream(tstream.read())
./kmip/core/misc.py:160:    def write(self, ostream):
./kmip/core/misc.py:169:        tstream.write(self.data.buffer)
./kmip/core/misc.py:172:        super(ServerInformation, self).write(ostream)
./kmip/core/misc.py:173:        ostream.write(tstream.buffer)
./kmip/core/utils.py:73:    def read(self, n=None):
./kmip/core/utils.py:104:    def write(self, b):
./kmip/core/secrets.py:72:    def read(self, istream):
./kmip/core/secrets.py:81:        super(Certificate, self).read(istream)
./kmip/core/secrets.py:82:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/secrets.py:87:        self.certificate_type.read(tstream)
./kmip/core/secrets.py:88:        self.certificate_value.read(tstream)
./kmip/core/secrets.py:92:    def write(self, ostream):
./kmip/core/secrets.py:102:        self.certificate_type.write(tstream)
./kmip/core/secrets.py:103:        self.certificate_value.write(tstream)
./kmip/core/secrets.py:106:        super(Certificate, self).write(ostream)
./kmip/core/secrets.py:107:        ostream.write(tstream.buffer)
./kmip/core/secrets.py:144:    def read(self, istream):
./kmip/core/secrets.py:145:        super(KeyBlockKey, self).read(istream)
./kmip/core/secrets.py:146:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/secrets.py:149:        self.key_block.read(tstream)
./kmip/core/secrets.py:154:    def write(self, ostream):
./kmip/core/secrets.py:157:        self.key_block.write(tstream)
./kmip/core/secrets.py:161:        super(KeyBlockKey, self).write(ostream)
./kmip/core/secrets.py:162:        ostream.write(tstream.buffer)
./kmip/core/secrets.py:265:    def read(self, istream):
./kmip/core/secrets.py:266:        super(SplitKey, self).read(istream)
./kmip/core/secrets.py:267:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/secrets.py:270:        self.split_key_parts.read(tstream)
./kmip/core/secrets.py:273:        self.key_part_identifier.read(tstream)
./kmip/core/secrets.py:276:        self.split_key_threshold.read(tstream)
./kmip/core/secrets.py:280:            self.prime_field_size.read(tstream)
./kmip/core/secrets.py:283:        self.key_block.read(tstream)
./kmip/core/secrets.py:288:    def write(self, ostream):
./kmip/core/secrets.py:291:        self.split_key_parts.write(tstream)
./kmip/core/secrets.py:292:        self.key_part_identifier.write(tstream)
./kmip/core/secrets.py:293:        self.split_key_threshold.write(tstream)
./kmip/core/secrets.py:294:        self.split_key_method.write(tstream)
./kmip/core/secrets.py:297:            self.prime_field_size.write(tstream)
./kmip/core/secrets.py:299:        self.key_block.write(tstream)
./kmip/core/secrets.py:303:        super(SplitKey, self).write(ostream)
./kmip/core/secrets.py:304:        ostream.write(tstream.buffer)
./kmip/core/secrets.py:322:    def read(self, istream):
./kmip/core/secrets.py:323:        super(Template, self).read(istream)
./kmip/core/secrets.py:324:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/secrets.py:329:        attribute.read(tstream)
./kmip/core/secrets.py:334:            attribute.read(tstream)
./kmip/core/secrets.py:340:    def write(self, ostream):
./kmip/core/secrets.py:344:            attribute.write(tstream)
./kmip/core/secrets.py:348:        super(Template, self).write(ostream)
./kmip/core/secrets.py:349:        ostream.write(tstream.buffer)
./kmip/core/secrets.py:376:    def read(self, istream):
./kmip/core/secrets.py:377:        super(SecretData, self).read(istream)
./kmip/core/secrets.py:378:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/secrets.py:383:        self.secret_data_type.read(tstream)
./kmip/core/secrets.py:384:        self.key_block.read(tstream)
./kmip/core/secrets.py:389:    def write(self, ostream):
./kmip/core/secrets.py:392:        self.secret_data_type.write(tstream)
./kmip/core/secrets.py:393:        self.key_block.write(tstream)
./kmip/core/secrets.py:397:        super(SecretData, self).write(ostream)
./kmip/core/secrets.py:398:        ostream.write(tstream.buffer)
./kmip/core/secrets.py:431:    def read(self, istream):
./kmip/core/secrets.py:432:        super(OpaqueObject, self).read(istream)
./kmip/core/secrets.py:433:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/secrets.py:438:        self.opaque_data_type.read(tstream)
./kmip/core/secrets.py:439:        self.opaque_data_value.read(tstream)
./kmip/core/secrets.py:444:    def write(self, ostream):
./kmip/core/secrets.py:447:        self.opaque_data_type.write(tstream)
./kmip/core/secrets.py:448:        self.opaque_data_value.write(tstream)
./kmip/core/secrets.py:452:        super(OpaqueObject, self).write(ostream)
./kmip/core/secrets.py:453:        ostream.write(tstream.buffer)
./kmip/core/primitives.py:52:        tts = istream.read(self.TAG_SIZE)
./kmip/core/primitives.py:64:        tts = istream.read(self.TYPE_SIZE)
./kmip/core/primitives.py:80:        lst = istream.read(self.LENGTH_SIZE)
./kmip/core/primitives.py:91:    def read(self, istream):
./kmip/core/primitives.py:98:        ostream.write(pack('!I', self.tag.value)[1:])
./kmip/core/primitives.py:105:        ostream.write(pack('!B', self.type.value))
./kmip/core/primitives.py:116:        ostream.write(pack('!I', self.length))
./kmip/core/primitives.py:121:    def write(self, ostream):
./kmip/core/primitives.py:194:        self.value = unpack(self.pack_string, istream.read(self.length))[0]
./kmip/core/primitives.py:195:        pad = unpack(self.pack_string, istream.read(self.padding_length))[0]
./kmip/core/primitives.py:202:    def read(self, istream):
./kmip/core/primitives.py:203:        super(Integer, self).read(istream)
./kmip/core/primitives.py:207:        ostream.write(pack(self.pack_string, self.value))
./kmip/core/primitives.py:208:        ostream.write(pack(self.pack_string, 0))
./kmip/core/primitives.py:210:    def write(self, ostream):
./kmip/core/primitives.py:211:        super(Integer, self).write(ostream)
./kmip/core/primitives.py:306:    def read(self, istream):
./kmip/core/primitives.py:318:        super(LongInteger, self).read(istream)
./kmip/core/primitives.py:326:        self.value = unpack('!q', istream.read(self.length))[0]
./kmip/core/primitives.py:329:    def write(self, ostream):
./kmip/core/primitives.py:337:        super(LongInteger, self).write(ostream)
./kmip/core/primitives.py:338:        ostream.write(pack('!q', self.value))
./kmip/core/primitives.py:398:    def read(self, istream):
./kmip/core/primitives.py:411:        super(BigInteger, self).read(istream)
./kmip/core/primitives.py:425:            byte = struct.unpack('!B', istream.read(1))[0]
./kmip/core/primitives.py:445:    def write(self, ostream):
./kmip/core/primitives.py:475:        super(BigInteger, self).write(ostream)
./kmip/core/primitives.py:476:        ostream.write(hexadecimal)
./kmip/core/primitives.py:546:    def read(self, istream):
./kmip/core/primitives.py:560:        super(Enumeration, self).read(istream)
./kmip/core/primitives.py:568:        value = unpack('!I', istream.read(Enumeration.LENGTH))[0]
./kmip/core/primitives.py:570:        pad = unpack('!I', istream.read(Enumeration.LENGTH))[0]
./kmip/core/primitives.py:578:    def write(self, ostream):
./kmip/core/primitives.py:586:        super(Enumeration, self).write(ostream)
./kmip/core/primitives.py:587:        ostream.write(pack('!I', self.value.value))
./kmip/core/primitives.py:588:        ostream.write(pack('!I', 0))
./kmip/core/primitives.py:680:            value = unpack('!Q', istream.read(self.LENGTH))[0]
./kmip/core/primitives.py:694:    def read(self, istream):
./kmip/core/primitives.py:702:        super(Boolean, self).read(istream)
./kmip/core/primitives.py:715:            ostream.write(pack('!Q', self.value))
./kmip/core/primitives.py:720:    def write(self, ostream):
./kmip/core/primitives.py:728:        super(Boolean, self).write(ostream)
./kmip/core/primitives.py:790:            c = unpack(self.BYTE_FORMAT, istream.read(1))[0]
./kmip/core/primitives.py:800:                pad = unpack('!B', istream.read(1))[0]
./kmip/core/primitives.py:805:    def read(self, istream):
./kmip/core/primitives.py:806:        super(TextString, self).read(istream)
./kmip/core/primitives.py:817:            ostream.write(pack(self.BYTE_FORMAT, c))
./kmip/core/primitives.py:821:            ostream.write(pack('!B', 0))
./kmip/core/primitives.py:823:    def write(self, ostream):
./kmip/core/primitives.py:824:        super(TextString, self).write(ostream)
./kmip/core/primitives.py:885:            data.append(istream.read(1)[0])
./kmip/core/primitives.py:896:                pad = unpack('!B', istream.read(1))[0]
./kmip/core/primitives.py:901:    def read(self, istream):
./kmip/core/primitives.py:902:        super(ByteString, self).read(istream)
./kmip/core/primitives.py:909:            ostream.write(pack(self.BYTE_FORMAT, byte))
./kmip/core/primitives.py:913:            ostream.write(pack('!B', 0))
./kmip/core/primitives.py:915:    def write(self, ostream):
./kmip/core/primitives.py:916:        super(ByteString, self).write(ostream)
./kmip/core/primitives.py:1006:    def read(self, istream):
./kmip/core/primitives.py:1021:        super(Interval, self).read(istream)
./kmip/core/primitives.py:1029:        self.value = unpack('!I', istream.read(Interval.LENGTH))[0]
./kmip/core/primitives.py:1030:        pad = unpack('!I', istream.read(Interval.LENGTH))[0]
./kmip/core/primitives.py:1038:    def write(self, ostream):
./kmip/core/primitives.py:1046:        super(Interval, self).write(ostream)
./kmip/core/primitives.py:1047:        ostream.write(pack('!I', self.value))
./kmip/core/primitives.py:1048:        ostream.write(pack('!I', 0))
./kmip/core/keys.py:77:    def read(self, istream):
./kmip/core/keys.py:78:        super(TransparentSymmetricKey, self).read(istream)
./kmip/core/keys.py:79:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/keys.py:82:        self.key.read(tstream)
./kmip/core/keys.py:87:    def write(self, ostream):
./kmip/core/keys.py:90:        self.key.write(tstream)
./kmip/core/keys.py:94:        super(TransparentSymmetricKey, self).write(ostream)
./kmip/core/keys.py:95:        ostream.write(tstream.buffer)
./kmip/core/objects.py:88:    def read(self, istream):
./kmip/core/objects.py:89:        super(Attribute, self).read(istream)
./kmip/core/objects.py:90:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:94:        self.attribute_name.read(tstream)
./kmip/core/objects.py:99:            self.attribute_index.read(tstream)
./kmip/core/objects.py:115:        self.attribute_value.read(tstream)
./kmip/core/objects.py:119:    def write(self, ostream):
./kmip/core/objects.py:122:        self.attribute_name.write(tstream)
./kmip/core/objects.py:124:            self.attribute_index.write(tstream)
./kmip/core/objects.py:125:        self.attribute_value.write(tstream)
./kmip/core/objects.py:129:        super(Attribute, self).write(ostream)
./kmip/core/objects.py:130:        ostream.write(tstream.buffer)
./kmip/core/objects.py:179:        def read(self, istream):
./kmip/core/objects.py:180:            super(Credential.UsernamePasswordCredential, self).read(istream)
./kmip/core/objects.py:181:            tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:185:            self.username.read(tstream)
./kmip/core/objects.py:190:                self.password.read(tstream)
./kmip/core/objects.py:195:        def write(self, ostream):
./kmip/core/objects.py:198:            self.username.write(tstream)
./kmip/core/objects.py:200:                self.password.write(tstream)
./kmip/core/objects.py:204:            super(Credential.UsernamePasswordCredential, self).write(ostream)
./kmip/core/objects.py:205:            ostream.write(tstream.buffer)
./kmip/core/objects.py:264:        def read(self, istream):
./kmip/core/objects.py:265:            super(Credential.DeviceCredential, self).read(istream)
./kmip/core/objects.py:266:            tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:271:                self.device_serial_number.read(tstream)
./kmip/core/objects.py:276:                self.password.read(tstream)
./kmip/core/objects.py:281:                self.device_identifier.read(tstream)
./kmip/core/objects.py:286:                self.network_identifier.read(tstream)
./kmip/core/objects.py:291:                self.machine_identifier.read(tstream)
./kmip/core/objects.py:296:                self.media_identifier.read(tstream)
./kmip/core/objects.py:301:        def write(self, ostream):
./kmip/core/objects.py:305:                self.device_serial_number.write(tstream)
./kmip/core/objects.py:307:                self.password.write(tstream)
./kmip/core/objects.py:309:                self.device_identifier.write(tstream)
./kmip/core/objects.py:311:                self.network_identifier.write(tstream)
./kmip/core/objects.py:313:                self.machine_identifier.write(tstream)
./kmip/core/objects.py:315:                self.media_identifier.write(tstream)
./kmip/core/objects.py:319:            super(Credential.DeviceCredential, self).write(ostream)
./kmip/core/objects.py:320:            ostream.write(tstream.buffer)
./kmip/core/objects.py:330:    def read(self, istream):
./kmip/core/objects.py:331:        super(Credential, self).read(istream)
./kmip/core/objects.py:332:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:336:        self.credential_type.read(tstream)
./kmip/core/objects.py:346:        self.credential_value.read(tstream)
./kmip/core/objects.py:351:    def write(self, ostream):
./kmip/core/objects.py:354:        self.credential_type.write(tstream)
./kmip/core/objects.py:355:        self.credential_value.write(tstream)
./kmip/core/objects.py:359:        super(Credential, self).write(ostream)
./kmip/core/objects.py:360:        ostream.write(tstream.buffer)
./kmip/core/objects.py:391:    def read(self, istream):
./kmip/core/objects.py:392:        super(KeyBlock, self).read(istream)
./kmip/core/objects.py:393:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:396:        self.key_format_type.read(tstream)
./kmip/core/objects.py:400:            self.key_compression_type.read(tstream)
./kmip/core/objects.py:403:        self.key_value.read(tstream)
./kmip/core/objects.py:407:            self.cryptographic_algorithm.read(tstream)
./kmip/core/objects.py:411:            self.cryptographic_length.read(tstream)
./kmip/core/objects.py:415:            self.key_wrapping_data.read(tstream)
./kmip/core/objects.py:420:    def write(self, ostream):
./kmip/core/objects.py:423:        self.key_format_type.write(tstream)
./kmip/core/objects.py:426:            self.key_compression_type.write(tstream)
./kmip/core/objects.py:428:        self.key_value.write(tstream)
./kmip/core/objects.py:431:            self.cryptographic_algorithm.write(tstream)
./kmip/core/objects.py:433:            self.cryptographic_length.write(tstream)
./kmip/core/objects.py:435:            self.key_wrapping_data.write(tstream)
./kmip/core/objects.py:439:        super(KeyBlock, self).write(ostream)
./kmip/core/objects.py:440:        ostream.write(tstream.buffer)
./kmip/core/objects.py:473:    def read(self, istream):
./kmip/core/objects.py:474:        super(KeyMaterialStruct, self).read(istream)
./kmip/core/objects.py:475:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:477:        self.data = BytearrayStream(tstream.read())
./kmip/core/objects.py:482:    def write(self, ostream):
./kmip/core/objects.py:484:        tstream.write(self.data.buffer)
./kmip/core/objects.py:487:        super(KeyMaterialStruct, self).write(ostream)
./kmip/core/objects.py:488:        ostream.write(tstream.buffer)
./kmip/core/objects.py:517:    def read(self, istream):
./kmip/core/objects.py:518:        super(KeyValue, self).read(istream)
./kmip/core/objects.py:519:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:524:            self.key_material.read(tstream)
./kmip/core/objects.py:527:            self.key_material.read(tstream)
./kmip/core/objects.py:531:            attribute.read(tstream)
./kmip/core/objects.py:537:    def write(self, ostream):
./kmip/core/objects.py:540:        self.key_material.write(tstream)
./kmip/core/objects.py:543:            attribute.write(tstream)
./kmip/core/objects.py:546:        super(KeyValue, self).write(ostream)
./kmip/core/objects.py:547:        ostream.write(tstream.buffer)
./kmip/core/objects.py:601:    def read(self, istream):
./kmip/core/objects.py:602:        super(KeyInformation, self).read(istream)
./kmip/core/objects.py:603:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:606:        self.unique_identifier.read(tstream)
./kmip/core/objects.py:610:            self.cryptographic_parameters.read(tstream)
./kmip/core/objects.py:615:    def write(self, ostream):
./kmip/core/objects.py:618:        self.unique_identifier.write(tstream)
./kmip/core/objects.py:621:            self.cryptographic_parameters.write(tstream)
./kmip/core/objects.py:625:        super(KeyInformation, self).write(ostream)
./kmip/core/objects.py:626:        ostream.write(tstream.buffer)
./kmip/core/objects.py:700:    def read(self, istream):
./kmip/core/objects.py:701:        super(KeyWrappingData, self).read(istream)
./kmip/core/objects.py:702:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:705:        self.wrapping_method.read(tstream)
./kmip/core/objects.py:709:            self.encryption_key_information.read(tstream)
./kmip/core/objects.py:713:            self.mac_signature_key_information.read(tstream)
./kmip/core/objects.py:717:            self.mac_signature.read(tstream)
./kmip/core/objects.py:721:            self.iv_counter_nonce.read(tstream)
./kmip/core/objects.py:725:            self.encoding_option.read(tstream)
./kmip/core/objects.py:730:    def write(self, ostream):
./kmip/core/objects.py:734:        self.wrapping_method.write(tstream)
./kmip/core/objects.py:737:            self.encryption_key_information.write(tstream)
./kmip/core/objects.py:739:            self.mac_signature_key_information.write(tstream)
./kmip/core/objects.py:741:            self.mac_signature.write(tstream)
./kmip/core/objects.py:743:            self.iv_counter_nonce.write(tstream)
./kmip/core/objects.py:745:            self.encoding_option.write(tstream)
./kmip/core/objects.py:749:        super(KeyWrappingData, self).write(ostream)
./kmip/core/objects.py:750:        ostream.write(tstream.buffer)
./kmip/core/objects.py:783:    def read(self, istream):
./kmip/core/objects.py:784:        super(KeyWrappingSpecification, self).read(istream)
./kmip/core/objects.py:785:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:788:        self.wrapping_method.read(tstream)
./kmip/core/objects.py:792:            self.encryption_key_information.read(tstream)
./kmip/core/objects.py:796:            self.mac_signature_key_information.read(tstream)
./kmip/core/objects.py:800:            self.attribute_name.read(tstream)
./kmip/core/objects.py:804:            self.encoding_option.read(tstream)
./kmip/core/objects.py:809:    def write(self, ostream):
./kmip/core/objects.py:813:        self.wrapping_method.write(tstream)
./kmip/core/objects.py:816:            self.encryption_key_information.write(tstream)
./kmip/core/objects.py:818:            self.mac_signature_key_information.write(tstream)
./kmip/core/objects.py:820:            self.attribute_name.write(tstream)
./kmip/core/objects.py:822:            self.encoding_option.write(tstream)
./kmip/core/objects.py:826:        super(KeyWrappingSpecification, self).write(ostream)
./kmip/core/objects.py:827:        ostream.write(tstream.buffer)
./kmip/core/objects.py:858:    def read(self, istream):
./kmip/core/objects.py:859:        super(TemplateAttribute, self).read(istream)
./kmip/core/objects.py:860:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:868:            name.read(tstream)
./kmip/core/objects.py:874:            attribute.read(tstream)
./kmip/core/objects.py:880:    def write(self, ostream):
./kmip/core/objects.py:885:            name.write(tstream)
./kmip/core/objects.py:887:            attribute.write(tstream)
./kmip/core/objects.py:891:        super(TemplateAttribute, self).write(ostream)
./kmip/core/objects.py:892:        ostream.write(tstream.buffer)
./kmip/core/objects.py:1057:    def read(self, istream):
./kmip/core/objects.py:1066:        super(ExtensionInformation, self).read(istream)
./kmip/core/objects.py:1067:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:1069:        self.extension_name.read(tstream)
./kmip/core/objects.py:1073:            self.extension_tag.read(tstream)
./kmip/core/objects.py:1076:            self.extension_type.read(tstream)
./kmip/core/objects.py:1081:    def write(self, ostream):
./kmip/core/objects.py:1091:        self.extension_name.write(tstream)
./kmip/core/objects.py:1094:            self.extension_tag.write(tstream)
./kmip/core/objects.py:1096:            self.extension_type.write(tstream)
./kmip/core/objects.py:1099:        super(ExtensionInformation, self).write(ostream)
./kmip/core/objects.py:1100:        ostream.write(tstream.buffer)
./kmip/core/objects.py:1240:    def read(self, istream):
./kmip/core/objects.py:1249:        super(RevocationReason, self).read(istream)
./kmip/core/objects.py:1250:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/objects.py:1253:        self.revocation_code.read(tstream)
./kmip/core/objects.py:1257:            self.revocation_message.read(tstream)
./kmip/core/objects.py:1262:    def write(self, ostream):
./kmip/core/objects.py:1272:        self.revocation_code.write(tstream)
./kmip/core/objects.py:1274:            self.revocation_message.write(tstream)
./kmip/core/objects.py:1278:        super(RevocationReason, self).write(ostream)
./kmip/core/objects.py:1279:        ostream.write(tstream.buffer)
./kmip/core/attributes.py:110:    def read(self, istream):
./kmip/core/attributes.py:111:        super(Name, self).read(istream)
./kmip/core/attributes.py:112:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/attributes.py:117:        self.name_value.read(tstream)
./kmip/core/attributes.py:118:        self.name_type.read(tstream)
./kmip/core/attributes.py:122:    def write(self, ostream):
./kmip/core/attributes.py:126:        self.name_value.write(tstream)
./kmip/core/attributes.py:127:        self.name_type.write(tstream)
./kmip/core/attributes.py:131:        super(Name, self).write(ostream)
./kmip/core/attributes.py:132:        ostream.write(tstream.buffer)
./kmip/core/attributes.py:282:    def read(self, istream):
./kmip/core/attributes.py:283:        super(CryptographicParameters, self).read(istream)
./kmip/core/attributes.py:284:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/attributes.py:288:            self.block_cipher_mode.read(tstream)
./kmip/core/attributes.py:292:            self.padding_method.read(tstream)
./kmip/core/attributes.py:296:            self.hashing_algorithm.read(tstream)
./kmip/core/attributes.py:300:            self.key_role_type.read(tstream)
./kmip/core/attributes.py:305:    def write(self, ostream):
./kmip/core/attributes.py:310:            self.block_cipher_mode.write(tstream)
./kmip/core/attributes.py:312:            self.padding_method.write(tstream)
./kmip/core/attributes.py:314:            self.hashing_algorithm.write(tstream)
./kmip/core/attributes.py:316:            self.key_role_type.write(tstream)
./kmip/core/attributes.py:320:        super(CryptographicParameters, self).write(ostream)
./kmip/core/attributes.py:321:        ostream.write(tstream.buffer)
./kmip/core/attributes.py:468:    def read(self, istream):
./kmip/core/attributes.py:477:        super(Digest, self).read(istream)
./kmip/core/attributes.py:478:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/attributes.py:480:        self.hashing_algorithm.read(tstream)
./kmip/core/attributes.py:481:        self.digest_value.read(tstream)
./kmip/core/attributes.py:482:        self.key_format_type.read(tstream)
./kmip/core/attributes.py:487:    def write(self, ostream):
./kmip/core/attributes.py:497:        self.hashing_algorithm.write(tstream)
./kmip/core/attributes.py:498:        self.digest_value.write(tstream)
./kmip/core/attributes.py:499:        self.key_format_type.write(tstream)
./kmip/core/attributes.py:502:        super(Digest, self).write(ostream)
./kmip/core/attributes.py:503:        ostream.write(tstream.buffer)
./kmip/core/attributes.py:711:    def read(self, istream):
./kmip/core/attributes.py:720:        super(ApplicationSpecificInformation, self).read(istream)
./kmip/core/attributes.py:721:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/attributes.py:723:        self.application_namespace.read(tstream)
./kmip/core/attributes.py:724:        self.application_data.read(tstream)
./kmip/core/attributes.py:729:    def write(self, ostream):
./kmip/core/attributes.py:740:        self.application_namespace.write(tstream)
./kmip/core/attributes.py:741:        self.application_data.write(tstream)
./kmip/core/attributes.py:744:        super(ApplicationSpecificInformation, self).write(ostream)
./kmip/core/attributes.py:745:        ostream.write(tstream.buffer)
./kmip/core/config_helper.py:52:        if self.conf.read(CONFIG_FILE):
./kmip/core/messages/contents.py:61:    def read(self, istream):
./kmip/core/messages/contents.py:62:        super(ProtocolVersion, self).read(istream)
./kmip/core/messages/contents.py:63:        tstream = utils.BytearrayStream(istream.read(self.length))
./kmip/core/messages/contents.py:66:        self.protocol_version_major.read(tstream)
./kmip/core/messages/contents.py:67:        self.protocol_version_minor.read(tstream)
./kmip/core/messages/contents.py:71:    def write(self, ostream):
./kmip/core/messages/contents.py:75:        self.protocol_version_major.write(tstream)
./kmip/core/messages/contents.py:76:        self.protocol_version_minor.write(tstream)
./kmip/core/messages/contents.py:80:        super(ProtocolVersion, self).write(ostream)
./kmip/core/messages/contents.py:81:        ostream.write(tstream.buffer)
./kmip/core/messages/contents.py:220:    def read(self, istream):
./kmip/core/messages/contents.py:221:        super(Authentication, self).read(istream)
./kmip/core/messages/contents.py:222:        tstream = utils.BytearrayStream(istream.read(self.length))
./kmip/core/messages/contents.py:226:        self.credential.read(tstream)
./kmip/core/messages/contents.py:230:    def write(self, ostream):
./kmip/core/messages/contents.py:234:        self.credential.write(tstream)
./kmip/core/messages/contents.py:238:        super(Authentication, self).write(ostream)
./kmip/core/messages/contents.py:239:        ostream.write(tstream.buffer)
./kmip/core/messages/messages.py:51:    def read(self, istream):
./kmip/core/messages/messages.py:52:        super(RequestHeader, self).read(istream)
./kmip/core/messages/messages.py:53:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/messages.py:56:        self.protocol_version.read(tstream)
./kmip/core/messages/messages.py:61:            self.maximum_response_size.read(tstream)
./kmip/core/messages/messages.py:66:            self.asynchronous_indicator.read(tstream)
./kmip/core/messages/messages.py:71:            self.authentication.read(tstream)
./kmip/core/messages/messages.py:76:            self.batch_error_cont_option.read(tstream)
./kmip/core/messages/messages.py:81:            self.batch_order_option.read(tstream)
./kmip/core/messages/messages.py:86:            self.time_stamp.read(tstream)
./kmip/core/messages/messages.py:89:        self.batch_count.read(tstream)
./kmip/core/messages/messages.py:93:    def write(self, ostream):
./kmip/core/messages/messages.py:97:        self.protocol_version.write(tstream)
./kmip/core/messages/messages.py:99:            self.maximum_response_size.write(tstream)
./kmip/core/messages/messages.py:101:            self.asynchronous_indicator.write(tstream)
./kmip/core/messages/messages.py:103:            self.authentication.write(tstream)
./kmip/core/messages/messages.py:105:            self.batch_error_cont_option.write(tstream)
./kmip/core/messages/messages.py:107:            self.batch_order_option.write(tstream)
./kmip/core/messages/messages.py:109:            self.time_stamp.write(tstream)
./kmip/core/messages/messages.py:110:        self.batch_count.write(tstream)
./kmip/core/messages/messages.py:114:        super(RequestHeader, self).write(ostream)
./kmip/core/messages/messages.py:115:        ostream.write(tstream.buffer)
./kmip/core/messages/messages.py:130:    def read(self, istream):
./kmip/core/messages/messages.py:131:        super(ResponseHeader, self).read(istream)
./kmip/core/messages/messages.py:132:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/messages.py:135:        self.protocol_version.read(tstream)
./kmip/core/messages/messages.py:138:        self.time_stamp.read(tstream)
./kmip/core/messages/messages.py:141:        self.batch_count.read(tstream)
./kmip/core/messages/messages.py:146:    def write(self, ostream):
./kmip/core/messages/messages.py:150:        self.protocol_version.write(tstream)
./kmip/core/messages/messages.py:151:        self.time_stamp.write(tstream)
./kmip/core/messages/messages.py:152:        self.batch_count.write(tstream)
./kmip/core/messages/messages.py:156:        super(ResponseHeader, self).write(ostream)
./kmip/core/messages/messages.py:157:        ostream.write(tstream.buffer)
./kmip/core/messages/messages.py:187:    def read(self, istream):
./kmip/core/messages/messages.py:188:        super(RequestBatchItem, self).read(istream)
./kmip/core/messages/messages.py:189:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/messages.py:193:        self.operation.read(tstream)
./kmip/core/messages/messages.py:198:            self.unique_batch_item_id.read(tstream)
./kmip/core/messages/messages.py:204:        self.request_payload.read(tstream)
./kmip/core/messages/messages.py:209:            self.message_extension.read(tstream)
./kmip/core/messages/messages.py:213:    def write(self, ostream):
./kmip/core/messages/messages.py:217:        self.operation.write(tstream)
./kmip/core/messages/messages.py:220:            self.unique_batch_item_id.write(tstream)
./kmip/core/messages/messages.py:222:        self.request_payload.write(tstream)
./kmip/core/messages/messages.py:225:            self.message_extension.write(tstream)
./kmip/core/messages/messages.py:229:        super(RequestBatchItem, self).write(ostream)
./kmip/core/messages/messages.py:230:        ostream.write(tstream.buffer)
./kmip/core/messages/messages.py:258:    def read(self, istream):
./kmip/core/messages/messages.py:259:        super(ResponseBatchItem, self).read(istream)
./kmip/core/messages/messages.py:260:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/messages.py:265:            self.operation.read(tstream)
./kmip/core/messages/messages.py:270:            self.unique_batch_item_id.read(tstream)
./kmip/core/messages/messages.py:274:        self.result_status.read(tstream)
./kmip/core/messages/messages.py:279:            self.result_reason.read(tstream)
./kmip/core/messages/messages.py:284:            self.result_message.read(tstream)
./kmip/core/messages/messages.py:289:            self.async_correlation_value.read(tstream)
./kmip/core/messages/messages.py:297:                self.response_payload.read(tstream)
./kmip/core/messages/messages.py:302:            self.message_extension.read(tstream)
./kmip/core/messages/messages.py:307:    def write(self, ostream):
./kmip/core/messages/messages.py:312:            self.operation.write(tstream)
./kmip/core/messages/messages.py:314:            self.unique_batch_item_id.write(tstream)
./kmip/core/messages/messages.py:316:        self.result_status.write(tstream)
./kmip/core/messages/messages.py:319:            self.result_reason.write(tstream)
./kmip/core/messages/messages.py:321:            self.result_message.write(tstream)
./kmip/core/messages/messages.py:323:            self.async_correlation_value.write(tstream)
./kmip/core/messages/messages.py:325:            self.response_payload.write(tstream)
./kmip/core/messages/messages.py:327:            self.message_extension.write(tstream)
./kmip/core/messages/messages.py:331:        super(ResponseBatchItem, self).write(ostream)
./kmip/core/messages/messages.py:332:        ostream.write(tstream.buffer)
./kmip/core/messages/messages.py:345:    def read(self, istream):
./kmip/core/messages/messages.py:346:        super(RequestMessage, self).read(istream)
./kmip/core/messages/messages.py:349:        self.request_header.read(istream)
./kmip/core/messages/messages.py:354:            batch_item.read(istream)
./kmip/core/messages/messages.py:357:    def write(self, ostream):
./kmip/core/messages/messages.py:361:        self.request_header.write(tstream)
./kmip/core/messages/messages.py:363:            batch_item.write(tstream)
./kmip/core/messages/messages.py:367:        super(RequestMessage, self).write(ostream)
./kmip/core/messages/messages.py:368:        ostream.write(tstream.buffer)
./kmip/core/messages/messages.py:379:    def read(self, istream):
./kmip/core/messages/messages.py:380:        super(ResponseMessage, self).read(istream)
./kmip/core/messages/messages.py:383:        self.response_header.read(istream)
./kmip/core/messages/messages.py:388:            batch_item.read(istream)
./kmip/core/messages/messages.py:392:    def write(self, ostream):
./kmip/core/messages/messages.py:396:        self.response_header.write(tstream)
./kmip/core/messages/messages.py:398:            batch_item.write(tstream)
./kmip/core/messages/messages.py:402:        super(ResponseMessage, self).write(ostream)
./kmip/core/messages/messages.py:403:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/activate.py:48:    def read(self, istream):
./kmip/core/messages/payloads/activate.py:56:        super(ActivateRequestPayload, self).read(istream)
./kmip/core/messages/payloads/activate.py:57:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/activate.py:60:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/activate.py:65:    def write(self, ostream):
./kmip/core/messages/payloads/activate.py:76:            self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/activate.py:80:        super(ActivateRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/activate.py:81:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/activate.py:121:    def read(self, istream):
./kmip/core/messages/payloads/activate.py:130:        super(ActivateResponsePayload, self).read(istream)
./kmip/core/messages/payloads/activate.py:131:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/activate.py:134:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/activate.py:139:    def write(self, ostream):
./kmip/core/messages/payloads/activate.py:150:        self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/activate.py:154:        super(ActivateResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/activate.py:155:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/create.py:38:    def read(self, istream):
./kmip/core/messages/payloads/create.py:39:        super(CreateRequestPayload, self).read(istream)
./kmip/core/messages/payloads/create.py:40:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/create.py:45:        self.object_type.read(tstream)
./kmip/core/messages/payloads/create.py:46:        self.template_attribute.read(tstream)
./kmip/core/messages/payloads/create.py:51:    def write(self, ostream):
./kmip/core/messages/payloads/create.py:55:        self.object_type.write(tstream)
./kmip/core/messages/payloads/create.py:56:        self.template_attribute.write(tstream)
./kmip/core/messages/payloads/create.py:60:        super(CreateRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/create.py:61:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/create.py:81:    def read(self, istream):
./kmip/core/messages/payloads/create.py:82:        super(CreateResponsePayload, self).read(istream)
./kmip/core/messages/payloads/create.py:83:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/create.py:88:        self.object_type.read(tstream)
./kmip/core/messages/payloads/create.py:89:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/create.py:93:            self.template_attribute.read(tstream)
./kmip/core/messages/payloads/create.py:98:    def write(self, ostream):
./kmip/core/messages/payloads/create.py:102:        self.object_type.write(tstream)
./kmip/core/messages/payloads/create.py:103:        self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/create.py:106:            self.template_attribute.write(tstream)
./kmip/core/messages/payloads/create.py:110:        super(CreateResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/create.py:111:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/query.py:60:    def read(self, istream):
./kmip/core/messages/payloads/query.py:69:        super(QueryRequestPayload, self).read(istream)
./kmip/core/messages/payloads/query.py:70:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/query.py:74:            query_function.read(tstream)
./kmip/core/messages/payloads/query.py:80:    def write(self, ostream):
./kmip/core/messages/payloads/query.py:91:            query_function.write(tstream)
./kmip/core/messages/payloads/query.py:94:        super(QueryRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/query.py:95:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/query.py:185:    def read(self, istream):
./kmip/core/messages/payloads/query.py:194:        super(QueryResponsePayload, self).read(istream)
./kmip/core/messages/payloads/query.py:195:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/query.py:199:            operation.read(tstream)
./kmip/core/messages/payloads/query.py:204:            object_type.read(tstream)
./kmip/core/messages/payloads/query.py:209:            self.vendor_identification.read(tstream)
./kmip/core/messages/payloads/query.py:213:            self.server_information.read(tstream)
./kmip/core/messages/payloads/query.py:217:            application_namespace.read(tstream)
./kmip/core/messages/payloads/query.py:222:            extension_information.read(tstream)
./kmip/core/messages/payloads/query.py:228:    def write(self, ostream):
./kmip/core/messages/payloads/query.py:239:            operation.write(tstream)
./kmip/core/messages/payloads/query.py:242:            object_type.write(tstream)
./kmip/core/messages/payloads/query.py:245:            self.vendor_identification.write(tstream)
./kmip/core/messages/payloads/query.py:248:            self.server_information.write(tstream)
./kmip/core/messages/payloads/query.py:251:            application_namespace.write(tstream)
./kmip/core/messages/payloads/query.py:254:            extension_information.write(tstream)
./kmip/core/messages/payloads/query.py:257:        super(QueryResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/query.py:258:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/revoke.py:63:    def read(self, istream):
./kmip/core/messages/payloads/revoke.py:71:        super(RevokeRequestPayload, self).read(istream)
./kmip/core/messages/payloads/revoke.py:72:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/revoke.py:75:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/revoke.py:78:        self.revocation_reason.read(tstream)
./kmip/core/messages/payloads/revoke.py:83:            self.compromise_date.read(tstream)
./kmip/core/messages/payloads/revoke.py:88:    def write(self, ostream):
./kmip/core/messages/payloads/revoke.py:99:            self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/revoke.py:101:        self.revocation_reason.write(tstream)
./kmip/core/messages/payloads/revoke.py:104:            self.compromise_date.write(tstream)
./kmip/core/messages/payloads/revoke.py:108:        super(RevokeRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/revoke.py:109:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/revoke.py:153:    def read(self, istream):
./kmip/core/messages/payloads/revoke.py:161:        super(RevokeResponsePayload, self).read(istream)
./kmip/core/messages/payloads/revoke.py:162:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/revoke.py:165:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/revoke.py:170:    def write(self, ostream):
./kmip/core/messages/payloads/revoke.py:180:        self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/revoke.py:184:        super(RevokeResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/revoke.py:185:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/get_attribute_list.py:51:    def read(self, istream):
./kmip/core/messages/payloads/get_attribute_list.py:60:        super(GetAttributeListRequestPayload, self).read(istream)
./kmip/core/messages/payloads/get_attribute_list.py:61:        tstream = utils.BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/get_attribute_list.py:65:            uid.read(tstream)
./kmip/core/messages/payloads/get_attribute_list.py:73:    def write(self, ostream):
./kmip/core/messages/payloads/get_attribute_list.py:87:            uid.write(tstream)
./kmip/core/messages/payloads/get_attribute_list.py:90:        super(GetAttributeListRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/get_attribute_list.py:91:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/get_attribute_list.py:166:    def read(self, istream):
./kmip/core/messages/payloads/get_attribute_list.py:175:        super(GetAttributeListResponsePayload, self).read(istream)
./kmip/core/messages/payloads/get_attribute_list.py:176:        tstream = utils.BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/get_attribute_list.py:180:            uid.read(tstream)
./kmip/core/messages/payloads/get_attribute_list.py:189:            name.read(tstream)
./kmip/core/messages/payloads/get_attribute_list.py:196:    def write(self, ostream):
./kmip/core/messages/payloads/get_attribute_list.py:209:        uid.write(tstream)
./kmip/core/messages/payloads/get_attribute_list.py:214:            name.write(tstream)
./kmip/core/messages/payloads/get_attribute_list.py:217:        super(GetAttributeListResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/get_attribute_list.py:218:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/locate.py:59:    def read(self, istream):
./kmip/core/messages/payloads/locate.py:60:        super(LocateRequestPayload, self).read(istream)
./kmip/core/messages/payloads/locate.py:61:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/locate.py:64:            self.maximum_items.read(tstream)
./kmip/core/messages/payloads/locate.py:67:            self.storage_status_mask.read(tstream)
./kmip/core/messages/payloads/locate.py:70:            self.object_group_member.read(tstream)
./kmip/core/messages/payloads/locate.py:73:            attr.read(tstream)
./kmip/core/messages/payloads/locate.py:78:    def write(self, ostream):
./kmip/core/messages/payloads/locate.py:81:            self.maximum_items.write(tstream)
./kmip/core/messages/payloads/locate.py:83:            self.storage_status_mask.write(tstream)
./kmip/core/messages/payloads/locate.py:85:            self.object_group_member.write(tstream)
./kmip/core/messages/payloads/locate.py:88:                a.write(tstream)
./kmip/core/messages/payloads/locate.py:92:        super(LocateRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/locate.py:93:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/locate.py:111:    def read(self, istream):
./kmip/core/messages/payloads/locate.py:112:        super(LocateResponsePayload, self).read(istream)
./kmip/core/messages/payloads/locate.py:113:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/locate.py:117:            ui.read(tstream)
./kmip/core/messages/payloads/locate.py:123:    def write(self, ostream):
./kmip/core/messages/payloads/locate.py:127:            ui.write(tstream)
./kmip/core/messages/payloads/locate.py:131:        super(LocateResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/locate.py:132:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/rekey_key_pair.py:45:    def read(self, istream):
./kmip/core/messages/payloads/rekey_key_pair.py:46:        super(RekeyKeyPairRequestPayload, self).read(istream)
./kmip/core/messages/payloads/rekey_key_pair.py:47:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/rekey_key_pair.py:51:            self.private_key_uuid.read(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:55:            self.offset.read(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:59:            self.common_template_attribute.read(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:64:            self.private_key_template_attribute.read(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:69:            self.public_key_template_attribute.read(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:74:    def write(self, ostream):
./kmip/core/messages/payloads/rekey_key_pair.py:78:            self.private_key_uuid.write(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:81:            self.offset.write(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:84:            self.common_template_attribute.write(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:87:            self.private_key_template_attribute.write(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:90:            self.public_key_template_attribute.write(tstream)
./kmip/core/messages/payloads/rekey_key_pair.py:93:        super(RekeyKeyPairRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/rekey_key_pair.py:94:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/destroy.py:34:    def read(self, istream):
./kmip/core/messages/payloads/destroy.py:35:        super(DestroyRequestPayload, self).read(istream)
./kmip/core/messages/payloads/destroy.py:36:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/destroy.py:40:            self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/destroy.py:45:    def write(self, ostream):
./kmip/core/messages/payloads/destroy.py:49:            self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/destroy.py:53:        super(DestroyRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/destroy.py:54:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/destroy.py:73:    def read(self, istream):
./kmip/core/messages/payloads/destroy.py:74:        super(DestroyResponsePayload, self).read(istream)
./kmip/core/messages/payloads/destroy.py:75:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/destroy.py:78:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/destroy.py:83:    def write(self, ostream):
./kmip/core/messages/payloads/destroy.py:86:        self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/destroy.py:90:        super(DestroyResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/destroy.py:91:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/register.py:44:    def read(self, istream):
./kmip/core/messages/payloads/register.py:45:        super(RegisterRequestPayload, self).read(istream)
./kmip/core/messages/payloads/register.py:46:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/register.py:51:        self.object_type.read(tstream)
./kmip/core/messages/payloads/register.py:52:        self.template_attribute.read(tstream)
./kmip/core/messages/payloads/register.py:59:            self.secret.read(tstream)
./kmip/core/messages/payloads/register.py:64:    def write(self, ostream):
./kmip/core/messages/payloads/register.py:68:        self.object_type.write(tstream)
./kmip/core/messages/payloads/register.py:69:        self.template_attribute.write(tstream)
./kmip/core/messages/payloads/register.py:72:            self.secret.write(tstream)
./kmip/core/messages/payloads/register.py:76:        super(RegisterRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/register.py:77:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/register.py:99:    def read(self, istream):
./kmip/core/messages/payloads/register.py:100:        super(RegisterResponsePayload, self).read(istream)
./kmip/core/messages/payloads/register.py:101:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/register.py:104:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/register.py:108:            self.template_attribute.read(tstream)
./kmip/core/messages/payloads/register.py:113:    def write(self, ostream):
./kmip/core/messages/payloads/register.py:117:        self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/register.py:120:            self.template_attribute.write(tstream)
./kmip/core/messages/payloads/register.py:124:        super(RegisterResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/register.py:125:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/get.py:59:    def read(self, istream):
./kmip/core/messages/payloads/get.py:60:        super(GetRequestPayload, self).read(istream)
./kmip/core/messages/payloads/get.py:61:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/get.py:65:            self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/get.py:69:            self.key_format_type.read(tstream)
./kmip/core/messages/payloads/get.py:73:            self.key_compression_type.read(tstream)
./kmip/core/messages/payloads/get.py:77:            self.key_wrapping_specification.read(tstream)
./kmip/core/messages/payloads/get.py:82:    def write(self, ostream):
./kmip/core/messages/payloads/get.py:87:            self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/get.py:89:            self.key_format_type.write(tstream)
./kmip/core/messages/payloads/get.py:91:            self.key_compression_type.write(tstream)
./kmip/core/messages/payloads/get.py:93:            self.key_wrapping_specification.write(tstream)
./kmip/core/messages/payloads/get.py:97:        super(GetRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/get.py:98:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/get.py:121:    def read(self, istream):
./kmip/core/messages/payloads/get.py:122:        super(GetResponsePayload, self).read(istream)
./kmip/core/messages/payloads/get.py:123:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/get.py:128:        self.object_type.read(tstream)
./kmip/core/messages/payloads/get.py:129:        self.unique_identifier.read(tstream)
./kmip/core/messages/payloads/get.py:133:        self.secret.read(tstream)
./kmip/core/messages/payloads/get.py:138:    def write(self, ostream):
./kmip/core/messages/payloads/get.py:141:        self.object_type.write(tstream)
./kmip/core/messages/payloads/get.py:142:        self.unique_identifier.write(tstream)
./kmip/core/messages/payloads/get.py:143:        self.secret.write(tstream)
./kmip/core/messages/payloads/get.py:147:        super(GetResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/get.py:148:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/discover_versions.py:40:    def read(self, istream):
./kmip/core/messages/payloads/discover_versions.py:41:        super(DiscoverVersionsRequestPayload, self).read(istream)
./kmip/core/messages/payloads/discover_versions.py:42:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/discover_versions.py:46:            protocol_version.read(tstream)
./kmip/core/messages/payloads/discover_versions.py:52:    def write(self, ostream):
./kmip/core/messages/payloads/discover_versions.py:56:            protocol_version.write(tstream)
./kmip/core/messages/payloads/discover_versions.py:59:        super(DiscoverVersionsRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/discover_versions.py:60:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/discover_versions.py:94:    def read(self, istream):
./kmip/core/messages/payloads/discover_versions.py:95:        super(DiscoverVersionsResponsePayload, self).read(istream)
./kmip/core/messages/payloads/discover_versions.py:96:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/discover_versions.py:100:            protocol_version.read(tstream)
./kmip/core/messages/payloads/discover_versions.py:106:    def write(self, ostream):
./kmip/core/messages/payloads/discover_versions.py:110:            protocol_version.write(tstream)
./kmip/core/messages/payloads/discover_versions.py:113:        super(DiscoverVersionsResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/discover_versions.py:114:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/create_key_pair.py:40:    def read(self, istream):
./kmip/core/messages/payloads/create_key_pair.py:41:        super(CreateKeyPairRequestPayload, self).read(istream)
./kmip/core/messages/payloads/create_key_pair.py:42:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/create_key_pair.py:46:            self.common_template_attribute.read(tstream)
./kmip/core/messages/payloads/create_key_pair.py:51:            self.private_key_template_attribute.read(tstream)
./kmip/core/messages/payloads/create_key_pair.py:56:            self.public_key_template_attribute.read(tstream)
./kmip/core/messages/payloads/create_key_pair.py:61:    def write(self, ostream):
./kmip/core/messages/payloads/create_key_pair.py:65:            self.common_template_attribute.write(tstream)
./kmip/core/messages/payloads/create_key_pair.py:68:            self.private_key_template_attribute.write(tstream)
./kmip/core/messages/payloads/create_key_pair.py:71:            self.public_key_template_attribute.write(tstream)
./kmip/core/messages/payloads/create_key_pair.py:74:        super(CreateKeyPairRequestPayload, self).write(ostream)
./kmip/core/messages/payloads/create_key_pair.py:75:        ostream.write(tstream.buffer)
./kmip/core/messages/payloads/create_key_pair.py:135:    def read(self, istream):
./kmip/core/messages/payloads/create_key_pair.py:136:        super(CreateKeyPairResponsePayload, self).read(istream)
./kmip/core/messages/payloads/create_key_pair.py:137:        tstream = BytearrayStream(istream.read(self.length))
./kmip/core/messages/payloads/create_key_pair.py:139:        self.private_key_uuid.read(tstream)
./kmip/core/messages/payloads/create_key_pair.py:140:        self.public_key_uuid.read(tstream)
./kmip/core/messages/payloads/create_key_pair.py:145:            self.private_key_template_attribute.read(tstream)
./kmip/core/messages/payloads/create_key_pair.py:150:            self.public_key_template_attribute.read(tstream)
./kmip/core/messages/payloads/create_key_pair.py:155:    def write(self, ostream):
./kmip/core/messages/payloads/create_key_pair.py:158:        self.private_key_uuid.write(tstream)
./kmip/core/messages/payloads/create_key_pair.py:159:        self.public_key_uuid.write(tstream)
./kmip/core/messages/payloads/create_key_pair.py:162:            self.private_key_template_attribute.write(tstream)
./kmip/core/messages/payloads/create_key_pair.py:165:            self.public_key_template_attribute.write(tstream)
./kmip/core/messages/payloads/create_key_pair.py:168:        super(CreateKeyPairResponsePayload, self).write(ostream)
./kmip/core/messages/payloads/create_key_pair.py:169:        ostream.write(tstream.buffer)

== http:// ==

== encryption ==
./kmip/services/kmip_client.py:926:            ssl_version, self.config, 'ssl_version', conf.DEFAULT_SSL_VERSION))
./kmip/services/server/kmip_server.py:109:            ssl_version, 'server', 'ssl_version', conf.DEFAULT_SSL_VERSION))
./kmip/core/config_helper.py:41:    DEFAULT_SSL_VERSION = 'PROTOCOL_SSLv23'
./setup.py:34:    url='https://github.com/OpenKMIP/PyKMIP',

== sql() ==
./kmip/services/kmip_client.py:356:    def query(self, batch=False, query_functions=None, credential=None):
./kmip/services/server/engine.py:401:            object_type = self._data_session.query(
./kmip/services/server/engine.py:633:            return self._process_query(payload)
./kmip/services/server/engine.py:1000:        managed_object = self._data_session.query(object_type).filter(
./kmip/services/server/engine.py:1057:        self._data_session.query(objects.ManagedObject).filter(
./kmip/services/server/engine.py:1070:    def _process_query(self, payload):
./kmip/demos/units/query.py:62:    result = client.query(query_functions=query_functions)
./kmip/demos/units/query.py:66:    logger.info('query() result status: {0}'.format(
./kmip/demos/units/query.py:103:        logger.info('query() result reason: {0}'.format(
./kmip/demos/units/query.py:105:        logger.info('query() result message: {0}'.format(
./kmip/services/server/engine.py:18:import sqlalchemy
./kmip/services/server/engine.py:20:from sqlalchemy.orm import exc
./kmip/pie/objects.py:17:from sqlalchemy import Column, event, ForeignKey, Integer, String, VARBINARY
./kmip/pie/objects.py:18:from sqlalchemy.ext.associationproxy import association_proxy
./kmip/pie/objects.py:19:from sqlalchemy.orm import relationship
./kmip/pie/sqltypes.py:17:from sqlalchemy import Column, ForeignKey, Integer, String
./kmip/pie/sqltypes.py:18:from sqlalchemy.ext.declarative import declarative_base
./kmip/pie/sqltypes.py:19:from sqlalchemy.orm import relationship
./kmip/pie/sqltypes.py:21:import sqlalchemy.types as types

== tmp() ==
./kmip/services/server/engine.py:87:            'sqlite:////tmp/pykmip.database',

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./kmip/services/kmip_client.py:372:        # TODO (peter-hamilton): Replace this with official client batch mode.
./kmip/services/kmip_client.py:738:            compromise_date=None)  # TODO(tim-kelsey): sort out date handling
./kmip/services/kmip_client.py:849:    # TODO (peter-hamilton) Augment to handle device credentials
./kmip/services/kmip_client.py:905:        # TODO: set this to a host list
./kmip/services/server/repo/mem_repo.py:26:        # TODO (nate) verify the parameters
./kmip/services/server/policy.py:356:                    # TODO (peterhamilton) Enforce only on X.509 certificates
./kmip/services/server/policy.py:374:                    # TODO (peterhamilton) Enforce only on X.509 certificates
./kmip/services/server/policy.py:392:                    # TODO (peterhamilton) Enforce only on X.509 certificates
./kmip/services/server/policy.py:457:                # TODO (peterhamilton) Enforce only for X.509 certificates
./kmip/services/server/policy.py:1131:        # TODO (peterhamilton) Handle applicability between certificate types
./kmip/services/server/policy.py:1146:        # TODO (peterhamilton) Handle multivalue swap between certificate types
./kmip/services/server/engine.py:159:        # TODO (peterhamilton) Add authentication support
./kmip/services/server/engine.py:343:            # TODO (peterhamilton) Add support for message extension handling.
./kmip/services/server/engine.py:585:                # TODO (peterhamilton) Remove when all attributes are supported
./kmip/services/server/engine.py:616:                # TODO (peterhamilton) Remove when all attributes are supported
./kmip/services/server/engine.py:677:            # TODO (peterhamilton) The cryptographic length is technically not
./kmip/services/server/engine.py:709:        # TODO (peterhamilton) Set additional server-only attributes.
./kmip/services/server/engine.py:781:            # TODO (peterhamilton) The cryptographic length is technically not
./kmip/services/server/engine.py:814:            # TODO (peterhamilton) The cryptographic length is technically not
./kmip/services/server/engine.py:875:        # TODO (peterhamilton) Set additional server-only attributes.
./kmip/services/server/engine.py:927:            # TODO (peterhamilton) It is possible to register 'empty' secrets
./kmip/services/server/engine.py:948:        # TODO (peterhamilton) Set additional server-only attributes.
./kmip/services/server/engine.py:995:        # TODO (peterhamilton) Process key wrapping information
./kmip/services/server/engine.py:1010:            # TODO (peterhamilton) Convert key to desired format if possible
./kmip/services/server/engine.py:1049:        # TODO (peterhamilton) Process attributes to see if destroy possible
./kmip/services/server/processor.py:85:        # TODO (peter-hamilton) Log receipt of message with time stamp
./kmip/services/server/processor.py:120:                # TODO (peter-hamilton) Need to add a way to track async
./kmip/services/server/processor.py:121:                # TODO (peter-hamilton) operations.
./kmip/services/server/processor.py:143:                    # TODO (peter-hamilton) Tell client to undo operations.
./kmip/services/server/processor.py:144:                    # TODO (peter-hamilton) Unclear what response should be.
./kmip/pie/client.py:86:        # TODO (peter-hamilton) Consider adding validation checks for inputs.
./kmip/pie/client.py:98:        # TODO (peter-hamilton) Add a multiprocessing lock for synchronization.
./kmip/pie/objects.py:482:        # TODO (peter-hamilton) Verify that the key bytes match the key format
./kmip/pie/objects.py:634:        # TODO (peter-hamilton) Verify that the key bytes match the key format
./kmip/demos/units/create.py:66:    # TODO (peter-hamilton) Move up into KMIPProxy
./kmip/demos/units/locate.py:57:    # TODO (peter-hamilton) Move up into KMIPProxy
./kmip/demos/units/locate.py:71:    # TODO (peter-hamilton) Push this into the AttributeFactory
./kmip/demos/units/destroy.py:52:    # TODO (peter-hamilton) Move up into KMIPProxy
./kmip/demos/units/get.py:65:    # TODO (peter-hamilton) Move up into KMIPProxy
./kmip/demos/units/create_key_pair.py:79:    # TODO (peter-hamilton) Move up into KMIPProxy
./kmip/core/utils.py:88:    # TODO (peter-hamilton) Unused, add documentation or cut.
./kmip/core/secrets.py:168:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/secrets.py:182:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/secrets.py:197:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/secrets.py:212:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/secrets.py:310:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/secrets.py:355:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/secrets.py:404:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/secrets.py:459:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/primitives.py:43:    # TODO (peter-hamilton) Convert this into a classmethod, class name can be
./kmip/core/primitives.py:923:        # TODO (peter-hamilton) Test is pointless, value is always bytes. Fix.
./kmip/core/keys.py:101:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/factories/secrets.py:187:                # TODO (peter-hamilton) This currently isn't used in the tests
./kmip/core/factories/secrets.py:188:                # TODO (peter-hamilton) but needs to be updated to properly
./kmip/core/factories/secrets.py:189:                # TODO (peter-hamilton) create a KeyWrappingData object.
./kmip/core/objects.py:344:            # TODO (peter-hamilton) Use more descriptive error here
./kmip/core/objects.py:463:# TODO (peter-hamilton) Get rid of this and replace with a KeyMaterial factory.
./kmip/core/objects.py:521:        # TODO (peter-hamilton) Replace this with a KeyMaterial factory.
./kmip/core/objects.py:553:        # TODO (peter-hamilton) Replace with check against KeyMaterial factory.
./kmip/core/objects.py:632:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/objects.py:649:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/objects.py:666:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/objects.py:756:        # TODO (peter-hamilton) Finish implementation
./kmip/core/objects.py:833:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/objects.py:898:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/attributes.py:512:        # TODO (peter-hamilton) Add checks comparing the length of the digest
./kmip/core/attributes.py:803:# TODO (peter-hamilton) A CustomAttribute TextString is not sufficient to
./kmip/core/attributes.py:804:# TODO (peter-hamilton) cover all potential custom attributes. This is a
./kmip/core/attributes.py:805:# TODO (peter-hamilton) temporary stopgap.
./kmip/core/config_helper.py:23:# TODO (peter-hamilton): Remove support for kmipconfig.ini on future release.
./kmip/core/config_helper.py:90:        # TODO (peter-hamilton): Think about adding better value validation
./kmip/core/server.py:324:                    # TODO check what spec says to do on this
./kmip/core/messages/contents.py:242:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/messages/messages.py:161:            # TODO (peter-hamilton) conduct type check
./kmip/core/messages/messages.py:164:            # TODO (peter-hamilton) conduct type check
./kmip/core/messages/messages.py:167:            # TODO (peter-hamilton) conduct type check
./kmip/core/messages/payloads/create.py:64:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/messages/payloads/create.py:114:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/messages/payloads/query.py:267:        # TODO (peter-hamilton) Add separate validate_list function for this
./kmip/core/messages/payloads/locate.py:99:        # TODO Finish implementation.
./kmip/core/messages/payloads/locate.py:138:        # TODO Finish implementation.
./kmip/core/messages/payloads/destroy.py:60:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/messages/payloads/destroy.py:97:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/messages/payloads/register.py:83:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/messages/payloads/register.py:131:        # TODO (peter-hamilton) Finish implementation.
./kmip/core/messages/payloads/get.py:104:        # TODO (peter-hamilton) Finish implementation
./kmip/core/messages/payloads/get.py:154:        # TODO (peter-hamilton) Finish implementation.

== unsafe input mechanisms ==
(unsupported type 'python')

