#!/usr/bin/python3

import os
import pytest
import subprocess

def rm_file(filepath):
    if os.path.exists(filepath):
        os.remove(filepath)

class TestOvalLibEndToEnd():
    import os
    cwd = os.getcwd()
    rel_test_path = cwd + "/test/"

    bionic_dpkg_file = "com.ubuntu.bionic.usn.oval.xml"
    trusty_dpkg_file = "com.ubuntu.trusty.usn.oval.xml"
    focal_dpkg_file = "com.ubuntu.focal.usn.oval.xml"
    xenial_dpkg_file = "com.ubuntu.xenial.usn.oval.xml"

    @pytest.mark.parametrize("output_file,oscap_args",
            [(focal_dpkg_file, ["--usn-number", "4458-1",
            "--usn-oval-release", "focal"]), (xenial_dpkg_file,
            ["--usn-oval-release", "xenial"])])
    def test_validate_single_release_dpkg_xml(self, output_file, oscap_args):
        """Create and validate the dpkg XML file generated for a single Ubuntu
        release"""
        write_file = self.rel_test_path + output_file

        subprocess.check_output(["./scripts/generate-oval", "--usn-oval",
                "--output-dir={}".format(self.rel_test_path)] +  oscap_args,
                stderr=subprocess.STDOUT)

        subprocess.check_output(["oscap", "oval", "validate",
                write_file], stderr=subprocess.STDOUT)

        rm_file(write_file)

    @pytest.mark.parametrize("output_file,oscap_args",
            # Test a package with multiple binaries
            [(xenial_dpkg_file, ["--usn-number", "4459-1",
            "--usn-oval-release", "xenial"]),
            # Test a package with only one binary
            (trusty_dpkg_file, ["--usn-number", "3319-1", "--usn-oval-release",
            "trusty"]),
            (bionic_dpkg_file, ["--usn-oval-release", "bionic"]),
            (trusty_dpkg_file, ["--usn-oval-release", "trusty"])])
    def test_validate_single_release_oci_xml(self, output_file, oscap_args):
        """Create and validate the oci XML file generated for a single Ubuntu
        release"""

        dpkg_file = self.rel_test_path + output_file
        oci_file = self.rel_test_path + "oci." + output_file

        subprocess.check_output(["./scripts/generate-oval", "--oci",
            "--usn-oval", "--output-dir={}".format(self.rel_test_path)] +
            oscap_args, stderr=subprocess.STDOUT)

        # Validate file structure
        subprocess.check_output(["oscap", "oval", "validate",
                dpkg_file], stderr=subprocess.STDOUT)

        subprocess.check_output(["oscap", "oval", "validate",
                oci_file], stderr=subprocess.STDOUT)


        rm_file(dpkg_file)
        # Don't remove the OCI file as it's used in test_oci_oscap_output

    @pytest.mark.parametrize("output_file,release,dirname",
            [(trusty_dpkg_file, "trusty", "trusty-07112019/"),
            (bionic_dpkg_file, "bionic", "bionic-20180814/")])
    def test_oci_oscap_output(self, output_file, release, dirname):
        """Test the oci XML file agaisnt a manifest"""
        oci_file = self.rel_test_path + "oci." + output_file
        manifest_dir = self.rel_test_path + "manifests/" + dirname
        cmd_output = subprocess.check_output(["oscap", "oval", "eval",
            oci_file], stderr=subprocess.STDOUT, cwd=manifest_dir)
        # Convert to str for py 3 compatibility
        cmd_output = cmd_output.decode("utf-8")

        gold_output = open(self.rel_test_path + "gold_oci_results/" +
            release).readlines()

        for line in gold_output:
            assert(line in cmd_output)

        rm_file(oci_file)


if __name__ == "__main__":
    pytest.main()
