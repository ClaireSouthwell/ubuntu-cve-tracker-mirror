#!/usr/bin/python
# Author: Kees Cook <kees@ubuntu.com>
# Copyright (C) 2008 Canonical Ltd.
#
# Reports which CVEs were fixed for a given release and source package
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Fetch the USN database first. Override location with --database
#  wget http://people.canonical.com/~ubuntu-security/usn/database.pickle
#
import cPickle, sys, os, os.path, optparse, usn_lib
from source_map import version_compare

parser = optparse.OptionParser()
#parser.add_option("-v", "--verbose", dest="verbose", help="Report logic while processing USNs", action='store_true')
parser.add_option("-D", "--database", help="Specify location of USN data (default 'database.pickle')", default="database.pickle")
parser.add_option("-R", "--reverted", help="Specify location of reverted CVE list (default 'reverted-CVEs.txt')", default="reverted-CVEs.txt")
parser.add_option("-d", "--debug", dest="debug", help="Report additional debugging while processing USNs", action='store_true')
(opt, args) = parser.parse_args()

reverted = usn_lib.get_reverted(opt.reverted)
db       = usn_lib.load_database(opt.database)

# Report CVEs fixed _after_ the "after" version, up to and including "last"
# i.e. (after,last]
src = None
after = None
last = None
try:
    release = args.pop(0)
    if len(args)>0:
        src     = args.pop(0)
        after   = args.pop(0)
        last    = args.pop(0)
        if (opt.debug):
            print "Searching for %s in %s version (%s, %s]" % (src, release, after, last)
    else:
        if (opt.debug):
            print "Searching in %s" % (release)
except:
    print >>sys.stderr, 'Usage: %s [OPTIONS] RELEASE [SOURCE_PKG ABOVE_VER THIS_OR_LOWER_VER]' % (sys.argv[0])
    sys.exit(1)


for usn in sorted(db, cmp=version_compare):
    # This USN is ancient and lacks any CVE information
    if not db[usn].has_key('cves'):
        if (opt.debug):
            print "%s lacks CVEs" % (usn)
        continue
    # This USN did not include any updates for the requested release
    if not db[usn]['releases'].has_key(release):
        if (opt.debug):
            print "%s lacks release for %s" % (usn, release)
        continue
    # This USN is ancient and lacks source package information
    if not db[usn]['releases'][release].has_key('sources'):
        if (opt.debug):
            print "%s lacks source packages for %s" % (usn, release)
        continue
    # This USN did not include updates for the requested package
    if src and not db[usn]['releases'][release]['sources'].has_key(src):
        if (opt.debug):
            print "%s lacks update for %s (%s)" % (usn, src, ", ".join(db[usn]['releases'][release]['sources'].keys()))
        continue

    version = None
    if src:
        version = db[usn]['releases'][release]['sources'][src]['version']
    if not src or  (version_compare(version, after)>0 and \
                    version_compare(version, last)<=0):
        report = 'USN-%s' % (usn)
        if version:
            report += ' (%s)' % (version)
        else:
            report += ' (%s)' % (", ".join(["%s %s" % (x, db[usn]['releases'][release]['sources'][x]['version']) for x in db[usn]['releases'][release]['sources']]))
        print report
        for cve in sorted(db[usn]['cves']):
            print "\t" + cve
