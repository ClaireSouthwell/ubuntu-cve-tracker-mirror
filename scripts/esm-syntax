#!/usr/bin/env python3

import cve_lib
import fileinput
import os
import subprocess
import sys

os.chdir(os.environ['UCT'])

# Fix check-syntax warnings about packages marked as DNE
# but who are in the trusty-esm-supported.txt list.
# Also fix for those packages trusty's state from 'end-of-life'
# to 'out of standard support'
chk_syn = subprocess.Popen('./scripts/check-syntax', stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

while True:
    line = chk_syn.stdout.readline().decode('UTF-8')
    if line == '' and chk_syn.poll() is not None:
        break
    if "'trusty/esm'" in line:
        cve_file = line.split(':')[0]
        pkg = line.split("'")[1]
        cve = cve_lib.load_cve(cve_file)
        state, notes = cve['pkgs'][pkg]['trusty/esm']
        if 'was' not in notes:
            continue
        old_state = notes.split('was ')[1]
        cve_lib.update_state(cve_file, pkg, 'trusty/esm', old_state, None)
        state, notes = cve['pkgs'][pkg]['trusty']
        if 'end-of-life' in notes:
            cve_lib.update_state(cve_file, pkg, 'trusty', state, 'out of standard support')


# Fix trusty CVEs (active and retired) that are marked as
# 'end-of-life' to 'out of standard support'
(cves, uems, rcves) = cve_lib.get_cve_list_and_retired()
table = cve_lib.load_all(cves, uems, rcves)

for cve in sorted(cves):
    for pkg in sorted(table[cve]['pkgs'].keys()):
        for r in table[cve]['pkgs'][pkg].keys():
            if r == 'trusty':
                if "end-of-life" in table[cve]['pkgs'][pkg]['trusty']:
                    cve_file = cve_lib.find_cve(cve)
                    cvef = cve_lib.load_cve(cve_file)
                    state, notes = cvef['pkgs'][pkg]['trusty']
                    cve_lib.update_state(cve_file, pkg, 'trusty', state, 'out of standard support')
