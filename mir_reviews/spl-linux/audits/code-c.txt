Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==
./module/splat/splat-linux.c:117:	char *argv[] = { "/bin/sh",
./module/splat/splat-vnode.c:67:	char sh_path[] = "/bin/sh";

== memory_management() ==
./module/splat/splat-atomic.c:202:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-ctl.c:66:	info = (splat_info_t *)kmalloc(sizeof(*info), GFP_KERNEL);
./module/splat/splat-ctl.c:72:	info->info_buffer = (char *)vmalloc(SPLAT_INFO_BUFFER_SIZE);
./module/splat/splat-ctl.c:132:		buf = (char *)vmalloc(size);
./module/splat/splat-ctl.c:141:		memcpy(buf, info->info_buffer, min);
./module/splat/splat-ctl.c:209:	tmp = kmalloc(size, GFP_KERNEL);
./module/splat/splat-ctl.c:215:	memcpy(tmp, kcfg, sizeof(*kcfg));
./module/splat/splat-ctl.c:286:	tmp = kmalloc(size, GFP_KERNEL);
./module/splat/splat-ctl.c:292:	memcpy(tmp, kcfg, sizeof(*kcfg));
./module/splat/splat-ctl.c:426:		data = (void *)kmalloc(kcmd.cmd_data_size, GFP_KERNEL);
./module/splat/splat-zlib.c:91:	src = vmalloc(BUFFER_SIZE);
./module/splat/splat-zlib.c:97:	dst = vmalloc(BUFFER_SIZE);
./module/splat/splat-zlib.c:103:	chk = vmalloc(BUFFER_SIZE);
./module/splat/splat-zlib.c:112:		memcpy(src + (i * 1024), src, 1024);
./module/splat/splat-zlib.c:135:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-thread.c:353:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-internal.h:72:	_test_ = (splat_test_t *)kmalloc(sizeof(*_test_), GFP_KERNEL);  \
./module/splat/splat-internal.h:147:		_rc_ = sprintf(_info_->info_head, format, args);	\
./module/splat/splat-generic.c:111:	strcpy(str, STR_NEG);						\
./module/splat/splat-generic.c:151:	strcpy(str, STR_RANGE_MIN);					\
./module/splat/splat-generic.c:179:	strcpy(str, STR_INVAL2);					\
./module/splat/splat-generic.c:320:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-cred.c:71:		count += sprintf(str + count, "%d ", groups[i]);
./module/splat/splat-cred.c:131:		count += sprintf(str + count, "%d ", groups[i]);
./module/splat/splat-cred.c:191:	gi = groups_alloc(NGROUPS_SMALL);
./module/splat/splat-cred.c:260:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-mutex.c:86:        mp = (mutex_priv_t *)kmalloc(sizeof(*mp), GFP_KERNEL);
./module/splat/splat-mutex.c:193:        mp = (mutex_priv_t *)kmalloc(sizeof(*mp), GFP_KERNEL);
./module/splat/splat-mutex.c:402:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-random.c:57:	buf = kmalloc(sizeof(*buf) * KRNG_NUM_BYTES, GFP_KERNEL);
./module/splat/splat-random.c:99:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-rwlock.c:206:	rwp = (rw_priv_t *)kmalloc(sizeof(*rwp), GFP_KERNEL);
./module/splat/splat-rwlock.c:322:	rwp = (rw_priv_t *)kmalloc(sizeof(*rwp), GFP_KERNEL);
./module/splat/splat-rwlock.c:410:	rwp = (rw_priv_t *)kmalloc(sizeof(*rwp), GFP_KERNEL);
./module/splat/splat-rwlock.c:499:	rwp = (rw_priv_t *)kmalloc(sizeof(*rwp), GFP_KERNEL);
./module/splat/splat-rwlock.c:537:	rwp = (rw_priv_t *)kmalloc(sizeof(*rwp), GFP_KERNEL);
./module/splat/splat-rwlock.c:576:	rwp = (rw_priv_t *)kmalloc(sizeof(*rwp), GFP_KERNEL);
./module/splat/splat-rwlock.c:631:	sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-list.c:140:		li = kmem_alloc(sizeof(list_item_t), KM_SLEEP);
./module/splat/splat-list.c:184:		li = kmem_alloc(sizeof(list_item_t), KM_SLEEP);
./module/splat/splat-list.c:228:		li_new = kmem_alloc(sizeof(list_item_t), KM_SLEEP);
./module/splat/splat-list.c:273:		li_new = kmem_alloc(sizeof(list_item_t), KM_SLEEP);
./module/splat/splat-list.c:318:		li = kmem_alloc(sizeof(list_item_t), KM_SLEEP);
./module/splat/splat-list.c:370:	li = kmem_alloc(sizeof(list_item_t), KM_SLEEP);
./module/splat/splat-list.c:425:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-time.c:84:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-linux.c:207:	sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-vnode.c:400:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-kobj.c:84:	buf = kmalloc(size + 1, GFP_KERNEL);
./module/splat/splat-kobj.c:131:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-kmem.c:103:			ptr[i] = kmem_alloc(size, KM_SLEEP);
./module/splat/splat-kmem.c:176:	 * Test up to 4x the maximum kmem_alloc() size to ensure both
./module/splat/splat-kmem.c:177:	 * the kmem_alloc() and vmem_alloc() call paths are used.
./module/splat/splat-kmem.c:183:			ptr[i] = vmem_alloc(size, KM_SLEEP);
./module/splat/splat-kmem.c:291:splat_kmem_cache_test_kcp_alloc(struct file *file, char *name,
./module/splat/splat-kmem.c:324:splat_kmem_cache_test_kct_alloc(kmem_cache_priv_t *kcp, int id)
./module/splat/splat-kmem.c:378:splat_kmem_cache_test_kcd_alloc(kmem_cache_priv_t *kcp,
./module/splat/splat-kmem.c:385:		kcd = kmem_cache_alloc(kcp->kcp_cache, KM_SLEEP);
./module/splat/splat-kmem.c:553:	kct = splat_kmem_cache_test_kct_alloc(kcp, id);
./module/splat/splat-kmem.c:567:	rc = splat_kmem_cache_test_kcd_alloc(kcp, kct, kcp->kcp_alloc);
./module/splat/splat-kmem.c:597:	kcp = splat_kmem_cache_test_kcp_alloc(file, name, size, align, 0);
./module/splat/splat-kmem.c:635:		kcd[i] = kmem_cache_alloc(kcp->kcp_cache, KM_SLEEP);
./module/splat/splat-kmem.c:717:	kcp = splat_kmem_cache_test_kcp_alloc(file, name, size, 0, alloc);
./module/splat/splat-kmem.c:951:	kcp = splat_kmem_cache_test_kcp_alloc(file, SPLAT_KMEM_TEST8_NAME,
./module/splat/splat-kmem.c:973:	kct = splat_kmem_cache_test_kct_alloc(kcp, 0);
./module/splat/splat-kmem.c:981:	rc = splat_kmem_cache_test_kcd_alloc(kcp, kct, SPLAT_KMEM_OBJ_COUNT);
./module/splat/splat-kmem.c:1047:	kcp = splat_kmem_cache_test_kcp_alloc(file, SPLAT_KMEM_TEST9_NAME,
./module/splat/splat-kmem.c:1068:	kct = splat_kmem_cache_test_kct_alloc(kcp, 0);
./module/splat/splat-kmem.c:1076:	rc = splat_kmem_cache_test_kcd_alloc(kcp, kct, count);
./module/splat/splat-kmem.c:1225:	kcp = splat_kmem_cache_test_kcp_alloc(file, SPLAT_KMEM_TEST13_NAME,
./module/splat/splat-kmem.c:1247:	kct = splat_kmem_cache_test_kct_alloc(kcp, 0);
./module/splat/splat-kmem.c:1255:	rc = splat_kmem_cache_test_kcd_alloc(kcp, kct, count);
./module/splat/splat-kmem.c:1331:	sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-condvar.c:438:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/splat/splat-taskq.c:130:	tqe = kmem_alloc(sizeof (taskq_ent_t), KM_SLEEP);
./module/splat/splat-taskq.c:244:	func1_tqes = kmalloc(sizeof(*func1_tqes) * TEST2_TASKQS, GFP_KERNEL);
./module/splat/splat-taskq.c:250:	func2_tqes = kmalloc(sizeof(*func2_tqes) * TEST2_TASKQS, GFP_KERNEL);
./module/splat/splat-taskq.c:260:		tq_args[i] = kmalloc(sizeof (splat_taskq_arg_t), GFP_KERNEL);
./module/splat/splat-taskq.c:401:	tq_arg = kmem_alloc(sizeof (splat_taskq_arg_t), KM_SLEEP);
./module/splat/splat-taskq.c:402:	tqe = kmem_alloc(sizeof (taskq_ent_t), KM_SLEEP);
./module/splat/splat-taskq.c:488:	tqes = kmalloc(sizeof(*tqes) * nr_tasks, GFP_KERNEL);
./module/splat/splat-taskq.c:708:	tqes = kmem_alloc(sizeof(*tqes) * SPLAT_TASKQ_ORDER_MAX, KM_SLEEP);
./module/splat/splat-taskq.c:869:	tqes = kmem_alloc(sizeof(*tqes) * SPLAT_TASKQ_ORDER_MAX, KM_SLEEP);
./module/splat/splat-taskq.c:1016:	tq_arg = kmem_alloc(sizeof (splat_taskq_arg_t), KM_SLEEP);
./module/splat/splat-taskq.c:1017:	tqe = kmem_alloc(sizeof (taskq_ent_t), KM_SLEEP);
./module/splat/splat-taskq.c:1089:	tqes = vmalloc(sizeof (*tqes) * tasks);
./module/splat/splat-taskq.c:1112:		tqes[i] = kmalloc(sizeof (taskq_ent_t), GFP_KERNEL);
./module/splat/splat-taskq.c:1224:		tq_arg = kmem_alloc(sizeof(splat_taskq_arg_t), KM_SLEEP);
./module/splat/splat-taskq.c:1298:	tqas = vmalloc(sizeof(*tqas) * nr_tasks);
./module/splat/splat-taskq.c:1324:		tq_arg = kmem_alloc(sizeof(splat_taskq_arg_t), KM_SLEEP);
./module/splat/splat-taskq.c:1487:        sub = kmalloc(sizeof(*sub), GFP_KERNEL);
./module/spl/spl-zlib.c:73:zlib_workspace_alloc(int flags)
./module/spl/spl-zlib.c:75:	return kmem_cache_alloc(zlib_workspace_cache, flags & ~(__GFP_FS));
./module/spl/spl-zlib.c:110:	stream.workspace = zlib_workspace_alloc(KM_SLEEP);
./module/spl/spl-zlib.c:164:	stream.workspace = zlib_workspace_alloc(KM_SLEEP);
./module/spl/spl-taskq.c:74:task_alloc(taskq_t *tq, uint_t flags)
./module/spl/spl-taskq.c:124:	t = kmem_alloc(sizeof(taskq_ent_t), task_km_flags(flags));
./module/spl/spl-taskq.c:563:	if ((t = task_alloc(tq, flags)) == NULL)
./module/spl/spl-taskq.c:614:	if ((t = task_alloc(tq, flags)) == NULL)
./module/spl/spl-taskq.c:927:	tqt = kmem_alloc(sizeof (*tqt), KM_PUSHPAGE);
./module/spl/spl-taskq.c:975:	tq = kmem_alloc(sizeof (*tq), KM_PUSHPAGE);
./module/spl/spl-taskq.c:1005:			task_done(tq, task_alloc(tq, TQ_PUSHPAGE | TQ_NEW));
./module/spl/spl-generic.c:333:		memcpy(to, from, len);
./module/spl/spl-generic.c:346:		memcpy(to, from, len);
./module/spl/spl-kmem.c:33: * As a general rule kmem_alloc() allocations should be small, preferably
./module/spl/spl-kmem.c:35: * rate limited warning will be printed to the console for any kmem_alloc()
./module/spl/spl-kmem.c:50:	"Warning threshold in bytes for a kmem_alloc()");
./module/spl/spl-kmem.c:54: * Large kmem_alloc() allocations will fail if they exceed KMALLOC_MAX_SIZE.
./module/spl/spl-kmem.c:58: * margin of 4x is set.  Kmem_alloc() allocations larger than this maximum
./module/spl/spl-kmem.c:59: * will quickly fail.  Vmem_alloc() allocations less than or equal to this
./module/spl/spl-kmem.c:60: * value will use kmalloc(), but shift to vmalloc() when exceeding this value.
./module/spl/spl-kmem.c:65:	"Maximum size in bytes for a kmem_alloc()");
./module/spl/spl-kmem.c:76:kmem_vasprintf(const char *fmt, va_list ap)
./module/spl/spl-kmem.c:83:		ptr = kvasprintf(kmem_flags_convert(KM_SLEEP), fmt, aq);
./module/spl/spl-kmem.c:92:kmem_asprintf(const char *fmt, ...)
./module/spl/spl-kmem.c:99:		ptr = kvasprintf(kmem_flags_convert(KM_SLEEP), fmt, ap);
./module/spl/spl-kmem.c:114:	ptr = kmalloc(n + 1, kmem_flags_convert(flags));
./module/spl/spl-kmem.c:116:		memcpy(ptr, str, n + 1);
./module/spl/spl-kmem.c:142: * General purpose unified implementation of kmem_alloc(). It is an
./module/spl/spl-kmem.c:144: * exported to ensure that code using kmem_alloc()/kmem_zalloc() remains
./module/spl/spl-kmem.c:158:	 * through the vmem_alloc()/vmem_zalloc() interfaces.
./module/spl/spl-kmem.c:163:		    "Large kmem_alloc(%lu, 0x%x), please file an issue at:\n"
./module/spl/spl-kmem.c:171:	 * unlike kmem_alloc() with KM_SLEEP on Illumos.
./module/spl/spl-kmem.c:176:		 * is unsafe.  This must fail for all for kmem_alloc() and
./module/spl/spl-kmem.c:179:		 * For vmem_alloc() and vmem_zalloc() callers it is permissible
./module/spl/spl-kmem.c:180:		 * to use __vmalloc().  However, in general use of __vmalloc()
./module/spl/spl-kmem.c:188:				ptr = __vmalloc(size, lflags, PAGE_KERNEL);
./module/spl/spl-kmem.c:200:		 * For vmem_alloc() and vmem_zalloc() callers retry immediately
./module/spl/spl-kmem.c:201:		 * using __vmalloc() which is unlikely to fail.
./module/spl/spl-kmem.c:348:	dptr = kmalloc(sizeof (kmem_debug_t), kmem_flags_convert(flags));
./module/spl/spl-kmem.c:386:	/* Must exist in hash due to kmem_alloc() */
./module/spl/spl-kmem.c:400: * Public kmem_alloc(), kmem_zalloc() and kmem_free() interfaces.
./module/spl/spl-kmem.c:403:spl_kmem_alloc(size_t size, int flags, const char *func, int line)
./module/spl/spl-kmem.c:479:		sprintf(str, "%02x%02x%02x%02x%02x%02x%02x%02x",
./module/spl/spl-xdr.c:189:	memcpy(xdrs->x_addr, cp, cnt);
./module/spl/spl-xdr.c:218:	memcpy(cp, xdrs->x_addr, cnt);
./module/spl/spl-xdr.c:412:		*arrp = kmem_alloc(size * elsize, KM_NOSLEEP);
./module/spl/spl-xdr.c:469:		*sp = kmem_alloc(size + 1, KM_NOSLEEP);
./module/spl/spl-vmem.c:51: * Public vmem_alloc(), vmem_zalloc() and vmem_free() interfaces.
./module/spl/spl-vmem.c:54:spl_vmem_alloc(size_t size, int flags, const char *func, int line)
./module/spl/spl-kobj.c:36:	file = kmalloc(sizeof(_buf_t), kmem_flags_convert(KM_SLEEP));
./module/spl/spl-kstat.c:47:	ksp->ks_raw_buf = vmem_alloc(ksp->ks_raw_bufsize, KM_SLEEP);
./module/spl/spl-kstat.c:380:                ksp->ks_raw_buf = vmem_alloc(ksp->ks_raw_bufsize, KM_SLEEP);
./module/spl/spl-kstat.c:451:	module = kmem_alloc(sizeof (kstat_module_t), KM_SLEEP);
./module/spl/spl-thread.c:91:	tp = kmem_alloc(sizeof(thread_priv_t), KM_PUSHPAGE);
./module/spl/spl-thread.c:98:	tp->tp_name = kmem_alloc(tp->tp_name_size, KM_PUSHPAGE);
./module/spl/spl-kmem-cache.c:195:kv_alloc(spl_kmem_cache_t *skc, int size, int flags)
./module/spl/spl-kmem-cache.c:204:		ptr = __vmalloc(size, lflags | __GFP_HIGHMEM, PAGE_KERNEL);
./module/spl/spl-kmem-cache.c:270: * restrictions and the power-of-two requirement of kv_alloc().
./module/spl/spl-kmem-cache.c:285: * For small objects we use kmem_alloc() because as long as you are
./module/spl/spl-kmem-cache.c:287: * However, when you start requesting multiple pages with kmem_alloc()
./module/spl/spl-kmem-cache.c:289: * For this reason we shift to vmem_alloc() for slabs of large objects
./module/spl/spl-kmem-cache.c:291: * vmem_alloc() in all cases because there is significant locking
./module/spl/spl-kmem-cache.c:294: * serializes all vmem_alloc()'s for all slab caches.  Using slightly
./module/spl/spl-kmem-cache.c:310:spl_slab_alloc(spl_kmem_cache_t *skc, int flags)
./module/spl/spl-kmem-cache.c:318:	base = kv_alloc(skc, skc->skc_slab_size, flags);
./module/spl/spl-kmem-cache.c:337:			obj = kv_alloc(skc, offslab_size, flags);
./module/spl/spl-kmem-cache.c:503:spl_emergency_alloc(spl_kmem_cache_t *skc, int flags, void **obj)
./module/spl/spl-kmem-cache.c:517:	ske = kmalloc(sizeof (*ske), lflags);
./module/spl/spl-kmem-cache.c:767:spl_magazine_alloc(spl_kmem_cache_t *skc, int cpu)
./module/spl/spl-kmem-cache.c:815:		skc->skc_mag[i] = spl_magazine_alloc(skc, i);
./module/spl/spl-kmem-cache.c:895:	skc->skc_name = (char *)kmalloc(skc->skc_name_size, lflags);
./module/spl/spl-kmem-cache.c:1160:	sks = spl_slab_alloc(skc, ska->ska_flags);
./module/spl/spl-kmem-cache.c:1225:		ska = kmalloc(sizeof (*ska), kmem_flags_convert(flags));
./module/spl/spl-kmem-cache.c:1251:		rc = spl_emergency_alloc(skc, flags, obj);
./module/spl/spl-kmem-cache.c:1402:spl_kmem_cache_alloc(spl_kmem_cache_t *skc, int flags)
./module/spl/spl-kmem-cache.c:1419:			obj = kmem_cache_alloc(slc, kmem_flags_convert(flags));
./module/spl/spl-vnode.c:102:vn_alloc(int flag)
./module/spl/spl-vnode.c:106:	vp = kmem_cache_alloc(vn_cache, flag);
./module/spl/spl-vnode.c:113:} /* vn_alloc() */
./module/spl/spl-vnode.c:169:	vp = vn_alloc(KM_SLEEP);
./module/spl/spl-vnode.c:199:	realpath = kmalloc(len, kmem_flags_convert(KM_SLEEP));
./module/spl/spl-vnode.c:667:	fp = kmem_cache_alloc(vn_file_cache, KM_SLEEP);
./module/spl/spl-vnode.c:682:	vp = vn_alloc(KM_SLEEP);
./module/spl/spl-tsd.c:167:	entry = kmem_alloc(sizeof (tsd_hash_entry_t), KM_PUSHPAGE);
./module/spl/spl-tsd.c:226:	entry = kmem_alloc(sizeof (tsd_hash_entry_t), KM_PUSHPAGE);
./module/spl/spl-tsd.c:284:	entry = kmem_alloc(sizeof (tsd_hash_entry_t), KM_PUSHPAGE);
./cmd/splat.c:92:	sub = (subsystem_t *)malloc(sizeof(*sub));
./cmd/splat.c:96:	memcpy(&sub->sub_desc, desc, sizeof(*desc));
./cmd/splat.c:122:	cfg = (splat_cfg_t *)malloc(cfg_size);
./cmd/splat.c:144:	cfg = (splat_cfg_t *)malloc(cfg_size);
./cmd/splat.c:209:	test = (test_t *)malloc(sizeof(*test));
./cmd/splat.c:214:	memcpy(&test->test_desc, desc, sizeof(*desc));
./cmd/splat.c:233:	cfg = (splat_cfg_t *)malloc(sizeof(*cfg));
./cmd/splat.c:255:	cfg = (splat_cfg_t *)malloc(sizeof(*cfg) + size*sizeof(splat_user_t));
./cmd/splat.c:406:	cmd = (splat_cmd_t *)malloc(cmd_size);
./cmd/splat.c:598:	args = malloc(sizeof(*args));
./cmd/splat.c:733:	splat_buffer = (char *)malloc(splat_buffer_size);
./include/sys/kmem_cache.h:218:extern void *spl_kmem_cache_alloc(spl_kmem_cache_t *skc, int flags);
./include/sys/kmem_cache.h:228:#define	kmem_cache_alloc(skc, flags)	spl_kmem_cache_alloc(skc, flags)
./include/sys/vmem.h:56: * On Linux, the primary means of doing allocations is via kmalloc(), which
./include/sys/vmem.h:63: * memory from which allocations can be done using vmalloc().  It might seem
./include/sys/vmem.h:64: * like a good idea to use vmalloc() to implement something similar to
./include/sys/vmem.h:69: *    vmalloc() will not have proper semantics.
./include/sys/vmem.h:75: * 3. All vmalloc() allocations and frees are protected by a single global
./include/sys/vmem.h:97:#define	vmem_alloc(sz, fl)	spl_vmem_alloc((sz), (fl), __func__, __LINE__)
./include/sys/vmem.h:102:extern void *spl_vmem_alloc(size_t sz, int fl, const char *func, int line);
./include/sys/sid.h:49:	memcpy(kd->kd_name, dom, len);
./include/sys/kmem.h:33:extern char *kmem_vasprintf(const char *fmt, va_list ap);
./include/sys/kmem.h:34:extern char *kmem_asprintf(const char *fmt, ...);
./include/sys/kmem.h:128:#define	kmem_alloc(sz, fl)	spl_kmem_alloc((sz), (fl), __func__, __LINE__)
./include/sys/kmem.h:132:extern void *spl_kmem_alloc(size_t sz, int fl, const char *func, int line);
./include/sys/vnode.h:166:extern vnode_t *vn_alloc(int flag);
./lib/list.c:122:static List list_alloc (void);
./lib/list.c:124:static ListNode list_node_alloc (void);
./lib/list.c:126:static ListIterator list_iterator_alloc (void);
./lib/list.c:215:    if (!(l = list_alloc()))
./lib/list.c:514:    if (!(i = list_iterator_alloc()))
./lib/list.c:661:    if (!(p = list_node_alloc()))
./lib/list.c:717:list_alloc (void)
./lib/list.c:732:list_node_alloc (void)
./lib/list.c:747:list_iterator_alloc (void)
./lib/list.c:778:        if ((*pfree = malloc(LIST_ALLOC * size))) {
./module/spl/spl-kstat.c:59:	delta = new - kiop->wlastupdate;
./module/spl/spl-kstat.c:76:	delta = new - kiop->wlastupdate;
./module/spl/spl-kstat.c:92:	delta = new - kiop->rlastupdate;
./module/spl/spl-kstat.c:109:	delta = new - kiop->rlastupdate;

== files() ==
./module/splat/splat-ctl.c:62:splat_open(struct inode *inode, struct file *file)
./module/splat/splat-vnode.c:114:	if ((rc = vn_open(SPLAT_VNODE_TEST_FILE, UIO_SYSSPACE,
./module/splat/splat-vnode.c:177:	if ((rc = vn_open(SPLAT_VNODE_TEST_FILE_RW, UIO_SYSSPACE,
./module/splat/splat-vnode.c:238:	if ((rc = vn_open(SPLAT_VNODE_TEST_FILE_RW1, UIO_SYSSPACE,
./module/splat/splat-vnode.c:266:	if ((rc = vn_open(SPLAT_VNODE_TEST_FILE_RW2, UIO_SYSSPACE,
./module/splat/splat-vnode.c:316:	if ((rc = vn_open(SPLAT_VNODE_TEST_FILE, UIO_SYSSPACE,
./module/splat/splat-vnode.c:360:	if ((rc = vn_open(SPLAT_VNODE_TEST_FILE_RW, UIO_SYSSPACE,
./module/spl/spl-proc.c:316:proc_slab_open(struct inode *inode, struct file *filp)
./module/spl/spl-proc.c:318:        return seq_open(filp, &slab_seq_ops);
./module/spl/spl-kobj.c:40:	if ((rc = vn_open(name, UIO_SYSSPACE, FREAD, 0644, &vp, 0, 0))) {
./module/spl/spl-kstat.c:471:proc_kstat_open(struct inode *inode, struct file *filp)
./module/spl/spl-kstat.c:476:        rc = seq_open(filp, &kstat_seq_ops);
./module/spl/spl-vnode.c:124:vn_open(const char *path, uio_seg_t seg, int flags, int mode,
./module/spl/spl-vnode.c:141:	/* Note for filp_open() the two low bits must be remapped to mean:
./module/spl/spl-vnode.c:151:	fp = filp_open(path, flags, mode);
./module/spl/spl-vnode.c:186:} /* vn_open() */
./module/spl/spl-vnode.c:204:	rc = vn_open(realpath, seg, flags, mode, vpp, x1, x2);
./cmd/splat.c:713:	splatctl_fd = open(SPLAT_DEV, O_RDONLY);
./include/sys/vnode.h:170:extern int vn_open(const char *path, uio_seg_t seg, int flags, int mode,
./include/linux/file_compat.h:34:spl_filp_open(const char *name, int flags, int mode, int *err)
./include/linux/file_compat.h:39:        filp = filp_open(name, flags, mode);

== logging() ==
./module/splat/splat-kmem.c:400:splat_kmem_cache_test_debug(struct file *file, char *name,
./module/splat/splat-kmem.c:991:		splat_kmem_cache_test_debug(file, SPLAT_KMEM_TEST8_NAME, kcp);
./module/splat/splat-kmem.c:1086:		splat_kmem_cache_test_debug(file, SPLAT_KMEM_TEST9_NAME, kcp);
./module/splat/splat-kmem.c:1271:			splat_kmem_cache_test_debug(
./module/spl/spl-kmem.c:257:spl_kmem_alloc_debug(size_t size, int flags, int node)
./module/spl/spl-kmem.c:272:spl_kmem_free_debug(const void *ptr, size_t size)
./module/spl/spl-kmem.c:358:	ptr = spl_kmem_alloc_debug(size, flags, node);
./module/spl/spl-kmem.c:394:	spl_kmem_free_debug(ptr, size);
./module/spl/spl-kmem.c:410:	return (spl_kmem_alloc_debug(size, flags, NUMA_NO_NODE));
./module/spl/spl-kmem.c:427:	return (spl_kmem_alloc_debug(size, flags, NUMA_NO_NODE));
./module/spl/spl-kmem.c:440:	return (spl_kmem_free_debug(buf, size));
./module/spl/spl-vmem.c:63:	return (spl_kmem_alloc_debug(size, flags, NUMA_NO_NODE));
./module/spl/spl-vmem.c:80:	return (spl_kmem_alloc_debug(size, flags, NUMA_NO_NODE));
./module/spl/spl-vmem.c:93:	return (spl_kmem_free_debug(buf, size));
./cmd/splat.c:425:			rc ? strerror(errno) : "");
./cmd/splat.c:429:			rc ? strerror(errno) : "");
./include/sys/kmem.h:140:extern void *spl_kmem_alloc_debug(size_t size, int flags, int node);
./include/sys/kmem.h:144:extern void spl_kmem_free_debug(const void *buf, size_t size);
./lib/list.h:36: *  find an external lsd_fatal_error(file,line,mesg) function.  By default,
./lib/list.h:37: *  lsd_fatal_error(file,line,mesg) is a macro definition that outputs an
./lib/list.h:42: *  find an external lsd_nomem_error(file,line,mesg) function.  By default,
./lib/list.h:43: *  lsd_nomem_error(file,line,mesg) is a macro definition that returns NULL.
./lib/list.h:97: *  Creates and returns a new empty list, or lsd_nomem_error() on failure.
./lib/list.h:130: *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
./lib/list.h:136: *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
./lib/list.h:181: *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
./lib/list.h:205: *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
./lib/list.h:222: *    list [l], or lsd_nomem_error() on failure.
./lib/list.h:250: *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
./lib/list.c:43:   extern void lsd_fatal_error(char *file, int line, char *mesg);
./lib/list.c:49:#    define lsd_fatal_error(file, line, mesg)                                 \
./lib/list.c:52:                   file, line, mesg, strerror(errno));                        \
./lib/list.c:64:   extern void * lsd_nomem_error(char *file, int line, char *mesg);
./lib/list.c:67:#    define lsd_nomem_error(file, line, mesg) (NULL)
./lib/list.c:156:             lsd_fatal_error(__FILE__, __LINE__, "list mutex init");          \
./lib/list.c:166:             lsd_fatal_error(__FILE__, __LINE__, "list mutex lock");          \
./lib/list.c:176:             lsd_fatal_error(__FILE__, __LINE__, "list mutex unlock");        \
./lib/list.c:186:             lsd_fatal_error(__FILE__, __LINE__, "list mutex destroy");       \
./lib/list.c:216:        return(lsd_nomem_error(__FILE__, __LINE__, "list create"));
./lib/list.c:515:        return(lsd_nomem_error(__FILE__, __LINE__, "list iterator create"));
./lib/list.c:662:        return(lsd_nomem_error(__FILE__, __LINE__, "list node create"));

== environment() ==

== privileged() ==
./include/sys/policy.h:33:#define	secpolicy_vnode_setids_setgids(c,id)		(0)
./module/splat/splat-ctl.c:39: *  macro.  Once a test is registered it can then be run with an ioctl()
./module/splat/splat-ctl.c:450:splat_unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
./module/splat/splat-ctl.c:477:splat_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
./module/splat/splat-ctl.c:479:	return splat_unlocked_ioctl(file, cmd, arg);
./module/spl/spl-generic.c:331:	/* Fake ioctl() issued by kernel, 'from' is a kernel address */
./module/spl/spl-generic.c:344:	/* Fake ioctl() issued by kernel, 'from' is a kernel address */
./cmd/splat.c:130:	rc = ioctl(splatctl_fd, SPLAT_CFG, cfg);
./cmd/splat.c:153:	rc = ioctl(splatctl_fd, SPLAT_CFG, cfg);
./cmd/splat.c:242:	rc = ioctl(splatctl_fd, SPLAT_CFG, cfg);
./cmd/splat.c:265:	rc = ioctl(splatctl_fd, SPLAT_CFG, cfg);
./cmd/splat.c:420:	rc = ioctl(splatctl_fd, SPLAT_CMD, cmd);
./cmd/splat.c:661:	rc = ioctl(splatctl_fd, SPLAT_CFG, &cfg);
./cmd/splat.c:682:	rc = ioctl(splatctl_fd, SPLAT_CFG, &cfg);
./include/sys/policy.h:38:#define	secpolicy_vnode_chown(c,o)			(0)
./include/splat-ctl.h:32: * ensure 32-bit/64-bit interoperability over ioctl()'s only types with

== networking() ==
./module/spl/spl-taskq.c:814:	current->flags |= PF_NOFREEZE;
./module/spl/spl-vnode.c:556:	 * May enter XFS which generates a warning when PF_FSTRANS is set.
./module/spl/spl-vnode.c:561:		current->flags &= ~(PF_FSTRANS);
./module/spl/spl-vnode.c:565:		current->flags |= PF_FSTRANS;
./include/sys/kmem.h:52: * safely used in syncing contexts which have set PF_FSTRANS.
./include/sys/kmem.h:63:		if ((current->flags & PF_FSTRANS))
./include/sys/kmem.h:87:	cookie.saved_flags = current->flags & PF_FSTRANS;
./include/sys/kmem.h:88:	current->flags |= PF_FSTRANS;
./include/sys/kmem.h:97:	ASSERT(current->flags & PF_FSTRANS);
./include/sys/kmem.h:99:	current->flags &= ~(PF_FSTRANS);
./include/sys/kmem.h:106:	return (current->flags & PF_FSTRANS);
./module/splat/splat-ctl.c:487:static ssize_t splat_write(struct file *file, const char __user *buf,
./module/splat/splat-ctl.c:520:static ssize_t splat_read(struct file *file, char __user *buf,
./module/splat/splat-kmem.c:536:splat_kmem_cache_test_thread(void *arg)
./module/splat/splat-condvar.c:74:splat_condvar_test12_thread(void *arg)
./module/splat/splat-condvar.c:84:	    ct->ct_thread->comm, atomic_read(&cv->cv_condvar.cv_waiters));
./module/splat/splat-condvar.c:88:	    ct->ct_thread->comm, atomic_read(&cv->cv_condvar.cv_waiters));
./module/splat/splat-condvar.c:122:	while (atomic_read(&cv.cv_condvar.cv_waiters) != count)
./module/splat/splat-condvar.c:129:		while (atomic_read(&cv.cv_condvar.cv_waiters) > (count - i))
./module/splat/splat-condvar.c:133:		if (atomic_read(&cv.cv_condvar.cv_waiters) == (count - i))
./module/splat/splat-condvar.c:138:			   1, count - atomic_read(&cv.cv_condvar.cv_waiters));
./module/splat/splat-condvar.c:187:	while (atomic_read(&cv.cv_condvar.cv_waiters) != count)
./module/splat/splat-condvar.c:194:	while ((atomic_read(&cv.cv_condvar.cv_waiters) > 0) || mutex_owner(&cv.cv_mtx))
./module/splat/splat-condvar.c:208:splat_condvar_test34_thread(void *arg)
./module/splat/splat-condvar.c:219:	    ct->ct_thread->comm, atomic_read(&cv->cv_condvar.cv_waiters));
./module/splat/splat-condvar.c:232:		    atomic_read(&cv->cv_condvar.cv_waiters));
./module/splat/splat-condvar.c:268:	while (atomic_read(&cv.cv_condvar.cv_waiters) != count)
./module/splat/splat-condvar.c:275:		while (atomic_read(&cv.cv_condvar.cv_waiters) > (count - i))
./module/splat/splat-condvar.c:279:		if (atomic_read(&cv.cv_condvar.cv_waiters) == (count - i))
./module/splat/splat-condvar.c:284:			   1, count - atomic_read(&cv.cv_condvar.cv_waiters));
./module/splat/splat-condvar.c:338:	while (atomic_read(&cv.cv_condvar.cv_waiters) != count)
./module/splat/splat-condvar.c:345:		while (atomic_read(&cv.cv_condvar.cv_waiters) > (count - i))
./module/splat/splat-condvar.c:349:		if (atomic_read(&cv.cv_condvar.cv_waiters) == (count - i))
./module/splat/splat-condvar.c:354:			   1, count - atomic_read(&cv.cv_condvar.cv_waiters));
./module/splat/splat-taskq.c:543:			     atomic_read(&count), i);
./module/splat/splat-taskq.c:544:		if (atomic_read(&count) != i) {
./module/splat/splat-taskq.c:1143:	    tq_arg.name, atomic_read(tq_arg.count), tasks);
./module/splat/splat-taskq.c:1145:	if (atomic_read(tq_arg.count) != tasks)
./module/splat/splat-taskq.c:1252:	if (atomic_read(&count) != nr_tasks)
./module/splat/splat-taskq.c:1257:	    atomic_read(&count), nr_tasks);
./module/splat/splat-taskq.c:1423:	if ((rc == 0) && (nr_tasks - canceled != atomic_read(&count)))
./module/splat/splat-taskq.c:1429:	    atomic_read(&count), nr_tasks);
./module/spl/spl-taskq.c:803:taskq_thread(void *args)
./module/spl/spl-taskq.c:942:		kthread_bind(tqt->tqt_thread, last_used_cpu);
./module/spl/spl-proc.c:125:                val = atomic64_read((atomic64_t *)table->data);
./module/spl/spl-proc.c:127:                val = atomic_read((atomic_t *)table->data);
./module/spl/spl-proc.c:153:                down_read(&spl_kmem_cache_sem);
./module/spl/spl-proc.c:176:                up_read(&spl_kmem_cache_sem);
./module/spl/spl-proc.c:278:	down_read(&spl_kmem_cache_sem);
./module/spl/spl-proc.c:305:	up_read(&spl_kmem_cache_sem);
./module/spl/spl-generic.c:410:hostid_read(void)
./module/spl/spl-generic.c:479:		if (spl_hostid == 0 && hostid_read())
./module/spl/spl-kmem.c:264:		if (unlikely(kmem_alloc_used_read() > kmem_alloc_max))
./module/spl/spl-kmem.c:265:			kmem_alloc_max = kmem_alloc_used_read();
./module/spl/spl-kmem.c:552:	if (kmem_alloc_used_read() != 0)
./module/spl/spl-kmem.c:554:		    (unsigned long)kmem_alloc_used_read(), kmem_alloc_max);
./module/spl/spl-condvar.c:50:	if (!atomic_read(&cvp->cv_waiters) && !atomic_read(&cvp->cv_refs)) {
./module/spl/spl-condvar.c:73:	ASSERT3S(atomic_read(&cvp->cv_refs), ==, 0);
./module/spl/spl-condvar.c:74:	ASSERT3S(atomic_read(&cvp->cv_waiters), ==, 0);
./module/spl/spl-condvar.c:307:	if (atomic_read(&cvp->cv_waiters) > 0)
./module/spl/spl-condvar.c:325:	if (atomic_read(&cvp->cv_waiters) > 0)
./module/spl/spl-kstat.c:487:proc_kstat_write(struct file *filp, const char __user *buf,
./module/spl/spl-kmem-cache.c:1024:	down_write(&spl_kmem_cache_sem);
./module/spl/spl-kmem-cache.c:1026:	up_write(&spl_kmem_cache_sem);
./module/spl/spl-kmem-cache.c:1060:	down_write(&spl_kmem_cache_sem);
./module/spl/spl-kmem-cache.c:1062:	up_write(&spl_kmem_cache_sem);
./module/spl/spl-kmem-cache.c:1078:	wait_event(wq, atomic_read(&skc->skc_ref) == 0);
./module/spl/spl-kmem-cache.c:1581:	down_read(&spl_kmem_cache_sem);
./module/spl/spl-kmem-cache.c:1600:	up_read(&spl_kmem_cache_sem);
./module/spl/spl-vnode.c:240:		rc = vfs_write(fp, addr, len, &offset);
./module/spl/spl-vnode.c:242:		rc = vfs_read(fp, addr, len, &offset);
./module/spl/spl-vnode.c:634:			ASSERT(atomic_read(&fp->f_ref) != 0);
./module/spl/spl-vnode.c:754:		if (atomic_read(&fp->f_ref) > 0) {
./cmd/splat.c:436:		if ((rc = read(splatctl_fd, splat_buffer,
./cmd/splat.c:723:	if ((rc = read(splatctl_fd, splat_version, VERSION_SIZE - 1)) == -1)
./include/sys/kmem.h:112:#define	kmem_alloc_used_read()		atomic64_read(&kmem_alloc_used)
./include/sys/kmem.h:119:#define	kmem_alloc_used_read()		atomic_read(&kmem_alloc_used)
./include/sys/rwlock.h:142:                down_read(SEM(rwp));                                    \
./include/sys/rwlock.h:145:                down_write(SEM(rwp));                                   \
./include/sys/rwlock.h:157:                up_write(SEM(rwp));                                     \
./include/sys/rwlock.h:160:                up_read(SEM(rwp));                                      \
./include/sys/rwlock.h:167:        downgrade_write(SEM(rwp));                                      \
./include/linux/file_compat.h:51:#define spl_filp_write(fp, b, s, p)	(fp)->f_op->write((fp), (b), (s), p)

== http:// ==
./module/splat/splat-atomic.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-atomic.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-ctl.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-ctl.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-zlib.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-zlib.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-thread.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-thread.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-internal.h:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-internal.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-generic.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-generic.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-cred.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-cred.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-mutex.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-mutex.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-random.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-random.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-rwlock.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-rwlock.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-list.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-list.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-time.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-time.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-linux.c:8: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-linux.c:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-vnode.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-vnode.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-kobj.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-kobj.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-kmem.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-kmem.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-condvar.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-condvar.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/splat/splat-taskq.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/splat/splat-taskq.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-zlib.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-zlib.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-zlib.c:26: *  available at http://zlib.net/.  The only changes made we to slightly
./module/spl/spl-cred.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-cred.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-err.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-err.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-taskq.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-taskq.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-proc.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-proc.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-generic.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-generic.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-generic.c:71: * http://www.hackersdelight.org/HDcode/newCode/divDouble.c
./module/spl/spl-kmem.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-kmem.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-xdr.c:6: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-xdr.c:19: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-mutex.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-mutex.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-atomic.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-atomic.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-vmem.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-vmem.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-rwlock.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-rwlock.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-kobj.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-kobj.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-condvar.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-condvar.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-kstat.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-kstat.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-thread.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-thread.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-kmem-cache.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-kmem-cache.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-vnode.c:9: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-vnode.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./module/spl/spl-tsd.c:8: *  For details, see <http://zfsonlinux.org/>.
./module/spl/spl-tsd.c:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./cmd/splat.c:9: *  For details, see <http://zfsonlinux.org/>.
./cmd/splat.c:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./cmd/splat.h:9: *  For details, see <http://zfsonlinux.org/>.
./cmd/splat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/vm/anon.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/vm/anon.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/vm/seg_kmem.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/vm/seg_kmem.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/vm/pvn.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/vm/pvn.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/timer.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/timer.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/mutex.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/mutex.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/mutex.h:131: * See http://lwn.net/Articles/575477/ for the information about the race.
./include/sys/kstat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/kstat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/kmem_cache.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/kmem_cache.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/attr.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/attr.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/u8_textprep.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/u8_textprep.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/thread.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/thread.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/byteorder.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/byteorder.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/cmn_err.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/cmn_err.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/cred.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/cred.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/ctype.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/ctype.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sysevent/eventdefs.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sysevent/eventdefs.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/mount.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/mount.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/types32.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/types32.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/mkdev.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/mkdev.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/ddi.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/ddi.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/va_list.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/va_list.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/dnlc.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/dnlc.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/zmod.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/zmod.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/zmod.h:26: *  available at http://zlib.net/.  The only changes made we to slightly
./include/sys/kobj.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/kobj.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/vmem.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/vmem.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/condvar.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/condvar.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sid.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sid.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/callb.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/callb.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/uio.h:10: *  For details, see <http://zfsonlinux.org/>.
./include/sys/uio.h:23: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/kmem.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/kmem.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/buf.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/buf.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/cpuvar.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/cpuvar.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/vnode.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/vnode.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/dumphdr.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/dumphdr.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/note.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/note.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/refstr.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/refstr.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/unistd.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/unistd.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sunddi.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sunddi.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/callo.h:8: *  For details, see <http://zfsonlinux.org/>.
./include/sys/callo.h:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/vfs.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/vfs.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/time.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/time.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/processor.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/processor.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/fcntl.h:8: *  For details, see <http://zfsonlinux.org/>.
./include/sys/fcntl.h:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/cpupart.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/cpupart.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/disp.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/disp.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/kidmap.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/kidmap.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/pool.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/pool.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/zone.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/zone.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sunldi.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sunldi.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sysdc.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sysdc.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/rwlock.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/rwlock.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/vmsystm.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/vmsystm.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/fs/swapnode.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/fs/swapnode.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/dklabel.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/dklabel.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/isa_defs.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/isa_defs.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/mntent.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/mntent.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/signal.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/signal.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/extdirent.h:8: *  For details, see <http://zfsonlinux.org/>.
./include/sys/extdirent.h:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/dirent.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/dirent.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sdt.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sdt.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/compress.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/compress.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/bootconf.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/bootconf.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/crc32.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/crc32.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/inttypes.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/inttypes.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/resource.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/resource.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/fm/util.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/fm/util.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/fm/protocol.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/fm/protocol.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/idmap.h:8: *  For details, see <http://zfsonlinux.org/>.
./include/sys/idmap.h:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sysmacros.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sysmacros.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/systm.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/systm.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/console.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/console.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/sysevent.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/sysevent.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/open.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/open.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/list.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/list.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/systeminfo.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/systeminfo.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/varargs.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/varargs.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/param.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/param.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/int_types.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/int_types.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/errno.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/errno.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/efi_partition.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/efi_partition.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/bitmap.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/bitmap.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/stat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/stat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/pathname.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/pathname.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/int_limits.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/int_limits.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/debug.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/debug.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/random.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/random.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/dkio.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/dkio.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/bootprops.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/bootprops.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/pset.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/pset.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/proc.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/proc.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/tsd.h:8: *  For details, see <http://zfsonlinux.org/>.
./include/sys/tsd.h:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/file.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/file.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/modctl.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/modctl.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/policy.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/policy.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/priv_impl.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/priv_impl.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/vfs_opreg.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/vfs_opreg.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/mode.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/mode.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/atomic.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/atomic.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/conf.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/conf.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/user.h:7: *  For details, see <http://zfsonlinux.org/>.
./include/sys/user.h:20: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/acl_impl.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/acl_impl.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/acl.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/acl.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/types.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/types.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/taskq.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/taskq.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/stropts.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/stropts.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sys/t_lock.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sys/t_lock.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/sharefs/share.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/sharefs/share.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/unistd.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/unistd.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/spl-ctl.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/spl-ctl.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/rpc/xdr.h:6: *  For details, see <http://zfsonlinux.org/>.
./include/rpc/xdr.h:19: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/rpc/types.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/rpc/types.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/fs/fs_subr.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/fs/fs_subr.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/math64_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/math64_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/bitops_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/bitops_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/delay_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/delay_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/rwsem_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/rwsem_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/file_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/file_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/list_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/list_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/mm_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/mm_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/zlib_compat.h:8: *  For details, see <http://zfsonlinux.org/>.
./include/linux/zlib_compat.h:21: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/compiler_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/compiler_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/proc_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/proc_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/linux/wait_compat.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/linux/wait_compat.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/strings.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/strings.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/splat-ctl.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/splat-ctl.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/util/qsort.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/util/qsort.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./include/util/sscanf.h:9: *  For details, see <http://zfsonlinux.org/>.
./include/util/sscanf.h:22: *  with the SPL.  If not, see <http://www.gnu.org/licenses/>.
./lib/list.h:21: *  with LSD-Tools.  If not, see <http://www.gnu.org/licenses/>.
./lib/list.c:21: *  with LSD-Tools.  If not, see <http://www.gnu.org/licenses/>.

== encryption ==
./module/spl/spl-kmem.c:164:		    "https://github.com/zfsonlinux/zfs/issues/new\n",

== sql() ==

== tmp() ==
./module/splat/splat-vnode.c:59:#define SPLAT_VNODE_TEST_FILE_RW	"/tmp/spl.vnode.tmp"
./module/splat/splat-vnode.c:60:#define SPLAT_VNODE_TEST_FILE_RW1	"/tmp/spl.vnode.tmp.1"
./module/splat/splat-vnode.c:61:#define SPLAT_VNODE_TEST_FILE_RW2	"/tmp/spl.vnode.tmp.2"

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./module/splat/splat-condvar.c:402:	time_delta = time_after - time_before; /* XXX - Handle jiffie wrap */
./module/spl/spl-condvar.c:165:	/* XXX - Does not handle jiffie wrap properly */
./module/spl/spl-kstat.c:209:                /* XXX - We need to be more careful able what tokens are
./module/spl/spl-kmem-cache.c:1038: * XXX: Unimplemented but harmless to stub out for now.
./include/sys/kmem_cache.h:41:	KMC_BIT_NOMAGAZINE	= 2,	/* XXX: Unsupported */
./include/sys/kmem_cache.h:42:	KMC_BIT_NOHASH		= 3,	/* XXX: Unsupported */
./include/sys/kmem_cache.h:43:	KMC_BIT_QCACHE		= 4,	/* XXX: Unsupported */
./include/sys/vmsystm.h:74:	/* XXX: Should return ENAMETOOLONG if 'strlen(from) > len' */
./include/sys/user.h:33: * XXX: If the descriptor changes under us, we would get an incorrect

== unsafe input mechanisms ==

