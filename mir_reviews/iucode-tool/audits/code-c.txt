Running: /home/sarnold/bin/audit-code.sh -c C ./
Scanning './'
== subprocess_spawned() ==

== memory_management() ==
./iucode_tool.c:323:	n = malloc(sizeof(struct intel_uclist_entry));
./iucode_tool.c:466:	n = malloc(sizeof(struct intel_uclist_entry));
./iucode_tool.c:513:	b = malloc(sizeof(struct microcode_bundle) + mcb_size);
./iucode_tool.c:567:	mcb_buffer = malloc(mcb_buflen * sizeof(uint32_t));
./iucode_tool.c:568:	line_buffer = malloc(line_buffer_size);
./iucode_tool.c:706:	mcb_buffer = malloc(mcb_size);
./iucode_tool.c:1223:	buf = malloc(s);
./iucode_tool.c:1431:	n = malloc(sizeof(struct microcode_filter_entry));
./iucode_tool.c:1499:	n = malloc(sizeof(struct microcode_id_entry));
./iucode_tool.c:1891:		memcpy(&e, p, sizeof(e));
./iucode_tool.c:2304:	n = malloc(s);
./iucode_tool.c:2309:	memcpy(n->path, fn, l);

== files() ==
./iucode_tool.c:792:			fp = fdopen(fd, "r");
./iucode_tool.c:916:			fd = open(fn, O_RDONLY);
./iucode_tool.c:1042:	fd = open(devname, O_WRONLY);
./iucode_tool.c:1860:	dirfd = open(dirname, O_RDONLY);
./iucode_tool.c:1924:	dirfd = open(dirname, O_RDONLY);
./iucode_tool.c:2025:		cpuid_fd = open(cpuid_device, O_RDONLY);
./iucode_tool.c:2029:			print_msg(4, "%s: returned error status on open(): %s",

== logging() ==
./iucode_tool.c:190:#define print_msg(level, format, arg...) \
./iucode_tool.c:806:		print_err("%s: could not read: %s", fn, strerror(-err));
./iucode_tool.c:820:		print_msg(2, "microcode bundle %lu: %s (%zu bytes)",
./iucode_tool.c:906:						  path, strerror(err));
./iucode_tool.c:920:			print_err("%s: cannot open: %s", fn, strerror(err));
./iucode_tool.c:927:				  strerror(err));
./iucode_tool.c:937:						  path, strerror(err));
./iucode_tool.c:943:				print_msg(1, "%s: skipping nested directory: %s",
./iucode_tool.c:1046:			  devname, strerror(err));
./iucode_tool.c:1052:		print_err("%s: cannot stat: %s", devname, strerror(err));
./iucode_tool.c:1073:					  devname, strerror(err));
./iucode_tool.c:1089:			  devname, strerror(err));
./iucode_tool.c:1093:		print_msg(2, "%s: %u microcode entries uploaded, %zu bytes",
./iucode_tool.c:1300:					  strerror(err));
./iucode_tool.c:1304:			print_msg(3, "unlinked %s", filename);
./iucode_tool.c:1313:			  filename, strerror(err));
./iucode_tool.c:1354:			  filename, strerror(err));
./iucode_tool.c:1358:		print_msg(2, "%s: %u microcode entries written, %zu bytes",
./iucode_tool.c:1365:	print_err("%s: write error: %s", filename, strerror(err));
./iucode_tool.c:1680:			  ctx->current_uc_id_str, strerror(add_status));
./iucode_tool.c:1692:				  ctx->current_uc_id_str, strerror(add_status));
./iucode_tool.c:1768:	print_msg(2, "processed %lu valid microcode(s), %lu signature(s), %lu unique signature(s)",
./iucode_tool.c:1815:		print_msg(2, "selected %lu microcode(s), %lu signature(s)",
./iucode_tool.c:1829:	print_msg(1, "Writing selected microcodes to: %s", filename);
./iucode_tool.c:1832:		print_msg(1, "All microcodes in %s were skipped, file unchanged", filename);
./iucode_tool.c:1843:	print_msg(1, "Uploading selected microcodes to: %s", filename);
./iucode_tool.c:1864:			  strerror(rc));
./iucode_tool.c:1872:			  strerror(rc));
./iucode_tool.c:1881:	print_msg(1, "Writing microcode file(s) into %s", dirname);
./iucode_tool.c:1901:		print_msg(2, "%lu file(s) were written into %s", count, dirname);
./iucode_tool.c:1903:		print_msg(1, "no files were written into %s", dirname);
./iucode_tool.c:1928:			  strerror(rc));
./iucode_tool.c:1936:			  strerror(rc));
./iucode_tool.c:1945:	print_msg(1, "Writing microcode firmware file(s) into %s", dirname);
./iucode_tool.c:2001:		print_msg(2, "%lu file(s) were written into %s", count, dirname);
./iucode_tool.c:2003:		print_msg(1, "no files were written into %s", dirname);
./iucode_tool.c:2029:			print_msg(4, "%s: returned error status on open(): %s",
./iucode_tool.c:2030:				  cpuid_device, strerror(en));
./iucode_tool.c:2038:				print_msg(2, "processor %u is offline or has no cpuid support", i);
./iucode_tool.c:2040:				print_msg(2, "%s: cannot open cpuid device node: %s",
./iucode_tool.c:2041:					cpuid_device, strerror(en));
./iucode_tool.c:2050:		print_msg(3, "trying to get CPUID information from %s",
./iucode_tool.c:2081:				print_msg(1, "system has processor(s) with signature 0x%08x",
./iucode_tool.c:2087:				print_msg(2, "non-Intel processor found, skipping scan");
./iucode_tool.c:2109:			print_msg(1, "some processors were not scanned due to unexpected errors");
./iucode_tool.c:2124:	print_msg(2, "checked the signature of %u processor(s)", ncpu);
./iucode_tool.c:2461:			argp_error(state, "unknown file type: %s\n", arg);
./iucode_tool.c:2473:			argp_error(state, "unknown file type: %c\n", *arg);
./iucode_tool.c:2479:			argp_error(state,
./iucode_tool.c:2491:			argp_error(state,
./iucode_tool.c:2503:			argp_error(state,
./iucode_tool.c:2511:			argp_error(state,
./iucode_tool.c:2519:			argp_error(state,
./iucode_tool.c:2541:			argp_error(state, "invalid filter: %s", arg);
./iucode_tool.c:2557:			argp_error(state, "invalid date: %s", arg);
./iucode_tool.c:2619:		print_msg(1, "nothing to do...");
./iucode_tool.c:2673:				print_msg(1, "No valid microcodes were selected, nothing to do...");
./iucode_tool.c:2675:				print_msg(1, "No valid microcodes were loaded, nothing to do...");

== environment() ==

== privileged() ==

== networking() ==
./iucode_tool.c:718:		rc = read(fd, mcb_buffer + pos, mcb_space_left);
./iucode_tool.c:805:	if (err < 0) { /* error from read() or stdio */
./iucode_tool.c:986:/* Microcode write (binary format) and kernel upload */
./iucode_tool.c:997:		s = write(fd, p, len);
./iucode_tool.c:2052:		if (read(cpuid_fd, &cpuid_buf, sizeof(cpuid_buf)) == -1) {

== http:// ==
./intel_microcode.c:14: *  http://developer.intel.com/design/pentium4/manuals/253668.htm
./intel_microcode.h:14: *  http://developer.intel.com/design/pentium4/manuals/253668.htm

== encryption ==

== sql() ==

== tmp() ==
./iucode_tool.c:2161:	"-td /tmp/dat-file -tb /tmp/binary /tmp/binary2.\n\n"

== priv_cmds (sudo, gksu, pkexec) ==

== envvars() ==

== webkit() ==

== comments (XXX, FIXME, TODO) ==
./iucode_tool.c:2615:	argp_program_bug_address = NULL; /* FIXME */

== unsafe input mechanisms ==

